var N=null,E="",T="t",U="u",searchIndex={};
var R=["assemblyoffset","dynasmerror","result","dynasmrt","This struct is a wrapper around an `Assembler` normally…","assembler","dynamiclabel","uncommittedmodifier","executablebuffer","Sets the current modification offset to the given value","Checks that the current modification offset is not larger…","check_exact","Checks that the current modification offset is exactly the…","Assembler","This struct is an implementation of a dynasm runtime. It…","AssemblyModifier","Create a new `Assembler` instance This function will…","new_dynamic_label","Create a new dynamic label that can be referenced and…","get_dynamic_label_offset","Query the offset of a dynamic label.","To allow already committed code to be altered, this method…","alter_uncommitted","Similar to `Assembler::alter`, this method allows…","Commit the assembled code from a temporary buffer to the…","finalize","Consumes the assembler to return the internal…","Creates a read-only reference to the internal…","executor","Helper function for validating that a given value can be…","option","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","borrow","typeid","dynasmrt::common","dynasmrt::x64","dynasmrt::x86","dynasmrt::aarch64","offset","global_label","global_reloc","dynamic_label","dynamic_reloc","local_label","forward_reloc","backward_reloc","bare_reloc","ordering","extend","formatter","AssemblyOffset","DynasmError","UncommittedModifier","DynasmApi","DynasmLabelApi","ExecutableBuffer","Executor","DynamicLabel","API for dynasm! to resolve a dynamic label reference","patchloc","Relocation","labelregistry","dynasmrt::relocations","from_encoding","from_size","relocationsize","write_value","read_value","relocationkind","start_offset","field_offset","registry","registry_mut","PatchLoc","LabelRegistry","RelocRegistry","ManagedRelocs","RelocationKind","RelocationSize","Aarch64Relocation","Modifier","VecAssembler","X64Relocation","X86Relocation","dynasmrt::components","mutablebuffer","dynasmrt::mmap","MutableBuffer","Return an iterator through all defined relocations…","Encode `value` into the literal pool.","Encode the relative address of a label into the literal…","push_u16","push_u32","push_u64","encode_from_size","MemoryManager","page_size","impossiblerelocation","ImpossibleRelocation","to_string","global_relocation","dynamic_relocation","forward_relocation","backward_relocation","bare_relocation","relocregistry","managedrelocs","default","labelkind","targetkind","LabelKind","TargetKind"];
searchIndex["dynasmrt"]={"doc":E,"i":[[3,R[55],R[3],"A struct representing an offset into the assembling buffer…",N,N],[12,"0",E,E,0,N],[3,R[62],E,"A dynamic label",N,N],[3,R[61],E,"A read-only shared reference to the executable buffer…",N,N],[3,R[86],E,"An assembler that is purely a `Vec<u8>`. It doesn't…",N,N],[3,R[13],E,"A full assembler implementation. Supports labels, all…",N,N],[3,R[85],E,"Allows modification of already committed assembly code.…",N,N],[3,R[57],E,R[4],N,N],[4,R[115],E,"A description of a label. Used for error reporting.",N,N],[13,"Local",E,E,1,N],[13,"Global",E,E,1,N],[13,"Dynamic",E,E,1,N],[4,R[116],E,"A description of a relocation target. Used for error…",N,N],[13,"Forward",E,E,2,N],[13,"Backward",E,E,2,N],[13,"Global",E,E,2,N],[13,"Dynamic",E,E,2,N],[13,"Extern",E,E,2,N],[13,"Managed",E,E,2,N],[4,R[56],E,"The various error types generated by dynasm functions.",N,N],[13,"CheckFailed",E,"A check (like `Modifier::check` or…",3,N],[13,"DuplicateLabel",E,"A duplicate label dynamic/global label was defined",3,N],[13,"UnknownLabel",E,"An unknown label",3,N],[13,R[103],E,"The user tried to declare a relocation too far away from…",3,N],[0,"mmap",E,E,N,N],[3,R[60],R[91],"This module implements some wrappers around Mmap/MmapMut…",N,N],[3,R[92],E,"ExecutableBuffer equivalent that holds a buffer of mutable…",N,N],[11,"ptr",E,"Obtain a pointer into the executable memory from an offset…",4,[[["self"],[R[0]]]]],[11,"new",E,"Create a new executable buffer, backed by a buffer of size…",4,[[["usize"]],[[R[8]],[R[2],[R[8]]]]]],[11,"size",E,"Query the backing size of this executable buffer",4,[[["self"]],["usize"]]],[11,"make_mut",E,"Change this executable buffer into a mutable buffer.",4,[[],[[R[2],[R[90]]],[R[90]]]]],[11,"new",E,"Create a new mutable buffer, backed by a buffer of size…",5,[[["usize"]],[[R[2],[R[90]]],[R[90]]]]],[11,"size",E,"Query the backing size of this mutable buffer",5,[[["self"]],["usize"]]],[11,"set_len",E,"Set the length of the usable part of this mutable buffer.…",5,[[["self"],["usize"]]]],[11,"make_exec",E,"Change this mutable buffer into an executable buffer.",5,[[],[[R[8]],[R[2],[R[8]]]]]],[0,"components",R[3],E,N,N],[3,R[100],R[89],"This struct implements a protection-swapping assembling…",N,N],[3,R[79],E,"A registry of labels. Contains all necessessities for…",N,N],[3,R[78],E,"An abstraction of a relocation of type `R` that was…",N,N],[12,"location",E,E,6,N],[12,"relocation",E,E,6,N],[12,R[43],E,E,6,N],[3,R[80],E,"A registry of relocations and the respective labels they…",N,N],[3,R[81],E,"A registry of relocations that have been encoded…",N,N],[3,"LitPool",E,"Literal pool implementation. One can programmatically push…",N,N],[11,"new",E,"Create a new memory manager, with `initial_mmap_size` data…",7,[[["usize"]],[R[2]]]],[11,"committed",E,"Returns the amount of bytes already committed to the manager",7,[[["self"]],["usize"]]],[11,"execbuffer_addr",E,"Returns the current start address of the managed…",7,[[["self"]],["usize"]]],[11,"commit",E,"Commits the data from `new` into the managed memory,…",7,[[["self"],["vec"],["f"]]]],[11,"write",E,"Borrow the internal memory buffer mutably",7,[[["self"]],[[R[8]],["rwlockwriteguard",[R[8]]]]]],[11,R[25],E,"finalizes the currently committed part of the buffer.",7,[[],[[R[2],[R[8]]],[R[8]]]]],[11,"reader",E,"Create an atomically refcounted reference to the internal…",7,[[["self"]],[["arc",["rwlock"]],["rwlock",[R[8]]]]]],[11,"new",E,"Create a new, empty label registry",8,[[],[R[66]]]],[11,R[17],E,"Create a new dynamic label id",8,[[["self"]],[R[6]]]],[11,"define_dynamic",E,"Define a the dynamic label `id` to be located at `offset`.",8,[[["self"],[R[6]],[R[0]]],[[R[2],[R[1]]],[R[1]]]]],[11,"define_global",E,"Define a the global label `name` to be located at `offset`.",8,[[["self"],[R[0]],["str"]],[[R[2],[R[1]]],[R[1]]]]],[11,"define_local",E,"Define a the local label `name` to be located at `offset`.",8,[[["self"],[R[0]],["str"]]]],[11,"resolve_dynamic",E,"Returns the offset at which the dynamic label `id` was…",8,[[["self"],[R[6]]],[[R[0]],[R[2],[R[0],R[1]]],[R[1]]]]],[11,"resolve_global",E,"Returns the offset at which the global label `name` was…",8,[[["self"],["str"]],[[R[0]],[R[2],[R[0],R[1]]],[R[1]]]]],[11,"resolve_local",E,"Returns the offset at which the last local label named…",8,[[["self"],["str"]],[[R[0]],[R[2],[R[0],R[1]]],[R[1]]]]],[11,"new",E,"create a new `PatchLoc`",6,[[[R[0]],["isize"],["r"]],[R[64]]]],[11,"patch",E,"Patch `buffer` so that this relocation patch will point to…",6,[[["self"],["usize"]],[[R[102]],[R[2],[R[102]]]]]],[11,"adjust",E,"Patch `buffer` so that this relocation will still point to…",6,[[["self"],["usize"],["isize"]],[[R[102]],[R[2],[R[102]]]]]],[11,"needs_adjustment",E,"Returns if this patch requires adjustment when the address…",6,[[["self"]],["bool"]]],[11,"new",E,"Create a new, empty relocation registry.",9,[[],[R[110]]]],[11,"add_global",E,"Add a new patch targetting the global label `name`.",9,[[["self"],[R[64]],["str"]]]],[11,"add_dynamic",E,"Add a new patch targetting the dynamic label `id`.",9,[[["self"],[R[6]],[R[64]]]]],[11,"add_local",E,"Add a new patch targetting the next local label `name`. As…",9,[[["self"],[R[64]],["str"]]]],[11,"take_locals_named",E,R[93],9,[[["self"],["str"]]]],[11,"take_globals",E,R[93],9,[[["self"]]]],[11,"take_dynamics",E,R[93],9,[[["self"]]]],[11,"take_locals",E,R[93],9,[[["self"]]]],[11,"new",E,"Create a new, empty managed relocation registry.",10,[[],["self"]]],[11,"add",E,"Add a relocation to this registry.",10,[[["self"],[R[64]]]]],[11,"append",E,"Take all items from another registry and add them to this…",10,[[["self"],[R[111]]]]],[11,"remove_between",E,"Remove all managed relocations whose byte fields start in…",10,[[["self"],["usize"]]]],[11,"iter",E,"Iterate through all defined managed relocations.",10,[[["self"]]]],[11,"new",E,"Create a new, empty literal pool",11,[[],["self"]]],[11,"align",E,"Add extra alignment for the next value in the literal pool",11,[[["self"],["usize"],["u8"]]]],[11,"push_u8",E,R[94],11,[[["self"],["u8"]],["isize"]]],[11,R[96],E,R[94],11,[[["self"],["u16"]],["isize"]]],[11,R[97],E,R[94],11,[[["self"],["u32"]],["isize"]]],[11,R[98],E,R[94],11,[[["self"],["u64"]],["isize"]]],[11,"push_dynamic",E,R[95],11,[[["self"],[R[6]],[R[70]]],["isize"]]],[11,"push_global",E,R[95],11,[[["self"],[R[70]],["str"]],["isize"]]],[11,"push_forward",E,R[95],11,[[["self"],[R[70]],["str"]],["isize"]]],[11,"push_backward",E,R[95],11,[[["self"],[R[70]],["str"]],["isize"]]],[11,"emit",E,"Emit this literal pool into the specified assembler",11,[[["d"]]]],[0,"relocations",R[3],E,N,N],[3,R[103],R[67],"Error returned when encoding a relocation failed",N,N],[4,R[82],E,"Specifies what kind of relocation a relocation is.",N,N],[13,"Relative",E,"A simple, PC-relative relocation. These can be encoded…",12,N],[13,"AbsToRel",E,"An absolute relocation to a relative address, i.e. trying…",12,N],[13,"RelToAbs",E,"A relative relocation to an absolute address, i.e. trying…",12,N],[4,R[83],E,"A descriptor for the size of a relocation. This also…",N,N],[13,"Byte",E,"A byte-sized relocation",13,N],[13,"Word",E,"A two-byte relocation",13,N],[13,"DWord",E,"A four-byte sized relocation",13,N],[13,"QWord",E,"An 8-byte sized relocation",13,N],[8,R[65],E,"Used to inform assemblers on how to implement relocations…",N,N],[16,"Encoding",E,"The encoded representation for this relocation that is…",14,N],[10,R[68],E,"construct this relocation from an encoded representation.",14,[[],["self"]]],[10,R[69],E,"construct this relocation from a simple size. This is used…",14,[[[R[70]]],["self"]]],[11,R[74],E,"Returns the offset that this relocation is relative to,…",14,[[["self"]],["usize"]]],[11,R[75],E,"Returns the offset of the start of the bytes containing…",14,[[["self"]],["usize"]]],[10,"size",E,"The size of the slice of bytes affected by this relocation",14,[[["self"]],["usize"]]],[10,R[71],E,"Write a value into a buffer of size `self.size()` in the…",14,[[["self"],["isize"]],[[R[102]],[R[2],[R[102]]]]]],[10,R[72],E,"Read a value from a buffer of size `self.size()` in the…",14,[[["self"]],["isize"]]],[10,"kind",E,"Specifies what kind of relocation this relocation instance…",14,[[["self"]],[R[73]]]],[10,R[101],E,"Specifies the default page size on this platform.",14,[[],["usize"]]],[11,R[68],E,"Converts back from numeric value to RelocationKind",12,[[["u8"]],["self"]]],[0,"x64",R[3],E,N,N],[3,R[87],R[40],"Relocation implementation for the x64 architecture.",N,N],[6,R[13],E,E,N,N],[6,R[15],E,E,N,N],[6,R[57],E,E,N,N],[0,"x86",R[3],E,N,N],[3,R[88],R[41],"Relocation implementation for the x86 architecture.",N,N],[6,R[13],E,E,N,N],[6,R[15],E,E,N,N],[6,R[57],E,E,N,N],[0,"aarch64",R[3],E,N,N],[4,R[84],R[42],"Relocation implementation for the aarch64 architecture.",N,N],[13,"B",E,E,15,N],[13,"BCOND",E,E,15,N],[13,"ADR",E,E,15,N],[13,"ADRP",E,E,15,N],[13,"TBZ",E,E,15,N],[13,"Plain",E,E,15,N],[5,"encode_logical_immediate_32bit",E,R[29],N,[[["u32"]],[["u16"],[R[30],["u16"]]]]],[5,"encode_logical_immediate_64bit",E,R[29],N,[[["u64"]],[["u16"],[R[30],["u16"]]]]],[5,"encode_floating_point_immediate",E,R[29],N,[[["f32"]],[[R[30],["u8"]],["u8"]]]],[6,R[13],E,E,N,N],[6,R[15],E,E,N,N],[6,R[57],E,E,N,N],[8,R[58],R[3],"This trait represents the interface that must be…",N,N],[10,R[43],E,"Report the current offset into the assembling target",16,[[["self"]],[R[0]]]],[10,"push",E,"Push a byte into the assembling target",16,[[["self"],["u8"]]]],[10,"align",E,"Push filler until the assembling target end is aligned to…",16,[[["self"],["usize"],["u8"]]]],[11,"push_i8",E,"Push a signed byte into the assembling target",16,[[["self"],["i8"]]]],[11,"push_i16",E,"Push a signed word into the assembling target",16,[[["self"],["i16"]]]],[11,"push_i32",E,"Push a signed doubleword into the assembling target",16,[[["self"],["i32"]]]],[11,"push_i64",E,"Push a signed quadword into the assembling target",16,[[["self"],["i64"]]]],[11,R[96],E,"Push an usigned word into the assembling target",16,[[["self"],["u16"]]]],[11,R[97],E,"Push an usigned doubleword into the assembling target",16,[[["self"],["u32"]]]],[11,R[98],E,"Push an usigned quadword into the assembling target",16,[[["self"],["u64"]]]],[11,"runtime_error",E,"This function is called in when a runtime error has to be…",16,[[["self"],["str"]]]],[8,R[59],E,"This trait extends DynasmApi to not only allow assembling,…",N,N],[16,R[65],E,"The relocation info type this assembler uses. ",17,N],[10,R[48],E,"Record the definition of a local label",17,[[["self"],["str"]]]],[10,R[44],E,"Record the definition of a global label",17,[[["self"],["str"]]]],[10,R[46],E,"Record the definition of a dynamic label",17,[[["self"],[R[6]]]]],[11,R[49],E,"Record a relocation spot for a forward reference to a…",17,[[["self"],["isize"],["str"]]]],[11,R[50],E,"Record a relocation spot for a backward reference to a…",17,[[["self"],["isize"],["str"]]]],[11,R[45],E,"Record a relocation spot for a reference to a global label",17,[[["self"],["isize"],["str"]]]],[11,R[47],E,"Record a relocation spot for a reference to a dynamic label",17,[[["self"],[R[6]],["isize"]]]],[11,R[51],E,"Record a relocation spot to an arbitrary target.",17,[[["self"],["usize"]]]],[10,R[107],E,"Equivalents of the previous functions but taking…",17,[[["self"],["isize"],["str"]]]],[10,R[108],E,E,17,[[["self"],["isize"],["str"]]]],[10,R[105],E,E,17,[[["self"],["isize"],["str"]]]],[10,R[106],E,E,17,[[["self"],[R[6]],["isize"]]]],[10,R[109],E,E,17,[[["self"],["usize"]]]],[11,"get_id",E,"Get the internal ID of this dynamic label. This is only…",18,[[],["usize"]]],[11,"lock",E,"Gain read-access to the internal `ExecutableBuffer`. While…",19,[[["self"]],[[R[8]],["rwlockreadguard",[R[8]]]]]],[11,"new",E,"Create a new, empty assembler, with initial allocation…",20,[[],[R[2]]]],[11,R[17],E,"Create a new dynamic label ID",20,[[["self"]],[R[6]]]],[11,R[22],E,"Use an `UncommittedModifier` to alter uncommitted code.…",20,[[["self"]],[R[7]]]],[11,"alter",E,"Use a `Modifier` to alter committed code directly. While…",20,[[["self"],["f"]],[[R[2],[R[1]]],[R[1]]]]],[11,"commit",E,"Commit code, flushing the temporary internal assembling…",20,[[["self"]],[[R[2],[R[1]]],[R[1]]]]],[11,R[25],E,"Finalize this assembler, returning the internal…",20,[[],[[R[2],[R[8]]],[R[8]]]]],[11,"reader",E,"Create an executor which can be used to execute code while…",20,[[["self"]],[R[28]]]],[11,"labels",E,"Provides access to the assemblers internal labels registry",20,[[["self"]],[R[66]]]],[11,"labels_mut",E,"Provides mutable access to the assemblers internal labels…",20,[[["self"]],[R[66]]]],[11,"goto",E,"Move the modifier cursor to the selected location.",21,[[["self"],[R[0]]]]],[11,"check",E,"Check that the modifier cursor has not moved past the…",21,[[["self"],[R[0]]],[[R[2],[R[1]]],[R[1]]]]],[11,R[11],E,"Check that the modifier cursor is exactly at the specified…",21,[[["self"],[R[0]]],[[R[2],[R[1]]],[R[1]]]]],[11,"new",E,"create a new uncommittedmodifier",22,[[[R[0]],["vec"]],[R[7]]]],[11,"goto",E,R[9],22,[[["self"],[R[0]]]]],[11,"check",E,R[10],22,[[["self"],[R[0]]],[[R[2],[R[1]]],[R[1]]]]],[11,R[11],E,R[12],22,[[["self"],[R[0]]],[[R[2],[R[1]]],[R[1]]]]],[14,"Pointer",E,"This macro takes a *const pointer from the source operand,…",N,N],[14,"MutPointer",E,"Preforms the same action as the `Pointer!` macro, but…",N,N],[11,R[31],E,E,0,[[["self"]],[T]]],[11,R[32],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[33],E,E,0,[[[U]],[R[2]]]],[11,R[34],E,E,0,[[],[R[2]]]],[11,R[37],E,E,0,[[["self"]],[T]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"]],[R[38]]]],[11,R[31],E,E,18,[[["self"]],[T]]],[11,R[32],E,E,18,[[["self"],[T]]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[33],E,E,18,[[[U]],[R[2]]]],[11,R[34],E,E,18,[[],[R[2]]]],[11,R[37],E,E,18,[[["self"]],[T]]],[11,R[35],E,E,18,[[["self"]],[T]]],[11,R[36],E,E,18,[[["self"]],[R[38]]]],[11,R[31],E,E,19,[[["self"]],[T]]],[11,R[32],E,E,19,[[["self"],[T]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[33],E,E,19,[[[U]],[R[2]]]],[11,R[34],E,E,19,[[],[R[2]]]],[11,R[37],E,E,19,[[["self"]],[T]]],[11,R[35],E,E,19,[[["self"]],[T]]],[11,R[36],E,E,19,[[["self"]],[R[38]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[33],E,E,23,[[[U]],[R[2]]]],[11,R[34],E,E,23,[[],[R[2]]]],[11,R[37],E,E,23,[[["self"]],[T]]],[11,R[35],E,E,23,[[["self"]],[T]]],[11,R[36],E,E,23,[[["self"]],[R[38]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[33],E,E,20,[[[U]],[R[2]]]],[11,R[34],E,E,20,[[],[R[2]]]],[11,R[37],E,E,20,[[["self"]],[T]]],[11,R[35],E,E,20,[[["self"]],[T]]],[11,R[36],E,E,20,[[["self"]],[R[38]]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[33],E,E,21,[[[U]],[R[2]]]],[11,R[34],E,E,21,[[],[R[2]]]],[11,R[37],E,E,21,[[["self"]],[T]]],[11,R[35],E,E,21,[[["self"]],[T]]],[11,R[36],E,E,21,[[["self"]],[R[38]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[33],E,E,22,[[[U]],[R[2]]]],[11,R[34],E,E,22,[[],[R[2]]]],[11,R[37],E,E,22,[[["self"]],[T]]],[11,R[35],E,E,22,[[["self"]],[T]]],[11,R[36],E,E,22,[[["self"]],[R[38]]]],[11,R[104],E,E,1,[[["self"]],["string"]]],[11,R[31],E,E,1,[[["self"]],[T]]],[11,R[32],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[33],E,E,1,[[[U]],[R[2]]]],[11,R[34],E,E,1,[[],[R[2]]]],[11,R[37],E,E,1,[[["self"]],[T]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"]],[R[38]]]],[11,R[104],E,E,2,[[["self"]],["string"]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[[U]],[R[2]]]],[11,R[34],E,E,2,[[],[R[2]]]],[11,R[37],E,E,2,[[["self"]],[T]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"]],[R[38]]]],[11,R[104],E,E,3,[[["self"]],["string"]]],[11,R[31],E,E,3,[[["self"]],[T]]],[11,R[32],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[33],E,E,3,[[[U]],[R[2]]]],[11,R[34],E,E,3,[[],[R[2]]]],[11,R[37],E,E,3,[[["self"]],[T]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[36],E,E,3,[[["self"]],[R[38]]]],[11,"into",R[91],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[33],E,E,4,[[[U]],[R[2]]]],[11,R[34],E,E,4,[[],[R[2]]]],[11,R[37],E,E,4,[[["self"]],[T]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[36],E,E,4,[[["self"]],[R[38]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[33],E,E,5,[[[U]],[R[2]]]],[11,R[34],E,E,5,[[],[R[2]]]],[11,R[37],E,E,5,[[["self"]],[T]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[36],E,E,5,[[["self"]],[R[38]]]],[11,"into",R[89],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[33],E,E,7,[[[U]],[R[2]]]],[11,R[34],E,E,7,[[],[R[2]]]],[11,R[37],E,E,7,[[["self"]],[T]]],[11,R[35],E,E,7,[[["self"]],[T]]],[11,R[36],E,E,7,[[["self"]],[R[38]]]],[11,R[31],E,E,8,[[["self"]],[T]]],[11,R[32],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[33],E,E,8,[[[U]],[R[2]]]],[11,R[34],E,E,8,[[],[R[2]]]],[11,R[37],E,E,8,[[["self"]],[T]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[36],E,E,8,[[["self"]],[R[38]]]],[11,R[31],E,E,6,[[["self"]],[T]]],[11,R[32],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[33],E,E,6,[[[U]],[R[2]]]],[11,R[34],E,E,6,[[],[R[2]]]],[11,R[37],E,E,6,[[["self"]],[T]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[36],E,E,6,[[["self"]],[R[38]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[33],E,E,9,[[[U]],[R[2]]]],[11,R[34],E,E,9,[[],[R[2]]]],[11,R[37],E,E,9,[[["self"]],[T]]],[11,R[35],E,E,9,[[["self"]],[T]]],[11,R[36],E,E,9,[[["self"]],[R[38]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[33],E,E,10,[[[U]],[R[2]]]],[11,R[34],E,E,10,[[],[R[2]]]],[11,R[37],E,E,10,[[["self"]],[T]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[36],E,E,10,[[["self"]],[R[38]]]],[11,R[31],E,E,11,[[["self"]],[T]]],[11,R[32],E,E,11,[[["self"],[T]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[33],E,E,11,[[[U]],[R[2]]]],[11,R[34],E,E,11,[[],[R[2]]]],[11,R[37],E,E,11,[[["self"]],[T]]],[11,R[35],E,E,11,[[["self"]],[T]]],[11,R[36],E,E,11,[[["self"]],[R[38]]]],[11,"into",R[67],E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[33],E,E,24,[[[U]],[R[2]]]],[11,R[34],E,E,24,[[],[R[2]]]],[11,R[37],E,E,24,[[["self"]],[T]]],[11,R[35],E,E,24,[[["self"]],[T]]],[11,R[36],E,E,24,[[["self"]],[R[38]]]],[11,R[31],E,E,12,[[["self"]],[T]]],[11,R[32],E,E,12,[[["self"],[T]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[33],E,E,12,[[[U]],[R[2]]]],[11,R[34],E,E,12,[[],[R[2]]]],[11,R[37],E,E,12,[[["self"]],[T]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"]],[R[38]]]],[11,R[31],E,E,13,[[["self"]],[T]]],[11,R[32],E,E,13,[[["self"],[T]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[33],E,E,13,[[[U]],[R[2]]]],[11,R[34],E,E,13,[[],[R[2]]]],[11,R[37],E,E,13,[[["self"]],[T]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[36],E,E,13,[[["self"]],[R[38]]]],[11,R[31],R[40],E,25,[[["self"]],[T]]],[11,R[32],E,E,25,[[["self"],[T]]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[33],E,E,25,[[[U]],[R[2]]]],[11,R[34],E,E,25,[[],[R[2]]]],[11,R[37],E,E,25,[[["self"]],[T]]],[11,R[35],E,E,25,[[["self"]],[T]]],[11,R[36],E,E,25,[[["self"]],[R[38]]]],[11,R[31],R[41],E,26,[[["self"]],[T]]],[11,R[32],E,E,26,[[["self"],[T]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[33],E,E,26,[[[U]],[R[2]]]],[11,R[34],E,E,26,[[],[R[2]]]],[11,R[37],E,E,26,[[["self"]],[T]]],[11,R[35],E,E,26,[[["self"]],[T]]],[11,R[36],E,E,26,[[["self"]],[R[38]]]],[11,R[31],R[42],E,15,[[["self"]],[T]]],[11,R[32],E,E,15,[[["self"],[T]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[33],E,E,15,[[[U]],[R[2]]]],[11,R[34],E,E,15,[[],[R[2]]]],[11,R[37],E,E,15,[[["self"]],[T]]],[11,R[35],E,E,15,[[["self"]],[T]]],[11,R[36],E,E,15,[[["self"]],[R[38]]]],[11,R[68],R[67],E,13,[[],["self"]]],[11,R[69],E,E,13,[[[R[70]]],["self"]]],[11,"size",E,E,13,[[["self"]],["usize"]]],[11,R[71],E,E,13,[[["self"],["isize"]],[[R[102]],[R[2],[R[102]]]]]],[11,R[72],E,E,13,[[["self"]],["isize"]]],[11,"kind",E,E,13,[[["self"]],[R[73]]]],[11,R[101],E,E,13,[[],["usize"]]],[11,R[68],R[40],E,25,[[],["self"]]],[11,R[69],E,E,25,[[[R[70]]],["self"]]],[11,R[74],E,E,25,[[["self"]],["usize"]]],[11,R[75],E,E,25,[[["self"]],["usize"]]],[11,"size",E,E,25,[[["self"]],["usize"]]],[11,R[71],E,E,25,[[["self"],["isize"]],[[R[102]],[R[2],[R[102]]]]]],[11,R[72],E,E,25,[[["self"]],["isize"]]],[11,"kind",E,E,25,[[["self"]],[R[73]]]],[11,R[101],E,E,25,[[],["usize"]]],[11,R[68],R[41],E,26,[[],["self"]]],[11,R[69],E,E,26,[[[R[70]]],["self"]]],[11,R[74],E,E,26,[[["self"]],["usize"]]],[11,R[75],E,E,26,[[["self"]],["usize"]]],[11,"size",E,E,26,[[["self"]],["usize"]]],[11,R[71],E,E,26,[[["self"],["isize"]],[[R[102]],[R[2],[R[102]]]]]],[11,R[72],E,E,26,[[["self"]],["isize"]]],[11,"kind",E,E,26,[[["self"]],[R[73]]]],[11,R[101],E,E,26,[[],["usize"]]],[11,R[68],R[42],E,15,[[],["self"]]],[11,R[69],E,E,15,[[[R[70]]],["self"]]],[11,"size",E,E,15,[[["self"]],["usize"]]],[11,R[71],E,E,15,[[["self"],["isize"]],[[R[102]],[R[2],[R[102]]]]]],[11,R[72],E,E,15,[[["self"]],["isize"]]],[11,"kind",E,E,15,[[["self"]],[R[73]]]],[11,R[101],E,E,15,[[],["usize"]]],[11,R[43],R[3],E,23,[[["self"]],[R[0]]]],[11,"push",E,E,23,[[["self"],["u8"]]]],[11,"align",E,E,23,[[["self"],["usize"],["u8"]]]],[11,R[43],E,E,20,[[["self"]],[R[0]]]],[11,"push",E,E,20,[[["self"],["u8"]]]],[11,"align",E,E,20,[[["self"],["usize"],["u8"]]]],[11,R[43],E,E,21,[[["self"]],[R[0]]]],[11,"push",E,E,21,[[["self"],["u8"]]]],[11,"align",E,E,21,[[["self"],["usize"],["u8"]]]],[11,R[43],E,E,22,[[["self"]],[R[0]]]],[11,"push",E,E,22,[[["self"],["u8"]]]],[11,"align",E,E,22,[[["self"],["usize"],["u8"]]]],[11,R[48],E,E,20,[[["self"],["str"]]]],[11,R[44],E,E,20,[[["self"],["str"]]]],[11,R[46],E,E,20,[[["self"],[R[6]]]]],[11,R[105],E,E,20,[[["self"],["r"],["isize"],["str"]]]],[11,R[106],E,E,20,[[["self"],[R[6]],["isize"],["r"]]]],[11,R[107],E,E,20,[[["self"],["r"],["isize"],["str"]]]],[11,R[108],E,E,20,[[["self"],["r"],["isize"],["str"]]]],[11,R[109],E,E,20,[[["self"],["usize"],["r"]]]],[11,R[48],E,E,21,[[["self"],["str"]]]],[11,R[44],E,E,21,[[["self"],["str"]]]],[11,R[46],E,E,21,[[["self"],[R[6]]]]],[11,R[105],E,E,21,[[["self"],["r"],["isize"],["str"]]]],[11,R[106],E,E,21,[[["self"],[R[6]],["isize"],["r"]]]],[11,R[107],E,E,21,[[["self"],["r"],["isize"],["str"]]]],[11,R[108],E,E,21,[[["self"],["r"],["isize"],["str"]]]],[11,R[109],E,E,21,[[["self"],["usize"],["r"]]]],[11,R[53],E,E,23,[[["self"],[T]]]],[11,R[53],E,E,23,[[["self"],[T]]]],[11,R[53],E,E,20,[[["self"],[T]]]],[11,R[53],E,E,20,[[["self"],[T]]]],[11,R[53],E,E,21,[[["self"],[T]]]],[11,R[53],E,E,21,[[["self"],[T]]]],[11,R[53],E,E,22,[[["self"],[T]]]],[11,R[53],E,E,22,[[["self"],[T]]]],[11,R[112],R[91],E,4,[[],[R[8]]]],[11,R[112],E,E,5,[[],[R[90]]]],[11,R[112],R[89],E,8,[[],[R[66]]]],[11,R[112],E,E,9,[[],[R[110]]]],[11,R[112],E,E,10,[[],[R[111]]]],[11,R[112],E,E,11,[[],["litpool"]]],[11,"clone",E,E,8,[[["self"]],[R[66]]]],[11,"clone",E,E,6,[[["self"]],[R[64]]]],[11,"clone",E,E,11,[[["self"]],["litpool"]]],[11,"clone",R[67],E,12,[[["self"]],[R[73]]]],[11,"clone",E,E,13,[[["self"]],[R[70]]]],[11,"clone",R[40],E,25,[[["self"]],["x64relocation"]]],[11,"clone",R[41],E,26,[[["self"]],["x86relocation"]]],[11,"clone",R[42],E,15,[[["self"]],["aarch64relocation"]]],[11,"clone",R[3],E,0,[[["self"]],[R[0]]]],[11,"clone",E,E,18,[[["self"]],[R[6]]]],[11,"clone",E,E,19,[[["self"]],[R[28]]]],[11,"clone",E,E,1,[[["self"]],[R[113]]]],[11,"clone",E,E,2,[[["self"]],[R[114]]]],[11,"clone",E,E,3,[[["self"]],[R[1]]]],[11,"partial_cmp",E,E,0,[[["self"],[R[0]]],[[R[52]],[R[30],[R[52]]]]]],[11,"lt",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"cmp",E,E,0,[[["self"],[R[0]]],[R[52]]]],[11,"eq",R[67],E,12,[[["self"],[R[73]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[70]]],["bool"]]],[11,"eq",R[3],E,0,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,18,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,18,[[["self"],[R[6]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[113]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[113]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[114]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[114]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[1]]],["bool"]]],[11,"deref",R[91],E,4,[[["self"]]]],[11,"deref",E,E,5,[[["self"]]]],[11,"hash",R[67],E,12,[[["self"],["__h"]]]],[11,"hash",E,E,13,[[["self"],["__h"]]]],[11,"hash",R[3],E,0,[[["self"],["__h"]]]],[11,"hash",E,E,18,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,2,[[["self"],["__h"]]]],[11,"deref_mut",R[91],E,5,[[["self"]]]],[11,"fmt",E,E,4,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",R[89],E,7,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,8,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,9,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,10,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,11,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",R[67],E,24,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,12,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,13,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",R[40],E,25,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",R[41],E,26,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",R[42],E,15,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",R[3],E,0,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,18,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,19,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,20,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,21,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,22,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[54]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[54]]],[R[2]]]],[11,"description",E,E,3,[[["self"]],["str"]]]],"p":[[3,R[55]],[4,R[115]],[4,R[116]],[4,R[56]],[3,R[60]],[3,R[92]],[3,R[78]],[3,R[100]],[3,R[79]],[3,R[80]],[3,R[81]],[3,"LitPool"],[4,R[82]],[4,R[83]],[8,R[65]],[4,R[84]],[8,R[58]],[8,R[59]],[3,R[62]],[3,R[61]],[3,R[13]],[3,R[85]],[3,R[57]],[3,R[86]],[3,R[103]],[3,R[87]],[3,R[88]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);// I'm sorry
var path = document.getElementsByClassName("logo-container")[0].childNodes[0].getAttribute("src");
var nest_count = (path.match(/\.\./g)||[]).length + 1; 

var base_path = "";
for (i = 0; i < nest_count; i++) {
    base_path += "../";
}

var sidebar = document.getElementsByClassName("sidebar")[0];

var node = document.createElement("div");
node.innerHTML = '\
  <p class="location">\
      <a href="' + base_path + 'language/index.html">dynasm-rs</a>\
  </p>\
  <div class = "block modules">\
    <h3>Components</h3>\
    <ul>\
      <li>\
        <a href="' + base_path + 'language/index.html">Syntax</a>\
      </li>\
      <li>\
        <a href="' + base_path + 'plugin/dynasm/index.html">Plugin (dynasm)</a>\
      </li>\
      <li>\
        <a href="' + base_path + 'runtime/dynasmrt/index.html">Runtime (dynasmrt)</a>\
      </li>\
    </ul>\
  </div>';

sidebar.insertBefore(node, sidebar.childNodes[2]);
