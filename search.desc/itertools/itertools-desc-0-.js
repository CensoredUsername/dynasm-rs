searchState.loadedDescShard("itertools", 0, "Itertools — extra iterator adaptors, functions and …\nNeither input iterator is exhausted yet, yielding two …\nContinue folding with this value\nA type returned by the <code>diff_with</code> function.\nFold is complete and will return this value\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value yielded by <code>ZipLongest</code>. Contains one or two values, …\nThis is the first element.\nThe index of the first non-matching element along with …\nAn enum used for controlling the execution of <code>.fold_while()</code>…\nThe trait <code>Itertools</code>: extra iterator adaptors and methods …\nThis is the last element.\nA value of type <code>L</code>.\nThe parameter iterator of <code>.zip_longest()</code> is exhausted, …\nThe total number of elements that were in <code>I</code> along with the …\nThis is neither the first nor the last element.\nMore than one element in the iterator, the first element …\n<code>MinMaxResult</code> is an enum returned by <code>minmax</code>. See …\nEmpty iterator\nIterator with one element, so the minimum and maximum are …\nThis is the only element.\nAn iterator that allows peeking at an element before …\nA value yielded by <code>WithPosition</code>. Indicates the position of …\nA value of type <code>R</code>.\nThe <code>self</code> iterator of <code>.zip_longest()</code> is exhausted, only …\nThe total number of elements that were in <code>J</code> along with the …\nTest whether the predicate holds for all elements in the …\nTest whether the predicate holds for any elements in the …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nAssert that two iterators produce equal sequences, with …\nA “meta iterator adaptor”. Its closure recives a …\nReturn an iterator adaptor that iterates over the …\nCreate an iterator that first iterates <code>i</code> and then <code>j</code>.\nReturn an <em>iterable</em> that can chunk the iterator.\nCreate an iterator that clones each element from &amp;T to T\nReturn an iterator adaptor that uses the passed-in closure …\n<code>.collect_vec()</code> is simply a type specialization of …\nReturn an iterator adaptor that iterates over the <code>n</code>-length …\nCreate an iterator that maps for example iterators of …\nRemove duplicates from sections of consecutive identical …\nCompares every element yielded by both <code>i</code> and <code>j</code> with the …\nConsume the first <code>n</code> elements from the iterator eagerly, …\nConsume the last <code>n</code> elements from the iterator eagerly, and …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nIterate <code>iterable</code> with a running index.\nReturn <code>true</code> if both iterators produce equal sequences …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nFind the position and value of the first element …\nUnravel a nested iterator.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nPerform a fold operation over the iterable.\nAccumulator of the elements in the iterator.\nFold <code>Option</code> values from an iterator.\nFold <code>Result</code> values from an iterator.\nAn iterator method that applies a function, producing a …\nRun the closure <code>f</code> eagerly on each element of the iterator.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an <em>iterable</em> that can group iterator elements. …\nCreate an iterator that interleaves elements in <code>i</code> and <code>j</code>.\nAlternate elements from two iterators until both run out.\nAlternate elements from two iterators until one of them …\nAn iterator adaptor to insert a particular value between …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nReturn the inner value.\nConvert the inner value to an iterator.\n<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …\nCreate an iterator over the “cartesian product” of …\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nCreates a new iterator that infinitely applies function to …\nCreate an iterator running multiple iterators in lockstep.\nCombine all iterator elements into one String, seperated …\nCombine all iterator elements into one String, seperated …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn an iterator adaptor that applies the provided …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn the maximum value of the iterable.\nCreate an iterator that merges elements in <code>i</code> and <code>j</code>.\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merges the two base …\nReturn the minimum value of the iterable.\nReturn the minimum and maximum elements in the iterator.\nReturn the minimum and maximum element of an iterator, as …\nReturn the minimum and maximum element of an iterator, as …\nAn iterator adaptor that allows the user to peek at …\nAn iterator that generalizes <em>.zip()</em> and allows running …\nAdvances the iterator and returns the next items grouped …\nReturn an iterator adaptor that pads the sequence to a …\nPartition a sequence using predicate <code>pred</code> so that elements …\nCollect all iterator elements into one of two partitions. …\nPass a reference to the next iterator element to the …\nReturn an iterator adaptor that borrows from this iterator …\nCreate an iterator where you can put back a single item\nCreate an iterator where you can put back multiple values …\nReturn an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.\nAn iterator source that produces elements indefinitely by …\nCreate an iterator that produces <code>n</code> repetitions of <code>element</code>.\nIterate <code>iterable</code> in reverse.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nAssign to each reference in <code>self</code> from the <code>from</code> iterator, …\nCollect all the iterable’s elements into a sorted vector …\nCollect all iterator elements into a sorted vector in …\nCollect all iterator elements into a sorted vector.\nReturn an iterator adaptor that steps <code>n</code> elements in the …\nThe concrete iterator types.\nReturn an iterator adaptor that borrows from a <code>Clone</code>-able …\nSplit into an iterator pair that both yield all elements …\nReturn an iterator adaptor that iterates over the …\nReturn an iterator over all contiguous windows producing …\nReturn an iterator that groups the items in tuples of a …\nCreates a new unfold source with the specified closure as …\nReturn an iterator adaptor that filters out elements that …\nReturn an iterator adaptor that filters out elements that …\nReturns the left value\nReturns the right value\nReturn an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nReturn an iterator adaptor that wraps each element in a …\nIterate <code>i</code> and <code>j</code> in lock step.\nIterate <code>i</code> and <code>j</code> in lock step.\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\nA “meta iterator adaptor”. Its closure recives a …\nAn iterator for the elements in a single chunk.\nAn iterator that yields the Chunk iterators.\nAn iterator adaptor that may join together adjacent …\nAn iterator to iterate through all the <code>n</code>-length …\nAn iterator that maps an iterator of tuples like …\nAn iterator adaptor that removes repeated duplicates.\nAn iterator adapter to simply flatten a structure.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nAn iterator for the elements in a single group.\n<code>GroupBy</code> is the storage for the lazy grouping operation.\nAn iterator that yields the Group iterators.\nAn iterator adaptor that alternates elements from two …\nAn iterator adaptor that alternates elements from the two …\nAn iterator adaptor to insert a particular value between …\n<code>ChunkLazy</code> is the storage for a lazy chunking operation.\nAn iterator that infinitely applies function to value and …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adapter to apply a transformation within a …\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merges the two base iterators in …\nSee <code>multipeek()</code> for more information.\nAn iterator adaptor that pads a sequence to a minimum …\nAn iterator adaptor that takes items while a closure …\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that allows putting back a single item …\nAn iterator adaptor that allows putting multiple items in …\nA wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …\nSee <code>repeat_call</code> for more information.\nAn iterator that produces <em>n</em> repetitions of an element.\nAn iterator adaptor that steps a number elements in the …\nAn iterator adaptor that borrows from a <code>Clone</code>-able iterator\nOne half of an iterator pair where both return the same …\nAn iterator over a incomplete tuple.\nAn iterator to iterate through all combinations in a <code>Clone</code>…\nAn iterator over all contiguous windows that produces …\nAn iterator that groups the items in tuples of a specific …\nSee <code>unfold</code> for more information.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nAn iterator adaptor that wraps each element in an <code>Position</code>.\nSee <code>multizip</code> for more information.\nAn iterator which iterates two other iterators …\nAn iterator which iterates two other iterators …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a buffer with the produced items that was not …\nSplit the <code>PutBack</code> into its parts.\nDeprecated: renamed to multizip\nWorks exactly like <code>.next()</code> with the only difference that …\nPut back a single value to the front of the iterator.\nPuts x in front of the iterator. The values are yielded in …\nThe boxed iterator.\nReset the peeking “cursor”\nInternal state that will be passed to the closure on the …\nput back value <code>value</code> (builder method)")