
#[test]
fn adc0() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD2, 0x13", "adc rdx, 19");
}



#[test]
fn adc1() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x01", "adc rbx, 1");
}



#[test]
fn adc2() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x48", "adc rax, 72");
}



#[test]
fn adc3() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x6A", "adc rax, 106");
}



#[test]
fn adc4() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x65", "adc rcx, 101");
}



#[test]
fn adc5() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc6() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc7() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc8() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc9() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc10() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xCA", "adc rdx, rcx");
}



#[test]
fn adc11() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC8", "adc rax, rcx");
}



#[test]
fn adc12() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC8", "adc rax, rcx");
}



#[test]
fn adc13() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x18", "adc rbx, QWORD [rax]");
}



#[test]
fn adc14() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x10", "adc rdx, QWORD [rax]");
}



#[test]
fn adc15() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD0", "adc al, dl");
}



#[test]
fn adc16() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD0", "adc al, dl");
}



#[test]
fn adc17() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xCA", "adc dl, cl");
}



#[test]
fn adc18() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD2", "adc dl, dl");
}



#[test]
fn adc19() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD0", "adc al, dl");
}



#[test]
fn adc20() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x58", "adc al, 88");
}



#[test]
fn adc21() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x0D", "adc al, 13");
}



#[test]
fn adc22() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x6F", "adc al, 111");
}



#[test]
fn adc23() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x22", "adc al, 34");
}



#[test]
fn adc24() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x05", "adc al, 5");
}



#[test]
fn adc25() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x22", "adc dl, 34");
}



#[test]
fn adc26() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x09", "adc cl, 9");
}



#[test]
fn adc27() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x2B", "adc cl, 43");
}



#[test]
fn adc28() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x5E", "adc cl, 94");
}



#[test]
fn adc29() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x27", "adc dl, 39");
}



#[test]
fn adc30() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x43", "adc eax, 67");
}



#[test]
fn adc31() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x08", "adc eax, 8");
}



#[test]
fn adc32() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x42", "adc rax, 66");
}



#[test]
fn adc33() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x14", "adc eax, 20");
}



#[test]
fn adc34() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x4A", "adc eax, 74");
}



#[test]
fn adc35() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x49", "adc BYTE [rax], 73");
}



#[test]
fn adc36() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x24", "adc BYTE [rax], 36");
}



#[test]
fn adc37() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x13", "adc BYTE [rax], 19");
}



#[test]
fn adc38() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x31", "adc BYTE [rax], 49");
}



#[test]
fn adc39() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x6B", "adc BYTE [rax], 107");
}



#[test]
fn adc40() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x4F", "adc rcx, 79");
}



#[test]
fn adc41() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD2, 0x05", "adc rdx, 5");
}



#[test]
fn adc42() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x7B", "adc rbx, 123");
}



#[test]
fn adc43() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD2, 0x52", "adc rdx, 82");
}



#[test]
fn adc44() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x5A", "adc rax, 90");
}



#[test]
fn adc45() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x00", "adc BYTE [rax], al");
}



#[test]
fn adc46() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x10", "adc BYTE [rax], dl");
}



#[test]
fn adc47() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x08", "adc BYTE [rax], cl");
}



#[test]
fn adc48() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x00", "adc BYTE [rax], al");
}



#[test]
fn adc49() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x08", "adc BYTE [rax], cl");
}



#[test]
fn adc50() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x10", "adc dl, BYTE [rax]");
}



#[test]
fn adc51() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC1", "adc cl, al");
}



#[test]
fn adc52() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x10", "adc dl, BYTE [rax]");
}



#[test]
fn adc53() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x10", "adc dl, BYTE [rax]");
}



#[test]
fn adc54() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC2", "adc dl, al");
}



#[test]
fn adcx55() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adcx rdx, rax");
}



#[test]
fn adcx56() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adcx rdx, rax");
}



#[test]
fn adcx57() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xC0", "adcx rax, rax");
}



#[test]
fn adcx58() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xC8", "adcx rcx, rax");
}



#[test]
fn adcx59() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xC8", "adcx rcx, rax");
}



#[test]
fn add60() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x64", "add BYTE [rax], 100");
}



#[test]
fn add61() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x31", "add BYTE [rax], 49");
}



#[test]
fn add62() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x6A", "add BYTE [rax], 106");
}



#[test]
fn add63() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x70", "add BYTE [rax], 112");
}



#[test]
fn add64() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x66", "add BYTE [rax], 102");
}



#[test]
fn add65() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x67", "add rdx, 103");
}



#[test]
fn add66() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x7A", "add rdx, 122");
}



#[test]
fn add67() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x0B", "add rbx, 11");
}



#[test]
fn add68() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x53", "add rcx, 83");
}



#[test]
fn add69() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x06", "add rbx, 6");
}



#[test]
fn add70() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x08", "add cl, BYTE [rax]");
}



#[test]
fn add71() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x00", "add al, BYTE [rax]");
}



#[test]
fn add72() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x00", "add al, BYTE [rax]");
}



#[test]
fn add73() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC0", "add al, al");
}



#[test]
fn add74() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x10", "add dl, BYTE [rax]");
}



#[test]
fn add75() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x1D", "add al, 29");
}



#[test]
fn add76() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x17", "add al, 23");
}



#[test]
fn add77() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x40", "add cl, 64");
}



#[test]
fn add78() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x5F", "add cl, 95");
}



#[test]
fn add79() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x78", "add dl, 120");
}



#[test]
fn add80() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add81() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xCA", "add dl, cl");
}



#[test]
fn add82() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add83() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add84() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD1", "add cl, dl");
}



#[test]
fn add85() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x67", "add rax, 103");
}



#[test]
fn add86() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x4D", "add rbx, 77");
}



#[test]
fn add87() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x04", "add rbx, 4");
}



#[test]
fn add88() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x30", "add rdx, 48");
}



#[test]
fn add89() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x51", "add rbx, 81");
}



#[test]
fn add90() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x48", "add al, 72");
}



#[test]
fn add91() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x39", "add al, 57");
}



#[test]
fn add92() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x32", "add al, 50");
}



#[test]
fn add93() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x6A", "add al, 106");
}



#[test]
fn add94() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x78", "add al, 120");
}



#[test]
fn add95() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x1E", "add rax, 30");
}



#[test]
fn add96() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x27", "add rax, 39");
}



#[test]
fn add97() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add ax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC0, 0x2E", "add ax, 46");
}



#[test]
fn add98() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x31", "add rax, 49");
}



#[test]
fn add99() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x0A", "add eax, 10");
}



#[test]
fn add100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x10", "add BYTE [rax], dl");
}



#[test]
fn add101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x10", "add BYTE [rax], dl");
}



#[test]
fn add102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x08", "add BYTE [rax], cl");
}



#[test]
fn add103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x08", "add BYTE [rax], cl");
}



#[test]
fn add104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x10", "add BYTE [rax], dl");
}



#[test]
fn add105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x18", "add rbx, QWORD [rax]");
}



#[test]
fn add111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC9", "add rcx, rcx");
}



#[test]
fn add112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xCB", "add rbx, rcx");
}



#[test]
fn add113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x18", "add rbx, QWORD [rax]");
}



#[test]
fn add114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x18", "add rbx, QWORD [rax]");
}



#[test]
fn addpd115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x58, 0xE0", "addpd xmm12, xmm0");
}



#[test]
fn addpd116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x58, 0xDB", "addpd xmm11, xmm3");
}



#[test]
fn addpd117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x58, 0xFC", "addpd xmm15, xmm4");
}



#[test]
fn addpd118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xC4", "addpd xmm0, xmm4");
}



#[test]
fn addpd119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xE1", "addpd xmm4, xmm1");
}



#[test]
fn addps120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0xE1", "addps xmm4, xmm1");
}



#[test]
fn addps121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x58, 0xE7", "addps xmm12, xmm15");
}



#[test]
fn addps122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x58, 0xE3", "addps xmm4, xmm11");
}



#[test]
fn addps123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x58, 0xFB", "addps xmm15, xmm11");
}



#[test]
fn addps124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x58, 0xFF", "addps xmm15, xmm15");
}



#[test]
fn addsd125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xD9", "addsd xmm3, xmm1");
}



#[test]
fn addsd126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x58, 0xFB", "addsd xmm15, xmm11");
}



#[test]
fn addsd127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x58, 0xDC", "addsd xmm11, xmm12");
}



#[test]
fn addsd128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0xE4", "addsd xmm12, xmm4");
}



#[test]
fn addsd129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xE3", "addsd xmm4, xmm3");
}



#[test]
fn addss130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xD2", "addss xmm2, xmm2");
}



#[test]
fn addss131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x58, 0xCB", "addss xmm1, xmm11");
}



#[test]
fn addss132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0xFA", "addss xmm15, xmm2");
}



#[test]
fn addss133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0xFB", "addss xmm15, xmm3");
}



#[test]
fn addss134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xC3", "addss xmm0, xmm3");
}



#[test]
fn addsubpd135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD0, 0xDB", "addsubpd xmm11, xmm11");
}



#[test]
fn addsubpd136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xE2", "addsubpd xmm4, xmm2");
}



#[test]
fn addsubpd137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xE2", "addsubpd xmm4, xmm2");
}



#[test]
fn addsubpd138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xC2", "addsubpd xmm0, xmm2");
}



#[test]
fn addsubpd139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xCB", "addsubpd xmm1, xmm3");
}



#[test]
fn addsubps140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD0, 0x1A", "addsubps xmm3, OWORD [rdx]");
}



#[test]
fn addsubps141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD0, 0xCB", "addsubps xmm1, xmm3");
}



#[test]
fn addsubps142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xE4", "addsubps xmm12, xmm4");
}



#[test]
fn addsubps143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD0, 0xE1", "addsubps xmm4, xmm1");
}



#[test]
fn addsubps144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xE4", "addsubps xmm12, xmm4");
}



#[test]
fn adox145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adox rcx, [rax]");
}



#[test]
fn adox146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adox rdx, rax");
}



#[test]
fn adox147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adox rax, [rax]");
}



#[test]
fn adox148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adox rax, [rax]");
}



#[test]
fn adox149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adox rax, [rax]");
}



#[test]
fn aesdec150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0x12", "aesdec xmm2, OWORD [rdx]");
}



#[test]
fn aesdec151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDE, 0xFB", "aesdec xmm15, xmm3");
}



#[test]
fn aesdec152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0xCC", "aesdec xmm1, xmm4");
}



#[test]
fn aesdec153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDE, 0xDA", "aesdec xmm11, xmm2");
}



#[test]
fn aesdec154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDE, 0x18", "aesdec xmm11, OWORD [rax]");
}



#[test]
fn aesdeclast155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDF, 0x1A", "aesdeclast xmm11, OWORD [rdx]");
}



#[test]
fn aesdeclast156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDF, 0xC3", "aesdeclast xmm0, xmm11");
}



#[test]
fn aesdeclast157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDF, 0x18", "aesdeclast xmm11, OWORD [rax]");
}



#[test]
fn aesdeclast158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0xCA", "aesdeclast xmm1, xmm2");
}



#[test]
fn aesdeclast159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0xC4", "aesdeclast xmm0, xmm4");
}



#[test]
fn aesenc160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xD2", "aesenc xmm2, xmm2");
}



#[test]
fn aesenc161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDC, 0xE0", "aesenc xmm12, xmm0");
}



#[test]
fn aesenc162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0x10", "aesenc xmm2, OWORD [rax]");
}



#[test]
fn aesenc163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xE2", "aesenc xmm4, xmm2");
}



#[test]
fn aesenc164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xD4", "aesenc xmm2, xmm4");
}



#[test]
fn aesenclast165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDD, 0x3A", "aesenclast xmm15, OWORD [rdx]");
}



#[test]
fn aesenclast166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xDA", "aesenclast xmm3, xmm2");
}



#[test]
fn aesenclast167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xDC", "aesenclast xmm3, xmm4");
}



#[test]
fn aesenclast168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDD, 0xE3", "aesenclast xmm12, xmm3");
}



#[test]
fn aesenclast169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xD2", "aesenclast xmm2, xmm2");
}



#[test]
fn aesimc170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xD3", "aesimc xmm2, xmm3");
}



#[test]
fn aesimc171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDB, 0xE7", "aesimc xmm4, xmm15");
}



#[test]
fn aesimc172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xC9", "aesimc xmm1, xmm1");
}



#[test]
fn aesimc173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xD0", "aesimc xmm2, xmm0");
}



#[test]
fn aesimc174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xD1", "aesimc xmm2, xmm1");
}



#[test]
fn aeskeygenassist175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm12, xmm15, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0xDF, 0xE7, 0x5A", "aeskeygenassist xmm12, xmm15, 90");
}



#[test]
fn aeskeygenassist176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm12, OWORD [rax], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0xDF, 0x20, 0x68", "aeskeygenassist xmm12, OWORD [rax], 104");
}



#[test]
fn aeskeygenassist177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm3, xmm12, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0xDF, 0xDC, 0x0A", "aeskeygenassist xmm3, xmm12, 10");
}



#[test]
fn aeskeygenassist178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm11, xmm2, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0xDF, 0xDA, 0x6D", "aeskeygenassist xmm11, xmm2, 109");
}



#[test]
fn aeskeygenassist179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm11, xmm12, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0xDF, 0xDC, 0x37", "aeskeygenassist xmm11, xmm12, 55");
}



#[test]
fn and180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x10", "and dl, BYTE [rax]");
}



#[test]
fn and181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x08", "and cl, BYTE [rax]");
}



#[test]
fn and182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x10", "and dl, BYTE [rax]");
}



#[test]
fn and183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x08", "and cl, BYTE [rax]");
}



#[test]
fn and184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x00", "and al, BYTE [rax]");
}



#[test]
fn and185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC8", "and al, cl");
}



#[test]
fn and186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD2", "and dl, dl");
}



#[test]
fn and187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC2", "and dl, al");
}



#[test]
fn and188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD1", "and cl, dl");
}



#[test]
fn and189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC1", "and cl, al");
}



#[test]
fn and190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x04", "and eax, 4");
}



#[test]
fn and191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x71", "and eax, 113");
}



#[test]
fn and192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x07", "and eax, 7");
}



#[test]
fn and193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x3A", "and eax, 58");
}



#[test]
fn and194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x32", "and rax, 50");
}



#[test]
fn and195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x54", "and rbx, 84");
}



#[test]
fn and196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x06", "and rcx, 6");
}



#[test]
fn and197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x14", "and rbx, 20");
}



#[test]
fn and198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x79", "and rbx, 121");
}



#[test]
fn and199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x4B", "and rcx, 75");
}



#[test]
fn and200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x12", "and rbx, 18");
}



#[test]
fn and201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x74", "and rdx, 116");
}



#[test]
fn and202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x68", "and rbx, 104");
}



#[test]
fn and203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x52", "and rbx, 82");
}



#[test]
fn and204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x74", "and rax, 116");
}



#[test]
fn and205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn and206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn and207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x08", "and BYTE [rax], cl");
}



#[test]
fn and208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn and209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn and210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x59", "and al, 89");
}



#[test]
fn and211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x78", "and cl, 120");
}



#[test]
fn and212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x0A", "and cl, 10");
}



#[test]
fn and213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x40", "and cl, 64");
}



#[test]
fn and214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x46", "and cl, 70");
}



#[test]
fn and215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x00", "and rax, QWORD [rax]");
}



#[test]
fn and221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x00", "and rax, QWORD [rax]");
}



#[test]
fn and222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xCA", "and rdx, rcx");
}



#[test]
fn and223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x00", "and rax, QWORD [rax]");
}



#[test]
fn and224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xCA", "and rdx, rcx");
}



#[test]
fn and225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x7E", "and al, 126");
}



#[test]
fn and226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x36", "and al, 54");
}



#[test]
fn and227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x20", "and al, 32");
}



#[test]
fn and228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x12", "and al, 18");
}



#[test]
fn and229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x50", "and al, 80");
}



#[test]
fn and230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x11", "and BYTE [rax], 17");
}



#[test]
fn and231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x7C", "and BYTE [rax], 124");
}



#[test]
fn and232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x29", "and BYTE [rax], 41");
}



#[test]
fn and233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x25", "and BYTE [rax], 37");
}



#[test]
fn and234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x1E", "and BYTE [rax], 30");
}



#[test]
fn andnpd235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x55, 0xF8", "andnpd xmm15, xmm0");
}



#[test]
fn andnpd236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xC8", "andnpd xmm1, xmm0");
}



#[test]
fn andnpd237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x55, 0xFF", "andnpd xmm15, xmm15");
}



#[test]
fn andnpd238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xCB", "andnpd xmm1, xmm3");
}



#[test]
fn andnpd239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xE1", "andnpd xmm4, xmm1");
}



#[test]
fn andnps240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0xE4", "andnps xmm12, xmm4");
}



#[test]
fn andnps241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x55, 0xCF", "andnps xmm1, xmm15");
}



#[test]
fn andnps242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xC9", "andnps xmm1, xmm1");
}



#[test]
fn andnps243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x10", "andnps xmm2, OWORD [rax]");
}



#[test]
fn andnps244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0xD8", "andnps xmm11, xmm0");
}



#[test]
fn andpd245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x54, 0xDC", "andpd xmm3, xmm12");
}



#[test]
fn andpd246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x54, 0xDC", "andpd xmm3, xmm12");
}



#[test]
fn andpd247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0xDC", "andpd xmm11, xmm4");
}



#[test]
fn andpd248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x54, 0xC4", "andpd xmm0, xmm12");
}



#[test]
fn andpd249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0xD0", "andpd xmm2, xmm0");
}



#[test]
fn andps250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x54, 0xE0", "andps xmm12, xmm0");
}



#[test]
fn andps251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0xC8", "andps xmm1, xmm0");
}



#[test]
fn andps252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x54, 0xD9", "andps xmm11, xmm1");
}



#[test]
fn andps253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0xC0", "andps xmm0, xmm0");
}



#[test]
fn andps254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x54, 0xD4", "andps xmm2, xmm12");
}



#[test]
fn blendpd255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm2, xmm3, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xD3, 0x1F", "blendpd xmm2, xmm3, 31");
}



#[test]
fn blendpd256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm11, xmm12, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xDC, 0x46", "blendpd xmm11, xmm12, 70");
}



#[test]
fn blendpd257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, xmm1, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0xE1, 0x65", "blendpd xmm12, xmm1, 101");
}



#[test]
fn blendpd258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm2, xmm0, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xD0, 0x3F", "blendpd xmm2, xmm0, 63");
}



#[test]
fn blendpd259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, xmm15, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xFF, 0x71", "blendpd xmm15, xmm15, 113");
}



#[test]
fn blendps260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, xmm15, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0C, 0xDF, 0x17", "blendps xmm11, xmm15, 23");
}



#[test]
fn blendps261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm0, xmm4, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xC4, 0x64", "blendps xmm0, xmm4, 100");
}



#[test]
fn blendps262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm15, xmm3, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xFB, 0x65", "blendps xmm15, xmm3, 101");
}



#[test]
fn blendps263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm2, xmm12, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0C, 0xD4, 0x36", "blendps xmm2, xmm12, 54");
}



#[test]
fn blendps264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, xmm15, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0C, 0xDF, 0x09", "blendps xmm11, xmm15, 9");
}



#[test]
fn blendvpd265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xE2", "blendvpd xmm4, xmm2");
}



#[test]
fn blendvpd266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0xDA", "blendvpd xmm11, xmm2");
}



#[test]
fn blendvpd267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x15, 0xE4", "blendvpd xmm12, xmm12");
}



#[test]
fn blendvpd268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xDB", "blendvpd xmm3, xmm3");
}



#[test]
fn blendvpd269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x15, 0xD3", "blendvpd xmm2, xmm11");
}



#[test]
fn blendvps270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x14, 0xD7", "blendvps xmm2, xmm15");
}



#[test]
fn blendvps271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x14, 0xE4", "blendvps xmm12, xmm12");
}



#[test]
fn blendvps272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xC3", "blendvps xmm0, xmm3");
}



#[test]
fn blendvps273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x14, 0xDF", "blendvps xmm11, xmm15");
}



#[test]
fn blendvps274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xE3", "blendvps xmm4, xmm3");
}



#[test]
fn bsf275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xC9", "bsf rcx, rcx");
}



#[test]
fn bsf276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x08", "bsf rcx, QWORD [rax]");
}



#[test]
fn bsf277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x00", "bsf rax, QWORD [rax]");
}



#[test]
fn bsf278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xC1", "bsf rax, rcx");
}



#[test]
fn bsf279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xC1", "bsf rax, rcx");
}



#[test]
fn bsr280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x08", "bsr rcx, QWORD [rax]");
}



#[test]
fn bsr281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x18", "bsr rbx, QWORD [rax]");
}



#[test]
fn bsr282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xD1", "bsr rdx, rcx");
}



#[test]
fn bsr283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xD9", "bsr rbx, rcx");
}



#[test]
fn bsr284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x10", "bsr rdx, QWORD [rax]");
}



#[test]
fn bswap285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC9", "bswap rcx");
}



#[test]
fn bswap286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn bswap287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn bswap288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCB", "bswap rbx");
}



#[test]
fn bswap289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCA", "bswap rdx");
}



#[test]
fn bt290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x39", "bt QWORD [rax], 57");
}



#[test]
fn bt291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x18", "bt QWORD [rax], 24");
}



#[test]
fn bt292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x69", "bt rcx, 105");
}



#[test]
fn bt293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x03", "bt rcx, 3");
}



#[test]
fn bt294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x63", "bt rcx, 99");
}



#[test]
fn bt295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x08", "bt QWORD [rax], rcx");
}



#[test]
fn bt296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x00", "bt QWORD [rax], rax");
}



#[test]
fn bt297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x08", "bt QWORD [rax], rcx");
}



#[test]
fn bt298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xD9", "bt rcx, rbx");
}



#[test]
fn bt299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xC9", "bt rcx, rcx");
}



#[test]
fn btc300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF8, 0x78", "btc rax, 120");
}



#[test]
fn btc301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rcx, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF9, 0x1C", "btc rcx, 28");
}



#[test]
fn btc302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rcx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF9, 0x77", "btc rcx, 119");
}



#[test]
fn btc303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x66", "btc rdx, 102");
}



#[test]
fn btc304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF8, 0x1C", "btc rax, 28");
}



#[test]
fn btc305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btr310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x30", "btr rax, 48");
}



#[test]
fn btr316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rdx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF2, 0x14", "btr rdx, 20");
}



#[test]
fn btr317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rbx, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF3, 0x38", "btr rbx, 56");
}



#[test]
fn btr318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rdx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF2, 0x1B", "btr rdx, 27");
}



#[test]
fn btr319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x58", "btr rax, 88");
}



#[test]
fn bts320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x37", "bts rdx, 55");
}



#[test]
fn bts321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x3D", "bts rdx, 61");
}



#[test]
fn bts322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x32", "bts rdx, 50");
}



#[test]
fn bts323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE8, 0x09", "bts rax, 9");
}



#[test]
fn bts324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x46", "bts rcx, 70");
}



#[test]
fn bts325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn cbw330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cbw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x98", "cbw");
}



#[test]
fn cdq331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x99", "cdq");
}



#[test]
fn cdqe332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdqe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x98", "cdqe");
}



#[test]
fn clac333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCA", "clac");
}



#[test]
fn clc334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF8", "clc");
}



#[test]
fn cld335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFC", "cld");
}



#[test]
fn clgi336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clgi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDD", "clgi");
}



#[test]
fn cli337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cli
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFA", "cli");
}



#[test]
fn clts338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clts
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x06", "clts");
}



#[test]
fn clzero339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clzero
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFC", "clzero");
}



#[test]
fn cmc340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF5", "cmc");
}



#[test]
fn comisd341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x2F, 0xDC", "comisd xmm11, xmm12");
}



#[test]
fn comisd342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2F, 0xC3", "comisd xmm0, xmm11");
}



#[test]
fn comisd343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2F, 0xDF", "comisd xmm3, xmm15");
}



#[test]
fn comisd344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xE0", "comisd xmm4, xmm0");
}



#[test]
fn comisd345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xD9", "comisd xmm3, xmm1");
}



#[test]
fn comiss346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x2F, 0xDC", "comiss xmm11, xmm12");
}



#[test]
fn comiss347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xDA", "comiss xmm3, xmm2");
}



#[test]
fn comiss348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xCC", "comiss xmm1, xmm4");
}



#[test]
fn comiss349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2F, 0xE3", "comiss xmm4, xmm11");
}



#[test]
fn comiss350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2F, 0xE3", "comiss xmm4, xmm11");
}



#[test]
fn cpu_read351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpu_read
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3D", "cpu_read");
}



#[test]
fn cpu_write352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpu_write
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3C", "cpu_write");
}



#[test]
fn cpuid353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpuid
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA2", "cpuid");
}



#[test]
fn cqo354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cqo
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x99", "cqo");
}



#[test]
fn cvtdq2pd355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xDF", "cvtdq2pd xmm3, xmm15");
}



#[test]
fn cvtdq2pd356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xD4", "cvtdq2pd xmm2, xmm12");
}



#[test]
fn cvtdq2pd357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xE2", "cvtdq2pd xmm12, xmm2");
}



#[test]
fn cvtdq2pd358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xE4", "cvtdq2pd xmm4, xmm12");
}



#[test]
fn cvtdq2pd359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0xE3", "cvtdq2pd xmm4, xmm3");
}



#[test]
fn cvtdq2ps360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xDA", "cvtdq2ps xmm3, xmm2");
}



#[test]
fn cvtdq2ps361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5B, 0xD7", "cvtdq2ps xmm2, xmm15");
}



#[test]
fn cvtdq2ps362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xD8", "cvtdq2ps xmm3, xmm0");
}



#[test]
fn cvtdq2ps363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5B, 0xDB", "cvtdq2ps xmm11, xmm11");
}



#[test]
fn cvtdq2ps364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x20", "cvtdq2ps xmm4, OWORD [rax]");
}



#[test]
fn cvtpd2dq365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xFC", "cvtpd2dq xmm15, xmm4");
}



#[test]
fn cvtpd2dq366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0x18", "cvtpd2dq xmm11, OWORD [rax]");
}



#[test]
fn cvtpd2dq367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0x0A", "cvtpd2dq xmm1, OWORD [rdx]");
}



#[test]
fn cvtpd2dq368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xDA", "cvtpd2dq xmm11, xmm2");
}



#[test]
fn cvtpd2dq369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0xC8", "cvtpd2dq xmm1, xmm0");
}



#[test]
fn cvtpd2pi370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm5, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xEC", "cvtpd2pi mm5, xmm4");
}



#[test]
fn cvtpd2pi371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xDF", "cvtpd2pi mm3, xmm15");
}



#[test]
fn cvtpd2pi372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xE0", "cvtpd2pi mm4, xmm0");
}



#[test]
fn cvtpd2pi373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xC9", "cvtpd2pi mm1, xmm1");
}



#[test]
fn cvtpd2pi374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xCF", "cvtpd2pi mm1, xmm15");
}



#[test]
fn cvtpd2ps375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0xE2", "cvtpd2ps xmm4, xmm2");
}



#[test]
fn cvtpd2ps376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0xD4", "cvtpd2ps xmm2, xmm4");
}



#[test]
fn cvtpd2ps377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0xD3", "cvtpd2ps xmm2, xmm3");
}



#[test]
fn cvtpd2ps378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0x18", "cvtpd2ps xmm3, OWORD [rax]");
}



#[test]
fn cvtpd2ps379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0x1A", "cvtpd2ps xmm11, OWORD [rdx]");
}



#[test]
fn cvtpi2pd380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0xD8", "cvtpi2pd xmm3, mm0");
}



#[test]
fn cvtpi2pd381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm12, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0xE0", "cvtpi2pd xmm12, mm0");
}



#[test]
fn cvtpi2pd382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x02", "cvtpi2pd xmm0, [rdx]");
}



#[test]
fn cvtpi2pd383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm11, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0x1A", "cvtpi2pd xmm11, [rdx]");
}



#[test]
fn cvtpi2pd384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm12, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0xE0", "cvtpi2pd xmm12, mm0");
}



#[test]
fn cvtpi2ps385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0xE0", "cvtpi2ps xmm4, mm0");
}



#[test]
fn cvtpi2ps386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x0A", "cvtpi2ps xmm1, [rdx]");
}



#[test]
fn cvtpi2ps387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x20", "cvtpi2ps xmm4, [rax]");
}



#[test]
fn cvtpi2ps388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x18", "cvtpi2ps xmm3, [rax]");
}



#[test]
fn cvtpi2ps389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x02", "cvtpi2ps xmm0, [rdx]");
}



#[test]
fn cvtps2dq390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5B, 0xE3", "cvtps2dq xmm12, xmm11");
}



#[test]
fn cvtps2dq391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xDB", "cvtps2dq xmm3, xmm3");
}



#[test]
fn cvtps2dq392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xD8", "cvtps2dq xmm11, xmm0");
}



#[test]
fn cvtps2dq393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xC9", "cvtps2dq xmm1, xmm1");
}



#[test]
fn cvtps2dq394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xFA", "cvtps2dq xmm15, xmm2");
}



#[test]
fn cvtps2pd395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xC1", "cvtps2pd xmm0, xmm1");
}



#[test]
fn cvtps2pd396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xCA", "cvtps2pd xmm1, xmm2");
}



#[test]
fn cvtps2pd397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xE4", "cvtps2pd xmm4, xmm12");
}



#[test]
fn cvtps2pd398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0xFC", "cvtps2pd xmm15, xmm4");
}



#[test]
fn cvtps2pd399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xC0", "cvtps2pd xmm0, xmm0");
}



#[test]
fn cvtps2pi400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xC3", "cvtps2pi mm0, xmm3");
}



#[test]
fn cvtps2pi401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xE3", "cvtps2pi mm4, xmm3");
}



#[test]
fn cvtps2pi402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xE3", "cvtps2pi mm4, xmm11");
}



#[test]
fn cvtps2pi403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xCC", "cvtps2pi mm1, xmm4");
}



#[test]
fn cvtps2pi404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xD4", "cvtps2pi mm2, xmm12");
}



#[test]
fn cvtsd2si405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rbx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xDF", "cvtsd2si rbx, xmm15");
}



#[test]
fn cvtsd2si406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xC4", "cvtsd2si rax, xmm12");
}



#[test]
fn cvtsd2si407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xCA", "cvtsd2si rcx, xmm2");
}



#[test]
fn cvtsd2si408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xD7", "cvtsd2si rdx, xmm15");
}



#[test]
fn cvtsd2si409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rbx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD9", "cvtsd2si rbx, xmm1");
}



#[test]
fn cvtsd2si410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x08", "cvtsd2si rcx, QWORD [rax]");
}



#[test]
fn cvtsd2si411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x18", "cvtsd2si rbx, QWORD [rax]");
}



#[test]
fn cvtsd2si412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x10", "cvtsd2si rdx, QWORD [rax]");
}



#[test]
fn cvtsd2si413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x18", "cvtsd2si rbx, QWORD [rax]");
}



#[test]
fn cvtsd2si414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x00", "cvtsd2si rax, QWORD [rax]");
}



#[test]
fn cvtsd2ss415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xC0", "cvtsd2ss xmm0, xmm0");
}



#[test]
fn cvtsd2ss416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xCF", "cvtsd2ss xmm1, xmm15");
}



#[test]
fn cvtsd2ss417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xDB", "cvtsd2ss xmm3, xmm11");
}



#[test]
fn cvtsd2ss418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0xFA", "cvtsd2ss xmm15, xmm2");
}



#[test]
fn cvtsd2ss419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xDC", "cvtsd2ss xmm3, xmm4");
}



#[test]
fn cvtsi2sd420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0x10", "cvtsi2sd xmm2, QWORD [rax]");
}



#[test]
fn cvtsi2sd421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0xF9", "cvtsi2sd xmm15, rcx");
}



#[test]
fn cvtsi2sd422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0xF9", "cvtsi2sd xmm15, rcx");
}



#[test]
fn cvtsi2sd423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0x20", "cvtsi2sd xmm12, QWORD [rax]");
}



#[test]
fn cvtsi2sd424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0x20", "cvtsi2sd xmm12, QWORD [rax]");
}



#[test]
fn cvtsi2ss425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0x20", "cvtsi2ss xmm4, QWORD [rax]");
}



#[test]
fn cvtsi2ss426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0x38", "cvtsi2ss xmm15, QWORD [rax]");
}



#[test]
fn cvtsi2ss427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0x20", "cvtsi2ss xmm12, QWORD [rax]");
}



#[test]
fn cvtsi2ss428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0x00", "cvtsi2ss xmm0, QWORD [rax]");
}



#[test]
fn cvtsi2ss429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0x08", "cvtsi2ss xmm1, QWORD [rax]");
}



#[test]
fn cvtss2sd430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xDB", "cvtss2sd xmm3, xmm3");
}



#[test]
fn cvtss2sd431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xC7", "cvtss2sd xmm0, xmm15");
}



#[test]
fn cvtss2sd432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xD1", "cvtss2sd xmm2, xmm1");
}



#[test]
fn cvtss2sd433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5A, 0xDB", "cvtss2sd xmm11, xmm11");
}



#[test]
fn cvtss2sd434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5A, 0xF9", "cvtss2sd xmm15, xmm1");
}



#[test]
fn cvtss2si435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2D, 0xCF", "cvtss2si rcx, xmm15");
}



#[test]
fn cvtss2si436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rbx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD9", "cvtss2si rbx, xmm1");
}



#[test]
fn cvtss2si437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rbx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xDA", "cvtss2si rbx, xmm2");
}



#[test]
fn cvtss2si438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xCA", "cvtss2si rcx, xmm2");
}



#[test]
fn cvtss2si439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rbx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2D, 0xDB", "cvtss2si rbx, xmm11");
}



#[test]
fn cvtss2si440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x10", "cvtss2si rdx, DWORD [rax]");
}



#[test]
fn cvtss2si441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x10", "cvtss2si rdx, DWORD [rax]");
}



#[test]
fn cvtss2si442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x00", "cvtss2si rax, DWORD [rax]");
}



#[test]
fn cvtss2si443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x08", "cvtss2si rcx, DWORD [rax]");
}



#[test]
fn cvtss2si444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x18", "cvtss2si rbx, DWORD [rax]");
}



#[test]
fn cvttpd2dq445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0x12", "cvttpd2dq xmm2, OWORD [rdx]");
}



#[test]
fn cvttpd2dq446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD7", "cvttpd2dq xmm2, xmm15");
}



#[test]
fn cvttpd2dq447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE6, 0xDC", "cvttpd2dq xmm11, xmm12");
}



#[test]
fn cvttpd2dq448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD4", "cvttpd2dq xmm2, xmm12");
}



#[test]
fn cvttpd2dq449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD7", "cvttpd2dq xmm2, xmm15");
}



#[test]
fn cvttpd2pi450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2C, 0xCB", "cvttpd2pi mm1, xmm11");
}



#[test]
fn cvttpd2pi451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xEB", "cvttpd2pi mm5, xmm3");
}



#[test]
fn cvttpd2pi452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2C, 0xE4", "cvttpd2pi mm4, xmm12");
}



#[test]
fn cvttpd2pi453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xEB", "cvttpd2pi mm5, xmm3");
}



#[test]
fn cvttpd2pi454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0x0A", "cvttpd2pi mm1, OWORD [rdx]");
}



#[test]
fn cvttps2dq455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xDB", "cvttps2dq xmm3, xmm3");
}



#[test]
fn cvttps2dq456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xD0", "cvttps2dq xmm2, xmm0");
}



#[test]
fn cvttps2dq457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xDB", "cvttps2dq xmm3, xmm3");
}



#[test]
fn cvttps2dq458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5B, 0xC4", "cvttps2dq xmm0, xmm12");
}



#[test]
fn cvttps2dq459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xD4", "cvttps2dq xmm2, xmm4");
}



#[test]
fn cvttps2pi460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xD8", "cvttps2pi mm3, xmm0");
}



#[test]
fn cvttps2pi461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xDC", "cvttps2pi mm3, xmm12");
}



#[test]
fn cvttps2pi462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xDB", "cvttps2pi mm3, xmm3");
}



#[test]
fn cvttps2pi463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xCB", "cvttps2pi mm1, xmm3");
}



#[test]
fn cvttps2pi464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xDC", "cvttps2pi mm3, xmm12");
}



#[test]
fn cvttsd2si465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xD7", "cvttsd2si rdx, xmm15");
}



#[test]
fn cvttsd2si466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rbx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xDF", "cvttsd2si rbx, xmm15");
}



#[test]
fn cvttsd2si467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xC1", "cvttsd2si rax, xmm1");
}



#[test]
fn cvttsd2si468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xC0", "cvttsd2si rax, xmm0");
}



#[test]
fn cvttsd2si469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xCC", "cvttsd2si rcx, xmm12");
}



#[test]
fn cvttsd2si470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x00", "cvttsd2si rax, QWORD [rax]");
}



#[test]
fn cvttsd2si471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x00", "cvttsd2si rax, QWORD [rax]");
}



#[test]
fn cvttsd2si472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x18", "cvttsd2si rbx, QWORD [rax]");
}



#[test]
fn cvttsd2si473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x00", "cvttsd2si rax, QWORD [rax]");
}



#[test]
fn cvttsd2si474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x10", "cvttsd2si rdx, QWORD [rax]");
}



#[test]
fn cvttss2si475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xC8", "cvttss2si rcx, xmm0");
}



#[test]
fn cvttss2si476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xC4", "cvttss2si rax, xmm4");
}



#[test]
fn cvttss2si477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2C, 0xCB", "cvttss2si rcx, xmm11");
}



#[test]
fn cvttss2si478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD8", "cvttss2si rbx, xmm0");
}



#[test]
fn cvttss2si479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2C, 0xD4", "cvttss2si rdx, xmm12");
}



#[test]
fn cvttss2si480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x18", "cvttss2si rbx, DWORD [rax]");
}



#[test]
fn cvttss2si481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x18", "cvttss2si rbx, DWORD [rax]");
}



#[test]
fn cvttss2si482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x10", "cvttss2si rdx, DWORD [rax]");
}



#[test]
fn cvttss2si483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x18", "cvttss2si rbx, DWORD [rax]");
}



#[test]
fn cvttss2si484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x10", "cvttss2si rdx, DWORD [rax]");
}



#[test]
fn cwd485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x99", "cwd");
}



#[test]
fn cwde486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwde
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x98", "cwde");
}



#[test]
fn dec487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC8", "dec rax");
}



#[test]
fn dec493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC8", "dec rax");
}



#[test]
fn dec494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCB", "dec rbx");
}



#[test]
fn dec495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCA", "dec rdx");
}



#[test]
fn dec496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCB", "dec rbx");
}



#[test]
fn dec497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn dec498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn dec499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xCA", "dec dl");
}



#[test]
fn dec500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC9", "dec cl");
}



#[test]
fn dec501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn div502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn div503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn div504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn div505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn div506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn div507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn div508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn div509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn div510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn div511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn divpd512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5E, 0xD4", "divpd xmm2, xmm12");
}



#[test]
fn divpd513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5E, 0xE4", "divpd xmm4, xmm12");
}



#[test]
fn divpd514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0x0A", "divpd xmm1, OWORD [rdx]");
}



#[test]
fn divpd515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xE3", "divpd xmm12, xmm3");
}



#[test]
fn divpd516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5E, 0xE7", "divpd xmm12, xmm15");
}



#[test]
fn divps517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0xD4", "divps xmm2, xmm4");
}



#[test]
fn divps518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0xF9", "divps xmm15, xmm1");
}



#[test]
fn divps519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0xDB", "divps xmm11, xmm3");
}



#[test]
fn divps520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5E, 0xE4", "divps xmm4, xmm12");
}



#[test]
fn divps521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x1A", "divps xmm3, OWORD [rdx]");
}



#[test]
fn divsd522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0xF9", "divsd xmm15, xmm1");
}



#[test]
fn divsd523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xD9", "divsd xmm3, xmm1");
}



#[test]
fn divsd524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xD9", "divsd xmm3, xmm1");
}



#[test]
fn divsd525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5E, 0xDC", "divsd xmm11, xmm12");
}



#[test]
fn divsd526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xDC", "divsd xmm3, xmm12");
}



#[test]
fn divss527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0xFB", "divss xmm15, xmm3");
}



#[test]
fn divss528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5E, 0xFB", "divss xmm15, xmm11");
}



#[test]
fn divss529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5E, 0xDC", "divss xmm11, xmm12");
}



#[test]
fn divss530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xD1", "divss xmm2, xmm1");
}



#[test]
fn divss531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xC2", "divss xmm0, xmm2");
}



#[test]
fn dmint532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dmint
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x39", "dmint");
}



#[test]
fn dppd533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm2, xmm11, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x41, 0xD3, 0x25", "dppd xmm2, xmm11, 37");
}



#[test]
fn dppd534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, xmm2, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0xFA, 0x3B", "dppd xmm15, xmm2, 59");
}



#[test]
fn dppd535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, xmm15, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x41, 0xFF, 0x23", "dppd xmm15, xmm15, 35");
}



#[test]
fn dppd536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm12, xmm4, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0xE4, 0x69", "dppd xmm12, xmm4, 105");
}



#[test]
fn dppd537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm0, xmm3, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xC3, 0x24", "dppd xmm0, xmm3, 36");
}



#[test]
fn dpps538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm11, xmm4, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xDC, 0x62", "dpps xmm11, xmm4, 98");
}



#[test]
fn dpps539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm3, xmm0, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xD8, 0x03", "dpps xmm3, xmm0, 3");
}



#[test]
fn dpps540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, xmm1, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xE1, 0x2B", "dpps xmm4, xmm1, 43");
}



#[test]
fn dpps541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm15, xmm3, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xFB, 0x79", "dpps xmm15, xmm3, 121");
}



#[test]
fn dpps542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm0, xmm4, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xC4, 0x0B", "dpps xmm0, xmm4, 11");
}



#[test]
fn emms543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; emms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x77", "emms");
}



#[test]
fn enter544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 9678, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xCE, 0x25, 0x4F", "enter 9678, 79");
}



#[test]
fn enter545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 10020, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x24, 0x27, 0x30", "enter 10020, 48");
}



#[test]
fn enter546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 6591, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xBF, 0x19, 0x14", "enter 6591, 20");
}



#[test]
fn enter547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 3885, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x2D, 0x0F, 0x5D", "enter 3885, 93");
}



#[test]
fn enter548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 12866, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x42, 0x32, 0x3E", "enter 12866, 62");
}



#[test]
fn extractps549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm2, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x10, 0x79", "extractps DWORD [rax], xmm2, 121");
}



#[test]
fn extractps550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm0, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x00, 0x6C", "extractps DWORD [rax], xmm0, 108");
}



#[test]
fn extractps551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm1, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0xC8, 0x2E", "extractps eax, xmm1, 46");
}



#[test]
fn extractps552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm11, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0xD8, 0x6A", "extractps eax, xmm11, 106");
}



#[test]
fn extractps553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm15, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x38, 0x22", "extractps DWORD [rax], xmm15, 34");
}



#[test]
fn extrq554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x79, 0xE4", "extrq xmm4, xmm12");
}



#[test]
fn extrq555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x79, 0xE2", "extrq xmm12, xmm2");
}



#[test]
fn extrq556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x79, 0xE7", "extrq xmm12, xmm15");
}



#[test]
fn extrq557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xCB", "extrq xmm1, xmm3");
}



#[test]
fn extrq558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x79, 0xDB", "extrq xmm3, xmm11");
}



#[test]
fn extrq559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, 14, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC4, 0x0E, 0x69", "extrq xmm12, 14, 105");
}



#[test]
fn extrq560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, 60, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC4, 0x3C, 0x6A", "extrq xmm12, 60, 106");
}



#[test]
fn extrq561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm3, 38, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC3, 0x26, 0x41", "extrq xmm3, 38, 65");
}



#[test]
fn extrq562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, 59, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC4, 0x3B, 0x60", "extrq xmm12, 59, 96");
}



#[test]
fn extrq563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, 58, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC4, 0x3A, 0x10", "extrq xmm12, 58, 16");
}



#[test]
fn f2xm1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; f2xm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF0", "f2xm1");
}



#[test]
fn fabs565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fabs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE1", "fabs");
}



#[test]
fn fadd566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC3", "fadd st0, st3");
}



#[test]
fn fadd577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC5", "fadd st0, st5");
}



#[test]
fn fadd578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC5", "fadd st0, st5");
}



#[test]
fn fadd579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC6", "fadd st0, st6");
}



#[test]
fn fadd580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC1", "fadd st0, st1");
}



#[test]
fn fadd581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC1", "fadd st1");
}



#[test]
fn fadd582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC4", "fadd st4");
}



#[test]
fn fadd583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC1", "fadd st1");
}



#[test]
fn fadd584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC3", "fadd st3");
}



#[test]
fn fadd585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC7", "fadd st7");
}



#[test]
fn fadd586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "fadd");
}



#[test]
fn fadd587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC4", "fadd st4, st0");
}



#[test]
fn fadd588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC2", "fadd st2, st0");
}



#[test]
fn fadd589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC5", "fadd st5, st0");
}



#[test]
fn fadd590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC5", "fadd st5, st0");
}



#[test]
fn fadd591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC6", "fadd st6, st0");
}



#[test]
fn fadd592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC6", "fadd st6, st0");
}



#[test]
fn fadd593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC7", "fadd st7, st0");
}



#[test]
fn fadd594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC1", "fadd st1, st0");
}



#[test]
fn fadd595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC6", "fadd st6, st0");
}



#[test]
fn fadd596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC3", "fadd st3, st0");
}



#[test]
fn faddp597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC4", "faddp st4, st0");
}



#[test]
fn faddp598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC5", "faddp st5, st0");
}



#[test]
fn faddp599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC6", "faddp st6, st0");
}



#[test]
fn faddp600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC6", "faddp st6, st0");
}



#[test]
fn faddp601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC5", "faddp st5, st0");
}



#[test]
fn faddp602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC7", "faddp st7");
}



#[test]
fn faddp603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC3", "faddp st3");
}



#[test]
fn faddp604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "faddp st1");
}



#[test]
fn faddp605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC2", "faddp st2");
}



#[test]
fn faddp606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "faddp st1");
}



#[test]
fn faddp607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "faddp");
}



#[test]
fn fbld608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbstp613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fchs618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fchs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE0", "fchs");
}



#[test]
fn fclex619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fclex
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE2", "fclex");
}



#[test]
fn fcmovb620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb");
}



#[test]
fn fcmovb621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb st1");
}



#[test]
fn fcmovb622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC2", "fcmovb st2");
}



#[test]
fn fcmovb623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC2", "fcmovb st2");
}



#[test]
fn fcmovb624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC2", "fcmovb st2");
}



#[test]
fn fcmovb625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC6", "fcmovb st6");
}



#[test]
fn fcmovb626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb st0, st1");
}



#[test]
fn fcmovb627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC5", "fcmovb st0, st5");
}



#[test]
fn fcmovb628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC7", "fcmovb st0, st7");
}



#[test]
fn fcmovb629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC4", "fcmovb st0, st4");
}



#[test]
fn fcmovb630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC4", "fcmovb st0, st4");
}



#[test]
fn fcmovbe631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD5", "fcmovbe st0, st5");
}



#[test]
fn fcmovbe632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD6", "fcmovbe st0, st6");
}



#[test]
fn fcmovbe633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD7", "fcmovbe st0, st7");
}



#[test]
fn fcmovbe634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD3", "fcmovbe st0, st3");
}



#[test]
fn fcmovbe635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD5", "fcmovbe st0, st5");
}



#[test]
fn fcmovbe636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD1", "fcmovbe");
}



#[test]
fn fcmovbe637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD1", "fcmovbe st1");
}



#[test]
fn fcmovbe638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD4", "fcmovbe st4");
}



#[test]
fn fcmovbe639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD2", "fcmovbe st2");
}



#[test]
fn fcmovbe640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD4", "fcmovbe st4");
}



#[test]
fn fcmovbe641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD7", "fcmovbe st7");
}



#[test]
fn fcmove642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC9", "fcmove st1");
}



#[test]
fn fcmove643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCA", "fcmove st2");
}



#[test]
fn fcmove644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCF", "fcmove st7");
}



#[test]
fn fcmove645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCB", "fcmove st3");
}



#[test]
fn fcmove646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCB", "fcmove st3");
}



#[test]
fn fcmove647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC9", "fcmove");
}



#[test]
fn fcmove648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC9", "fcmove st0, st1");
}



#[test]
fn fcmove649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCD", "fcmove st0, st5");
}



#[test]
fn fcmove650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC9", "fcmove st0, st1");
}



#[test]
fn fcmove651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCC", "fcmove st0, st4");
}



#[test]
fn fcmove652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCD", "fcmove st0, st5");
}



#[test]
fn fcmovnb653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC3", "fcmovnb st3");
}



#[test]
fn fcmovnb654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC1", "fcmovnb st1");
}



#[test]
fn fcmovnb655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC7", "fcmovnb st7");
}



#[test]
fn fcmovnb656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC2", "fcmovnb st2");
}



#[test]
fn fcmovnb657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC6", "fcmovnb st6");
}



#[test]
fn fcmovnb658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC1", "fcmovnb");
}



#[test]
fn fcmovnb659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC4", "fcmovnb st0, st4");
}



#[test]
fn fcmovnb660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC3", "fcmovnb st0, st3");
}



#[test]
fn fcmovnb661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC4", "fcmovnb st0, st4");
}



#[test]
fn fcmovnb662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC6", "fcmovnb st0, st6");
}



#[test]
fn fcmovnb663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC1", "fcmovnb st0, st1");
}



#[test]
fn fcmovnbe664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD1", "fcmovnbe st0, st1");
}



#[test]
fn fcmovnbe665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD5", "fcmovnbe st0, st5");
}



#[test]
fn fcmovnbe666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD3", "fcmovnbe st0, st3");
}



#[test]
fn fcmovnbe667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD5", "fcmovnbe st0, st5");
}



#[test]
fn fcmovnbe668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD2", "fcmovnbe st0, st2");
}



#[test]
fn fcmovnbe669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD2", "fcmovnbe st2");
}



#[test]
fn fcmovnbe670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD6", "fcmovnbe st6");
}



#[test]
fn fcmovnbe671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD3", "fcmovnbe st3");
}



#[test]
fn fcmovnbe672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD4", "fcmovnbe st4");
}



#[test]
fn fcmovnbe673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD4", "fcmovnbe st4");
}



#[test]
fn fcmovnbe674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD1", "fcmovnbe");
}



#[test]
fn fcmovne675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCE", "fcmovne st6");
}



#[test]
fn fcmovne676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCF", "fcmovne st7");
}



#[test]
fn fcmovne677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC9", "fcmovne st1");
}



#[test]
fn fcmovne678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCA", "fcmovne st2");
}



#[test]
fn fcmovne679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCA", "fcmovne st2");
}



#[test]
fn fcmovne680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC9", "fcmovne");
}



#[test]
fn fcmovne681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCF", "fcmovne st0, st7");
}



#[test]
fn fcmovne682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCB", "fcmovne st0, st3");
}



#[test]
fn fcmovne683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCE", "fcmovne st0, st6");
}



#[test]
fn fcmovne684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC9", "fcmovne st0, st1");
}



#[test]
fn fcmovne685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCA", "fcmovne st0, st2");
}



#[test]
fn fcmovnu686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD9", "fcmovnu");
}



#[test]
fn fcmovnu687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDE", "fcmovnu st0, st6");
}



#[test]
fn fcmovnu688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDF", "fcmovnu st0, st7");
}



#[test]
fn fcmovnu689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDA", "fcmovnu st0, st2");
}



#[test]
fn fcmovnu690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDD", "fcmovnu st0, st5");
}



#[test]
fn fcmovnu691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDB", "fcmovnu st0, st3");
}



#[test]
fn fcmovnu692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDE", "fcmovnu st6");
}



#[test]
fn fcmovnu693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDB", "fcmovnu st3");
}



#[test]
fn fcmovnu694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDC", "fcmovnu st4");
}



#[test]
fn fcmovnu695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDF", "fcmovnu st7");
}



#[test]
fn fcmovnu696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDD", "fcmovnu st5");
}



#[test]
fn fcmovu697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDD", "fcmovu st5");
}



#[test]
fn fcmovu698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDD", "fcmovu st5");
}



#[test]
fn fcmovu699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDF", "fcmovu st7");
}



#[test]
fn fcmovu700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDB", "fcmovu st3");
}



#[test]
fn fcmovu701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDA", "fcmovu st2");
}



#[test]
fn fcmovu702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDC", "fcmovu st0, st4");
}



#[test]
fn fcmovu703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDB", "fcmovu st0, st3");
}



#[test]
fn fcmovu704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDA", "fcmovu st0, st2");
}



#[test]
fn fcmovu705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDC", "fcmovu st0, st4");
}



#[test]
fn fcmovu706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD9", "fcmovu st0, st1");
}



#[test]
fn fcmovu707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD9", "fcmovu");
}



#[test]
fn fcom708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD1", "fcom");
}



#[test]
fn fcom714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD2", "fcom st2");
}



#[test]
fn fcom720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD4", "fcom st4");
}



#[test]
fn fcom721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD4", "fcom st4");
}



#[test]
fn fcom722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD2", "fcom st2");
}



#[test]
fn fcom723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD7", "fcom st7");
}



#[test]
fn fcom724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD5", "fcom st0, st5");
}



#[test]
fn fcom725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD3", "fcom st0, st3");
}



#[test]
fn fcom726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD3", "fcom st0, st3");
}



#[test]
fn fcom727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD1", "fcom st0, st1");
}



#[test]
fn fcom728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD5", "fcom st0, st5");
}



#[test]
fn fcomi729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF1", "fcomi");
}



#[test]
fn fcomi730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF3", "fcomi st3");
}



#[test]
fn fcomi731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF7", "fcomi st7");
}



#[test]
fn fcomi732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF1", "fcomi st1");
}



#[test]
fn fcomi733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF2", "fcomi st2");
}



#[test]
fn fcomi734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF7", "fcomi st7");
}



#[test]
fn fcomi735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF2", "fcomi st0, st2");
}



#[test]
fn fcomi736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF4", "fcomi st0, st4");
}



#[test]
fn fcomi737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF7", "fcomi st0, st7");
}



#[test]
fn fcomi738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF2", "fcomi st0, st2");
}



#[test]
fn fcomi739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF1", "fcomi st0, st1");
}



#[test]
fn fcomip740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip st1");
}



#[test]
fn fcomip741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF2", "fcomip st2");
}



#[test]
fn fcomip742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip st1");
}



#[test]
fn fcomip743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF4", "fcomip st4");
}



#[test]
fn fcomip744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF3", "fcomip st3");
}



#[test]
fn fcomip745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip");
}



#[test]
fn fcomip746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip st0, st1");
}



#[test]
fn fcomip747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF6", "fcomip st0, st6");
}



#[test]
fn fcomip748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF7", "fcomip st0, st7");
}



#[test]
fn fcomip749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip st0, st1");
}



#[test]
fn fcomip750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF2", "fcomip st0, st2");
}



#[test]
fn fcomp751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDB", "fcomp st3");
}



#[test]
fn fcomp757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDF", "fcomp st7");
}



#[test]
fn fcomp758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDC", "fcomp st4");
}



#[test]
fn fcomp759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDB", "fcomp st3");
}



#[test]
fn fcomp760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD9", "fcomp st1");
}



#[test]
fn fcomp761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD9", "fcomp");
}



#[test]
fn fcomp767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDB", "fcomp st0, st3");
}



#[test]
fn fcomp768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDC", "fcomp st0, st4");
}



#[test]
fn fcomp769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDF", "fcomp st0, st7");
}



#[test]
fn fcomp770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDF", "fcomp st0, st7");
}



#[test]
fn fcomp771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD9", "fcomp st0, st1");
}



#[test]
fn fcompp772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcompp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xD9", "fcompp");
}



#[test]
fn fcos773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcos
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFF", "fcos");
}



#[test]
fn fdecstp774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdecstp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF6", "fdecstp");
}



#[test]
fn fdisi775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdisi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE1", "fdisi");
}



#[test]
fn fdiv776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFB", "fdiv st3, st0");
}



#[test]
fn fdiv777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF9", "fdiv st1, st0");
}



#[test]
fn fdiv778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFC", "fdiv st4, st0");
}



#[test]
fn fdiv779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFC", "fdiv st4, st0");
}



#[test]
fn fdiv780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFB", "fdiv st3, st0");
}



#[test]
fn fdiv781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF9", "fdiv st1, st0");
}



#[test]
fn fdiv792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFE", "fdiv st6, st0");
}



#[test]
fn fdiv793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFB", "fdiv st3, st0");
}



#[test]
fn fdiv794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFA", "fdiv st2, st0");
}



#[test]
fn fdiv795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFB", "fdiv st3, st0");
}



#[test]
fn fdiv796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdiv");
}



#[test]
fn fdiv797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF4", "fdiv st4");
}



#[test]
fn fdiv798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF4", "fdiv st4");
}



#[test]
fn fdiv799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF4", "fdiv st4");
}



#[test]
fn fdiv800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF7", "fdiv st7");
}



#[test]
fn fdiv801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF5", "fdiv st5");
}



#[test]
fn fdiv802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF2", "fdiv st0, st2");
}



#[test]
fn fdiv803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF4", "fdiv st0, st4");
}



#[test]
fn fdiv804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF1", "fdiv st0, st1");
}



#[test]
fn fdiv805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF6", "fdiv st0, st6");
}



#[test]
fn fdiv806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF7", "fdiv st0, st7");
}



#[test]
fn fdivp807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFE", "fdivp st6, st0");
}



#[test]
fn fdivp808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFD", "fdivp st5, st0");
}



#[test]
fn fdivp809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFA", "fdivp st2, st0");
}



#[test]
fn fdivp810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdivp st1, st0");
}



#[test]
fn fdivp811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFE", "fdivp st6, st0");
}



#[test]
fn fdivp812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdivp");
}



#[test]
fn fdivp813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdivp st1");
}



#[test]
fn fdivp814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFC", "fdivp st4");
}



#[test]
fn fdivp815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdivp st1");
}



#[test]
fn fdivp816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFF", "fdivp st7");
}



#[test]
fn fdivp817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFE", "fdivp st6");
}



#[test]
fn fdivr818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFA", "fdivr st0, st2");
}



#[test]
fn fdivr819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFA", "fdivr st0, st2");
}



#[test]
fn fdivr820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFD", "fdivr st0, st5");
}



#[test]
fn fdivr821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFE", "fdivr st0, st6");
}



#[test]
fn fdivr822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFA", "fdivr st0, st2");
}



#[test]
fn fdivr823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF1", "fdivr st1, st0");
}



#[test]
fn fdivr824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF5", "fdivr st5, st0");
}



#[test]
fn fdivr825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF2", "fdivr st2, st0");
}



#[test]
fn fdivr826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF4", "fdivr st4, st0");
}



#[test]
fn fdivr827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF2", "fdivr st2, st0");
}



#[test]
fn fdivr828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFA", "fdivr st2");
}



#[test]
fn fdivr829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFC", "fdivr st4");
}



#[test]
fn fdivr830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFE", "fdivr st6");
}



#[test]
fn fdivr831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFF", "fdivr st7");
}



#[test]
fn fdivr832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFA", "fdivr st2");
}



#[test]
fn fdivr833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF1", "fdivr st1, st0");
}



#[test]
fn fdivr834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF7", "fdivr st7, st0");
}



#[test]
fn fdivr835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF6", "fdivr st6, st0");
}



#[test]
fn fdivr836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF3", "fdivr st3, st0");
}



#[test]
fn fdivr837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF1", "fdivr st1, st0");
}



#[test]
fn fdivr838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF1", "fdivr");
}



#[test]
fn fdivr844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivrp849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF6", "fdivrp st6, st0");
}



#[test]
fn fdivrp850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF2", "fdivrp st2, st0");
}



#[test]
fn fdivrp851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF3", "fdivrp st3, st0");
}



#[test]
fn fdivrp852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF2", "fdivrp st2, st0");
}



#[test]
fn fdivrp853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF4", "fdivrp st4, st0");
}



#[test]
fn fdivrp854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF1", "fdivrp");
}



#[test]
fn fdivrp855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF7", "fdivrp st7");
}



#[test]
fn fdivrp856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF6", "fdivrp st6");
}



#[test]
fn fdivrp857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF7", "fdivrp st7");
}



#[test]
fn fdivrp858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF7", "fdivrp st7");
}



#[test]
fn fdivrp859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF3", "fdivrp st3");
}



#[test]
fn femms860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; femms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0E", "femms");
}



#[test]
fn feni861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; feni
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE0", "feni");
}



#[test]
fn ffree862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC3", "ffree st3");
}



#[test]
fn ffree863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC2", "ffree st2");
}



#[test]
fn ffree864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC4", "ffree st4");
}



#[test]
fn ffree865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC3", "ffree st3");
}



#[test]
fn ffree866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC5", "ffree st5");
}



#[test]
fn ffree867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC1", "ffree");
}



#[test]
fn fiadd868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn ficom878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficomp888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn fidiv898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidivr908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fild918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fimul933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fincstp943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fincstp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF7", "fincstp");
}



#[test]
fn finit944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; finit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE3", "finit");
}



#[test]
fn fist945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fistp955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fisttp970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisub985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisubr995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr1000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr1001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr1002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr1003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr1004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fld1005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC1", "fld");
}



#[test]
fn fld1006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC5", "fld st5");
}



#[test]
fn fld1022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC7", "fld st7");
}



#[test]
fn fld1023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC4", "fld st4");
}



#[test]
fn fld1024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC1", "fld st1");
}



#[test]
fn fld1025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC5", "fld st5");
}



#[test]
fn fld11026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE8", "fld1");
}



#[test]
fn fldcw1027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldenv1032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldl2e1037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldl2e
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEA", "fldl2e");
}



#[test]
fn fldl2t1038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldl2t
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE9", "fldl2t");
}



#[test]
fn fldlg21039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldlg2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEC", "fldlg2");
}



#[test]
fn fldln21040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldln2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xED", "fldln2");
}



#[test]
fn fldpi1041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldpi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEB", "fldpi");
}



#[test]
fn fldz1042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldz
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEE", "fldz");
}



#[test]
fn fmul1043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCF", "fmul st7");
}



#[test]
fn fmul1049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCA", "fmul st2");
}



#[test]
fn fmul1050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCA", "fmul st2");
}



#[test]
fn fmul1051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCD", "fmul st5");
}



#[test]
fn fmul1052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCE", "fmul st6");
}



#[test]
fn fmul1053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmul");
}



#[test]
fn fmul1054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCB", "fmul st3, st0");
}



#[test]
fn fmul1055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCD", "fmul st5, st0");
}



#[test]
fn fmul1056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCA", "fmul st2, st0");
}



#[test]
fn fmul1057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCD", "fmul st5, st0");
}



#[test]
fn fmul1058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCE", "fmul st6, st0");
}



#[test]
fn fmul1059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCB", "fmul st0, st3");
}



#[test]
fn fmul1060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC9", "fmul st0, st1");
}



#[test]
fn fmul1061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCB", "fmul st0, st3");
}



#[test]
fn fmul1062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCB", "fmul st0, st3");
}



#[test]
fn fmul1063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCF", "fmul st0, st7");
}



#[test]
fn fmul1064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCA", "fmul st2, st0");
}



#[test]
fn fmul1070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCF", "fmul st7, st0");
}



#[test]
fn fmul1071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCA", "fmul st2, st0");
}



#[test]
fn fmul1072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCE", "fmul st6, st0");
}



#[test]
fn fmul1073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCE", "fmul st6, st0");
}



#[test]
fn fmulp1074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp");
}



#[test]
fn fmulp1075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCF", "fmulp st7");
}



#[test]
fn fmulp1076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCD", "fmulp st5");
}



#[test]
fn fmulp1077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp st1");
}



#[test]
fn fmulp1078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCF", "fmulp st7");
}



#[test]
fn fmulp1079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCA", "fmulp st2");
}



#[test]
fn fmulp1080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCC", "fmulp st4, st0");
}



#[test]
fn fmulp1081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp st1, st0");
}



#[test]
fn fmulp1082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCA", "fmulp st2, st0");
}



#[test]
fn fmulp1083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCF", "fmulp st7, st0");
}



#[test]
fn fmulp1084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCB", "fmulp st3, st0");
}



#[test]
fn fnclex1085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnclex
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE2", "fnclex");
}



#[test]
fn fndisi1086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fndisi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE1", "fndisi");
}



#[test]
fn fneni1087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fneni
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE0", "fneni");
}



#[test]
fn fninit1088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fninit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE3", "fninit");
}



#[test]
fn fnop1089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xD0", "fnop");
}



#[test]
fn fnsave1090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnstcw1095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstenv1100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstsw1105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fpatan1115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fpatan
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF3", "fpatan");
}



#[test]
fn fprem1116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fprem
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF8", "fprem");
}



#[test]
fn fprem11117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fprem1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF5", "fprem1");
}



#[test]
fn fptan1118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fptan
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF2", "fptan");
}



#[test]
fn frndint1119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frndint
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFC", "frndint");
}



#[test]
fn frstor1120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn fsave1125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fscale1130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fscale
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFD", "fscale");
}



#[test]
fn fsetpm1131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsetpm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE4", "fsetpm");
}



#[test]
fn fsin1132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsin
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFE", "fsin");
}



#[test]
fn fsincos1133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsincos
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFB", "fsincos");
}



#[test]
fn fsqrt1134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsqrt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFA", "fsqrt");
}



#[test]
fn fst1135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD1", "fst");
}



#[test]
fn fst1136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD3", "fst st3");
}



#[test]
fn fst1137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD3", "fst st3");
}



#[test]
fn fst1138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD2", "fst st2");
}



#[test]
fn fst1139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD3", "fst st3");
}



#[test]
fn fst1140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD7", "fst st7");
}



#[test]
fn fst1141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fstcw1151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstenv1156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstp1161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD9", "fstp");
}



#[test]
fn fstp1162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDF", "fstp st7");
}



#[test]
fn fstp1178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDC", "fstp st4");
}



#[test]
fn fstp1179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD9", "fstp st1");
}



#[test]
fn fstp1180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDF", "fstp st7");
}



#[test]
fn fstp1181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDC", "fstp st4");
}



#[test]
fn fstsw1182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fsub1192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEF", "fsub st7, st0");
}



#[test]
fn fsub1193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE9", "fsub st1, st0");
}



#[test]
fn fsub1194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEB", "fsub st3, st0");
}



#[test]
fn fsub1195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xED", "fsub st5, st0");
}



#[test]
fn fsub1196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEB", "fsub st3, st0");
}



#[test]
fn fsub1197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE7", "fsub st0, st7");
}



#[test]
fn fsub1203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE5", "fsub st0, st5");
}



#[test]
fn fsub1204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE1", "fsub st0, st1");
}



#[test]
fn fsub1205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE1", "fsub st0, st1");
}



#[test]
fn fsub1206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE7", "fsub st0, st7");
}



#[test]
fn fsub1207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEA", "fsub st2, st0");
}



#[test]
fn fsub1208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEF", "fsub st7, st0");
}



#[test]
fn fsub1209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEE", "fsub st6, st0");
}



#[test]
fn fsub1210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEE", "fsub st6, st0");
}



#[test]
fn fsub1211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEB", "fsub st3, st0");
}



#[test]
fn fsub1212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE9", "fsub");
}



#[test]
fn fsub1218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE2", "fsub st2");
}



#[test]
fn fsub1219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE7", "fsub st7");
}



#[test]
fn fsub1220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE4", "fsub st4");
}



#[test]
fn fsub1221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE4", "fsub st4");
}



#[test]
fn fsub1222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE7", "fsub st7");
}



#[test]
fn fsubp1223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE9", "fsubp st1, st0");
}



#[test]
fn fsubp1224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEE", "fsubp st6, st0");
}



#[test]
fn fsubp1225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEF", "fsubp st7, st0");
}



#[test]
fn fsubp1226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEF", "fsubp st7, st0");
}



#[test]
fn fsubp1227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEC", "fsubp st4, st0");
}



#[test]
fn fsubp1228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE9", "fsubp");
}



#[test]
fn fsubp1229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEE", "fsubp st6");
}



#[test]
fn fsubp1230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEE", "fsubp st6");
}



#[test]
fn fsubp1231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEB", "fsubp st3");
}



#[test]
fn fsubp1232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEB", "fsubp st3");
}



#[test]
fn fsubp1233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEE", "fsubp st6");
}



#[test]
fn fsubr1234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEA", "fsubr st0, st2");
}



#[test]
fn fsubr1235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE9", "fsubr st0, st1");
}



#[test]
fn fsubr1236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEA", "fsubr st0, st2");
}



#[test]
fn fsubr1237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEF", "fsubr st0, st7");
}



#[test]
fn fsubr1238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEC", "fsubr st0, st4");
}



#[test]
fn fsubr1239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE5", "fsubr st5, st0");
}



#[test]
fn fsubr1245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE2", "fsubr st2, st0");
}



#[test]
fn fsubr1246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE7", "fsubr st7, st0");
}



#[test]
fn fsubr1247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE1", "fsubr st1, st0");
}



#[test]
fn fsubr1248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE5", "fsubr st5, st0");
}



#[test]
fn fsubr1249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE1", "fsubr");
}



#[test]
fn fsubr1255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEC", "fsubr st4");
}



#[test]
fn fsubr1256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEA", "fsubr st2");
}



#[test]
fn fsubr1257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEC", "fsubr st4");
}



#[test]
fn fsubr1258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEE", "fsubr st6");
}



#[test]
fn fsubr1259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEF", "fsubr st7");
}



#[test]
fn fsubr1260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE7", "fsubr st7, st0");
}



#[test]
fn fsubr1261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE3", "fsubr st3, st0");
}



#[test]
fn fsubr1262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE7", "fsubr st7, st0");
}



#[test]
fn fsubr1263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE3", "fsubr st3, st0");
}



#[test]
fn fsubr1264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE2", "fsubr st2, st0");
}



#[test]
fn fsubrp1265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE1", "fsubrp");
}



#[test]
fn fsubrp1266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE7", "fsubrp st7");
}



#[test]
fn fsubrp1267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE5", "fsubrp st5");
}



#[test]
fn fsubrp1268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE4", "fsubrp st4");
}



#[test]
fn fsubrp1269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE5", "fsubrp st5");
}



#[test]
fn fsubrp1270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE5", "fsubrp st5");
}



#[test]
fn fsubrp1271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE2", "fsubrp st2, st0");
}



#[test]
fn fsubrp1272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE6", "fsubrp st6, st0");
}



#[test]
fn fsubrp1273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE3", "fsubrp st3, st0");
}



#[test]
fn fsubrp1274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE1", "fsubrp st1, st0");
}



#[test]
fn fsubrp1275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE3", "fsubrp st3, st0");
}



#[test]
fn ftst1276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ftst
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE4", "ftst");
}



#[test]
fn fucom1277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE1", "fucom");
}



#[test]
fn fucom1278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE4", "fucom st4");
}



#[test]
fn fucom1279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE6", "fucom st6");
}



#[test]
fn fucom1280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE4", "fucom st4");
}



#[test]
fn fucom1281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE7", "fucom st7");
}



#[test]
fn fucom1282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE7", "fucom st7");
}



#[test]
fn fucom1283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE2", "fucom st0, st2");
}



#[test]
fn fucom1284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE7", "fucom st0, st7");
}



#[test]
fn fucom1285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE4", "fucom st0, st4");
}



#[test]
fn fucom1286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE4", "fucom st0, st4");
}



#[test]
fn fucom1287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE6", "fucom st0, st6");
}



#[test]
fn fucomi1288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEA", "fucomi st0, st2");
}



#[test]
fn fucomi1289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEA", "fucomi st0, st2");
}



#[test]
fn fucomi1290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEE", "fucomi st0, st6");
}



#[test]
fn fucomi1291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xED", "fucomi st0, st5");
}



#[test]
fn fucomi1292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE9", "fucomi st0, st1");
}



#[test]
fn fucomi1293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE9", "fucomi");
}



#[test]
fn fucomi1294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEC", "fucomi st4");
}



#[test]
fn fucomi1295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEA", "fucomi st2");
}



#[test]
fn fucomi1296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEC", "fucomi st4");
}



#[test]
fn fucomi1297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEB", "fucomi st3");
}



#[test]
fn fucomi1298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xED", "fucomi st5");
}



#[test]
fn fucomip1299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEF", "fucomip st7");
}



#[test]
fn fucomip1300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xED", "fucomip st5");
}



#[test]
fn fucomip1301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEC", "fucomip st4");
}



#[test]
fn fucomip1302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEA", "fucomip st2");
}



#[test]
fn fucomip1303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEB", "fucomip st3");
}



#[test]
fn fucomip1304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xED", "fucomip st0, st5");
}



#[test]
fn fucomip1305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEC", "fucomip st0, st4");
}



#[test]
fn fucomip1306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEB", "fucomip st0, st3");
}



#[test]
fn fucomip1307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEF", "fucomip st0, st7");
}



#[test]
fn fucomip1308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEB", "fucomip st0, st3");
}



#[test]
fn fucomip1309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE9", "fucomip");
}



#[test]
fn fucomp1310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEF", "fucomp st0, st7");
}



#[test]
fn fucomp1311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEA", "fucomp st0, st2");
}



#[test]
fn fucomp1312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEC", "fucomp st0, st4");
}



#[test]
fn fucomp1313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEC", "fucomp st0, st4");
}



#[test]
fn fucomp1314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEA", "fucomp st0, st2");
}



#[test]
fn fucomp1315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE9", "fucomp");
}



#[test]
fn fucomp1316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEB", "fucomp st3");
}



#[test]
fn fucomp1317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEA", "fucomp st2");
}



#[test]
fn fucomp1318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEF", "fucomp st7");
}



#[test]
fn fucomp1319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE9", "fucomp st1");
}



#[test]
fn fucomp1320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEE", "fucomp st6");
}



#[test]
fn fucompp1321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucompp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xE9", "fucompp");
}



#[test]
fn fwait1322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B", "fwait");
}



#[test]
fn fxam1323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxam
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE5", "fxam");
}



#[test]
fn fxch1324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch st1, st0");
}



#[test]
fn fxch1325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCB", "fxch st3, st0");
}



#[test]
fn fxch1326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st6, st0");
}



#[test]
fn fxch1327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st6, st0");
}



#[test]
fn fxch1328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st6, st0");
}



#[test]
fn fxch1329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCC", "fxch st0, st4");
}



#[test]
fn fxch1330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch st0, st1");
}



#[test]
fn fxch1331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCA", "fxch st0, st2");
}



#[test]
fn fxch1332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCC", "fxch st0, st4");
}



#[test]
fn fxch1333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st0, st6");
}



#[test]
fn fxch1334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch");
}



#[test]
fn fxch1335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCB", "fxch st3");
}



#[test]
fn fxch1336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st6");
}



#[test]
fn fxch1337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCA", "fxch st2");
}



#[test]
fn fxch1338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCF", "fxch st7");
}



#[test]
fn fxch1339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch st1");
}



#[test]
fn fxrstor1340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor641345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxsave1350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave641355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxtract1360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxtract
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF4", "fxtract");
}



#[test]
fn fyl2x1361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fyl2x
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF1", "fyl2x");
}



#[test]
fn fyl2xp11362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fyl2xp1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF9", "fyl2xp1");
}



#[test]
fn getsec1363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; getsec
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37", "getsec");
}



#[test]
fn haddpd1364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0x22", "haddpd xmm4, OWORD [rdx]");
}



#[test]
fn haddpd1365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7C, 0xD3", "haddpd xmm2, xmm11");
}



#[test]
fn haddpd1366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7C, 0xD7", "haddpd xmm2, xmm15");
}



#[test]
fn haddpd1367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7C, 0xE7", "haddpd xmm12, xmm15");
}



#[test]
fn haddpd1368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0x20", "haddpd xmm4, OWORD [rax]");
}



#[test]
fn haddps1369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xD8", "haddps xmm3, xmm0");
}



#[test]
fn haddps1370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7C, 0xC4", "haddps xmm0, xmm12");
}



#[test]
fn haddps1371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xCB", "haddps xmm1, xmm3");
}



#[test]
fn haddps1372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xD1", "haddps xmm2, xmm1");
}



#[test]
fn haddps1373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7C, 0xD7", "haddps xmm2, xmm15");
}



#[test]
fn hlt1374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hlt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF4", "hlt");
}



#[test]
fn hsubpd1375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0x0A", "hsubpd xmm1, OWORD [rdx]");
}



#[test]
fn hsubpd1376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0x22", "hsubpd xmm4, OWORD [rdx]");
}



#[test]
fn hsubpd1377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7D, 0xDC", "hsubpd xmm11, xmm12");
}



#[test]
fn hsubpd1378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7D, 0xD4", "hsubpd xmm2, xmm12");
}



#[test]
fn hsubpd1379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7D, 0xE3", "hsubpd xmm4, xmm11");
}



#[test]
fn hsubps1380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0x3A", "hsubps xmm15, OWORD [rdx]");
}



#[test]
fn hsubps1381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0xF8", "hsubps xmm15, xmm0");
}



#[test]
fn hsubps1382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0xFA", "hsubps xmm15, xmm2");
}



#[test]
fn hsubps1383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x7D, 0xFC", "hsubps xmm15, xmm12");
}



#[test]
fn hsubps1384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0x02", "hsubps xmm0, OWORD [rdx]");
}



#[test]
fn icebp1385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; icebp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "icebp");
}



#[test]
fn idiv1386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF8", "idiv al");
}



#[test]
fn idiv1391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn idiv1392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn idiv1393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn idiv1394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn idiv1395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn inc1396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC1", "inc rcx");
}



#[test]
fn inc1397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC0", "inc rax");
}



#[test]
fn inc1398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC1", "inc rcx");
}



#[test]
fn inc1399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC2", "inc rdx");
}



#[test]
fn inc1400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC3", "inc rbx");
}



#[test]
fn inc1401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC0", "inc al");
}



#[test]
fn inc1402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC0", "inc al");
}



#[test]
fn inc1403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn inc1404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn inc1405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC1", "inc cl");
}



#[test]
fn inc1406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn insb1411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6C", "insb");
}



#[test]
fn insd1412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6D", "insd");
}



#[test]
fn insertps1413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, xmm4, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xFC, 0x00", "insertps xmm15, xmm4, 0");
}



#[test]
fn insertps1414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, xmm2, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xFA, 0x06", "insertps xmm15, xmm2, 6");
}



#[test]
fn insertps1415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm3, xmm2, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xDA, 0x6D", "insertps xmm3, xmm2, 109");
}



#[test]
fn insertps1416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, xmm2, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xDA, 0x7C", "insertps xmm11, xmm2, 124");
}



#[test]
fn insertps1417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm2, xmm1, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xD1, 0x47", "insertps xmm2, xmm1, 71");
}



#[test]
fn insertq1418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm12, 71, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x78, 0xFC, 0x47, 0x4F", "insertq xmm15, xmm12, 71, 79");
}



#[test]
fn insertq1419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm3, 2, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xE3, 0x02, 0x4F", "insertq xmm4, xmm3, 2, 79");
}



#[test]
fn insertq1420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm1, xmm11, 35, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x78, 0xCB, 0x23, 0x67", "insertq xmm1, xmm11, 35, 103");
}



#[test]
fn insertq1421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm4, 90, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xC4, 0x5A, 0x0E", "insertq xmm0, xmm4, 90, 14");
}



#[test]
fn insertq1422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm3, xmm12, 110, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x78, 0xDC, 0x6E, 0x15", "insertq xmm3, xmm12, 110, 21");
}



#[test]
fn insertq1423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x79, 0xDC", "insertq xmm11, xmm12");
}



#[test]
fn insertq1424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x79, 0xE0", "insertq xmm12, xmm0");
}



#[test]
fn insertq1425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xE1", "insertq xmm4, xmm1");
}



#[test]
fn insertq1426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xD8", "insertq xmm3, xmm0");
}



#[test]
fn insertq1427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x79, 0xF8", "insertq xmm15, xmm0");
}



#[test]
fn insw1428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6D", "insw");
}



#[test]
fn int1429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x30", "int 48");
}



#[test]
fn int1430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x48", "int 72");
}



#[test]
fn int1431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x6A", "int 106");
}



#[test]
fn int1432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x48", "int 72");
}



#[test]
fn int1433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x1A", "int 26");
}



#[test]
fn int011434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int01
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int01");
}



#[test]
fn int031435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int03
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int03");
}



#[test]
fn int11436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int1");
}



#[test]
fn int31437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int3");
}



#[test]
fn invd1438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x08", "invd");
}



#[test]
fn invept1439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x00", "invept rax, OWORD [rax]");
}



#[test]
fn invept1440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x00", "invept rax, OWORD [rax]");
}



#[test]
fn invept1441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x10", "invept rdx, OWORD [rax]");
}



#[test]
fn invept1442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x00", "invept rax, OWORD [rax]");
}



#[test]
fn invept1443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x10", "invept rdx, OWORD [rax]");
}



#[test]
fn invlpg1444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpga1449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga");
}



#[test]
fn invpcid1455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x08", "invpcid rcx, OWORD [rax]");
}



#[test]
fn invpcid1456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x08", "invpcid rcx, OWORD [rax]");
}



#[test]
fn invpcid1457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x00", "invpcid rax, OWORD [rax]");
}



#[test]
fn invpcid1458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x00", "invpcid rax, OWORD [rax]");
}



#[test]
fn invpcid1459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x10", "invpcid rdx, OWORD [rax]");
}



#[test]
fn invvpid1460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x08", "invvpid rcx, OWORD [rax]");
}



#[test]
fn invvpid1461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x00", "invvpid rax, OWORD [rax]");
}



#[test]
fn invvpid1462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x00", "invvpid rax, OWORD [rax]");
}



#[test]
fn invvpid1463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x10", "invvpid rdx, OWORD [rax]");
}



#[test]
fn invvpid1464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x00", "invvpid rax, OWORD [rax]");
}



#[test]
fn iret1465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iret");
}



#[test]
fn iretd1466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iretd");
}



#[test]
fn iretq1467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xCF", "iretq");
}



#[test]
fn iretw1468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xCF", "iretw");
}



#[test]
fn lahf1469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9F", "lahf");
}



#[test]
fn lar1470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x18", "lar rbx, WORD [rax]");
}



#[test]
fn lar1476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x18", "lar rbx, WORD [rax]");
}



#[test]
fn lar1477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x18", "lar rbx, WORD [rax]");
}



#[test]
fn lar1478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x08", "lar rcx, WORD [rax]");
}



#[test]
fn lar1479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x00", "lar rax, WORD [rax]");
}



#[test]
fn lddqu1480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x10", "lddqu xmm2, OWORD [rax]");
}



#[test]
fn lddqu1481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x00", "lddqu xmm0, OWORD [rax]");
}



#[test]
fn lddqu1482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x20", "lddqu xmm12, OWORD [rax]");
}



#[test]
fn lddqu1483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x18", "lddqu xmm3, OWORD [rax]");
}



#[test]
fn lddqu1484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x20", "lddqu xmm12, OWORD [rax]");
}



#[test]
fn ldmxcsr1485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn lea1490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x18", "lea rbx, [rax]");
}



#[test]
fn lea1491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x08", "lea rcx, [rax]");
}



#[test]
fn lea1492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x08", "lea rcx, [rax]");
}



#[test]
fn lea1493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x10", "lea rdx, [rax]");
}



#[test]
fn lea1494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x10", "lea rdx, [rax]");
}



#[test]
fn leave1495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; leave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC9", "leave");
}



#[test]
fn lfence1496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xE8", "lfence");
}



#[test]
fn lfs1497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x08", "lfs rcx, [rax]");
}



#[test]
fn lfs1498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn lfs1499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn lfs1500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x10", "lfs rdx, [rax]");
}



#[test]
fn lfs1501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn lgdt1502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgs1507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x08", "lgs rcx, [rax]");
}



#[test]
fn lgs1508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x18", "lgs rbx, [rax]");
}



#[test]
fn lgs1509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x18", "lgs rbx, [rax]");
}



#[test]
fn lgs1510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x10", "lgs rdx, [rax]");
}



#[test]
fn lgs1511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x00", "lgs rax, [rax]");
}



#[test]
fn lidt1512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lldt1517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lmsw1522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lodsb1527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAC", "lodsb");
}



#[test]
fn lodsd1528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAD", "lodsd");
}



#[test]
fn lodsq1529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAD", "lodsq");
}



#[test]
fn lodsw1530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAD", "lodsw");
}



#[test]
fn lsl1531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x08", "lsl rcx, WORD [rax]");
}



#[test]
fn lsl1532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x10", "lsl rdx, WORD [rax]");
}



#[test]
fn lsl1533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x10", "lsl rdx, WORD [rax]");
}



#[test]
fn lsl1534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x00", "lsl rax, WORD [rax]");
}



#[test]
fn lsl1535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x08", "lsl rcx, WORD [rax]");
}



#[test]
fn lsl1536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lss1541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x00", "lss rax, [rax]");
}



#[test]
fn lss1542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn lss1543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn lss1544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x10", "lss rdx, [rax]");
}



#[test]
fn lss1545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn ltr1546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn lzcnt1551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0x10", "lzcnt rdx, QWORD [rax]");
}



#[test]
fn lzcnt1552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0x00", "lzcnt rax, QWORD [rax]");
}



#[test]
fn lzcnt1553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0x00", "lzcnt rax, QWORD [rax]");
}



#[test]
fn lzcnt1554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xD1", "lzcnt rdx, rcx");
}



#[test]
fn lzcnt1555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xD1", "lzcnt rdx, rcx");
}



#[test]
fn maskmovdqu1556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xE3", "maskmovdqu xmm4, xmm3");
}



#[test]
fn maskmovdqu1557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xCA", "maskmovdqu xmm1, xmm2");
}



#[test]
fn maskmovdqu1558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF7, 0xE7", "maskmovdqu xmm4, xmm15");
}



#[test]
fn maskmovdqu1559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xE3", "maskmovdqu xmm12, xmm3");
}



#[test]
fn maskmovdqu1560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xFC", "maskmovdqu xmm15, xmm4");
}



#[test]
fn maskmovq1561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xE8", "maskmovq mm5, mm0");
}



#[test]
fn maskmovq1562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm5, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xEC", "maskmovq mm5, mm4");
}



#[test]
fn maskmovq1563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm0, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xC1", "maskmovq mm0, mm1");
}



#[test]
fn maskmovq1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm4, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xE5", "maskmovq mm4, mm5");
}



#[test]
fn maskmovq1565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm4, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xE3", "maskmovq mm4, mm3");
}



#[test]
fn maxpd1566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0x08", "maxpd xmm1, OWORD [rax]");
}



#[test]
fn maxpd1567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xC8", "maxpd xmm1, xmm0");
}



#[test]
fn maxpd1568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xDB", "maxpd xmm3, xmm3");
}



#[test]
fn maxpd1569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0x20", "maxpd xmm12, OWORD [rax]");
}



#[test]
fn maxpd1570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xC2", "maxpd xmm0, xmm2");
}



#[test]
fn maxps1571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0x00", "maxps xmm0, OWORD [rax]");
}



#[test]
fn maxps1572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0x1A", "maxps xmm3, OWORD [rdx]");
}



#[test]
fn maxps1573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0xD2", "maxps xmm2, xmm2");
}



#[test]
fn maxps1574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5F, 0xFC", "maxps xmm15, xmm12");
}



#[test]
fn maxps1575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0xD1", "maxps xmm2, xmm1");
}



#[test]
fn maxsd1576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xDA", "maxsd xmm3, xmm2");
}



#[test]
fn maxsd1577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xD3", "maxsd xmm2, xmm3");
}



#[test]
fn maxsd1578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xC2", "maxsd xmm0, xmm2");
}



#[test]
fn maxsd1579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5F, 0xE4", "maxsd xmm12, xmm12");
}



#[test]
fn maxsd1580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xC9", "maxsd xmm1, xmm1");
}



#[test]
fn maxss1581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0xDB", "maxss xmm11, xmm3");
}



#[test]
fn maxss1582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5F, 0xE7", "maxss xmm12, xmm15");
}



#[test]
fn maxss1583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0xE3", "maxss xmm12, xmm3");
}



#[test]
fn maxss1584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xDB", "maxss xmm3, xmm3");
}



#[test]
fn maxss1585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0xE2", "maxss xmm12, xmm2");
}



#[test]
fn mfence1586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xF0", "mfence");
}



#[test]
fn minpd1587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xFC", "minpd xmm15, xmm12");
}



#[test]
fn minpd1588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0xE3", "minpd xmm12, xmm3");
}



#[test]
fn minpd1589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0x00", "minpd xmm0, OWORD [rax]");
}



#[test]
fn minpd1590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0x22", "minpd xmm12, OWORD [rdx]");
}



#[test]
fn minpd1591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0xC1", "minpd xmm0, xmm1");
}



#[test]
fn minps1592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xDC", "minps xmm3, xmm4");
}



#[test]
fn minps1593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xC4", "minps xmm0, xmm4");
}



#[test]
fn minps1594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xDA", "minps xmm3, xmm2");
}



#[test]
fn minps1595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5D, 0xE3", "minps xmm4, xmm11");
}



#[test]
fn minps1596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5D, 0xD3", "minps xmm2, xmm11");
}



#[test]
fn minsd1597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xDB", "minsd xmm11, xmm3");
}



#[test]
fn minsd1598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xDC", "minsd xmm11, xmm4");
}



#[test]
fn minsd1599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5D, 0xE7", "minsd xmm12, xmm15");
}



#[test]
fn minsd1600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5D, 0xD4", "minsd xmm2, xmm12");
}



#[test]
fn minsd1601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xE4", "minsd xmm12, xmm4");
}



#[test]
fn minss1602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0xFC", "minss xmm15, xmm4");
}



#[test]
fn minss1603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0xC3", "minss xmm0, xmm3");
}



#[test]
fn minss1604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0xCB", "minss xmm1, xmm3");
}



#[test]
fn minss1605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xCF", "minss xmm1, xmm15");
}



#[test]
fn minss1606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xDB", "minss xmm3, xmm11");
}



#[test]
fn monitor1607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor");
}



#[test]
fn monitorx1613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx");
}



#[test]
fn monitorx1614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx rax, ecx, edx");
}



#[test]
fn monitorx1615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn monitorx1616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx rax, ecx, edx");
}



#[test]
fn monitorx1617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx rax, ecx, edx");
}



#[test]
fn monitorx1618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn montmul1619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; montmul
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA6, 0xC0", "montmul");
}



#[test]
fn movapd1620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x20", "movapd xmm12, OWORD [rax]");
}



#[test]
fn movapd1621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x08", "movapd xmm1, OWORD [rax]");
}



#[test]
fn movapd1622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x08", "movapd xmm1, OWORD [rax]");
}



#[test]
fn movapd1623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x08", "movapd xmm1, OWORD [rax]");
}



#[test]
fn movapd1624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x20", "movapd xmm12, OWORD [rax]");
}



#[test]
fn movapd1625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x28, 0xE4", "movapd xmm12, xmm12");
}



#[test]
fn movapd1626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xE3", "movapd xmm4, xmm11");
}



#[test]
fn movapd1627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xFB", "movapd xmm15, xmm3");
}



#[test]
fn movapd1628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xDC", "movapd xmm11, xmm4");
}



#[test]
fn movapd1629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xDB", "movapd xmm11, xmm3");
}



#[test]
fn movapd1630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xE2", "movapd xmm4, xmm2");
}



#[test]
fn movapd1631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xF9", "movapd xmm15, xmm1");
}



#[test]
fn movapd1632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xD0", "movapd xmm2, xmm0");
}



#[test]
fn movapd1633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xD1", "movapd xmm2, xmm1");
}



#[test]
fn movapd1634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xDB", "movapd xmm11, xmm3");
}



#[test]
fn movapd1635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x18", "movapd OWORD [rax], xmm11");
}



#[test]
fn movapd1636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x20", "movapd OWORD [rax], xmm4");
}



#[test]
fn movapd1637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x00", "movapd OWORD [rax], xmm0");
}



#[test]
fn movapd1638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x20", "movapd OWORD [rax], xmm12");
}



#[test]
fn movapd1639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x00", "movapd OWORD [rax], xmm0");
}



#[test]
fn movaps1640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xCC", "movaps xmm1, xmm4");
}



#[test]
fn movaps1641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps OWORD [rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x29, 0x3A", "movaps OWORD [rdx], xmm15");
}



#[test]
fn movaps1642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xC0", "movaps xmm0, xmm0");
}



#[test]
fn movaps1643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x29, 0x38", "movaps OWORD [rax], xmm15");
}



#[test]
fn movaps1644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xDB", "movaps xmm3, xmm3");
}



#[test]
fn movaps1645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xDC", "movaps xmm11, xmm4");
}



#[test]
fn movaps1646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x28, 0xDF", "movaps xmm11, xmm15");
}



#[test]
fn movaps1647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xC0", "movaps xmm0, xmm0");
}



#[test]
fn movaps1648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0x02", "movaps xmm0, OWORD [rdx]");
}



#[test]
fn movaps1649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xFA", "movaps xmm15, xmm2");
}



#[test]
fn movd1650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x00", "movd mm0, DWORD [rax]");
}



#[test]
fn movd1651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm2, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xD0", "movd mm2, eax");
}



#[test]
fn movd1652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x20", "movd mm4, DWORD [rax]");
}



#[test]
fn movd1653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x18", "movd mm3, DWORD [rax]");
}



#[test]
fn movd1654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x18", "movd mm3, DWORD [rax]");
}



#[test]
fn movd1655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xC0", "movd eax, mm0");
}



#[test]
fn movd1656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD0", "movd eax, mm2");
}



#[test]
fn movd1657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x10", "movd DWORD [rax], mm2");
}



#[test]
fn movd1658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x00", "movd DWORD [rax], mm0");
}



#[test]
fn movd1659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xC8", "movd eax, mm1");
}



#[test]
fn movd1660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x18", "movd [rax], mm3");
}



#[test]
fn movd1661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd [rax], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x10", "movd [rax], mm2");
}



#[test]
fn movd1662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD8", "movd rax, mm3");
}



#[test]
fn movd1663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd [rax], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x10", "movd [rax], mm2");
}



#[test]
fn movd1664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xE8", "movd rax, mm5");
}



#[test]
fn movd1665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm3, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0xD8", "movd xmm3, eax");
}



#[test]
fn movd1666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm0, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0xC0", "movd xmm0, eax");
}



#[test]
fn movd1667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x08", "movd xmm1, DWORD [rax]");
}



#[test]
fn movd1668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x38", "movd xmm15, DWORD [rax]");
}



#[test]
fn movd1669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0xE0", "movd xmm12, eax");
}



#[test]
fn movd1670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x18", "movd DWORD [rax], xmm11");
}



#[test]
fn movd1671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x20", "movd DWORD [rax], xmm12");
}



#[test]
fn movd1672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0xD8", "movd eax, xmm11");
}



#[test]
fn movd1673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0xC8", "movd eax, xmm1");
}



#[test]
fn movd1674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0xE0", "movd eax, xmm12");
}



#[test]
fn movd1675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x20", "movd DWORD [rax], xmm12");
}



#[test]
fn movd1676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x08", "movd DWORD [rax], xmm1");
}



#[test]
fn movd1677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x20", "movd DWORD [rax], xmm12");
}



#[test]
fn movd1678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x08", "movd DWORD [rax], xmm1");
}



#[test]
fn movd1679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x18", "movd DWORD [rax], xmm11");
}



#[test]
fn movd1680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x08", "movd xmm1, DWORD [rax]");
}



#[test]
fn movd1681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x20", "movd xmm4, DWORD [rax]");
}



#[test]
fn movd1682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x20", "movd xmm12, DWORD [rax]");
}



#[test]
fn movd1683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x18", "movd xmm11, DWORD [rax]");
}



#[test]
fn movd1684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x10", "movd xmm2, DWORD [rax]");
}



#[test]
fn movd1685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm2, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xD0", "movd mm2, rax");
}



#[test]
fn movd1686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE0", "movd mm4, rax");
}



#[test]
fn movd1687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC0", "movd mm0, rax");
}



#[test]
fn movd1688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, [rax]");
}



#[test]
fn movd1689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE8", "movd mm5, rax");
}



#[test]
fn movddup1690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xF9", "movddup xmm15, xmm1");
}



#[test]
fn movddup1691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xD4", "movddup xmm2, xmm4");
}



#[test]
fn movddup1692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x12, 0xE4", "movddup xmm12, xmm12");
}



#[test]
fn movddup1693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xC8", "movddup xmm1, xmm0");
}



#[test]
fn movddup1694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xC8", "movddup xmm1, xmm0");
}



#[test]
fn movdq2q1695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xC4", "movdq2q mm0, xmm12");
}



#[test]
fn movdq2q1696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xC3", "movdq2q mm0, xmm3");
}



#[test]
fn movdq2q1697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xD4", "movdq2q mm2, xmm12");
}



#[test]
fn movdq2q1698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xEB", "movdq2q mm5, xmm11");
}



#[test]
fn movdq2q1699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xD4", "movdq2q mm2, xmm12");
}



#[test]
fn movdqa1700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xE3", "movdqa xmm4, xmm11");
}



#[test]
fn movdqa1701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xD4", "movdqa xmm2, xmm12");
}



#[test]
fn movdqa1702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xDF", "movdqa xmm11, xmm15");
}



#[test]
fn movdqa1703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xCF", "movdqa xmm1, xmm15");
}



#[test]
fn movdqa1704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xE4", "movdqa xmm4, xmm12");
}



#[test]
fn movdqa1705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xFC", "movdqa xmm15, xmm12");
}



#[test]
fn movdqa1706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xDB", "movdqa xmm11, xmm11");
}



#[test]
fn movdqa1707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xD3", "movdqa xmm2, xmm3");
}



#[test]
fn movdqa1708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xDF", "movdqa xmm3, xmm15");
}



#[test]
fn movdqa1709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xC4", "movdqa xmm0, xmm12");
}



#[test]
fn movdqa1710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x18", "movdqa OWORD [rax], xmm3");
}



#[test]
fn movdqa1711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x38", "movdqa OWORD [rax], xmm15");
}



#[test]
fn movdqa1712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x18", "movdqa OWORD [rax], xmm3");
}



#[test]
fn movdqa1713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x08", "movdqa OWORD [rax], xmm1");
}



#[test]
fn movdqa1714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x38", "movdqa OWORD [rax], xmm15");
}



#[test]
fn movdqa1715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x20", "movdqa xmm4, OWORD [rax]");
}



#[test]
fn movdqa1716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x08", "movdqa xmm1, OWORD [rax]");
}



#[test]
fn movdqa1717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x20", "movdqa xmm12, OWORD [rax]");
}



#[test]
fn movdqa1718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x18", "movdqa xmm11, OWORD [rax]");
}



#[test]
fn movdqa1719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x08", "movdqa xmm1, OWORD [rax]");
}



#[test]
fn movdqu1720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x38", "movdqu OWORD [rax], xmm15");
}



#[test]
fn movdqu1721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x38", "movdqu OWORD [rax], xmm15");
}



#[test]
fn movdqu1722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x20", "movdqu OWORD [rax], xmm12");
}



#[test]
fn movdqu1723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x00", "movdqu OWORD [rax], xmm0");
}



#[test]
fn movdqu1724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x20", "movdqu OWORD [rax], xmm12");
}



#[test]
fn movdqu1725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x38", "movdqu xmm15, OWORD [rax]");
}



#[test]
fn movdqu1726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x20", "movdqu xmm4, OWORD [rax]");
}



#[test]
fn movdqu1727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x10", "movdqu xmm2, OWORD [rax]");
}



#[test]
fn movdqu1728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x08", "movdqu xmm1, OWORD [rax]");
}



#[test]
fn movdqu1729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x20", "movdqu xmm12, OWORD [rax]");
}



#[test]
fn movdqu1730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xDA", "movdqu xmm11, xmm2");
}



#[test]
fn movdqu1731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xDA", "movdqu xmm3, xmm2");
}



#[test]
fn movdqu1732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD0", "movdqu xmm2, xmm0");
}



#[test]
fn movdqu1733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xE0", "movdqu xmm4, xmm0");
}



#[test]
fn movdqu1734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xDF", "movdqu xmm11, xmm15");
}



#[test]
fn movdqu1735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xF8", "movdqu xmm15, xmm0");
}



#[test]
fn movdqu1736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD9", "movdqu xmm3, xmm1");
}



#[test]
fn movdqu1737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD0", "movdqu xmm2, xmm0");
}



#[test]
fn movdqu1738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xC2", "movdqu xmm0, xmm2");
}



#[test]
fn movdqu1739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xF9", "movdqu xmm15, xmm1");
}



#[test]
fn movhlps1740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0xFC", "movhlps xmm15, xmm4");
}



#[test]
fn movhlps1741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x12, 0xD7", "movhlps xmm2, xmm15");
}



#[test]
fn movhlps1742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0xE3", "movhlps xmm4, xmm3");
}



#[test]
fn movhlps1743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0xDB", "movhlps xmm11, xmm3");
}



#[test]
fn movhlps1744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0xDC", "movhlps xmm11, xmm4");
}



#[test]
fn movhpd1745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x10", "movhpd xmm2, [rax]");
}



#[test]
fn movhpd1746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x10", "movhpd xmm2, [rax]");
}



#[test]
fn movhpd1747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x38", "movhpd xmm15, [rax]");
}



#[test]
fn movhpd1748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm11, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x18", "movhpd xmm11, [rax]");
}



#[test]
fn movhpd1749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm11, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x18", "movhpd xmm11, [rax]");
}



#[test]
fn movhpd1750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x20", "movhpd [rax], xmm12");
}



#[test]
fn movhpd1751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x38", "movhpd [rax], xmm15");
}



#[test]
fn movhpd1752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x08", "movhpd [rax], xmm1");
}



#[test]
fn movhpd1753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x00", "movhpd [rax], xmm0");
}



#[test]
fn movhpd1754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x20", "movhpd [rax], xmm12");
}



#[test]
fn movhps1755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x18", "movhps QWORD [rax], xmm3");
}



#[test]
fn movhps1756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x18", "movhps QWORD [rax], xmm11");
}



#[test]
fn movhps1757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x38", "movhps QWORD [rax], xmm15");
}



#[test]
fn movhps1758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x10", "movhps QWORD [rax], xmm2");
}



#[test]
fn movhps1759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm12");
}



#[test]
fn movhps1760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x20", "movhps xmm4, QWORD [rax]");
}



#[test]
fn movhps1761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0x20", "movhps xmm12, QWORD [rax]");
}



#[test]
fn movhps1762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0x20", "movhps xmm12, QWORD [rax]");
}



#[test]
fn movhps1763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x20", "movhps xmm4, QWORD [rax]");
}



#[test]
fn movhps1764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0x38", "movhps xmm15, QWORD [rax]");
}



#[test]
fn movlhps1765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x16, 0xDC", "movlhps xmm3, xmm12");
}



#[test]
fn movlhps1766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x16, 0xE7", "movlhps xmm12, xmm15");
}



#[test]
fn movlhps1767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x16, 0xCC", "movlhps xmm1, xmm12");
}



#[test]
fn movlhps1768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0xCA", "movlhps xmm1, xmm2");
}



#[test]
fn movlhps1769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xF9", "movlhps xmm15, xmm1");
}



#[test]
fn movlpd1770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x38", "movlpd xmm15, QWORD [rax]");
}



#[test]
fn movlpd1771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x08", "movlpd xmm1, QWORD [rax]");
}



#[test]
fn movlpd1772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x20", "movlpd xmm12, QWORD [rax]");
}



#[test]
fn movlpd1773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x18", "movlpd xmm3, QWORD [rax]");
}



#[test]
fn movlpd1774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x00", "movlpd xmm0, QWORD [rax]");
}



#[test]
fn movlpd1775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x00", "movlpd QWORD [rax], xmm0");
}



#[test]
fn movlpd1776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x18", "movlpd QWORD [rax], xmm11");
}



#[test]
fn movlpd1777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x08", "movlpd QWORD [rax], xmm1");
}



#[test]
fn movlpd1778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x18", "movlpd QWORD [rax], xmm3");
}



#[test]
fn movlpd1779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x38", "movlpd QWORD [rax], xmm15");
}



#[test]
fn movlps1780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x18", "movlps QWORD [rax], xmm3");
}



#[test]
fn movlps1781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x20", "movlps QWORD [rax], xmm4");
}



#[test]
fn movlps1782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x20", "movlps QWORD [rax], xmm4");
}



#[test]
fn movlps1783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x10", "movlps QWORD [rax], xmm2");
}



#[test]
fn movlps1784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x08", "movlps QWORD [rax], xmm1");
}



#[test]
fn movlps1785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x20", "movlps xmm4, QWORD [rax]");
}



#[test]
fn movlps1786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x38", "movlps xmm15, QWORD [rax]");
}



#[test]
fn movlps1787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x00", "movlps xmm0, QWORD [rax]");
}



#[test]
fn movlps1788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x38", "movlps xmm15, QWORD [rax]");
}



#[test]
fn movlps1789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x08", "movlps xmm1, QWORD [rax]");
}



#[test]
fn movmskpd1790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rbx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xDB", "movmskpd rbx, xmm11");
}



#[test]
fn movmskpd1791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xCC", "movmskpd rcx, xmm4");
}



#[test]
fn movmskpd1792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xCC", "movmskpd rcx, xmm4");
}



#[test]
fn movmskpd1793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xC3", "movmskpd rax, xmm11");
}



#[test]
fn movmskpd1794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xC7", "movmskpd rax, xmm15");
}



#[test]
fn movmskps1795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xC3", "movmskps rax, xmm11");
}



#[test]
fn movmskps1796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xCC", "movmskps rcx, xmm12");
}



#[test]
fn movmskps1797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC9", "movmskps rcx, xmm1");
}



#[test]
fn movmskps1798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rbx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xDC", "movmskps rbx, xmm4");
}



#[test]
fn movmskps1799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rbx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xDF", "movmskps rbx, xmm15");
}



#[test]
fn movntdq1800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x20", "movntdq OWORD [rax], xmm12");
}



#[test]
fn movntdq1801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x10", "movntdq OWORD [rax], xmm2");
}



#[test]
fn movntdq1802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x00", "movntdq OWORD [rax], xmm0");
}



#[test]
fn movntdq1803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x08", "movntdq OWORD [rax], xmm1");
}



#[test]
fn movntdq1804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x20", "movntdq OWORD [rax], xmm4");
}



#[test]
fn movntdqa1805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x08", "movntdqa xmm1, OWORD [rax]");
}



#[test]
fn movntdqa1806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x08", "movntdqa xmm1, OWORD [rax]");
}



#[test]
fn movntdqa1807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x20", "movntdqa xmm12, OWORD [rax]");
}



#[test]
fn movntdqa1808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x38", "movntdqa xmm15, OWORD [rax]");
}



#[test]
fn movntdqa1809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x10", "movntdqa xmm2, OWORD [rax]");
}



#[test]
fn movntpd1810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x38", "movntpd OWORD [rax], xmm15");
}



#[test]
fn movntpd1811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x20", "movntpd OWORD [rax], xmm4");
}



#[test]
fn movntpd1812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x00", "movntpd OWORD [rax], xmm0");
}



#[test]
fn movntpd1813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x20", "movntpd OWORD [rax], xmm12");
}



#[test]
fn movntpd1814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x00", "movntpd OWORD [rax], xmm0");
}



#[test]
fn movntps1815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x08", "movntps OWORD [rax], xmm1");
}



#[test]
fn movntps1816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x20", "movntps OWORD [rax], xmm4");
}



#[test]
fn movntps1817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x20", "movntps OWORD [rax], xmm4");
}



#[test]
fn movntps1818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x20", "movntps OWORD [rax], xmm4");
}



#[test]
fn movntps1819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x18", "movntps OWORD [rax], xmm3");
}



#[test]
fn movntq1820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn movntq1821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x18", "movntq QWORD [rax], mm3");
}



#[test]
fn movntq1822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x18", "movntq QWORD [rax], mm3");
}



#[test]
fn movntq1823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x10", "movntq QWORD [rax], mm2");
}



#[test]
fn movntq1824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x08", "movntq QWORD [rax], mm1");
}



#[test]
fn movntsd1825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x20", "movntsd QWORD [rax], xmm12");
}



#[test]
fn movntsd1826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x10", "movntsd QWORD [rax], xmm2");
}



#[test]
fn movntsd1827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x08", "movntsd QWORD [rax], xmm1");
}



#[test]
fn movntsd1828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x20", "movntsd QWORD [rax], xmm12");
}



#[test]
fn movntsd1829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x00", "movntsd QWORD [rax], xmm0");
}



#[test]
fn movntss1830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x20", "movntss DWORD [rax], xmm4");
}



#[test]
fn movntss1831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2B, 0x20", "movntss DWORD [rax], xmm12");
}



#[test]
fn movntss1832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x18", "movntss DWORD [rax], xmm3");
}



#[test]
fn movntss1833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2B, 0x38", "movntss DWORD [rax], xmm15");
}



#[test]
fn movntss1834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x20", "movntss DWORD [rax], xmm4");
}



#[test]
fn movq1835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xE3", "movq xmm4, xmm3");
}



#[test]
fn movq1836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xCF", "movq xmm1, xmm15");
}



#[test]
fn movq1837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xD9", "movq xmm11, xmm1");
}



#[test]
fn movq1838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xC3", "movq xmm0, xmm11");
}



#[test]
fn movq1839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC4", "movq xmm0, xmm4");
}



#[test]
fn movq1840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x08", "movq mm1, [rax]");
}



#[test]
fn movq1841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x1A", "movq mm3, [rdx]");
}



#[test]
fn movq1842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x12", "movq mm2, [rdx]");
}



#[test]
fn movq1843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xC0", "movq mm0, mm0");
}



#[test]
fn movq1844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xD0", "movq mm2, mm0");
}



#[test]
fn movq1845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x00", "movq xmm0, QWORD [rax]");
}



#[test]
fn movq1846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x38", "movq xmm15, QWORD [rax]");
}



#[test]
fn movq1847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x08", "movq xmm1, QWORD [rax]");
}



#[test]
fn movq1848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x08", "movq xmm1, QWORD [rax]");
}



#[test]
fn movq1849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x20", "movq xmm4, QWORD [rax]");
}



#[test]
fn movq1850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x20", "movq QWORD [rax], xmm4");
}



#[test]
fn movq1851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x08", "movq QWORD [rax], xmm1");
}



#[test]
fn movq1852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x18", "movq QWORD [rax], xmm11");
}



#[test]
fn movq1853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x08", "movq QWORD [rax], xmm1");
}



#[test]
fn movq1854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x38", "movq QWORD [rax], xmm15");
}



#[test]
fn movq1855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x02", "movq [rdx], mm0");
}



#[test]
fn movq1856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x18", "movq [rax], mm3");
}



#[test]
fn movq1857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x08", "movq [rax], mm1");
}



#[test]
fn movq1858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xC1", "movq mm0, mm1");
}



#[test]
fn movq1859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x1A", "movq [rdx], mm3");
}



#[test]
fn movq1860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE8", "movq mm5, rax");
}



#[test]
fn movq1861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC0", "movq mm0, rax");
}



#[test]
fn movq1862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE8", "movq mm5, rax");
}



#[test]
fn movq1863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC8", "movq mm1, rax");
}



#[test]
fn movq1864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x10", "movq mm2, [rax]");
}



#[test]
fn movq1865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x00", "movq [rax], mm0");
}



#[test]
fn movq1866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x10", "movq [rax], mm2");
}



#[test]
fn movq1867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x18", "movq [rax], mm3");
}



#[test]
fn movq1868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x00", "movq [rax], mm0");
}



#[test]
fn movq1869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x28", "movq [rax], mm5");
}



#[test]
fn movq1870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC8", "movq xmm1, xmm0");
}



#[test]
fn movq1871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xDC", "movq xmm3, xmm12");
}



#[test]
fn movq1872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xCC", "movq xmm1, xmm4");
}



#[test]
fn movq1873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xE3", "movq xmm12, xmm3");
}



#[test]
fn movq1874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC4", "movq xmm0, xmm4");
}



#[test]
fn movq1875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x6E, 0xF8", "movq xmm15, rax");
}



#[test]
fn movq1876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x18", "movq xmm3, [rax]");
}



#[test]
fn movq1877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x20", "movq xmm12, [rax]");
}



#[test]
fn movq1878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x6E, 0xD8", "movq xmm11, rax");
}



#[test]
fn movq1879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x6E, 0xD8", "movq xmm3, rax");
}



#[test]
fn movq1880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x20", "movq [rax], xmm12");
}



#[test]
fn movq1881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x7E, 0xD8", "movq rax, xmm11");
}



#[test]
fn movq1882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x00", "movq [rax], xmm0");
}



#[test]
fn movq1883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x38", "movq [rax], xmm15");
}



#[test]
fn movq1884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x7E, 0xE0", "movq rax, xmm4");
}



#[test]
fn movq2dq1885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm3, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xDC", "movq2dq xmm3, mm4");
}



#[test]
fn movq2dq1886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm15, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xFD", "movq2dq xmm15, mm5");
}



#[test]
fn movq2dq1887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm11, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xDB", "movq2dq xmm11, mm3");
}



#[test]
fn movq2dq1888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xD8", "movq2dq xmm3, mm0");
}



#[test]
fn movq2dq1889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm3, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xDB", "movq2dq xmm3, mm3");
}



#[test]
fn movsb1890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA4", "movsb");
}



#[test]
fn movsd1891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x10, 0xE3", "movsd xmm12, xmm11");
}



#[test]
fn movsd1892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xFC", "movsd xmm15, xmm4");
}



#[test]
fn movsd1893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xC4", "movsd xmm0, xmm12");
}



#[test]
fn movsd1894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xD4", "movsd xmm2, xmm12");
}



#[test]
fn movsd1895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD3", "movsd xmm2, xmm3");
}



#[test]
fn movsd1896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xC0", "movsd xmm0, xmm0");
}



#[test]
fn movsd1897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xE1", "movsd xmm12, xmm1");
}



#[test]
fn movsd1898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xCB", "movsd xmm1, xmm11");
}



#[test]
fn movsd1899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xF9", "movsd xmm15, xmm1");
}



#[test]
fn movsd1900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xE2", "movsd xmm12, xmm2");
}



#[test]
fn movsd1901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA5", "movsd");
}



#[test]
fn movshdup1902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x16, 0xD3", "movshdup xmm2, xmm11");
}



#[test]
fn movshdup1903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x16, 0xDF", "movshdup xmm3, xmm15");
}



#[test]
fn movshdup1904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0xE3", "movshdup xmm12, xmm3");
}



#[test]
fn movshdup1905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0xE0", "movshdup xmm12, xmm0");
}



#[test]
fn movshdup1906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xD3", "movshdup xmm2, xmm3");
}



#[test]
fn movsldup1907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x12, 0xD3", "movsldup xmm2, xmm11");
}



#[test]
fn movsldup1908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xE0", "movsldup xmm4, xmm0");
}



#[test]
fn movsldup1909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xDB", "movsldup xmm3, xmm3");
}



#[test]
fn movsldup1910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x12, 0xDB", "movsldup xmm3, xmm11");
}



#[test]
fn movsldup1911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xDC", "movsldup xmm3, xmm4");
}



#[test]
fn movsq1912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA5", "movsq");
}



#[test]
fn movss1913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x20", "movss DWORD [rax], xmm4");
}



#[test]
fn movss1914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x10", "movss DWORD [rax], xmm2");
}



#[test]
fn movss1915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x08", "movss DWORD [rax], xmm1");
}



#[test]
fn movss1916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x10", "movss DWORD [rax], xmm2");
}



#[test]
fn movss1917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x18", "movss DWORD [rax], xmm11");
}



#[test]
fn movss1918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xF8", "movss xmm15, xmm0");
}



#[test]
fn movss1919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x10, 0xDC", "movss xmm3, xmm12");
}



#[test]
fn movss1920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xC2", "movss xmm0, xmm2");
}



#[test]
fn movss1921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xE2", "movss xmm4, xmm2");
}



#[test]
fn movss1922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x10, 0xDB", "movss xmm3, xmm11");
}



#[test]
fn movsw1923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA5", "movsw");
}



#[test]
fn movsx1924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xD0", "movsx rdx, eax");
}



#[test]
fn movsx1925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsx rax, DWORD [rax]");
}



#[test]
fn movsx1926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC8", "movsx rcx, eax");
}



#[test]
fn movsx1927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xD0", "movsx rdx, eax");
}



#[test]
fn movsx1928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsx rcx, DWORD [rax]");
}



#[test]
fn movsx1929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x00", "movsx rax, BYTE [rax]");
}



#[test]
fn movsx1930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x18", "movsx rbx, BYTE [rax]");
}



#[test]
fn movsx1931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0xC8", "movsx rcx, al");
}



#[test]
fn movsx1932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x08", "movsx rcx, BYTE [rax]");
}



#[test]
fn movsx1933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x08", "movsx rcx, BYTE [rax]");
}



#[test]
fn movsx1934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD0", "movsx rdx, ax");
}



#[test]
fn movsx1935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x10", "movsx rdx, WORD [rax]");
}



#[test]
fn movsx1936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x08", "movsx rcx, WORD [rax]");
}



#[test]
fn movsx1937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x10", "movsx rdx, WORD [rax]");
}



#[test]
fn movsx1938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD8", "movsx rbx, ax");
}



#[test]
fn movsx1939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn movsx1940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn movsx1941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x08", "movsx cx, BYTE [rax]");
}



#[test]
fn movsx1942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn movsx1943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn movsxd1944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn movsxd1945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn movsxd1946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn movsxd1947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xD0", "movsxd rdx, eax");
}



#[test]
fn movsxd1948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rcx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC8", "movsxd rcx, eax");
}



#[test]
fn movupd1949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x20", "movupd xmm12, OWORD [rax]");
}



#[test]
fn movupd1950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x38", "movupd xmm15, OWORD [rax]");
}



#[test]
fn movupd1951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x18", "movupd xmm11, OWORD [rax]");
}



#[test]
fn movupd1952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x00", "movupd xmm0, OWORD [rax]");
}



#[test]
fn movupd1953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x38", "movupd xmm15, OWORD [rax]");
}



#[test]
fn movupd1954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xCC", "movupd xmm1, xmm4");
}



#[test]
fn movupd1955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xE4", "movupd xmm12, xmm4");
}



#[test]
fn movupd1956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xFA", "movupd xmm15, xmm2");
}



#[test]
fn movupd1957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xF9", "movupd xmm15, xmm1");
}



#[test]
fn movupd1958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xD9", "movupd xmm11, xmm1");
}



#[test]
fn movupd1959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x11, 0x20", "movupd OWORD [rax], xmm4");
}



#[test]
fn movupd1960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x18", "movupd OWORD [rax], xmm11");
}



#[test]
fn movupd1961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x20", "movupd OWORD [rax], xmm12");
}



#[test]
fn movupd1962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x38", "movupd OWORD [rax], xmm15");
}



#[test]
fn movupd1963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x20", "movupd OWORD [rax], xmm12");
}



#[test]
fn movupd1964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xCB", "movupd xmm1, xmm11");
}



#[test]
fn movupd1965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xD9", "movupd xmm11, xmm1");
}



#[test]
fn movupd1966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xE1", "movupd xmm4, xmm1");
}



#[test]
fn movupd1967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xDF", "movupd xmm11, xmm15");
}



#[test]
fn movupd1968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC4", "movupd xmm0, xmm4");
}



#[test]
fn movups1969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x10, 0xC3", "movups xmm0, xmm11");
}



#[test]
fn movups1970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xD2", "movups xmm2, xmm2");
}



#[test]
fn movups1971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0x38", "movups xmm15, OWORD [rax]");
}



#[test]
fn movups1972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xE0", "movups xmm12, xmm0");
}



#[test]
fn movups1973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xC4", "movups xmm0, xmm4");
}



#[test]
fn movups1974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x10, 0xFB", "movups xmm15, xmm11");
}



#[test]
fn movups1975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xD8", "movups xmm11, xmm0");
}



#[test]
fn movups1976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xE2", "movups xmm4, xmm2");
}



#[test]
fn movups1977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x10, 0xFF", "movups xmm15, xmm15");
}



#[test]
fn movups1978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups OWORD [rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x11, 0x1A", "movups OWORD [rdx], xmm11");
}



#[test]
fn movzx1979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn movzx1980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x08", "movzx cx, BYTE [rax]");
}



#[test]
fn movzx1981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn movzx1982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x10", "movzx dx, BYTE [rax]");
}



#[test]
fn movzx1983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn movzx1984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC0", "movzx rax, ax");
}



#[test]
fn movzx1985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC0", "movzx rax, ax");
}



#[test]
fn movzx1986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xD8", "movzx rbx, ax");
}



#[test]
fn movzx1987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xD8", "movzx rbx, ax");
}



#[test]
fn movzx1988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0x10", "movzx rdx, WORD [rax]");
}



#[test]
fn movzx1989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC8", "movzx rcx, al");
}



#[test]
fn movzx1990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xD8", "movzx rbx, al");
}



#[test]
fn movzx1991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x18", "movzx rbx, BYTE [rax]");
}



#[test]
fn movzx1992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xD0", "movzx rdx, al");
}



#[test]
fn movzx1993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC0", "movzx rax, al");
}



#[test]
fn mpsadbw1994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, xmm11, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xDB, 0x6B", "mpsadbw xmm3, xmm11, 107");
}



#[test]
fn mpsadbw1995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm11, xmm3, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0xDB, 0x4A", "mpsadbw xmm11, xmm3, 74");
}



#[test]
fn mpsadbw1996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm0, xmm12, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xC4, 0x0E", "mpsadbw xmm0, xmm12, 14");
}



#[test]
fn mpsadbw1997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, xmm2, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xE2, 0x18", "mpsadbw xmm4, xmm2, 24");
}



#[test]
fn mpsadbw1998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, xmm11, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xDB, 0x75", "mpsadbw xmm3, xmm11, 117");
}



#[test]
fn mul1999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn mul2000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn mul2001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x20", "mul BYTE [rax]");
}



#[test]
fn mul2002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x20", "mul BYTE [rax]");
}



#[test]
fn mul2003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn mul2004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn mul2005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn mul2006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn mul2007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn mul2008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn mulpd2009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x59, 0xCB", "mulpd xmm1, xmm11");
}



#[test]
fn mulpd2010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x59, 0xC4", "mulpd xmm0, xmm12");
}



#[test]
fn mulpd2011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x59, 0xCB", "mulpd xmm1, xmm11");
}



#[test]
fn mulpd2012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0xD9", "mulpd xmm3, xmm1");
}



#[test]
fn mulpd2013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0x00", "mulpd xmm0, OWORD [rax]");
}



#[test]
fn mulps2014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x59, 0xE7", "mulps xmm4, xmm15");
}



#[test]
fn mulps2015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xC1", "mulps xmm0, xmm1");
}



#[test]
fn mulps2016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xCA", "mulps xmm1, xmm2");
}



#[test]
fn mulps2017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xD2", "mulps xmm2, xmm2");
}



#[test]
fn mulps2018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x59, 0xFB", "mulps xmm15, xmm3");
}



#[test]
fn mulsd2019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xC3", "mulsd xmm0, xmm3");
}



#[test]
fn mulsd2020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xCC", "mulsd xmm1, xmm4");
}



#[test]
fn mulsd2021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0xD9", "mulsd xmm11, xmm1");
}



#[test]
fn mulsd2022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xDB", "mulsd xmm3, xmm3");
}



#[test]
fn mulsd2023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xC3", "mulsd xmm0, xmm3");
}



#[test]
fn mulss2024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xC8", "mulss xmm1, xmm0");
}



#[test]
fn mulss2025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0xE0", "mulss xmm12, xmm0");
}



#[test]
fn mulss2026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xD9", "mulss xmm3, xmm1");
}



#[test]
fn mulss2027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x59, 0xC7", "mulss xmm0, xmm15");
}



#[test]
fn mulss2028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x59, 0xFC", "mulss xmm15, xmm12");
}



#[test]
fn mwait2029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait");
}



#[test]
fn mwaitx2035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx");
}



#[test]
fn neg2041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xDA", "neg dl");
}



#[test]
fn neg2047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn neg2048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD9", "neg cl");
}



#[test]
fn neg2049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD9", "neg cl");
}



#[test]
fn neg2050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn neg2051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDB", "neg rbx");
}



#[test]
fn neg2052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn neg2053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDB", "neg rbx");
}



#[test]
fn neg2054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDB", "neg rbx");
}



#[test]
fn neg2055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn nop2056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn nop2057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn nop2058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn nop2059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn nop2060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn nop2061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x90", "nop");
}



#[test]
fn not2062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD1", "not cl");
}



#[test]
fn not2063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn not2064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD1", "not cl");
}



#[test]
fn not2065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn not2066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn not2067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD2", "not rdx");
}



#[test]
fn not2073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD0", "not rax");
}



#[test]
fn not2074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD0", "not rax");
}



#[test]
fn not2075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD3", "not rbx");
}



#[test]
fn not2076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD0", "not rax");
}



#[test]
fn or2077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x1D", "or al, 29");
}



#[test]
fn or2078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x38", "or al, 56");
}



#[test]
fn or2079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x05", "or al, 5");
}



#[test]
fn or2080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x28", "or al, 40");
}



#[test]
fn or2081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x68", "or al, 104");
}



#[test]
fn or2082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x1B", "or eax, 27");
}



#[test]
fn or2083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x18", "or ax, 24");
}



#[test]
fn or2084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x63", "or ax, 99");
}



#[test]
fn or2085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x4E", "or eax, 78");
}



#[test]
fn or2086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x4E", "or eax, 78");
}



#[test]
fn or2087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC8", "or rax, rcx");
}



#[test]
fn or2088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC9", "or rcx, rcx");
}



#[test]
fn or2089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC8", "or rax, rcx");
}



#[test]
fn or2090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x10", "or rdx, QWORD [rax]");
}



#[test]
fn or2091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC8", "or rax, rcx");
}



#[test]
fn or2092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn or2093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn or2094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn or2095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC2", "or dl, al");
}



#[test]
fn or2096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn or2097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x3A", "or BYTE [rax], 58");
}



#[test]
fn or2098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x6F", "or BYTE [rax], 111");
}



#[test]
fn or2099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x69", "or BYTE [rax], 105");
}



#[test]
fn or2100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x25", "or BYTE [rax], 37");
}



#[test]
fn or2101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x58", "or BYTE [rax], 88");
}



#[test]
fn or2102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x5C", "or dl, 92");
}



#[test]
fn or2103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x59", "or cl, 89");
}



#[test]
fn or2104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x12", "or al, 18");
}



#[test]
fn or2105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x11", "or cl, 17");
}



#[test]
fn or2106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x21", "or dl, 33");
}



#[test]
fn or2107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x6F", "or rdx, 111");
}



#[test]
fn or2108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x22", "or rbx, 34");
}



#[test]
fn or2109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x39", "or rcx, 57");
}



#[test]
fn or2110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x15", "or rdx, 21");
}



#[test]
fn or2111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x42", "or rbx, 66");
}



#[test]
fn or2112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC8", "or al, cl");
}



#[test]
fn or2113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xD0", "or al, dl");
}



#[test]
fn or2114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xCA", "or dl, cl");
}



#[test]
fn or2115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC8", "or al, cl");
}



#[test]
fn or2116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn or2117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x4B", "or rbx, 75");
}



#[test]
fn or2118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x13", "or rbx, 19");
}



#[test]
fn or2119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x77", "or rax, 119");
}



#[test]
fn or2120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x1B", "or rbx, 27");
}



#[test]
fn or2121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x36", "or rbx, 54");
}



#[test]
fn or2122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x00", "or BYTE [rax], al");
}



#[test]
fn or2123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x00", "or BYTE [rax], al");
}



#[test]
fn or2124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x08", "or BYTE [rax], cl");
}



#[test]
fn or2125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x08", "or BYTE [rax], cl");
}



#[test]
fn or2126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x08", "or BYTE [rax], cl");
}



#[test]
fn or2127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn orpd2132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xDC", "orpd xmm11, xmm4");
}



#[test]
fn orpd2133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xE4", "orpd xmm12, xmm4");
}



#[test]
fn orpd2134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0xD0", "orpd xmm2, xmm0");
}



#[test]
fn orpd2135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0x12", "orpd xmm2, OWORD [rdx]");
}



#[test]
fn orpd2136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0x1A", "orpd xmm3, OWORD [rdx]");
}



#[test]
fn orps2137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x56, 0x38", "orps xmm15, OWORD [rax]");
}



#[test]
fn orps2138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xE3", "orps xmm4, xmm3");
}



#[test]
fn orps2139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x56, 0xE3", "orps xmm12, xmm11");
}



#[test]
fn orps2140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xD2", "orps xmm2, xmm2");
}



#[test]
fn orps2141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0x00", "orps xmm0, OWORD [rax]");
}



#[test]
fn outsb2142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6E", "outsb");
}



#[test]
fn outsd2143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6F", "outsd");
}



#[test]
fn outsw2144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6F", "outsw");
}



#[test]
fn pabsb2145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x10", "pabsb mm2, [rax]");
}



#[test]
fn pabsb2146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xC8", "pabsb mm1, mm0");
}



#[test]
fn pabsb2147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x1A", "pabsb mm3, [rdx]");
}



#[test]
fn pabsb2148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x0A", "pabsb mm1, [rdx]");
}



#[test]
fn pabsb2149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xD8", "pabsb mm3, mm0");
}



#[test]
fn pabsb2150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x1C, 0xD7", "pabsb xmm2, xmm15");
}



#[test]
fn pabsb2151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x1C, 0xD3", "pabsb xmm2, xmm11");
}



#[test]
fn pabsb2152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1C, 0xD9", "pabsb xmm3, xmm1");
}



#[test]
fn pabsb2153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x1C, 0xDC", "pabsb xmm11, xmm4");
}



#[test]
fn pabsb2154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1C, 0xCB", "pabsb xmm1, xmm3");
}



#[test]
fn pabsd2155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x28", "pabsd mm5, [rax]");
}



#[test]
fn pabsd2156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x28", "pabsd mm5, [rax]");
}



#[test]
fn pabsd2157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x20", "pabsd mm4, [rax]");
}



#[test]
fn pabsd2158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x00", "pabsd mm0, [rax]");
}



#[test]
fn pabsd2159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0xD8", "pabsd mm3, mm0");
}



#[test]
fn pabsd2160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x1E, 0xE4", "pabsd xmm12, xmm4");
}



#[test]
fn pabsd2161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x1E, 0xC7", "pabsd xmm0, xmm15");
}



#[test]
fn pabsd2162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1E, 0xD9", "pabsd xmm3, xmm1");
}



#[test]
fn pabsd2163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1E, 0xE2", "pabsd xmm4, xmm2");
}



#[test]
fn pabsd2164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x1E, 0xD7", "pabsd xmm2, xmm15");
}



#[test]
fn pabsw2165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xC0", "pabsw mm0, mm0");
}



#[test]
fn pabsw2166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x02", "pabsw mm0, [rdx]");
}



#[test]
fn pabsw2167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x18", "pabsw mm3, [rax]");
}



#[test]
fn pabsw2168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x2A", "pabsw mm5, [rdx]");
}



#[test]
fn pabsw2169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xE8", "pabsw mm5, mm0");
}



#[test]
fn pabsw2170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x1D, 0xDC", "pabsw xmm3, xmm12");
}



#[test]
fn pabsw2171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1D, 0xD2", "pabsw xmm2, xmm2");
}



#[test]
fn pabsw2172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1D, 0xC4", "pabsw xmm0, xmm4");
}



#[test]
fn pabsw2173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x1D, 0xCF", "pabsw xmm1, xmm15");
}



#[test]
fn pabsw2174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x1D, 0xDB", "pabsw xmm11, xmm11");
}



#[test]
fn packssdw2175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xE4", "packssdw xmm4, xmm4");
}



#[test]
fn packssdw2176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xCB", "packssdw xmm1, xmm3");
}



#[test]
fn packssdw2177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0x22", "packssdw xmm4, OWORD [rdx]");
}



#[test]
fn packssdw2178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xD4", "packssdw xmm2, xmm4");
}



#[test]
fn packssdw2179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0x18", "packssdw xmm3, OWORD [rax]");
}



#[test]
fn packssdw2180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xC0", "packssdw mm0, mm0");
}



#[test]
fn packssdw2181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x00", "packssdw mm0, [rax]");
}



#[test]
fn packssdw2182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xE0", "packssdw mm4, mm0");
}



#[test]
fn packssdw2183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xC0", "packssdw mm0, mm0");
}



#[test]
fn packssdw2184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xC0", "packssdw mm0, mm0");
}



#[test]
fn packsswb2185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xC0", "packsswb mm0, mm0");
}



#[test]
fn packsswb2186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xD8", "packsswb mm3, mm0");
}



#[test]
fn packsswb2187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xD8", "packsswb mm3, mm0");
}



#[test]
fn packsswb2188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x18", "packsswb mm3, [rax]");
}



#[test]
fn packsswb2189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x00", "packsswb mm0, [rax]");
}



#[test]
fn packsswb2190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xFC", "packsswb xmm15, xmm4");
}



#[test]
fn packsswb2191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x63, 0xFB", "packsswb xmm15, xmm11");
}



#[test]
fn packsswb2192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0xD4", "packsswb xmm2, xmm4");
}



#[test]
fn packsswb2193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0x02", "packsswb xmm0, OWORD [rdx]");
}



#[test]
fn packsswb2194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0x10", "packsswb xmm2, OWORD [rax]");
}



#[test]
fn packusdw2195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xDB", "packusdw xmm3, xmm3");
}



#[test]
fn packusdw2196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x2B, 0xDF", "packusdw xmm3, xmm15");
}



#[test]
fn packusdw2197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xE1", "packusdw xmm12, xmm1");
}



#[test]
fn packusdw2198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x2B, 0xFF", "packusdw xmm15, xmm15");
}



#[test]
fn packusdw2199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xD8", "packusdw xmm11, xmm0");
}



#[test]
fn packuswb2200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0xE0", "packuswb mm4, mm0");
}



#[test]
fn packuswb2201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x10", "packuswb mm2, [rax]");
}



#[test]
fn packuswb2202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x10", "packuswb mm2, [rax]");
}



#[test]
fn packuswb2203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x20", "packuswb mm4, [rax]");
}



#[test]
fn packuswb2204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0xC0", "packuswb mm0, mm0");
}



#[test]
fn packuswb2205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xDB", "packuswb xmm3, xmm3");
}



#[test]
fn packuswb2206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x67, 0xCF", "packuswb xmm1, xmm15");
}



#[test]
fn packuswb2207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x67, 0x1A", "packuswb xmm11, OWORD [rdx]");
}



#[test]
fn packuswb2208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x67, 0xFA", "packuswb xmm15, xmm2");
}



#[test]
fn packuswb2209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x67, 0xD9", "packuswb xmm11, xmm1");
}



#[test]
fn paddb2210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFC, 0x3A", "paddb xmm15, OWORD [rdx]");
}



#[test]
fn paddb2211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0x00", "paddb xmm0, OWORD [rax]");
}



#[test]
fn paddb2212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xC8", "paddb xmm1, xmm0");
}



#[test]
fn paddb2213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0x00", "paddb xmm0, OWORD [rax]");
}



#[test]
fn paddb2214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0x02", "paddb xmm0, OWORD [rdx]");
}



#[test]
fn paddb2215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x10", "paddb mm2, [rax]");
}



#[test]
fn paddb2216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x1A", "paddb mm3, [rdx]");
}



#[test]
fn paddb2217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xD0", "paddb mm2, mm0");
}



#[test]
fn paddb2218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x2A", "paddb mm5, [rdx]");
}



#[test]
fn paddb2219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xC8", "paddb mm1, mm0");
}



#[test]
fn paddd2220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0x12", "paddd xmm2, OWORD [rdx]");
}



#[test]
fn paddd2221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0xF8", "paddd xmm15, xmm0");
}



#[test]
fn paddd2222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFE, 0xDB", "paddd xmm3, xmm11");
}



#[test]
fn paddd2223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0x20", "paddd xmm12, OWORD [rax]");
}



#[test]
fn paddd2224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0xD0", "paddd xmm2, xmm0");
}



#[test]
fn paddd2225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x28", "paddd mm5, [rax]");
}



#[test]
fn paddd2226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0xE0", "paddd mm4, mm0");
}



#[test]
fn paddd2227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x28", "paddd mm5, [rax]");
}



#[test]
fn paddd2228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x28", "paddd mm5, [rax]");
}



#[test]
fn paddd2229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x10", "paddd mm2, [rax]");
}



#[test]
fn paddq2230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xE8", "paddq mm5, mm0");
}



#[test]
fn paddq2231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x08", "paddq mm1, [rax]");
}



#[test]
fn paddq2232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xC8", "paddq mm1, mm0");
}



#[test]
fn paddq2233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x10", "paddq mm2, [rax]");
}



#[test]
fn paddq2234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x12", "paddq mm2, [rdx]");
}



#[test]
fn paddq2235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD4, 0xFA", "paddq xmm15, xmm2");
}



#[test]
fn paddq2236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD4, 0xCC", "paddq xmm1, xmm12");
}



#[test]
fn paddq2237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD4, 0xDB", "paddq xmm11, xmm11");
}



#[test]
fn paddq2238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD4, 0xE3", "paddq xmm12, xmm11");
}



#[test]
fn paddq2239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xD4", "paddq xmm2, xmm4");
}



#[test]
fn paddsb2240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEC, 0xC7", "paddsb xmm0, xmm15");
}



#[test]
fn paddsb2241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEC, 0xCF", "paddsb xmm1, xmm15");
}



#[test]
fn paddsb2242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0x02", "paddsb xmm0, OWORD [rdx]");
}



#[test]
fn paddsb2243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0xC0", "paddsb xmm0, xmm0");
}



#[test]
fn paddsb2244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEC, 0xE3", "paddsb xmm12, xmm11");
}



#[test]
fn paddsb2245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x08", "paddsb mm1, [rax]");
}



#[test]
fn paddsb2246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xD0", "paddsb mm2, mm0");
}



#[test]
fn paddsb2247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x08", "paddsb mm1, [rax]");
}



#[test]
fn paddsb2248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xD0", "paddsb mm2, mm0");
}



#[test]
fn paddsb2249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x28", "paddsb mm5, [rax]");
}



#[test]
fn paddsiw2250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x08", "paddsiw mm1, [rax]");
}



#[test]
fn paddsiw2251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xC0", "paddsiw mm0, mm0");
}



#[test]
fn paddsiw2252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x02", "paddsiw mm0, [rdx]");
}



#[test]
fn paddsiw2253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x0A", "paddsiw mm1, [rdx]");
}



#[test]
fn paddsiw2254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x10", "paddsiw mm2, [rax]");
}



#[test]
fn paddsw2255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xDB", "paddsw xmm3, xmm3");
}



#[test]
fn paddsw2256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0x02", "paddsw xmm0, OWORD [rdx]");
}



#[test]
fn paddsw2257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xD3", "paddsw xmm2, xmm3");
}



#[test]
fn paddsw2258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xD3", "paddsw xmm2, xmm3");
}



#[test]
fn paddsw2259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xD0", "paddsw xmm2, xmm0");
}



#[test]
fn paddsw2260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x08", "paddsw mm1, [rax]");
}



#[test]
fn paddsw2261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x18", "paddsw mm3, [rax]");
}



#[test]
fn paddsw2262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xE8", "paddsw mm5, mm0");
}



#[test]
fn paddsw2263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x0A", "paddsw mm1, [rdx]");
}



#[test]
fn paddsw2264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xC8", "paddsw mm1, mm0");
}



#[test]
fn paddusb2265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x2A", "paddusb mm5, [rdx]");
}



#[test]
fn paddusb2266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x18", "paddusb mm3, [rax]");
}



#[test]
fn paddusb2267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x10", "paddusb mm2, [rax]");
}



#[test]
fn paddusb2268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x10", "paddusb mm2, [rax]");
}



#[test]
fn paddusb2269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x1A", "paddusb mm3, [rdx]");
}



#[test]
fn paddusb2270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDC, 0xFC", "paddusb xmm15, xmm12");
}



#[test]
fn paddusb2271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xDF", "paddusb xmm3, xmm15");
}



#[test]
fn paddusb2272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDC, 0xE3", "paddusb xmm12, xmm11");
}



#[test]
fn paddusb2273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDC, 0xE4", "paddusb xmm12, xmm12");
}



#[test]
fn paddusb2274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDC, 0xD2", "paddusb xmm2, xmm2");
}



#[test]
fn paddusw2275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x28", "paddusw mm5, [rax]");
}



#[test]
fn paddusw2276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x20", "paddusw mm4, [rax]");
}



#[test]
fn paddusw2277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x02", "paddusw mm0, [rdx]");
}



#[test]
fn paddusw2278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0xC0", "paddusw mm0, mm0");
}



#[test]
fn paddusw2279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0xD8", "paddusw mm3, mm0");
}



#[test]
fn paddusw2280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDD, 0xE3", "paddusw xmm12, xmm11");
}



#[test]
fn paddusw2281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0xE4", "paddusw xmm12, xmm4");
}



#[test]
fn paddusw2282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDD, 0xE7", "paddusw xmm12, xmm15");
}



#[test]
fn paddusw2283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xE4", "paddusw xmm4, xmm4");
}



#[test]
fn paddusw2284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDD, 0xCB", "paddusw xmm1, xmm11");
}



#[test]
fn paddw2285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x1A", "paddw mm3, [rdx]");
}



#[test]
fn paddw2286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0xD0", "paddw mm2, mm0");
}



#[test]
fn paddw2287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x0A", "paddw mm1, [rdx]");
}



#[test]
fn paddw2288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x02", "paddw mm0, [rdx]");
}



#[test]
fn paddw2289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x1A", "paddw mm3, [rdx]");
}



#[test]
fn paddw2290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFD, 0xC4", "paddw xmm0, xmm12");
}



#[test]
fn paddw2291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0x1A", "paddw xmm3, OWORD [rdx]");
}



#[test]
fn paddw2292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFD, 0xCF", "paddw xmm1, xmm15");
}



#[test]
fn paddw2293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFD, 0xE0", "paddw xmm12, xmm0");
}



#[test]
fn paddw2294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xE4", "paddw xmm4, xmm4");
}



#[test]
fn palignr2295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm0, [rdx], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x02, 0x52", "palignr mm0, [rdx], 82");
}



#[test]
fn palignr2296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm0, [rdx], 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x02, 0x6B", "palignr mm0, [rdx], 107");
}



#[test]
fn palignr2297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm2, [rdx], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x12, 0x6C", "palignr mm2, [rdx], 108");
}



#[test]
fn palignr2298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm1, mm0, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0xC8, 0x63", "palignr mm1, mm0, 99");
}



#[test]
fn palignr2299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm1, [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x08, 0x57", "palignr mm1, [rax], 87");
}



#[test]
fn palignr2300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm12, xmm0, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0F, 0xE0, 0x00", "palignr xmm12, xmm0, 0");
}



#[test]
fn palignr2301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm1, xmm11, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0F, 0xCB, 0x38", "palignr xmm1, xmm11, 56");
}



#[test]
fn palignr2302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm1, xmm2, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0F, 0xCA, 0x2A", "palignr xmm1, xmm2, 42");
}



#[test]
fn palignr2303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm3, xmm11, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0F, 0xDB, 0x31", "palignr xmm3, xmm11, 49");
}



#[test]
fn palignr2304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm11, xmm3, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0F, 0xDB, 0x07", "palignr xmm11, xmm3, 7");
}



#[test]
fn pand2305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0xD8", "pand mm3, mm0");
}



#[test]
fn pand2306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0xC8", "pand mm1, mm0");
}



#[test]
fn pand2307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x22", "pand mm4, [rdx]");
}



#[test]
fn pand2308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x08", "pand mm1, [rax]");
}



#[test]
fn pand2309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x0A", "pand mm1, [rdx]");
}



#[test]
fn pand2310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0x1A", "pand xmm3, OWORD [rdx]");
}



#[test]
fn pand2311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0x22", "pand xmm4, OWORD [rdx]");
}



#[test]
fn pand2312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDB, 0xC3", "pand xmm0, xmm11");
}



#[test]
fn pand2313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0x22", "pand xmm4, OWORD [rdx]");
}



#[test]
fn pand2314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0x38", "pand xmm15, OWORD [rax]");
}



#[test]
fn pandn2315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xD4", "pandn xmm2, xmm4");
}



#[test]
fn pandn2316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xD9", "pandn xmm3, xmm1");
}



#[test]
fn pandn2317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDF, 0xFB", "pandn xmm15, xmm11");
}



#[test]
fn pandn2318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x02", "pandn xmm0, OWORD [rdx]");
}



#[test]
fn pandn2319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x22", "pandn xmm4, OWORD [rdx]");
}



#[test]
fn pandn2320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x12", "pandn mm2, [rdx]");
}



#[test]
fn pandn2321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x18", "pandn mm3, [rax]");
}



#[test]
fn pandn2322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x0A", "pandn mm1, [rdx]");
}



#[test]
fn pandn2323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x22", "pandn mm4, [rdx]");
}



#[test]
fn pandn2324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x18", "pandn mm3, [rax]");
}



#[test]
fn pause2325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pause
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x90", "pause");
}



#[test]
fn paveb2326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x2A", "paveb mm5, [rdx]");
}



#[test]
fn paveb2327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x12", "paveb mm2, [rdx]");
}



#[test]
fn paveb2328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x20", "paveb mm4, [rax]");
}



#[test]
fn paveb2329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x22", "paveb mm4, [rdx]");
}



#[test]
fn paveb2330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xD8", "paveb mm3, mm0");
}



#[test]
fn pavgb2331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xD8", "pavgb mm3, mm0");
}



#[test]
fn pavgb2332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x20", "pavgb mm4, [rax]");
}



#[test]
fn pavgb2333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xD8", "pavgb mm3, mm0");
}



#[test]
fn pavgb2334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x22", "pavgb mm4, [rdx]");
}



#[test]
fn pavgb2335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xE8", "pavgb mm5, mm0");
}



#[test]
fn pavgb2336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE0, 0xE4", "pavgb xmm12, xmm12");
}



#[test]
fn pavgb2337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0xC3", "pavgb xmm0, xmm3");
}



#[test]
fn pavgb2338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE0, 0xFF", "pavgb xmm15, xmm15");
}



#[test]
fn pavgb2339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0x10", "pavgb xmm2, OWORD [rax]");
}



#[test]
fn pavgb2340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0xC2", "pavgb xmm0, xmm2");
}



#[test]
fn pavgusb2341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xBF", "pavgusb mm0, [rdx]");
}



#[test]
fn pavgusb2342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xBF", "pavgusb mm3, [rax]");
}



#[test]
fn pavgusb2343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xBF", "pavgusb mm1, [rax]");
}



#[test]
fn pavgusb2344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xBF", "pavgusb mm2, mm0");
}



#[test]
fn pavgusb2345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xBF", "pavgusb mm2, mm0");
}



#[test]
fn pavgw2346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0xD0", "pavgw mm2, mm0");
}



#[test]
fn pavgw2347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x28", "pavgw mm5, [rax]");
}



#[test]
fn pavgw2348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x02", "pavgw mm0, [rdx]");
}



#[test]
fn pavgw2349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x18", "pavgw mm3, [rax]");
}



#[test]
fn pavgw2350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x1A", "pavgw mm3, [rdx]");
}



#[test]
fn pavgw2351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE3, 0xDF", "pavgw xmm3, xmm15");
}



#[test]
fn pavgw2352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0x1A", "pavgw xmm3, OWORD [rdx]");
}



#[test]
fn pavgw2353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0x12", "pavgw xmm2, OWORD [rdx]");
}



#[test]
fn pavgw2354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE3, 0xDC", "pavgw xmm3, xmm12");
}



#[test]
fn pavgw2355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0xE0", "pavgw xmm4, xmm0");
}



#[test]
fn pblendvb2356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0xFA", "pblendvb xmm15, xmm2");
}



#[test]
fn pblendvb2357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xC8", "pblendvb xmm1, xmm0");
}



#[test]
fn pblendvb2358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0xE4", "pblendvb xmm12, xmm4");
}



#[test]
fn pblendvb2359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xC3", "pblendvb xmm0, xmm3");
}



#[test]
fn pblendvb2360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xC8", "pblendvb xmm1, xmm0");
}



#[test]
fn pblendw2361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, xmm4, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xCC, 0x28", "pblendw xmm1, xmm4, 40");
}



#[test]
fn pblendw2362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm12, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0E, 0xFC, 0x18", "pblendw xmm15, xmm12, 24");
}



#[test]
fn pblendw2363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm2, xmm11, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0E, 0xD3, 0x41", "pblendw xmm2, xmm11, 65");
}



#[test]
fn pblendw2364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm3, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0xFB, 0x16", "pblendw xmm15, xmm3, 22");
}



#[test]
fn pblendw2365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm11, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0E, 0xFB, 0x73", "pblendw xmm15, xmm11, 115");
}



#[test]
fn pclmulhqhqdq2366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xC2, 0x11", "pclmulhqhqdq xmm0, xmm2");
}



#[test]
fn pclmulhqhqdq2367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xDC, 0x11", "pclmulhqhqdq xmm3, xmm4");
}



#[test]
fn pclmulhqhqdq2368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x20, 0x11", "pclmulhqhqdq xmm4, OWORD [rax]");
}



#[test]
fn pclmulhqhqdq2369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCB, 0x11", "pclmulhqhqdq xmm1, xmm11");
}



#[test]
fn pclmulhqhqdq2370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xDC, 0x11", "pclmulhqhqdq xmm3, xmm12");
}



#[test]
fn pclmulhqlqdq2371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD3, 0x01", "pclmulhqlqdq xmm2, xmm3");
}



#[test]
fn pclmulhqlqdq2372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xDA, 0x01", "pclmulhqlqdq xmm11, xmm2");
}



#[test]
fn pclmulhqlqdq2373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xDB, 0x01", "pclmulhqlqdq xmm3, xmm11");
}



#[test]
fn pclmulhqlqdq2374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xD4, 0x01", "pclmulhqlqdq xmm2, xmm12");
}



#[test]
fn pclmulhqlqdq2375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xE0, 0x01", "pclmulhqlqdq xmm12, xmm0");
}



#[test]
fn pclmullqhqdq2376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCF, 0x10", "pclmullqhqdq xmm1, xmm15");
}



#[test]
fn pclmullqhqdq2377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCF, 0x10", "pclmullqhqdq xmm1, xmm15");
}



#[test]
fn pclmullqhqdq2378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x1A, 0x10", "pclmullqhqdq xmm11, OWORD [rdx]");
}



#[test]
fn pclmullqhqdq2379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x10, 0x10", "pclmullqhqdq xmm2, OWORD [rax]");
}



#[test]
fn pclmullqhqdq2380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x1A, 0x10", "pclmullqhqdq xmm11, OWORD [rdx]");
}



#[test]
fn pclmullqlqdq2381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x02, 0x00", "pclmullqlqdq xmm0, OWORD [rdx]");
}



#[test]
fn pclmullqlqdq2382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD1, 0x00", "pclmullqlqdq xmm2, xmm1");
}



#[test]
fn pclmullqlqdq2383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x3A, 0x00", "pclmullqlqdq xmm15, OWORD [rdx]");
}



#[test]
fn pclmullqlqdq2384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x10, 0x00", "pclmullqlqdq xmm2, OWORD [rax]");
}



#[test]
fn pclmullqlqdq2385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xC4, 0x00", "pclmullqlqdq xmm0, xmm4");
}



#[test]
fn pclmulqdq2386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm3, xmm4, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xDC, 0x73", "pclmulqdq xmm3, xmm4, 115");
}



#[test]
fn pclmulqdq2387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm4, xmm0, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xE0, 0x51", "pclmulqdq xmm4, xmm0, 81");
}



#[test]
fn pclmulqdq2388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm3, OWORD [rax], 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x18, 0x50", "pclmulqdq xmm3, OWORD [rax], 80");
}



#[test]
fn pclmulqdq2389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm12, OWORD [rdx], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x22, 0x65", "pclmulqdq xmm12, OWORD [rdx], 101");
}



#[test]
fn pclmulqdq2390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm12, OWORD [rax], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x20, 0x46", "pclmulqdq xmm12, OWORD [rax], 70");
}



#[test]
fn pdistib2391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x00", "pdistib mm0, [rax]");
}



#[test]
fn pdistib2392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x20", "pdistib mm4, [rax]");
}



#[test]
fn pdistib2393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x20", "pdistib mm4, [rax]");
}



#[test]
fn pdistib2394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x20", "pdistib mm4, [rax]");
}



#[test]
fn pdistib2395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x08", "pdistib mm1, [rax]");
}



#[test]
fn pextrb2396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm4, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xE0, 0x5D", "pextrb eax, xmm4, 93");
}



#[test]
fn pextrb2397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm1, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC9, 0x6C", "pextrb ecx, xmm1, 108");
}



#[test]
fn pextrb2398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm11, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xD9, 0x0D", "pextrb ecx, xmm11, 13");
}



#[test]
fn pextrb2399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm1, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC8, 0x18", "pextrb eax, xmm1, 24");
}



#[test]
fn pextrb2400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm0, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC2, 0x35", "pextrb edx, xmm0, 53");
}



#[test]
fn pextrb2401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm0, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x00, 0x04", "pextrb BYTE [rax], xmm0, 4");
}



#[test]
fn pextrb2402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm11, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x18, 0x5E", "pextrb BYTE [rax], xmm11, 94");
}



#[test]
fn pextrb2403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm11, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x18, 0x33", "pextrb BYTE [rax], xmm11, 51");
}



#[test]
fn pextrb2404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm11, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x18, 0x18", "pextrb BYTE [rax], xmm11, 24");
}



#[test]
fn pextrb2405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm12, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x20, 0x3E", "pextrb BYTE [rax], xmm12, 62");
}



#[test]
fn pextrb2406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm2, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD1, 0x74", "pextrb rcx, xmm2, 116");
}



#[test]
fn pextrb2407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm12, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xE2, 0x47", "pextrb rdx, xmm12, 71");
}



#[test]
fn pextrb2408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm1, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xC8, 0x68", "pextrb rax, xmm1, 104");
}



#[test]
fn pextrb2409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm11, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xD9, 0x32", "pextrb rcx, xmm11, 50");
}



#[test]
fn pextrb2410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm15, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xFA, 0x74", "pextrb rdx, xmm15, 116");
}



#[test]
fn pextrd2411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm12, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0x20, 0x20", "pextrd DWORD [rax], xmm12, 32");
}



#[test]
fn pextrd2412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm12, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0x20, 0x50", "pextrd DWORD [rax], xmm12, 80");
}



#[test]
fn pextrd2413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm0, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xC0, 0x5F", "pextrd eax, xmm0, 95");
}



#[test]
fn pextrd2414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm15, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0xF8, 0x27", "pextrd eax, xmm15, 39");
}



#[test]
fn pextrd2415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm3, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x18, 0x17", "pextrd DWORD [rax], xmm3, 23");
}



#[test]
fn pextrq2416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm4, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x20, 0x50", "pextrq [rax], xmm4, 80");
}



#[test]
fn pextrq2417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm12, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0xE0, 0x47", "pextrq rax, xmm12, 71");
}



#[test]
fn pextrq2418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm12, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0xE0, 0x43", "pextrq rax, xmm12, 67");
}



#[test]
fn pextrq2419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm3, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x18, 0x5D", "pextrq [rax], xmm3, 93");
}



#[test]
fn pextrq2420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm11, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x18, 0x61", "pextrq [rax], xmm11, 97");
}



#[test]
fn pextrw2421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm1, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD1, 0x36", "pextrw edx, xmm1, 54");
}



#[test]
fn pextrw2422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm0, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC0, 0x21", "pextrw eax, xmm0, 33");
}



#[test]
fn pextrw2423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm12, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xD4, 0x11", "pextrw edx, xmm12, 17");
}



#[test]
fn pextrw2424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm11, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xC3, 0x14", "pextrw eax, xmm11, 20");
}



#[test]
fn pextrw2425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm3, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC3, 0x7D", "pextrw eax, xmm3, 125");
}



#[test]
fn pextrw2426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm3, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC3, 0x07", "pextrw eax, xmm3, 7");
}



#[test]
fn pextrw2427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm11, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCB, 0x79", "pextrw ecx, xmm11, 121");
}



#[test]
fn pextrw2428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm0, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD0, 0x29", "pextrw edx, xmm0, 41");
}



#[test]
fn pextrw2429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm11, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCB, 0x16", "pextrw ecx, xmm11, 22");
}



#[test]
fn pextrw2430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm2, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD2, 0x73", "pextrw edx, xmm2, 115");
}



#[test]
fn pextrw2431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm2, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x10, 0x6C", "pextrw WORD [rax], xmm2, 108");
}



#[test]
fn pextrw2432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm2, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x10, 0x13", "pextrw WORD [rax], xmm2, 19");
}



#[test]
fn pextrw2433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm1, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x08, 0x7B", "pextrw WORD [rax], xmm1, 123");
}



#[test]
fn pextrw2434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm0, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x00, 0x4A", "pextrw WORD [rax], xmm0, 74");
}



#[test]
fn pextrw2435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm15, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x38, 0x2F", "pextrw WORD [rax], xmm15, 47");
}



#[test]
fn pextrw2436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm4, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xE0, 0x0F", "pextrw rax, xmm4, 15");
}



#[test]
fn pextrw2437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm1, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xCA, 0x75", "pextrw rdx, xmm1, 117");
}



#[test]
fn pextrw2438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm15, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x15, 0xFA, 0x36", "pextrw rdx, xmm15, 54");
}



#[test]
fn pextrw2439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm1, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC8, 0x6B", "pextrw rax, xmm1, 107");
}



#[test]
fn pextrw2440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm15, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x15, 0xFA, 0x0E", "pextrw rdx, xmm15, 14");
}



#[test]
fn pextrw2441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, mm3, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC3, 0x2B", "pextrw eax, mm3, 43");
}



#[test]
fn pextrw2442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm1, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC9, 0x5B", "pextrw ecx, mm1, 91");
}



#[test]
fn pextrw2443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm0, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC8, 0x1E", "pextrw ecx, mm0, 30");
}



#[test]
fn pextrw2444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm4, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xCC, 0x6B", "pextrw ecx, mm4, 107");
}



#[test]
fn pextrw2445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm2, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xCA, 0x24", "pextrw ecx, mm2, 36");
}



#[test]
fn pf2id2446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x1D", "pf2id mm5, mm0");
}



#[test]
fn pf2id2447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x1D", "pf2id mm4, mm0");
}



#[test]
fn pf2id2448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x1D", "pf2id mm4, [rax]");
}



#[test]
fn pf2id2449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x1D", "pf2id mm3, [rax]");
}



#[test]
fn pf2id2450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x1D", "pf2id mm0, [rax]");
}



#[test]
fn pf2iw2451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x1C", "pf2iw mm4, mm0");
}



#[test]
fn pf2iw2452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x1C", "pf2iw mm2, [rax]");
}



#[test]
fn pf2iw2453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x1C", "pf2iw mm3, [rax]");
}



#[test]
fn pf2iw2454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x1C", "pf2iw mm3, [rax]");
}



#[test]
fn pf2iw2455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x1C", "pf2iw mm4, [rax]");
}



#[test]
fn pfacc2456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xAE", "pfacc mm4, mm0");
}



#[test]
fn pfacc2457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xAE", "pfacc mm2, mm0");
}



#[test]
fn pfacc2458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAE", "pfacc mm0, [rax]");
}



#[test]
fn pfacc2459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xAE", "pfacc mm0, mm0");
}



#[test]
fn pfacc2460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0xAE", "pfacc mm5, [rdx]");
}



#[test]
fn pfadd2461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x9E", "pfadd mm0, mm0");
}



#[test]
fn pfadd2462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x9E", "pfadd mm1, [rdx]");
}



#[test]
fn pfadd2463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x9E", "pfadd mm0, [rax]");
}



#[test]
fn pfadd2464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x9E", "pfadd mm1, [rdx]");
}



#[test]
fn pfadd2465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x9E", "pfadd mm3, [rax]");
}



#[test]
fn pfmax2466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xA4", "pfmax mm3, mm0");
}



#[test]
fn pfmax2467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xA4", "pfmax mm5, [rax]");
}



#[test]
fn pfmax2468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xA4", "pfmax mm1, [rdx]");
}



#[test]
fn pfmax2469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xA4", "pfmax mm3, mm0");
}



#[test]
fn pfmax2470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xA4", "pfmax mm1, [rdx]");
}



#[test]
fn pfmin2471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x94", "pfmin mm3, [rax]");
}



#[test]
fn pfmin2472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x94", "pfmin mm0, [rdx]");
}



#[test]
fn pfmin2473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x94", "pfmin mm1, mm0");
}



#[test]
fn pfmin2474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x94", "pfmin mm5, mm0");
}



#[test]
fn pfmin2475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x94", "pfmin mm5, [rax]");
}



#[test]
fn pfmul2476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xB4", "pfmul mm0, [rdx]");
}



#[test]
fn pfmul2477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xB4", "pfmul mm3, mm0");
}



#[test]
fn pfmul2478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xB4", "pfmul mm2, mm0");
}



#[test]
fn pfmul2479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xB4", "pfmul mm0, [rdx]");
}



#[test]
fn pfmul2480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xB4", "pfmul mm4, mm0");
}



#[test]
fn pfnacc2481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x8A", "pfnacc mm2, [rax]");
}



#[test]
fn pfnacc2482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x8A", "pfnacc mm3, [rdx]");
}



#[test]
fn pfnacc2483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x8A", "pfnacc mm4, mm0");
}



#[test]
fn pfnacc2484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x8A", "pfnacc mm2, mm0");
}



#[test]
fn pfnacc2485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x8A", "pfnacc mm3, [rax]");
}



#[test]
fn pfpnacc2486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x8E", "pfpnacc mm4, [rax]");
}



#[test]
fn pfpnacc2487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x8E", "pfpnacc mm0, [rdx]");
}



#[test]
fn pfpnacc2488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x8E", "pfpnacc mm2, [rax]");
}



#[test]
fn pfpnacc2489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x8E", "pfpnacc mm1, mm0");
}



#[test]
fn pfpnacc2490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x8E", "pfpnacc mm2, mm0");
}



#[test]
fn pfrcp2491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x96", "pfrcp mm5, mm0");
}



#[test]
fn pfrcp2492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x96", "pfrcp mm2, [rdx]");
}



#[test]
fn pfrcp2493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x96", "pfrcp mm4, [rdx]");
}



#[test]
fn pfrcp2494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x96", "pfrcp mm4, [rax]");
}



#[test]
fn pfrcp2495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x96", "pfrcp mm5, [rdx]");
}



#[test]
fn pfrcpit12496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xA6", "pfrcpit1 mm3, [rdx]");
}



#[test]
fn pfrcpit12497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA6", "pfrcpit1 mm0, [rax]");
}



#[test]
fn pfrcpit12498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xA6", "pfrcpit1 mm2, mm0");
}



#[test]
fn pfrcpit12499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xA6", "pfrcpit1 mm3, [rdx]");
}



#[test]
fn pfrcpit12500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0xA6", "pfrcpit1 mm5, [rdx]");
}



#[test]
fn pfrcpit22501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xB6", "pfrcpit2 mm0, [rdx]");
}



#[test]
fn pfrcpit22502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xB6", "pfrcpit2 mm0, [rax]");
}



#[test]
fn pfrcpit22503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xB6", "pfrcpit2 mm3, [rdx]");
}



#[test]
fn pfrcpit22504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xB6", "pfrcpit2 mm3, [rax]");
}



#[test]
fn pfrcpit22505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xB6", "pfrcpit2 mm0, [rdx]");
}



#[test]
fn pfrcpv2506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x86", "pfrcpv mm4, [rax]");
}



#[test]
fn pfrcpv2507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x86", "pfrcpv mm1, mm0");
}



#[test]
fn pfrcpv2508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x86", "pfrcpv mm1, [rdx]");
}



#[test]
fn pfrcpv2509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x86", "pfrcpv mm2, [rdx]");
}



#[test]
fn pfrcpv2510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x86", "pfrcpv mm3, [rdx]");
}



#[test]
fn pfrsqit12511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xA7", "pfrsqit1 mm4, mm0");
}



#[test]
fn pfrsqit12512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA7", "pfrsqit1 mm0, [rax]");
}



#[test]
fn pfrsqit12513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA7", "pfrsqit1 mm0, [rax]");
}



#[test]
fn pfrsqit12514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xA7", "pfrsqit1 mm4, [rdx]");
}



#[test]
fn pfrsqit12515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xA7", "pfrsqit1 mm3, mm0");
}



#[test]
fn pfrsqrt2516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x97", "pfrsqrt mm3, [rax]");
}



#[test]
fn pfrsqrt2517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x97", "pfrsqrt mm5, [rax]");
}



#[test]
fn pfrsqrt2518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x97", "pfrsqrt mm3, [rdx]");
}



#[test]
fn pfrsqrt2519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x97", "pfrsqrt mm0, mm0");
}



#[test]
fn pfrsqrt2520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x97", "pfrsqrt mm3, mm0");
}



#[test]
fn pfrsqrtv2521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x87", "pfrsqrtv mm0, [rax]");
}



#[test]
fn pfrsqrtv2522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x87", "pfrsqrtv mm3, mm0");
}



#[test]
fn pfrsqrtv2523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x87", "pfrsqrtv mm4, [rax]");
}



#[test]
fn pfrsqrtv2524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x87", "pfrsqrtv mm3, [rax]");
}



#[test]
fn pfrsqrtv2525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x87", "pfrsqrtv mm4, [rax]");
}



#[test]
fn pfsub2526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x9A", "pfsub mm1, [rdx]");
}



#[test]
fn pfsub2527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x9A", "pfsub mm3, mm0");
}



#[test]
fn pfsub2528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x9A", "pfsub mm1, mm0");
}



#[test]
fn pfsub2529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x9A", "pfsub mm3, [rax]");
}



#[test]
fn pfsub2530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x9A", "pfsub mm3, [rdx]");
}



#[test]
fn pfsubr2531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAA", "pfsubr mm0, [rax]");
}



#[test]
fn pfsubr2532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xAA", "pfsubr mm5, [rax]");
}



#[test]
fn pfsubr2533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xAA", "pfsubr mm2, [rax]");
}



#[test]
fn pfsubr2534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xAA", "pfsubr mm1, [rax]");
}



#[test]
fn pfsubr2535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAA", "pfsubr mm0, [rax]");
}



#[test]
fn phaddd2536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x02, 0xDC", "phaddd xmm3, xmm4");
}



#[test]
fn phaddd2537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x02, 0xD8", "phaddd xmm11, xmm0");
}



#[test]
fn phaddd2538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x02, 0xE3", "phaddd xmm12, xmm3");
}



#[test]
fn phaddd2539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x02, 0xDF", "phaddd xmm3, xmm15");
}



#[test]
fn phaddd2540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x02, 0xE2", "phaddd xmm4, xmm2");
}



#[test]
fn phaddd2541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xC8", "phaddd mm1, mm0");
}



#[test]
fn phaddd2542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x02", "phaddd mm0, [rdx]");
}



#[test]
fn phaddd2543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xE0", "phaddd mm4, mm0");
}



#[test]
fn phaddd2544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x20", "phaddd mm4, [rax]");
}



#[test]
fn phaddd2545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x0A", "phaddd mm1, [rdx]");
}



#[test]
fn phaddsw2546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x03, 0xF9", "phaddsw xmm15, xmm1");
}



#[test]
fn phaddsw2547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x03, 0xF9", "phaddsw xmm15, xmm1");
}



#[test]
fn phaddsw2548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x03, 0xFC", "phaddsw xmm15, xmm12");
}



#[test]
fn phaddsw2549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x03, 0xD8", "phaddsw xmm3, xmm0");
}



#[test]
fn phaddsw2550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x03, 0xCC", "phaddsw xmm1, xmm12");
}



#[test]
fn phaddsw2551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0xC8", "phaddsw mm1, mm0");
}



#[test]
fn phaddsw2552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x18", "phaddsw mm3, [rax]");
}



#[test]
fn phaddsw2553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x18", "phaddsw mm3, [rax]");
}



#[test]
fn phaddsw2554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0xC8", "phaddsw mm1, mm0");
}



#[test]
fn phaddsw2555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0xD0", "phaddsw mm2, mm0");
}



#[test]
fn phaddw2556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x01, 0xDB", "phaddw xmm3, xmm11");
}



#[test]
fn phaddw2557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x01, 0xF9", "phaddw xmm15, xmm1");
}



#[test]
fn phaddw2558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x01, 0xD4", "phaddw xmm2, xmm12");
}



#[test]
fn phaddw2559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x01, 0xE3", "phaddw xmm12, xmm3");
}



#[test]
fn phaddw2560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x01, 0xC1", "phaddw xmm0, xmm1");
}



#[test]
fn phaddw2561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x22", "phaddw mm4, [rdx]");
}



#[test]
fn phaddw2562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xC8", "phaddw mm1, mm0");
}



#[test]
fn phaddw2563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x10", "phaddw mm2, [rax]");
}



#[test]
fn phaddw2564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x10", "phaddw mm2, [rax]");
}



#[test]
fn phaddw2565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x02", "phaddw mm0, [rdx]");
}



#[test]
fn phminposuw2566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xFC", "phminposuw xmm15, xmm4");
}



#[test]
fn phminposuw2567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x41, 0xD7", "phminposuw xmm2, xmm15");
}



#[test]
fn phminposuw2568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xDA", "phminposuw xmm11, xmm2");
}



#[test]
fn phminposuw2569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xD9", "phminposuw xmm11, xmm1");
}



#[test]
fn phminposuw2570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xC0", "phminposuw xmm0, xmm0");
}



#[test]
fn phsubd2571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x06, 0xE3", "phsubd xmm12, xmm3");
}



#[test]
fn phsubd2572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x06, 0xCC", "phsubd xmm1, xmm4");
}



#[test]
fn phsubd2573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x06, 0xC4", "phsubd xmm0, xmm12");
}



#[test]
fn phsubd2574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x06, 0xC9", "phsubd xmm1, xmm1");
}



#[test]
fn phsubd2575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x06, 0xD9", "phsubd xmm3, xmm1");
}



#[test]
fn phsubd2576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x2A", "phsubd mm5, [rdx]");
}



#[test]
fn phsubd2577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x28", "phsubd mm5, [rax]");
}



#[test]
fn phsubd2578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xD8", "phsubd mm3, mm0");
}



#[test]
fn phsubd2579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xE8", "phsubd mm5, mm0");
}



#[test]
fn phsubd2580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xC0", "phsubd mm0, mm0");
}



#[test]
fn phsubsw2581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x2A", "phsubsw mm5, [rdx]");
}



#[test]
fn phsubsw2582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xC0", "phsubsw mm0, mm0");
}



#[test]
fn phsubsw2583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xC8", "phsubsw mm1, mm0");
}



#[test]
fn phsubsw2584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x20", "phsubsw mm4, [rax]");
}



#[test]
fn phsubsw2585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x22", "phsubsw mm4, [rdx]");
}



#[test]
fn phsubsw2586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x07, 0xC3", "phsubsw xmm0, xmm11");
}



#[test]
fn phsubsw2587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x07, 0xDC", "phsubsw xmm3, xmm4");
}



#[test]
fn phsubsw2588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x07, 0xFF", "phsubsw xmm15, xmm15");
}



#[test]
fn phsubsw2589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x07, 0xD7", "phsubsw xmm2, xmm15");
}



#[test]
fn phsubsw2590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x07, 0xDB", "phsubsw xmm11, xmm11");
}



#[test]
fn phsubw2591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xC8", "phsubw mm1, mm0");
}



#[test]
fn phsubw2592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x0A", "phsubw mm1, [rdx]");
}



#[test]
fn phsubw2593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x28", "phsubw mm5, [rax]");
}



#[test]
fn phsubw2594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x0A", "phsubw mm1, [rdx]");
}



#[test]
fn phsubw2595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xC0", "phsubw mm0, mm0");
}



#[test]
fn phsubw2596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x05, 0xD2", "phsubw xmm2, xmm2");
}



#[test]
fn phsubw2597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x05, 0xD3", "phsubw xmm2, xmm3");
}



#[test]
fn phsubw2598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x05, 0xE4", "phsubw xmm12, xmm4");
}



#[test]
fn phsubw2599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x05, 0xC7", "phsubw xmm0, xmm15");
}



#[test]
fn phsubw2600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x05, 0xFC", "phsubw xmm15, xmm12");
}



#[test]
fn pi2fd2601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x0D", "pi2fd mm2, mm0");
}



#[test]
fn pi2fd2602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x0D", "pi2fd mm0, [rdx]");
}



#[test]
fn pi2fd2603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x0D", "pi2fd mm3, [rdx]");
}



#[test]
fn pi2fd2604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x0D", "pi2fd mm5, [rax]");
}



#[test]
fn pi2fd2605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x0D", "pi2fd mm1, [rax]");
}



#[test]
fn pi2fw2606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x0C", "pi2fw mm1, mm0");
}



#[test]
fn pi2fw2607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x0C", "pi2fw mm5, mm0");
}



#[test]
fn pi2fw2608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x0C", "pi2fw mm5, mm0");
}



#[test]
fn pi2fw2609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x0C", "pi2fw mm2, [rax]");
}



#[test]
fn pi2fw2610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x0C", "pi2fw mm4, mm0");
}



#[test]
fn pinsrb2611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, [rax], 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x08, 0x45", "pinsrb xmm1, [rax], 69");
}



#[test]
fn pinsrb2612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm0, [rax], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x00, 0x4D", "pinsrb xmm0, [rax], 77");
}



#[test]
fn pinsrb2613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, [rax], 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x18, 0x38", "pinsrb xmm3, [rax], 56");
}



#[test]
fn pinsrb2614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, [rax], 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x18, 0x4B", "pinsrb xmm11, [rax], 75");
}



#[test]
fn pinsrb2615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x10, 0x6A", "pinsrb xmm2, [rax], 106");
}



#[test]
fn pinsrb2616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, al, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD8, 0x1A", "pinsrb xmm3, al, 26");
}



#[test]
fn pinsrb2617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, BYTE [rax], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x08, 0x68", "pinsrb xmm1, BYTE [rax], 104");
}



#[test]
fn pinsrb2618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, al, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD8, 0x1F", "pinsrb xmm3, al, 31");
}



#[test]
fn pinsrb2619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, al, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE0, 0x6E", "pinsrb xmm12, al, 110");
}



#[test]
fn pinsrb2620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, al, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD8, 0x1B", "pinsrb xmm3, al, 27");
}



#[test]
fn pinsrb2621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm0, eax, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xC0, 0x26", "pinsrb xmm0, eax, 38");
}



#[test]
fn pinsrb2622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, ecx, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xC9, 0x53", "pinsrb xmm1, ecx, 83");
}



#[test]
fn pinsrb2623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, edx, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xCA, 0x26", "pinsrb xmm1, edx, 38");
}



#[test]
fn pinsrb2624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, edx, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xDA, 0x6C", "pinsrb xmm11, edx, 108");
}



#[test]
fn pinsrb2625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm0, ecx, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xC1, 0x70", "pinsrb xmm0, ecx, 112");
}



#[test]
fn pinsrd2626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm0, [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x00, 0x05", "pinsrd xmm0, [rax], 5");
}



#[test]
fn pinsrd2627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm0, [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x00, 0x6A", "pinsrd xmm0, [rax], 106");
}



#[test]
fn pinsrd2628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm3, [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x18, 0x53", "pinsrd xmm3, [rax], 83");
}



#[test]
fn pinsrd2629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x38, 0x70", "pinsrd xmm15, [rax], 112");
}



#[test]
fn pinsrd2630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm3, [rax], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x18, 0x2E", "pinsrd xmm3, [rax], 46");
}



#[test]
fn pinsrq2631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x22", "pinsrq xmm15, [rax], 34");
}



#[test]
fn pinsrq2632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x00", "pinsrq xmm15, [rax], 0");
}



#[test]
fn pinsrq2633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm4, [rax], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x20, 0x56", "pinsrq xmm4, [rax], 86");
}



#[test]
fn pinsrq2634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x6A", "pinsrq xmm11, [rax], 106");
}



#[test]
fn pinsrq2635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm3, [rax], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x18, 0x5C", "pinsrq xmm3, [rax], 92");
}



#[test]
fn pinsrw2636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, [rax], 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x28, 0x38", "pinsrw mm5, [rax], 56");
}



#[test]
fn pinsrw2637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x08, 0x57", "pinsrw mm1, [rax], 87");
}



#[test]
fn pinsrw2638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x08, 0x2C", "pinsrw mm1, [rax], 44");
}



#[test]
fn pinsrw2639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, [rax], 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x3D", "pinsrw mm2, [rax], 61");
}



#[test]
fn pinsrw2640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, [rax], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x28, 0x29", "pinsrw mm5, [rax], 41");
}



#[test]
fn pinsrw2641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, WORD [rax], 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x28, 0x16", "pinsrw mm5, WORD [rax], 22");
}



#[test]
fn pinsrw2642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, ax, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC0, 0x72", "pinsrw mm0, ax, 114");
}



#[test]
fn pinsrw2643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, WORD [rax], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x27", "pinsrw mm2, WORD [rax], 39");
}



#[test]
fn pinsrw2644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, WORD [rax], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x08, 0x5B", "pinsrw mm1, WORD [rax], 91");
}



#[test]
fn pinsrw2645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, WORD [rax], 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x1A", "pinsrw mm0, WORD [rax], 26");
}



#[test]
fn pinsrw2646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm4, eax, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE0, 0x05", "pinsrw mm4, eax, 5");
}



#[test]
fn pinsrw2647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, ecx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC9, 0x76", "pinsrw mm1, ecx, 118");
}



#[test]
fn pinsrw2648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, eax, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC0, 0x3E", "pinsrw mm0, eax, 62");
}



#[test]
fn pinsrw2649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, edx, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC2, 0x03", "pinsrw mm0, edx, 3");
}



#[test]
fn pinsrw2650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm4, ecx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE1, 0x04", "pinsrw mm4, ecx, 4");
}



#[test]
fn pinsrw2651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, dx, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD2, 0x18", "pinsrw xmm2, dx, 24");
}



#[test]
fn pinsrw2652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, dx, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD2, 0x49", "pinsrw xmm2, dx, 73");
}



#[test]
fn pinsrw2653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, cx, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD1, 0x7A", "pinsrw xmm2, cx, 122");
}



#[test]
fn pinsrw2654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, cx, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xF9, 0x75", "pinsrw xmm15, cx, 117");
}



#[test]
fn pinsrw2655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, ax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD0, 0x67", "pinsrw xmm2, ax, 103");
}



#[test]
fn pinsrw2656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, eax, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC8, 0x40", "pinsrw xmm1, eax, 64");
}



#[test]
fn pinsrw2657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, edx, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC2, 0x48", "pinsrw xmm0, edx, 72");
}



#[test]
fn pinsrw2658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, edx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xDA, 0x77", "pinsrw xmm11, edx, 119");
}



#[test]
fn pinsrw2659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, ecx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE1, 0x78", "pinsrw xmm12, ecx, 120");
}



#[test]
fn pinsrw2660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, edx, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xDA, 0x11", "pinsrw xmm3, edx, 17");
}



#[test]
fn pinsrw2661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, [rax], 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x38, 0x03", "pinsrw xmm15, [rax], 3");
}



#[test]
fn pinsrw2662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, [rax], 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x10, 0x07", "pinsrw xmm2, [rax], 7");
}



#[test]
fn pinsrw2663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x08, 0x67", "pinsrw xmm1, [rax], 103");
}



#[test]
fn pinsrw2664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, [rax], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x20, 0x44", "pinsrw xmm12, [rax], 68");
}



#[test]
fn pinsrw2665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, [rax], 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x10, 0x6E", "pinsrw xmm2, [rax], 110");
}



#[test]
fn pinsrw2666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax], 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x74", "pinsrw xmm0, WORD [rax], 116");
}



#[test]
fn pinsrw2667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, WORD [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x3F", "pinsrw xmm4, WORD [rax], 63");
}



#[test]
fn pinsrw2668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, WORD [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x18, 0x48", "pinsrw xmm3, WORD [rax], 72");
}



#[test]
fn pinsrw2669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, WORD [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x43", "pinsrw xmm4, WORD [rax], 67");
}



#[test]
fn pinsrw2670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x11", "pinsrw xmm0, WORD [rax], 17");
}



#[test]
fn pmachriw2671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x20", "pmachriw mm4, [rax]");
}



#[test]
fn pmachriw2672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x20", "pmachriw mm4, [rax]");
}



#[test]
fn pmachriw2673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x00", "pmachriw mm0, [rax]");
}



#[test]
fn pmachriw2674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x08", "pmachriw mm1, [rax]");
}



#[test]
fn pmachriw2675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x00", "pmachriw mm0, [rax]");
}



#[test]
fn pmaddubsw2676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x04, 0xE0", "pmaddubsw xmm4, xmm0");
}



#[test]
fn pmaddubsw2677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x04, 0xCC", "pmaddubsw xmm1, xmm12");
}



#[test]
fn pmaddubsw2678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x04, 0xE7", "pmaddubsw xmm12, xmm15");
}



#[test]
fn pmaddubsw2679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x04, 0xD4", "pmaddubsw xmm2, xmm12");
}



#[test]
fn pmaddubsw2680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x04, 0xC7", "pmaddubsw xmm0, xmm15");
}



#[test]
fn pmaddubsw2681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x2A", "pmaddubsw mm5, [rdx]");
}



#[test]
fn pmaddubsw2682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0xD0", "pmaddubsw mm2, mm0");
}



#[test]
fn pmaddubsw2683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0xE8", "pmaddubsw mm5, mm0");
}



#[test]
fn pmaddubsw2684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x28", "pmaddubsw mm5, [rax]");
}



#[test]
fn pmaddubsw2685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x0A", "pmaddubsw mm1, [rdx]");
}



#[test]
fn pmaddwd2686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x18", "pmaddwd mm3, [rax]");
}



#[test]
fn pmaddwd2687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x10", "pmaddwd mm2, [rax]");
}



#[test]
fn pmaddwd2688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x02", "pmaddwd mm0, [rdx]");
}



#[test]
fn pmaddwd2689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x0A", "pmaddwd mm1, [rdx]");
}



#[test]
fn pmaddwd2690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0xD0", "pmaddwd mm2, mm0");
}



#[test]
fn pmaddwd2691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0xC1", "pmaddwd xmm0, xmm1");
}



#[test]
fn pmaddwd2692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0x18", "pmaddwd xmm11, OWORD [rax]");
}



#[test]
fn pmaddwd2693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xFA", "pmaddwd xmm15, xmm2");
}



#[test]
fn pmaddwd2694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0xE3", "pmaddwd xmm4, xmm3");
}



#[test]
fn pmaddwd2695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xFC", "pmaddwd xmm15, xmm4");
}



#[test]
fn pmagw2696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x12", "pmagw mm2, [rdx]");
}



#[test]
fn pmagw2697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xE0", "pmagw mm4, mm0");
}



#[test]
fn pmagw2698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xC8", "pmagw mm1, mm0");
}



#[test]
fn pmagw2699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x28", "pmagw mm5, [rax]");
}



#[test]
fn pmagw2700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xC8", "pmagw mm1, mm0");
}



#[test]
fn pmaxsb2701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3C, 0xD7", "pmaxsb xmm2, xmm15");
}



#[test]
fn pmaxsb2702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0xE1", "pmaxsb xmm12, xmm1");
}



#[test]
fn pmaxsb2703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3C, 0xFF", "pmaxsb xmm15, xmm15");
}



#[test]
fn pmaxsb2704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0xF8", "pmaxsb xmm15, xmm0");
}



#[test]
fn pmaxsb2705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xC1", "pmaxsb xmm0, xmm1");
}



#[test]
fn pmaxsd2706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3D, 0xC4", "pmaxsd xmm0, xmm12");
}



#[test]
fn pmaxsd2707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xE4", "pmaxsd xmm4, xmm4");
}



#[test]
fn pmaxsd2708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3D, 0xCB", "pmaxsd xmm1, xmm11");
}



#[test]
fn pmaxsd2709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0xFA", "pmaxsd xmm15, xmm2");
}



#[test]
fn pmaxsd2710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3D, 0xFF", "pmaxsd xmm15, xmm15");
}



#[test]
fn pmaxsw2711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xD9", "pmaxsw xmm3, xmm1");
}



#[test]
fn pmaxsw2712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0x12", "pmaxsw xmm2, OWORD [rdx]");
}



#[test]
fn pmaxsw2713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEE, 0x20", "pmaxsw xmm12, OWORD [rax]");
}



#[test]
fn pmaxsw2714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xC0", "pmaxsw xmm0, xmm0");
}



#[test]
fn pmaxsw2715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEE, 0xDC", "pmaxsw xmm3, xmm12");
}



#[test]
fn pmaxsw2716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x1A", "pmaxsw mm3, [rdx]");
}



#[test]
fn pmaxsw2717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xE8", "pmaxsw mm5, mm0");
}



#[test]
fn pmaxsw2718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xC0", "pmaxsw mm0, mm0");
}



#[test]
fn pmaxsw2719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x20", "pmaxsw mm4, [rax]");
}



#[test]
fn pmaxsw2720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xD0", "pmaxsw mm2, mm0");
}



#[test]
fn pmaxub2721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x12", "pmaxub mm2, [rdx]");
}



#[test]
fn pmaxub2722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0xE0", "pmaxub mm4, mm0");
}



#[test]
fn pmaxub2723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x28", "pmaxub mm5, [rax]");
}



#[test]
fn pmaxub2724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0xE8", "pmaxub mm5, mm0");
}



#[test]
fn pmaxub2725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x10", "pmaxub mm2, [rax]");
}



#[test]
fn pmaxub2726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xD0", "pmaxub xmm2, xmm0");
}



#[test]
fn pmaxub2727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDE, 0xE7", "pmaxub xmm12, xmm15");
}



#[test]
fn pmaxub2728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xC2", "pmaxub xmm0, xmm2");
}



#[test]
fn pmaxub2729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0x20", "pmaxub xmm4, OWORD [rax]");
}



#[test]
fn pmaxub2730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xCB", "pmaxub xmm1, xmm3");
}



#[test]
fn pmaxud2731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xDA", "pmaxud xmm3, xmm2");
}



#[test]
fn pmaxud2732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xE3", "pmaxud xmm12, xmm3");
}



#[test]
fn pmaxud2733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xCB", "pmaxud xmm1, xmm11");
}



#[test]
fn pmaxud2734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xD3", "pmaxud xmm2, xmm11");
}



#[test]
fn pmaxud2735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xC3", "pmaxud xmm0, xmm3");
}



#[test]
fn pmaxuw2736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xDF", "pmaxuw xmm3, xmm15");
}



#[test]
fn pmaxuw2737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xD8", "pmaxuw xmm3, xmm0");
}



#[test]
fn pmaxuw2738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xC7", "pmaxuw xmm0, xmm15");
}



#[test]
fn pmaxuw2739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0xF8", "pmaxuw xmm15, xmm0");
}



#[test]
fn pmaxuw2740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0xF9", "pmaxuw xmm15, xmm1");
}



#[test]
fn pminsb2741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xC3", "pminsb xmm0, xmm3");
}



#[test]
fn pminsb2742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x38, 0xCF", "pminsb xmm1, xmm15");
}



#[test]
fn pminsb2743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xDB", "pminsb xmm3, xmm3");
}



#[test]
fn pminsb2744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xE1", "pminsb xmm4, xmm1");
}



#[test]
fn pminsb2745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0xD9", "pminsb xmm11, xmm1");
}



#[test]
fn pminsd2746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xE3", "pminsd xmm4, xmm11");
}



#[test]
fn pminsd2747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xD4", "pminsd xmm2, xmm12");
}



#[test]
fn pminsd2748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xD8", "pminsd xmm3, xmm0");
}



#[test]
fn pminsd2749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xE4", "pminsd xmm12, xmm4");
}



#[test]
fn pminsd2750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xE4", "pminsd xmm12, xmm4");
}



#[test]
fn pminsw2751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0xC8", "pminsw mm1, mm0");
}



#[test]
fn pminsw2752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0xC0", "pminsw mm0, mm0");
}



#[test]
fn pminsw2753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x00", "pminsw mm0, [rax]");
}



#[test]
fn pminsw2754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x00", "pminsw mm0, [rax]");
}



#[test]
fn pminsw2755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x08", "pminsw mm1, [rax]");
}



#[test]
fn pminsw2756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xE1", "pminsw xmm4, xmm1");
}



#[test]
fn pminsw2757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xC1", "pminsw xmm0, xmm1");
}



#[test]
fn pminsw2758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEA, 0xFC", "pminsw xmm15, xmm12");
}



#[test]
fn pminsw2759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xDA", "pminsw xmm3, xmm2");
}



#[test]
fn pminsw2760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0x20", "pminsw xmm4, OWORD [rax]");
}



#[test]
fn pminub2761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDA, 0xD7", "pminub xmm2, xmm15");
}



#[test]
fn pminub2762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xD9", "pminub xmm3, xmm1");
}



#[test]
fn pminub2763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDA, 0xFB", "pminub xmm15, xmm11");
}



#[test]
fn pminub2764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xDC", "pminub xmm3, xmm4");
}



#[test]
fn pminub2765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xD0", "pminub xmm2, xmm0");
}



#[test]
fn pminub2766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x22", "pminub mm4, [rdx]");
}



#[test]
fn pminub2767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xD0", "pminub mm2, mm0");
}



#[test]
fn pminub2768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x28", "pminub mm5, [rax]");
}



#[test]
fn pminub2769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xD0", "pminub mm2, mm0");
}



#[test]
fn pminub2770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x12", "pminub mm2, [rdx]");
}



#[test]
fn pminud2771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xC4", "pminud xmm0, xmm12");
}



#[test]
fn pminud2772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3B, 0xF8", "pminud xmm15, xmm0");
}



#[test]
fn pminud2773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xD3", "pminud xmm2, xmm3");
}



#[test]
fn pminud2774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xD0", "pminud xmm2, xmm0");
}



#[test]
fn pminud2775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xC1", "pminud xmm0, xmm1");
}



#[test]
fn pminuw2776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xE3", "pminuw xmm4, xmm3");
}



#[test]
fn pminuw2777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xE0", "pminuw xmm4, xmm0");
}



#[test]
fn pminuw2778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xE7", "pminuw xmm4, xmm15");
}



#[test]
fn pminuw2779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xE3", "pminuw xmm4, xmm11");
}



#[test]
fn pminuw2780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3A, 0xDB", "pminuw xmm11, xmm11");
}



#[test]
fn pmovmskb2781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xCB", "pmovmskb ecx, xmm11");
}



#[test]
fn pmovmskb2782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xCF", "pmovmskb ecx, xmm15");
}



#[test]
fn pmovmskb2783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xD2", "pmovmskb edx, xmm2");
}



#[test]
fn pmovmskb2784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xD7", "pmovmskb edx, xmm15");
}



#[test]
fn pmovmskb2785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xC4", "pmovmskb eax, xmm12");
}



#[test]
fn pmovmskb2786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xCB", "pmovmskb ecx, mm3");
}



#[test]
fn pmovmskb2787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC9", "pmovmskb ecx, mm1");
}



#[test]
fn pmovmskb2788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xCC", "pmovmskb ecx, mm4");
}



#[test]
fn pmovmskb2789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xD4", "pmovmskb edx, mm4");
}



#[test]
fn pmovmskb2790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xD4", "pmovmskb edx, mm4");
}



#[test]
fn pmovsxbd2791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x21, 0xCF", "pmovsxbd xmm1, xmm15");
}



#[test]
fn pmovsxbd2792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xC0", "pmovsxbd xmm0, xmm0");
}



#[test]
fn pmovsxbd2793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xE1", "pmovsxbd xmm4, xmm1");
}



#[test]
fn pmovsxbd2794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xD1", "pmovsxbd xmm2, xmm1");
}



#[test]
fn pmovsxbd2795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0xE2", "pmovsxbd xmm12, xmm2");
}



#[test]
fn pmovsxbq2796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xDB", "pmovsxbq xmm3, xmm3");
}



#[test]
fn pmovsxbq2797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xC3", "pmovsxbq xmm0, xmm3");
}



#[test]
fn pmovsxbq2798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xC1", "pmovsxbq xmm0, xmm1");
}



#[test]
fn pmovsxbq2799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xD3", "pmovsxbq xmm2, xmm3");
}



#[test]
fn pmovsxbq2800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xD8", "pmovsxbq xmm3, xmm0");
}



#[test]
fn pmovsxbw2801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xE3", "pmovsxbw xmm4, xmm3");
}



#[test]
fn pmovsxbw2802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0xE4", "pmovsxbw xmm12, xmm4");
}



#[test]
fn pmovsxbw2803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x20, 0xCB", "pmovsxbw xmm1, xmm11");
}



#[test]
fn pmovsxbw2804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xC4", "pmovsxbw xmm0, xmm4");
}



#[test]
fn pmovsxbw2805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0xE1", "pmovsxbw xmm12, xmm1");
}



#[test]
fn pmovsxdq2806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xE7", "pmovsxdq xmm4, xmm15");
}



#[test]
fn pmovsxdq2807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xE3", "pmovsxdq xmm4, xmm11");
}



#[test]
fn pmovsxdq2808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0xFB", "pmovsxdq xmm15, xmm3");
}



#[test]
fn pmovsxdq2809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x25, 0xFC", "pmovsxdq xmm15, xmm12");
}



#[test]
fn pmovsxdq2810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0xFB", "pmovsxdq xmm15, xmm3");
}



#[test]
fn pmovsxwd2811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xDA", "pmovsxwd xmm3, xmm2");
}



#[test]
fn pmovsxwd2812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x23, 0xFB", "pmovsxwd xmm15, xmm11");
}



#[test]
fn pmovsxwd2813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xD8", "pmovsxwd xmm11, xmm0");
}



#[test]
fn pmovsxwd2814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x23, 0xFB", "pmovsxwd xmm15, xmm11");
}



#[test]
fn pmovsxwd2815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xE4", "pmovsxwd xmm4, xmm4");
}



#[test]
fn pmovsxwq2816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xE1", "pmovsxwq xmm12, xmm1");
}



#[test]
fn pmovsxwq2817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x24, 0xC4", "pmovsxwq xmm0, xmm12");
}



#[test]
fn pmovsxwq2818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xCA", "pmovsxwq xmm1, xmm2");
}



#[test]
fn pmovsxwq2819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xD0", "pmovsxwq xmm2, xmm0");
}



#[test]
fn pmovsxwq2820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xF8", "pmovsxwq xmm15, xmm0");
}



#[test]
fn pmovzxbd2821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0xDA", "pmovzxbd xmm11, xmm2");
}



#[test]
fn pmovzxbd2822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xE7", "pmovzxbd xmm4, xmm15");
}



#[test]
fn pmovzxbd2823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x31, 0xFF", "pmovzxbd xmm15, xmm15");
}



#[test]
fn pmovzxbd2824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xC7", "pmovzxbd xmm0, xmm15");
}



#[test]
fn pmovzxbd2825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0xD9", "pmovzxbd xmm11, xmm1");
}



#[test]
fn pmovzxbq2826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x32, 0xE3", "pmovzxbq xmm4, xmm11");
}



#[test]
fn pmovzxbq2827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x32, 0xDC", "pmovzxbq xmm3, xmm12");
}



#[test]
fn pmovzxbq2828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x32, 0xFB", "pmovzxbq xmm15, xmm11");
}



#[test]
fn pmovzxbq2829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xE0", "pmovzxbq xmm4, xmm0");
}



#[test]
fn pmovzxbq2830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0xF8", "pmovzxbq xmm15, xmm0");
}



#[test]
fn pmovzxbw2831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0xE2", "pmovzxbw xmm12, xmm2");
}



#[test]
fn pmovzxbw2832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xD1", "pmovzxbw xmm2, xmm1");
}



#[test]
fn pmovzxbw2833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xCC", "pmovzxbw xmm1, xmm12");
}



#[test]
fn pmovzxbw2834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xDF", "pmovzxbw xmm3, xmm15");
}



#[test]
fn pmovzxbw2835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xC7", "pmovzxbw xmm0, xmm15");
}



#[test]
fn pmovzxdq2836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x35, 0xD3", "pmovzxdq xmm2, xmm11");
}



#[test]
fn pmovzxdq2837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xDA", "pmovzxdq xmm3, xmm2");
}



#[test]
fn pmovzxdq2838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xE2", "pmovzxdq xmm4, xmm2");
}



#[test]
fn pmovzxdq2839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xD9", "pmovzxdq xmm3, xmm1");
}



#[test]
fn pmovzxdq2840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x35, 0xDC", "pmovzxdq xmm11, xmm12");
}



#[test]
fn pmovzxwd2841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xDA", "pmovzxwd xmm3, xmm2");
}



#[test]
fn pmovzxwd2842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xDF", "pmovzxwd xmm3, xmm15");
}



#[test]
fn pmovzxwd2843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0xE0", "pmovzxwd xmm12, xmm0");
}



#[test]
fn pmovzxwd2844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xD3", "pmovzxwd xmm2, xmm3");
}



#[test]
fn pmovzxwd2845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xC7", "pmovzxwd xmm0, xmm15");
}



#[test]
fn pmovzxwq2846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xDA", "pmovzxwq xmm3, xmm2");
}



#[test]
fn pmovzxwq2847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xDB", "pmovzxwq xmm3, xmm3");
}



#[test]
fn pmovzxwq2848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xCB", "pmovzxwq xmm1, xmm3");
}



#[test]
fn pmovzxwq2849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x34, 0xD3", "pmovzxwq xmm2, xmm11");
}



#[test]
fn pmovzxwq2850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x34, 0xD4", "pmovzxwq xmm2, xmm12");
}



#[test]
fn pmuldq2851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0xF9", "pmuldq xmm15, xmm1");
}



#[test]
fn pmuldq2852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xDC", "pmuldq xmm3, xmm4");
}



#[test]
fn pmuldq2853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xD1", "pmuldq xmm2, xmm1");
}



#[test]
fn pmuldq2854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x28, 0xC4", "pmuldq xmm0, xmm12");
}



#[test]
fn pmuldq2855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xC9", "pmuldq xmm1, xmm1");
}



#[test]
fn pmulhriw2856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xD8", "pmulhriw mm3, mm0");
}



#[test]
fn pmulhriw2857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x2A", "pmulhriw mm5, [rdx]");
}



#[test]
fn pmulhriw2858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xD8", "pmulhriw mm3, mm0");
}



#[test]
fn pmulhriw2859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xC8", "pmulhriw mm1, mm0");
}



#[test]
fn pmulhriw2860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x12", "pmulhriw mm2, [rdx]");
}



#[test]
fn pmulhrsw2861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x0B, 0xC2", "pmulhrsw xmm0, xmm2");
}



#[test]
fn pmulhrsw2862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0B, 0xCF", "pmulhrsw xmm1, xmm15");
}



#[test]
fn pmulhrsw2863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x0B, 0xFF", "pmulhrsw xmm15, xmm15");
}



#[test]
fn pmulhrsw2864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x0B, 0xCB", "pmulhrsw xmm1, xmm3");
}



#[test]
fn pmulhrsw2865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x0B, 0xDA", "pmulhrsw xmm11, xmm2");
}



#[test]
fn pmulhrsw2866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xD8", "pmulhrsw mm3, mm0");
}



#[test]
fn pmulhrsw2867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x02", "pmulhrsw mm0, [rdx]");
}



#[test]
fn pmulhrsw2868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x18", "pmulhrsw mm3, [rax]");
}



#[test]
fn pmulhrsw2869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x02", "pmulhrsw mm0, [rdx]");
}



#[test]
fn pmulhrsw2870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x08", "pmulhrsw mm1, [rax]");
}



#[test]
fn pmulhrwa2871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xB7", "pmulhrwa mm2, mm0");
}



#[test]
fn pmulhrwa2872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xB7", "pmulhrwa mm5, [rax]");
}



#[test]
fn pmulhrwa2873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xB7", "pmulhrwa mm0, [rdx]");
}



#[test]
fn pmulhrwa2874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xB7", "pmulhrwa mm4, mm0");
}



#[test]
fn pmulhrwa2875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xB7", "pmulhrwa mm0, mm0");
}



#[test]
fn pmulhrwc2876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x28", "pmulhrwc mm5, [rax]");
}



#[test]
fn pmulhrwc2877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x12", "pmulhrwc mm2, [rdx]");
}



#[test]
fn pmulhrwc2878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x22", "pmulhrwc mm4, [rdx]");
}



#[test]
fn pmulhrwc2879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xD0", "pmulhrwc mm2, mm0");
}



#[test]
fn pmulhrwc2880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x28", "pmulhrwc mm5, [rax]");
}



#[test]
fn pmulhuw2881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x22", "pmulhuw mm4, [rdx]");
}



#[test]
fn pmulhuw2882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xE8", "pmulhuw mm5, mm0");
}



#[test]
fn pmulhuw2883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x00", "pmulhuw mm0, [rax]");
}



#[test]
fn pmulhuw2884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x12", "pmulhuw mm2, [rdx]");
}



#[test]
fn pmulhuw2885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x02", "pmulhuw mm0, [rdx]");
}



#[test]
fn pmulhuw2886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xC9", "pmulhuw xmm1, xmm1");
}



#[test]
fn pmulhuw2887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xD9", "pmulhuw xmm3, xmm1");
}



#[test]
fn pmulhuw2888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xE3", "pmulhuw xmm4, xmm3");
}



#[test]
fn pmulhuw2889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0x00", "pmulhuw xmm0, OWORD [rax]");
}



#[test]
fn pmulhuw2890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xD9", "pmulhuw xmm3, xmm1");
}



#[test]
fn pmulhw2891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0xD8", "pmulhw mm3, mm0");
}



#[test]
fn pmulhw2892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x20", "pmulhw mm4, [rax]");
}



#[test]
fn pmulhw2893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x28", "pmulhw mm5, [rax]");
}



#[test]
fn pmulhw2894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0xC0", "pmulhw mm0, mm0");
}



#[test]
fn pmulhw2895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x02", "pmulhw mm0, [rdx]");
}



#[test]
fn pmulhw2896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE5, 0x18", "pmulhw xmm11, OWORD [rax]");
}



#[test]
fn pmulhw2897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE5, 0xDB", "pmulhw xmm11, xmm11");
}



#[test]
fn pmulhw2898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE5, 0xD4", "pmulhw xmm2, xmm12");
}



#[test]
fn pmulhw2899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE5, 0xE7", "pmulhw xmm4, xmm15");
}



#[test]
fn pmulhw2900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x18", "pmulhw xmm3, OWORD [rax]");
}



#[test]
fn pmulld2901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xC8", "pmulld xmm1, xmm0");
}



#[test]
fn pmulld2902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x40, 0xCC", "pmulld xmm1, xmm12");
}



#[test]
fn pmulld2903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x40, 0xE7", "pmulld xmm12, xmm15");
}



#[test]
fn pmulld2904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xC0", "pmulld xmm0, xmm0");
}



#[test]
fn pmulld2905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xD2", "pmulld xmm2, xmm2");
}



#[test]
fn pmullw2906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xD8", "pmullw xmm3, xmm0");
}



#[test]
fn pmullw2907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD5, 0xFC", "pmullw xmm15, xmm12");
}



#[test]
fn pmullw2908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xD2", "pmullw xmm2, xmm2");
}



#[test]
fn pmullw2909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xE3", "pmullw xmm4, xmm3");
}



#[test]
fn pmullw2910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xC0", "pmullw xmm0, xmm0");
}



#[test]
fn pmullw2911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0xC0", "pmullw mm0, mm0");
}



#[test]
fn pmullw2912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x2A", "pmullw mm5, [rdx]");
}



#[test]
fn pmullw2913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x22", "pmullw mm4, [rdx]");
}



#[test]
fn pmullw2914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x2A", "pmullw mm5, [rdx]");
}



#[test]
fn pmullw2915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0xE0", "pmullw mm4, mm0");
}



#[test]
fn pmuludq2916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF4, 0xE0", "pmuludq xmm12, xmm0");
}



#[test]
fn pmuludq2917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0x00", "pmuludq xmm0, OWORD [rax]");
}



#[test]
fn pmuludq2918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF4, 0xD7", "pmuludq xmm2, xmm15");
}



#[test]
fn pmuludq2919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0x08", "pmuludq xmm1, OWORD [rax]");
}



#[test]
fn pmuludq2920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xC2", "pmuludq xmm0, xmm2");
}



#[test]
fn pmuludq2921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x12", "pmuludq mm2, [rdx]");
}



#[test]
fn pmuludq2922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0xE8", "pmuludq mm5, mm0");
}



#[test]
fn pmuludq2923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x0A", "pmuludq mm1, [rdx]");
}



#[test]
fn pmuludq2924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x10", "pmuludq mm2, [rax]");
}



#[test]
fn pmuludq2925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x28", "pmuludq mm5, [rax]");
}



#[test]
fn pmvgezb2926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x20", "pmvgezb mm4, QWORD [rax]");
}



#[test]
fn pmvgezb2927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x00", "pmvgezb mm0, QWORD [rax]");
}



#[test]
fn pmvgezb2928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x10", "pmvgezb mm2, QWORD [rax]");
}



#[test]
fn pmvgezb2929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x08", "pmvgezb mm1, QWORD [rax]");
}



#[test]
fn pmvgezb2930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x10", "pmvgezb mm2, QWORD [rax]");
}



#[test]
fn pmvlzb2931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x00", "pmvlzb mm0, QWORD [rax]");
}



#[test]
fn pmvlzb2932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x00", "pmvlzb mm0, QWORD [rax]");
}



#[test]
fn pmvlzb2933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x08", "pmvlzb mm1, QWORD [rax]");
}



#[test]
fn pmvlzb2934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x18", "pmvlzb mm3, QWORD [rax]");
}



#[test]
fn pmvlzb2935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x18", "pmvlzb mm3, QWORD [rax]");
}



#[test]
fn pmvnzb2936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x08", "pmvnzb mm1, QWORD [rax]");
}



#[test]
fn pmvnzb2937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x10", "pmvnzb mm2, QWORD [rax]");
}



#[test]
fn pmvnzb2938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x20", "pmvnzb mm4, QWORD [rax]");
}



#[test]
fn pmvnzb2939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x20", "pmvnzb mm4, QWORD [rax]");
}



#[test]
fn pmvnzb2940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x10", "pmvnzb mm2, QWORD [rax]");
}



#[test]
fn pmvzb2941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x00", "pmvzb mm0, QWORD [rax]");
}



#[test]
fn pmvzb2942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x28", "pmvzb mm5, QWORD [rax]");
}



#[test]
fn pmvzb2943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x08", "pmvzb mm1, QWORD [rax]");
}



#[test]
fn pmvzb2944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x28", "pmvzb mm5, QWORD [rax]");
}



#[test]
fn pmvzb2945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x10", "pmvzb mm2, QWORD [rax]");
}



#[test]
fn pop2946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5A", "pop rdx");
}



#[test]
fn pop2952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x58", "pop rax");
}



#[test]
fn pop2953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn pop2954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x58", "pop rax");
}



#[test]
fn pop2955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5B", "pop rbx");
}



#[test]
fn pop2956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn pop2962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn pop2963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn pop2964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn pop2965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn popcnt2966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC9", "popcnt rcx, rcx");
}



#[test]
fn popcnt2967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC9", "popcnt rcx, rcx");
}



#[test]
fn popcnt2968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC1", "popcnt rax, rcx");
}



#[test]
fn popcnt2969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD9", "popcnt rbx, rcx");
}



#[test]
fn popcnt2970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC1", "popcnt rax, rcx");
}



#[test]
fn popf2971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popf");
}



#[test]
fn popfq2972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popfq");
}



#[test]
fn popfw2973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9D", "popfw");
}



#[test]
fn por2974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x20", "por mm4, [rax]");
}



#[test]
fn por2975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xE0", "por mm4, mm0");
}



#[test]
fn por2976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x10", "por mm2, [rax]");
}



#[test]
fn por2977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xE0", "por mm4, mm0");
}



#[test]
fn por2978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x2A", "por mm5, [rdx]");
}



#[test]
fn por2979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xF9", "por xmm15, xmm1");
}



#[test]
fn por2980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xE0", "por xmm12, xmm0");
}



#[test]
fn por2981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEB, 0xFC", "por xmm15, xmm12");
}



#[test]
fn por2982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xFB", "por xmm15, xmm3");
}



#[test]
fn por2983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xC9", "por xmm1, xmm1");
}



#[test]
fn prefetch2984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetchnta2989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetcht02994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht12999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht13000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht13001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht13002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht13003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht23004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht23005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht23006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht23007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht23008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetchw3009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw3010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw3011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw3012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw3013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchwt13014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt13015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt13016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt13017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt13018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn psadbw3019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x10", "psadbw mm2, [rax]");
}



#[test]
fn psadbw3020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x22", "psadbw mm4, [rdx]");
}



#[test]
fn psadbw3021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0xC0", "psadbw mm0, mm0");
}



#[test]
fn psadbw3022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x00", "psadbw mm0, [rax]");
}



#[test]
fn psadbw3023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x1A", "psadbw mm3, [rdx]");
}



#[test]
fn psadbw3024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xDB", "psadbw xmm3, xmm3");
}



#[test]
fn psadbw3025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF6, 0xCB", "psadbw xmm1, xmm11");
}



#[test]
fn psadbw3026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xE1", "psadbw xmm4, xmm1");
}



#[test]
fn psadbw3027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF6, 0xCC", "psadbw xmm1, xmm12");
}



#[test]
fn psadbw3028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF6, 0x22", "psadbw xmm12, OWORD [rdx]");
}



#[test]
fn pshufb3029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x00, 0xDF", "pshufb xmm11, xmm15");
}



#[test]
fn pshufb3030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x00, 0xE1", "pshufb xmm4, xmm1");
}



#[test]
fn pshufb3031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x00, 0xDB", "pshufb xmm3, xmm11");
}



#[test]
fn pshufb3032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x00, 0xE1", "pshufb xmm12, xmm1");
}



#[test]
fn pshufb3033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x00, 0xE3", "pshufb xmm12, xmm11");
}



#[test]
fn pshufb3034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x1A", "pshufb mm3, [rdx]");
}



#[test]
fn pshufb3035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0xE8", "pshufb mm5, mm0");
}



#[test]
fn pshufb3036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x22", "pshufb mm4, [rdx]");
}



#[test]
fn pshufb3037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x22", "pshufb mm4, [rdx]");
}



#[test]
fn pshufb3038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x10", "pshufb mm2, [rax]");
}



#[test]
fn pshufd3039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm1, xmm4, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0xCC, 0x4E", "pshufd xmm1, xmm4, 78");
}



#[test]
fn pshufd3040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm0, xmm11, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x70, 0xC3, 0x45", "pshufd xmm0, xmm11, 69");
}



#[test]
fn pshufd3041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm1, xmm1, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0xC9, 0x2D", "pshufd xmm1, xmm1, 45");
}



#[test]
fn pshufd3042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm11, xmm1, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xD9, 0x42", "pshufd xmm11, xmm1, 66");
}



#[test]
fn pshufd3043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm12, xmm15, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x70, 0xE7, 0x56", "pshufd xmm12, xmm15, 86");
}



#[test]
fn pshufhw3044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm11, xmm1, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x70, 0xD9, 0x70", "pshufhw xmm11, xmm1, 112");
}



#[test]
fn pshufhw3045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm12, xmm2, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x70, 0xE2, 0x00", "pshufhw xmm12, xmm2, 0");
}



#[test]
fn pshufhw3046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm1, xmm11, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xCB, 0x48", "pshufhw xmm1, xmm11, 72");
}



#[test]
fn pshufhw3047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm2, xmm0, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xD0, 0x45", "pshufhw xmm2, xmm0, 69");
}



#[test]
fn pshufhw3048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm0, xmm3, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xC3, 0x18", "pshufhw xmm0, xmm3, 24");
}



#[test]
fn pshuflw3049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm11, xmm0, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x70, 0xD8, 0x6A", "pshuflw xmm11, xmm0, 106");
}



#[test]
fn pshuflw3050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm0, xmm2, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xC2, 0x5B", "pshuflw xmm0, xmm2, 91");
}



#[test]
fn pshuflw3051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm3, xmm3, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xDB, 0x3B", "pshuflw xmm3, xmm3, 59");
}



#[test]
fn pshuflw3052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm0, xmm12, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x70, 0xC4, 0x5C", "pshuflw xmm0, xmm12, 92");
}



#[test]
fn pshuflw3053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm3, xmm0, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xD8, 0x15", "pshuflw xmm3, xmm0, 21");
}



#[test]
fn pshufw3054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm4, mm0, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0xE0, 0x47", "pshufw mm4, mm0, 71");
}



#[test]
fn pshufw3055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm4, [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x20, 0x73", "pshufw mm4, [rax], 115");
}



#[test]
fn pshufw3056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm0, [rdx], 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x02, 0x4B", "pshufw mm0, [rdx], 75");
}



#[test]
fn pshufw3057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm4, [rdx], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x22, 0x7B", "pshufw mm4, [rdx], 123");
}



#[test]
fn pshufw3058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm5, [rax], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x28, 0x59", "pshufw mm5, [rax], 89");
}



#[test]
fn psignb3059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x08, 0xE7", "psignb xmm4, xmm15");
}



#[test]
fn psignb3060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x08, 0xFF", "psignb xmm15, xmm15");
}



#[test]
fn psignb3061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x08, 0xCF", "psignb xmm1, xmm15");
}



#[test]
fn psignb3062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x08, 0xCF", "psignb xmm1, xmm15");
}



#[test]
fn psignb3063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x08, 0xE4", "psignb xmm4, xmm12");
}



#[test]
fn psignb3064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x0A", "psignb mm1, [rdx]");
}



#[test]
fn psignb3065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xD0", "psignb mm2, mm0");
}



#[test]
fn psignb3066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xD0", "psignb mm2, mm0");
}



#[test]
fn psignb3067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x22", "psignb mm4, [rdx]");
}



#[test]
fn psignb3068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xE8", "psignb mm5, mm0");
}



#[test]
fn psignd3069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x0A, 0xD9", "psignd xmm11, xmm1");
}



#[test]
fn psignd3070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0A, 0xCF", "psignd xmm1, xmm15");
}



#[test]
fn psignd3071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x0A, 0xC9", "psignd xmm1, xmm1");
}



#[test]
fn psignd3072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0A, 0xC3", "psignd xmm0, xmm11");
}



#[test]
fn psignd3073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0A, 0xE3", "psignd xmm4, xmm11");
}



#[test]
fn psignd3074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x18", "psignd mm3, [rax]");
}



#[test]
fn psignd3075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x2A", "psignd mm5, [rdx]");
}



#[test]
fn psignd3076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x2A", "psignd mm5, [rdx]");
}



#[test]
fn psignd3077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x10", "psignd mm2, [rax]");
}



#[test]
fn psignd3078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x20", "psignd mm4, [rax]");
}



#[test]
fn psignw3079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x09, 0xC4", "psignw xmm0, xmm4");
}



#[test]
fn psignw3080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x09, 0xE4", "psignw xmm4, xmm4");
}



#[test]
fn psignw3081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x09, 0xC2", "psignw xmm0, xmm2");
}



#[test]
fn psignw3082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x09, 0xFB", "psignw xmm15, xmm11");
}



#[test]
fn psignw3083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x09, 0xE3", "psignw xmm4, xmm11");
}



#[test]
fn psignw3084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x0A", "psignw mm1, [rdx]");
}



#[test]
fn psignw3085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x22", "psignw mm4, [rdx]");
}



#[test]
fn psignw3086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x08", "psignw mm1, [rax]");
}



#[test]
fn psignw3087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x28", "psignw mm5, [rax]");
}



#[test]
fn psignw3088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x00", "psignw mm0, [rax]");
}



#[test]
fn pslld3089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF3, 0x43", "pslld xmm11, 67");
}



#[test]
fn pslld3090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF1, 0x44", "pslld xmm1, 68");
}



#[test]
fn pslld3091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF1, 0x67", "pslld xmm1, 103");
}



#[test]
fn pslld3092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF1, 0x2E", "pslld xmm1, 46");
}



#[test]
fn pslld3093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF1, 0x32", "pslld xmm1, 50");
}



#[test]
fn pslld3094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF2, 0x0E", "pslld mm2, 14");
}



#[test]
fn pslld3095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF5, 0x1B", "pslld mm5, 27");
}



#[test]
fn pslld3096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm1, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF1, 0x71", "pslld mm1, 113");
}



#[test]
fn pslld3097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF4, 0x24", "pslld mm4, 36");
}



#[test]
fn pslld3098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF3, 0x14", "pslld mm3, 20");
}



#[test]
fn pslld3099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0x22", "pslld xmm4, OWORD [rdx]");
}



#[test]
fn pslld3100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0x00", "pslld xmm0, OWORD [rax]");
}



#[test]
fn pslld3101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF2, 0xD3", "pslld xmm2, xmm11");
}



#[test]
fn pslld3102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0xE2", "pslld xmm12, xmm2");
}



#[test]
fn pslld3103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0x18", "pslld xmm11, OWORD [rax]");
}



#[test]
fn pslld3104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x20", "pslld mm4, [rax]");
}



#[test]
fn pslld3105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xE8", "pslld mm5, mm0");
}



#[test]
fn pslld3106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xE0", "pslld mm4, mm0");
}



#[test]
fn pslld3107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x02", "pslld mm0, [rdx]");
}



#[test]
fn pslld3108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xD0", "pslld mm2, mm0");
}



#[test]
fn pslldq3109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm15, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFF, 0x1A", "pslldq xmm15, 26");
}



#[test]
fn pslldq3110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm2, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xFA, 0x25", "pslldq xmm2, 37");
}



#[test]
fn pslldq3111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm0, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF8, 0x00", "pslldq xmm0, 0");
}



#[test]
fn pslldq3112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm0, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF8, 0x54", "pslldq xmm0, 84");
}



#[test]
fn pslldq3113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm15, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFF, 0x74", "pslldq xmm15, 116");
}



#[test]
fn psllq3114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xC0", "psllq mm0, mm0");
}



#[test]
fn psllq3115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xC8", "psllq mm1, mm0");
}



#[test]
fn psllq3116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x2A", "psllq mm5, [rdx]");
}



#[test]
fn psllq3117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x00", "psllq mm0, [rax]");
}



#[test]
fn psllq3118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xC8", "psllq mm1, mm0");
}



#[test]
fn psllq3119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF2, 0x21", "psllq mm2, 33");
}



#[test]
fn psllq3120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF2, 0x5D", "psllq mm2, 93");
}



#[test]
fn psllq3121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF0, 0x2F", "psllq mm0, 47");
}



#[test]
fn psllq3122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF0, 0x3D", "psllq mm0, 61");
}



#[test]
fn psllq3123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF2, 0x33", "psllq mm2, 51");
}



#[test]
fn psllq3124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm12, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF4, 0x50", "psllq xmm12, 80");
}



#[test]
fn psllq3125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm1, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF1, 0x43", "psllq xmm1, 67");
}



#[test]
fn psllq3126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF4, 0x1F", "psllq xmm4, 31");
}



#[test]
fn psllq3127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF4, 0x2B", "psllq xmm4, 43");
}



#[test]
fn psllq3128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm2, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF2, 0x35", "psllq xmm2, 53");
}



#[test]
fn psllq3129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xE3", "psllq xmm4, xmm11");
}



#[test]
fn psllq3130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xC4", "psllq xmm0, xmm12");
}



#[test]
fn psllq3131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xE2", "psllq xmm4, xmm2");
}



#[test]
fn psllq3132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF3, 0xFF", "psllq xmm15, xmm15");
}



#[test]
fn psllq3133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF3, 0xFC", "psllq xmm15, xmm12");
}



#[test]
fn psllw3134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0x22", "psllw xmm4, OWORD [rdx]");
}



#[test]
fn psllw3135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF1, 0xE1", "psllw xmm12, xmm1");
}



#[test]
fn psllw3136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF1, 0xE4", "psllw xmm12, xmm12");
}



#[test]
fn psllw3137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xC9", "psllw xmm1, xmm1");
}



#[test]
fn psllw3138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xC4", "psllw xmm0, xmm4");
}



#[test]
fn psllw3139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x00", "psllw mm0, [rax]");
}



#[test]
fn psllw3140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0xD8", "psllw mm3, mm0");
}



#[test]
fn psllw3141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x18", "psllw mm3, [rax]");
}



#[test]
fn psllw3142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x10", "psllw mm2, [rax]");
}



#[test]
fn psllw3143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0xC8", "psllw mm1, mm0");
}



#[test]
fn psllw3144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF4, 0x3E", "psllw xmm4, 62");
}



#[test]
fn psllw3145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF0, 0x76", "psllw xmm0, 118");
}



#[test]
fn psllw3146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF4, 0x58", "psllw xmm12, 88");
}



#[test]
fn psllw3147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm11, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF3, 0x55", "psllw xmm11, 85");
}



#[test]
fn psllw3148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm2, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF2, 0x69", "psllw xmm2, 105");
}



#[test]
fn psllw3149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm5, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF5, 0x7C", "psllw mm5, 124");
}



#[test]
fn psllw3150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF1, 0x5D", "psllw mm1, 93");
}



#[test]
fn psllw3151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF1, 0x1B", "psllw mm1, 27");
}



#[test]
fn psllw3152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF4, 0x1E", "psllw mm4, 30");
}



#[test]
fn psllw3153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm2, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF2, 0x75", "psllw mm2, 117");
}



#[test]
fn psrad3154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE1, 0x6E", "psrad mm1, 110");
}



#[test]
fn psrad3155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE0, 0x66", "psrad mm0, 102");
}



#[test]
fn psrad3156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm5, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE5, 0x0B", "psrad mm5, 11");
}



#[test]
fn psrad3157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE3, 0x0D", "psrad mm3, 13");
}



#[test]
fn psrad3158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm4, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE4, 0x48", "psrad mm4, 72");
}



#[test]
fn psrad3159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x2E", "psrad xmm15, 46");
}



#[test]
fn psrad3160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE2, 0x5A", "psrad xmm2, 90");
}



#[test]
fn psrad3161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE2, 0x76", "psrad xmm2, 118");
}



#[test]
fn psrad3162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x65", "psrad xmm15, 101");
}



#[test]
fn psrad3163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm11, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE3, 0x1B", "psrad xmm11, 27");
}



#[test]
fn psrad3164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xD0", "psrad mm2, mm0");
}



#[test]
fn psrad3165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x00", "psrad mm0, [rax]");
}



#[test]
fn psrad3166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xD8", "psrad mm3, mm0");
}



#[test]
fn psrad3167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xC0", "psrad mm0, mm0");
}



#[test]
fn psrad3168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x08", "psrad mm1, [rax]");
}



#[test]
fn psrad3169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xCC", "psrad xmm1, xmm4");
}



#[test]
fn psrad3170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0x1A", "psrad xmm3, OWORD [rdx]");
}



#[test]
fn psrad3171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE2, 0xDB", "psrad xmm11, xmm3");
}



#[test]
fn psrad3172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE2, 0xDC", "psrad xmm11, xmm12");
}



#[test]
fn psrad3173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE2, 0xD4", "psrad xmm2, xmm12");
}



#[test]
fn psraw3174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0xC8", "psraw mm1, mm0");
}



#[test]
fn psraw3175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x0A", "psraw mm1, [rdx]");
}



#[test]
fn psraw3176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x20", "psraw mm4, [rax]");
}



#[test]
fn psraw3177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0xE0", "psraw mm4, mm0");
}



#[test]
fn psraw3178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x02", "psraw mm0, [rdx]");
}



#[test]
fn psraw3179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm5, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE5, 0x08", "psraw mm5, 8");
}



#[test]
fn psraw3180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE1, 0x23", "psraw mm1, 35");
}



#[test]
fn psraw3181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm2, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE2, 0x52", "psraw mm2, 82");
}



#[test]
fn psraw3182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm2, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE2, 0x2B", "psraw mm2, 43");
}



#[test]
fn psraw3183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE1, 0x76", "psraw mm1, 118");
}



#[test]
fn psraw3184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm0, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE0, 0x67", "psraw xmm0, 103");
}



#[test]
fn psraw3185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm2, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE2, 0x74", "psraw xmm2, 116");
}



#[test]
fn psraw3186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE7, 0x3B", "psraw xmm15, 59");
}



#[test]
fn psraw3187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE4, 0x23", "psraw xmm12, 35");
}



#[test]
fn psraw3188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE4, 0x3C", "psraw xmm12, 60");
}



#[test]
fn psraw3189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0xDB", "psraw xmm11, xmm3");
}



#[test]
fn psraw3190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0xFB", "psraw xmm15, xmm3");
}



#[test]
fn psraw3191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xD9", "psraw xmm3, xmm1");
}



#[test]
fn psraw3192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0x00", "psraw xmm0, OWORD [rax]");
}



#[test]
fn psraw3193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xDB", "psraw xmm3, xmm3");
}



#[test]
fn psrld3194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x12", "psrld mm2, [rdx]");
}



#[test]
fn psrld3195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0xE8", "psrld mm5, mm0");
}



#[test]
fn psrld3196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x2A", "psrld mm5, [rdx]");
}



#[test]
fn psrld3197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x00", "psrld mm0, [rax]");
}



#[test]
fn psrld3198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x20", "psrld mm4, [rax]");
}



#[test]
fn psrld3199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD5, 0x63", "psrld mm5, 99");
}



#[test]
fn psrld3200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD4, 0x6E", "psrld mm4, 110");
}



#[test]
fn psrld3201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm1, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD1, 0x48", "psrld mm1, 72");
}



#[test]
fn psrld3202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD0, 0x6E", "psrld mm0, 110");
}



#[test]
fn psrld3203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD5, 0x6C", "psrld mm5, 108");
}



#[test]
fn psrld3204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0xD9", "psrld xmm3, xmm1");
}



#[test]
fn psrld3205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xFB", "psrld xmm15, xmm3");
}



#[test]
fn psrld3206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0xDC", "psrld xmm3, xmm4");
}



#[test]
fn psrld3207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xD8", "psrld xmm11, xmm0");
}



#[test]
fn psrld3208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0xC4", "psrld xmm0, xmm4");
}



#[test]
fn psrld3209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD2, 0x3A", "psrld xmm2, 58");
}



#[test]
fn psrld3210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD2, 0x1C", "psrld xmm2, 28");
}



#[test]
fn psrld3211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD4, 0x30", "psrld xmm4, 48");
}



#[test]
fn psrld3212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm15, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD7, 0x44", "psrld xmm15, 68");
}



#[test]
fn psrld3213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm3, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD3, 0x44", "psrld xmm3, 68");
}



#[test]
fn psrldq3214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm3, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDB, 0x72", "psrldq xmm3, 114");
}



#[test]
fn psrldq3215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm15, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDF, 0x0F", "psrldq xmm15, 15");
}



#[test]
fn psrldq3216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm12, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDC, 0x23", "psrldq xmm12, 35");
}



#[test]
fn psrldq3217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm1, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD9, 0x7E", "psrldq xmm1, 126");
}



#[test]
fn psrldq3218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm0, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD8, 0x6D", "psrldq xmm0, 109");
}



#[test]
fn psrlq3219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD4, 0x71", "psrlq xmm4, 113");
}



#[test]
fn psrlq3220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD4, 0x1D", "psrlq xmm4, 29");
}



#[test]
fn psrlq3221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD3, 0x3D", "psrlq xmm3, 61");
}



#[test]
fn psrlq3222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD4, 0x3A", "psrlq xmm4, 58");
}



#[test]
fn psrlq3223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm2, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD2, 0x28", "psrlq xmm2, 40");
}



#[test]
fn psrlq3224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0xC0", "psrlq mm0, mm0");
}



#[test]
fn psrlq3225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x10", "psrlq mm2, [rax]");
}



#[test]
fn psrlq3226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x20", "psrlq mm4, [rax]");
}



#[test]
fn psrlq3227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0xC8", "psrlq mm1, mm0");
}



#[test]
fn psrlq3228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x20", "psrlq mm4, [rax]");
}



#[test]
fn psrlq3229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD4, 0x30", "psrlq mm4, 48");
}



#[test]
fn psrlq3230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD5, 0x1E", "psrlq mm5, 30");
}



#[test]
fn psrlq3231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD4, 0x35", "psrlq mm4, 53");
}



#[test]
fn psrlq3232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD4, 0x4B", "psrlq mm4, 75");
}



#[test]
fn psrlq3233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm3, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD3, 0x19", "psrlq mm3, 25");
}



#[test]
fn psrlq3234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD3, 0xDC", "psrlq xmm3, xmm12");
}



#[test]
fn psrlq3235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD3, 0xC3", "psrlq xmm0, xmm11");
}



#[test]
fn psrlq3236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0x1A", "psrlq xmm11, OWORD [rdx]");
}



#[test]
fn psrlq3237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0x18", "psrlq xmm11, OWORD [rax]");
}



#[test]
fn psrlq3238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0xD3", "psrlq xmm2, xmm3");
}



#[test]
fn psrlw3239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD2, 0x2F", "psrlw xmm2, 47");
}



#[test]
fn psrlw3240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm4, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD4, 0x74", "psrlw xmm4, 116");
}



#[test]
fn psrlw3241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD3, 0x1D", "psrlw xmm3, 29");
}



#[test]
fn psrlw3242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD2, 0x55", "psrlw xmm2, 85");
}



#[test]
fn psrlw3243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD3, 0x39", "psrlw xmm3, 57");
}



#[test]
fn psrlw3244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm2, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD2, 0x59", "psrlw mm2, 89");
}



#[test]
fn psrlw3245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm1, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD1, 0x42", "psrlw mm1, 66");
}



#[test]
fn psrlw3246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm1, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD1, 0x0B", "psrlw mm1, 11");
}



#[test]
fn psrlw3247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD5, 0x1F", "psrlw mm5, 31");
}



#[test]
fn psrlw3248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD0, 0x44", "psrlw mm0, 68");
}



#[test]
fn psrlw3249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xC0", "psrlw mm0, mm0");
}



#[test]
fn psrlw3250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x00", "psrlw mm0, [rax]");
}



#[test]
fn psrlw3251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x28", "psrlw mm5, [rax]");
}



#[test]
fn psrlw3252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x18", "psrlw mm3, [rax]");
}



#[test]
fn psrlw3253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x18", "psrlw mm3, [rax]");
}



#[test]
fn psrlw3254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0x38", "psrlw xmm15, OWORD [rax]");
}



#[test]
fn psrlw3255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xE0", "psrlw xmm12, xmm0");
}



#[test]
fn psrlw3256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xCB", "psrlw xmm1, xmm3");
}



#[test]
fn psrlw3257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xDB", "psrlw xmm11, xmm3");
}



#[test]
fn psrlw3258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD1, 0xCF", "psrlw xmm1, xmm15");
}



#[test]
fn psubb3259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x20", "psubb mm4, [rax]");
}



#[test]
fn psubb3260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x0A", "psubb mm1, [rdx]");
}



#[test]
fn psubb3261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x28", "psubb mm5, [rax]");
}



#[test]
fn psubb3262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x12", "psubb mm2, [rdx]");
}



#[test]
fn psubb3263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x0A", "psubb mm1, [rdx]");
}



#[test]
fn psubb3264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xDC", "psubb xmm3, xmm4");
}



#[test]
fn psubb3265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xD8", "psubb xmm11, xmm0");
}



#[test]
fn psubb3266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xE3", "psubb xmm12, xmm3");
}



#[test]
fn psubb3267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF8, 0xC4", "psubb xmm0, xmm12");
}



#[test]
fn psubb3268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xD9", "psubb xmm11, xmm1");
}



#[test]
fn psubd3269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0x3A", "psubd xmm15, OWORD [rdx]");
}



#[test]
fn psubd3270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0x0A", "psubd xmm1, OWORD [rdx]");
}



#[test]
fn psubd3271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0x38", "psubd xmm15, OWORD [rax]");
}



#[test]
fn psubd3272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0xD8", "psubd xmm11, xmm0");
}



#[test]
fn psubd3273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFA, 0xD7", "psubd xmm2, xmm15");
}



#[test]
fn psubd3274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0xC0", "psubd mm0, mm0");
}



#[test]
fn psubd3275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0xE0", "psubd mm4, mm0");
}



#[test]
fn psubd3276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0xD0", "psubd mm2, mm0");
}



#[test]
fn psubd3277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x0A", "psubd mm1, [rdx]");
}



#[test]
fn psubd3278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x1A", "psubd mm3, [rdx]");
}



#[test]
fn psubq3279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0x1A", "psubq xmm11, OWORD [rdx]");
}



#[test]
fn psubq3280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xD0", "psubq xmm2, xmm0");
}



#[test]
fn psubq3281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xD2", "psubq xmm2, xmm2");
}



#[test]
fn psubq3282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0xE1", "psubq xmm12, xmm1");
}



#[test]
fn psubq3283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x00", "psubq xmm0, OWORD [rax]");
}



#[test]
fn psubq3284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x00", "psubq mm0, [rax]");
}



#[test]
fn psubq3285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x08", "psubq mm1, [rax]");
}



#[test]
fn psubq3286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x02", "psubq mm0, [rdx]");
}



#[test]
fn psubq3287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xE8", "psubq mm5, mm0");
}



#[test]
fn psubq3288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x10", "psubq mm2, [rax]");
}



#[test]
fn psubsb3289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0x12", "psubsb xmm2, OWORD [rdx]");
}



#[test]
fn psubsb3290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0xC4", "psubsb xmm0, xmm4");
}



#[test]
fn psubsb3291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0xD2", "psubsb xmm2, xmm2");
}



#[test]
fn psubsb3292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE8, 0xDB", "psubsb xmm3, xmm11");
}



#[test]
fn psubsb3293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE8, 0xE4", "psubsb xmm4, xmm12");
}



#[test]
fn psubsb3294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x2A", "psubsb mm5, [rdx]");
}



#[test]
fn psubsb3295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0xD8", "psubsb mm3, mm0");
}



#[test]
fn psubsb3296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x10", "psubsb mm2, [rax]");
}



#[test]
fn psubsb3297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0xE8", "psubsb mm5, mm0");
}



#[test]
fn psubsb3298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x10", "psubsb mm2, [rax]");
}



#[test]
fn psubsiw3299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xD0", "psubsiw mm2, mm0");
}



#[test]
fn psubsiw3300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x28", "psubsiw mm5, [rax]");
}



#[test]
fn psubsiw3301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x02", "psubsiw mm0, [rdx]");
}



#[test]
fn psubsiw3302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x12", "psubsiw mm2, [rdx]");
}



#[test]
fn psubsiw3303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x08", "psubsiw mm1, [rax]");
}



#[test]
fn psubsw3304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x18", "psubsw mm3, [rax]");
}



#[test]
fn psubsw3305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x02", "psubsw mm0, [rdx]");
}



#[test]
fn psubsw3306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x00", "psubsw mm0, [rax]");
}



#[test]
fn psubsw3307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x10", "psubsw mm2, [rax]");
}



#[test]
fn psubsw3308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0xE8", "psubsw mm5, mm0");
}



#[test]
fn psubsw3309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0x18", "psubsw xmm11, OWORD [rax]");
}



#[test]
fn psubsw3310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0xE2", "psubsw xmm12, xmm2");
}



#[test]
fn psubsw3311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE9, 0xE3", "psubsw xmm12, xmm11");
}



#[test]
fn psubsw3312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xD9", "psubsw xmm3, xmm1");
}



#[test]
fn psubsw3313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xC1", "psubsw xmm0, xmm1");
}



#[test]
fn psubusb3314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0xE4", "psubusb xmm12, xmm4");
}



#[test]
fn psubusb3315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0xC3", "psubusb xmm0, xmm3");
}



#[test]
fn psubusb3316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0xC3", "psubusb xmm0, xmm3");
}



#[test]
fn psubusb3317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0xE4", "psubusb xmm12, xmm4");
}



#[test]
fn psubusb3318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0xFA", "psubusb xmm15, xmm2");
}



#[test]
fn psubusb3319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xD0", "psubusb mm2, mm0");
}



#[test]
fn psubusb3320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x2A", "psubusb mm5, [rdx]");
}



#[test]
fn psubusb3321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xD0", "psubusb mm2, mm0");
}



#[test]
fn psubusb3322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x08", "psubusb mm1, [rax]");
}



#[test]
fn psubusb3323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x18", "psubusb mm3, [rax]");
}



#[test]
fn psubusw3324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0xC8", "psubusw mm1, mm0");
}



#[test]
fn psubusw3325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x08", "psubusw mm1, [rax]");
}



#[test]
fn psubusw3326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x28", "psubusw mm5, [rax]");
}



#[test]
fn psubusw3327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x22", "psubusw mm4, [rdx]");
}



#[test]
fn psubusw3328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0xD8", "psubusw mm3, mm0");
}



#[test]
fn psubusw3329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xD8", "psubusw xmm11, xmm0");
}



#[test]
fn psubusw3330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xFA", "psubusw xmm15, xmm2");
}



#[test]
fn psubusw3331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xC8", "psubusw xmm1, xmm0");
}



#[test]
fn psubusw3332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xE4", "psubusw xmm4, xmm4");
}



#[test]
fn psubusw3333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xE3", "psubusw xmm12, xmm3");
}



#[test]
fn psubw3334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x0A", "psubw mm1, [rdx]");
}



#[test]
fn psubw3335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xD8", "psubw mm3, mm0");
}



#[test]
fn psubw3336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x22", "psubw mm4, [rdx]");
}



#[test]
fn psubw3337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xC8", "psubw mm1, mm0");
}



#[test]
fn psubw3338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xE0", "psubw mm4, mm0");
}



#[test]
fn psubw3339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF9, 0xE4", "psubw xmm4, xmm12");
}



#[test]
fn psubw3340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xC9", "psubw xmm1, xmm1");
}



#[test]
fn psubw3341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xCC", "psubw xmm1, xmm4");
}



#[test]
fn psubw3342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF9, 0x38", "psubw xmm15, OWORD [rax]");
}



#[test]
fn psubw3343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF9, 0xFC", "psubw xmm15, xmm4");
}



#[test]
fn pswapd3344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xBB", "pswapd mm1, [rdx]");
}



#[test]
fn pswapd3345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xBB", "pswapd mm0, [rdx]");
}



#[test]
fn pswapd3346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xBB", "pswapd mm1, [rdx]");
}



#[test]
fn pswapd3347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xBB", "pswapd mm0, [rax]");
}



#[test]
fn pswapd3348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xBB", "pswapd mm0, [rax]");
}



#[test]
fn ptest3349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xFB", "ptest xmm15, xmm3");
}



#[test]
fn ptest3350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xFA", "ptest xmm15, xmm2");
}



#[test]
fn ptest3351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x17, 0xDF", "ptest xmm11, xmm15");
}



#[test]
fn ptest3352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xD0", "ptest xmm2, xmm0");
}



#[test]
fn ptest3353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x17, 0xDF", "ptest xmm3, xmm15");
}



#[test]
fn punpckhbw3354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x12", "punpckhbw mm2, [rdx]");
}



#[test]
fn punpckhbw3355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0xE0", "punpckhbw mm4, mm0");
}



#[test]
fn punpckhbw3356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x08", "punpckhbw mm1, [rax]");
}



#[test]
fn punpckhbw3357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x22", "punpckhbw mm4, [rdx]");
}



#[test]
fn punpckhbw3358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0xD0", "punpckhbw mm2, mm0");
}



#[test]
fn punpckhbw3359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x68, 0xE3", "punpckhbw xmm4, xmm11");
}



#[test]
fn punpckhbw3360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xCB", "punpckhbw xmm1, xmm3");
}



#[test]
fn punpckhbw3361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0x00", "punpckhbw xmm0, OWORD [rax]");
}



#[test]
fn punpckhbw3362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xCA", "punpckhbw xmm1, xmm2");
}



#[test]
fn punpckhbw3363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x68, 0xD4", "punpckhbw xmm2, xmm12");
}



#[test]
fn punpckhdq3364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x12", "punpckhdq mm2, [rdx]");
}



#[test]
fn punpckhdq3365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x08", "punpckhdq mm1, [rax]");
}



#[test]
fn punpckhdq3366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0xC0", "punpckhdq mm0, mm0");
}



#[test]
fn punpckhdq3367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0xE8", "punpckhdq mm5, mm0");
}



#[test]
fn punpckhdq3368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x10", "punpckhdq mm2, [rax]");
}



#[test]
fn punpckhdq3369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0xD4", "punpckhdq xmm2, xmm4");
}



#[test]
fn punpckhdq3370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6A, 0xDC", "punpckhdq xmm3, xmm12");
}



#[test]
fn punpckhdq3371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0x18", "punpckhdq xmm11, OWORD [rax]");
}



#[test]
fn punpckhdq3372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6A, 0xFF", "punpckhdq xmm15, xmm15");
}



#[test]
fn punpckhdq3373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0xD8", "punpckhdq xmm11, xmm0");
}



#[test]
fn punpckhqdq3374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xDC", "punpckhqdq xmm3, xmm4");
}



#[test]
fn punpckhqdq3375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6D, 0xFC", "punpckhqdq xmm15, xmm12");
}



#[test]
fn punpckhqdq3376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0x20", "punpckhqdq xmm4, OWORD [rax]");
}



#[test]
fn punpckhqdq3377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xDA", "punpckhqdq xmm3, xmm2");
}



#[test]
fn punpckhqdq3378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0x10", "punpckhqdq xmm2, OWORD [rax]");
}



#[test]
fn punpckhwd3379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0xC9", "punpckhwd xmm1, xmm1");
}



#[test]
fn punpckhwd3380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0xCB", "punpckhwd xmm1, xmm3");
}



#[test]
fn punpckhwd3381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0x3A", "punpckhwd xmm15, OWORD [rdx]");
}



#[test]
fn punpckhwd3382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x69, 0xE3", "punpckhwd xmm4, xmm11");
}



#[test]
fn punpckhwd3383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0xD3", "punpckhwd xmm2, xmm3");
}



#[test]
fn punpckhwd3384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0xC8", "punpckhwd mm1, mm0");
}



#[test]
fn punpckhwd3385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x02", "punpckhwd mm0, [rdx]");
}



#[test]
fn punpckhwd3386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0xE0", "punpckhwd mm4, mm0");
}



#[test]
fn punpckhwd3387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x12", "punpckhwd mm2, [rdx]");
}



#[test]
fn punpckhwd3388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x00", "punpckhwd mm0, [rax]");
}



#[test]
fn punpcklbw3389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xE4", "punpcklbw xmm4, xmm4");
}



#[test]
fn punpcklbw3390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x60, 0xE3", "punpcklbw xmm12, xmm11");
}



#[test]
fn punpcklbw3391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x60, 0x1A", "punpcklbw xmm11, OWORD [rdx]");
}



#[test]
fn punpcklbw3392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x60, 0xDB", "punpcklbw xmm11, xmm11");
}



#[test]
fn punpcklbw3393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x60, 0xE4", "punpcklbw xmm12, xmm12");
}



#[test]
fn punpcklbw3394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x0A", "punpcklbw mm1, [rdx]");
}



#[test]
fn punpcklbw3395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x1A", "punpcklbw mm3, [rdx]");
}



#[test]
fn punpcklbw3396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x12", "punpcklbw mm2, [rdx]");
}



#[test]
fn punpcklbw3397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x18", "punpcklbw mm3, [rax]");
}



#[test]
fn punpcklbw3398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x28", "punpcklbw mm5, [rax]");
}



#[test]
fn punpckldq3399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x00", "punpckldq mm0, [rax]");
}



#[test]
fn punpckldq3400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x1A", "punpckldq mm3, [rdx]");
}



#[test]
fn punpckldq3401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xC8", "punpckldq mm1, mm0");
}



#[test]
fn punpckldq3402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x02", "punpckldq mm0, [rdx]");
}



#[test]
fn punpckldq3403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x20", "punpckldq mm4, [rax]");
}



#[test]
fn punpckldq3404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xD1", "punpckldq xmm2, xmm1");
}



#[test]
fn punpckldq3405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xD3", "punpckldq xmm2, xmm3");
}



#[test]
fn punpckldq3406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xCA", "punpckldq xmm1, xmm2");
}



#[test]
fn punpckldq3407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xD3", "punpckldq xmm2, xmm11");
}



#[test]
fn punpckldq3408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xD7", "punpckldq xmm2, xmm15");
}



#[test]
fn punpcklqdq3409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0x12", "punpcklqdq xmm2, OWORD [rdx]");
}



#[test]
fn punpcklqdq3410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6C, 0xE4", "punpcklqdq xmm12, xmm4");
}



#[test]
fn punpcklqdq3411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xC4", "punpcklqdq xmm0, xmm4");
}



#[test]
fn punpcklqdq3412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6C, 0xE3", "punpcklqdq xmm12, xmm3");
}



#[test]
fn punpcklqdq3413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6C, 0xDB", "punpcklqdq xmm11, xmm11");
}



#[test]
fn punpcklwd3414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0x00", "punpcklwd xmm0, OWORD [rax]");
}



#[test]
fn punpcklwd3415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0x20", "punpcklwd xmm4, OWORD [rax]");
}



#[test]
fn punpcklwd3416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x61, 0xDF", "punpcklwd xmm11, xmm15");
}



#[test]
fn punpcklwd3417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x61, 0xDC", "punpcklwd xmm3, xmm12");
}



#[test]
fn punpcklwd3418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x61, 0xDB", "punpcklwd xmm11, xmm11");
}



#[test]
fn punpcklwd3419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x22", "punpcklwd mm4, [rdx]");
}



#[test]
fn punpcklwd3420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0xD0", "punpcklwd mm2, mm0");
}



#[test]
fn punpcklwd3421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x20", "punpcklwd mm4, [rax]");
}



#[test]
fn punpcklwd3422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x18", "punpcklwd mm3, [rax]");
}



#[test]
fn punpcklwd3423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x20", "punpcklwd mm4, [rax]");
}



#[test]
fn push3424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x51", "push 81");
}



#[test]
fn push3425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x7A", "push 122");
}



#[test]
fn push3426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x02", "push 2");
}



#[test]
fn push3427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x7C", "push 124");
}



#[test]
fn push3428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x63", "push 99");
}



#[test]
fn push3429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x66", "push 102");
}



#[test]
fn push3435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x5B", "push 91");
}



#[test]
fn push3436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x2F", "push 47");
}



#[test]
fn push3437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x51", "push 81");
}



#[test]
fn push3438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x1A", "push 26");
}



#[test]
fn push3439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x52", "push rdx");
}



#[test]
fn push3442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn push3450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn push3451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn pushf3454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushf");
}



#[test]
fn pushfq3455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushfq");
}



#[test]
fn pushfw3456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9C", "pushfw");
}



#[test]
fn pxor3457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x28", "pxor mm5, [rax]");
}



#[test]
fn pxor3458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0xD0", "pxor mm2, mm0");
}



#[test]
fn pxor3459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x12", "pxor mm2, [rdx]");
}



#[test]
fn pxor3460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x2A", "pxor mm5, [rdx]");
}



#[test]
fn pxor3461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x10", "pxor mm2, [rax]");
}



#[test]
fn pxor3462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xE4", "pxor xmm4, xmm12");
}



#[test]
fn pxor3463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0xDB", "pxor xmm11, xmm3");
}



#[test]
fn pxor3464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEF, 0xE4", "pxor xmm12, xmm12");
}



#[test]
fn pxor3465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0x22", "pxor xmm4, OWORD [rdx]");
}



#[test]
fn pxor3466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xCC", "pxor xmm1, xmm12");
}



#[test]
fn rcl3467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn rcl3468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn rcl3469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn rcl3470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn rcl3471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn rcl3472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x10, 0x38", "rcl QWORD [rax], 56");
}



#[test]
fn rcl3473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x58", "rcl rcx, 88");
}



#[test]
fn rcl3474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x5B", "rcl rcx, 91");
}



#[test]
fn rcl3475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x43", "rcl rcx, 67");
}



#[test]
fn rcl3476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x78", "rcl rcx, 120");
}



#[test]
fn rcl3477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x70", "rcl BYTE [rax], 112");
}



#[test]
fn rcl3478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x0F", "rcl BYTE [rax], 15");
}



#[test]
fn rcl3479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x59", "rcl al, 89");
}



#[test]
fn rcl3480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x61", "rcl BYTE [rax], 97");
}



#[test]
fn rcl3481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x4A", "rcl BYTE [rax], 74");
}



#[test]
fn rcl3482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcl3483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcl3484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcl3485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcl3486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcpps3487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xD4", "rcpps xmm2, xmm12");
}



#[test]
fn rcpps3488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xCB", "rcpps xmm1, xmm11");
}



#[test]
fn rcpps3489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0xC1", "rcpps xmm0, xmm1");
}



#[test]
fn rcpps3490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x53, 0xD8", "rcpps xmm11, xmm0");
}



#[test]
fn rcpps3491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x53, 0xDB", "rcpps xmm11, xmm3");
}



#[test]
fn rcpss3492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xC9", "rcpss xmm1, xmm1");
}



#[test]
fn rcpss3493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xD0", "rcpss xmm2, xmm0");
}



#[test]
fn rcpss3494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x53, 0xC3", "rcpss xmm0, xmm11");
}



#[test]
fn rcpss3495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x53, 0xC7", "rcpss xmm0, xmm15");
}



#[test]
fn rcpss3496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xD9", "rcpss xmm3, xmm1");
}



#[test]
fn rcr3497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x2F", "rcr BYTE [rax], 47");
}



#[test]
fn rcr3498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x72", "rcr BYTE [rax], 114");
}



#[test]
fn rcr3499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x13", "rcr BYTE [rax], 19");
}



#[test]
fn rcr3500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x7E", "rcr al, 126");
}



#[test]
fn rcr3501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x53", "rcr BYTE [rax], 83");
}



#[test]
fn rcr3502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD8", "rcr al, cl");
}



#[test]
fn rcr3505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x6A", "rcr QWORD [rax], 106");
}



#[test]
fn rcr3508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x77", "rcr QWORD [rax], 119");
}



#[test]
fn rcr3509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x0C", "rcr rcx, 12");
}



#[test]
fn rcr3510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x00", "rcr rcx, 0");
}



#[test]
fn rcr3511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x69", "rcr rcx, 105");
}



#[test]
fn rcr3512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn rcr3513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn rcr3514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn rcr3515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn rcr3516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn rdfsbase3517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn rdfsbase3518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn rdfsbase3519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn rdfsbase3520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn rdfsbase3521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn rdgsbase3522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn rdgsbase3523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC8", "rdgsbase rax");
}



#[test]
fn rdgsbase3524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCB", "rdgsbase rbx");
}



#[test]
fn rdgsbase3525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCB", "rdgsbase rbx");
}



#[test]
fn rdgsbase3526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn rdm3527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A", "rdm");
}



#[test]
fn rdmsr3528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x32", "rdmsr");
}



#[test]
fn rdpid3529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn rdpid3530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn rdpid3531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn rdpid3532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn rdpid3533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn rdpkru3534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEE", "rdpkru");
}



#[test]
fn rdpmc3535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x33", "rdpmc");
}



#[test]
fn rdrand3536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn rdrand3537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF0", "rdrand rax");
}



#[test]
fn rdrand3538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn rdrand3539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn rdrand3540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF1", "rdrand rcx");
}



#[test]
fn rdseed3541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn rdseed3542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn rdseed3543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn rdseed3544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn rdseed3545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn rdshr3546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0xC0", "rdshr eax");
}



#[test]
fn rdshr3547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0xC0", "rdshr eax");
}



#[test]
fn rdshr3548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0x00", "rdshr DWORD [rax]");
}



#[test]
fn rdshr3549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0x00", "rdshr DWORD [rax]");
}



#[test]
fn rdshr3550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0xC0", "rdshr eax");
}



#[test]
fn rdtsc3551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtsc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x31", "rdtsc");
}



#[test]
fn rdtscp3552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtscp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF9", "rdtscp");
}



#[test]
fn ret3553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "ret");
}



#[test]
fn ret3554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 13239
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xB7, 0x33", "ret 13239");
}



#[test]
fn ret3555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 11221
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xD5, 0x2B", "ret 11221");
}



#[test]
fn ret3556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 11444
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xB4, 0x2C", "ret 11444");
}



#[test]
fn ret3557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 12602
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x3A, 0x31", "ret 12602");
}



#[test]
fn ret3558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 14322
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xF2, 0x37", "ret 14322");
}



#[test]
fn retf3559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCB", "retf");
}



#[test]
fn retf3560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 3408
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x50, 0x0D", "retf 3408");
}



#[test]
fn retf3561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 15839
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xDF, 0x3D", "retf 15839");
}



#[test]
fn retf3562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 2391
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x57, 0x09", "retf 2391");
}



#[test]
fn retf3563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 166
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xA6, 0x00", "retf 166");
}



#[test]
fn retf3564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 10576
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x50, 0x29", "retf 10576");
}



#[test]
fn retn3565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "retn");
}



#[test]
fn retn3566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 9977
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xF9, 0x26", "retn 9977");
}



#[test]
fn retn3567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 1247
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xDF, 0x04", "retn 1247");
}



#[test]
fn retn3568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 1495
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xD7, 0x05", "retn 1495");
}



#[test]
fn retn3569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 3900
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x3C, 0x0F", "retn 3900");
}



#[test]
fn retn3570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 13536
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xE0, 0x34", "retn 13536");
}



#[test]
fn rol3571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn rol3572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn rol3573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn rol3574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn rol3575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn rol3576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x00", "rol BYTE [rax], cl");
}



#[test]
fn rol3578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x6D", "rol BYTE [rax], 109");
}



#[test]
fn rol3582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x26", "rol al, 38");
}



#[test]
fn rol3583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x58", "rol al, 88");
}



#[test]
fn rol3584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x51", "rol al, 81");
}



#[test]
fn rol3585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x5B", "rol BYTE [rax], 91");
}



#[test]
fn rol3586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x25", "rol rcx, 37");
}



#[test]
fn rol3587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x60", "rol rcx, 96");
}



#[test]
fn rol3588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x60", "rol QWORD [rax], 96");
}



#[test]
fn rol3589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x1B", "rol QWORD [rax], 27");
}



#[test]
fn rol3590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x1C", "rol rcx, 28");
}



#[test]
fn ror3591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x08", "ror QWORD [rax], cl");
}



#[test]
fn ror3592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn ror3593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn ror3594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn ror3595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x08", "ror QWORD [rax], cl");
}



#[test]
fn ror3596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x55", "ror BYTE [rax], 85");
}



#[test]
fn ror3597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x13", "ror al, 19");
}



#[test]
fn ror3598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x55", "ror BYTE [rax], 85");
}



#[test]
fn ror3599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x69", "ror al, 105");
}



#[test]
fn ror3600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x66", "ror BYTE [rax], 102");
}



#[test]
fn ror3601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x4B", "ror QWORD [rax], 75");
}



#[test]
fn ror3602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x22", "ror QWORD [rax], 34");
}



#[test]
fn ror3603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x20", "ror QWORD [rax], 32");
}



#[test]
fn ror3604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x57", "ror QWORD [rax], 87");
}



#[test]
fn ror3605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x23", "ror rcx, 35");
}



#[test]
fn ror3606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn ror3607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn ror3608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn ror3609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn ror3610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn roundpd3611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, xmm3, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xD3, 0x7E", "roundpd xmm2, xmm3, 126");
}



#[test]
fn roundpd3612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm3, xmm4, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xDC, 0x51", "roundpd xmm3, xmm4, 81");
}



#[test]
fn roundpd3613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, xmm1, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xD1, 0x79", "roundpd xmm2, xmm1, 121");
}



#[test]
fn roundpd3614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm1, xmm4, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xCC, 0x63", "roundpd xmm1, xmm4, 99");
}



#[test]
fn roundpd3615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm3, xmm3, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xDB, 0x2C", "roundpd xmm3, xmm3, 44");
}



#[test]
fn roundps3616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm2, xmm2, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xD2, 0x12", "roundps xmm2, xmm2, 18");
}



#[test]
fn roundps3617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, xmm1, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0xD9, 0x6D", "roundps xmm11, xmm1, 109");
}



#[test]
fn roundps3618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm0, xmm0, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xC0, 0x2D", "roundps xmm0, xmm0, 45");
}



#[test]
fn roundps3619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm1, xmm15, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x08, 0xCF, 0x72", "roundps xmm1, xmm15, 114");
}



#[test]
fn roundps3620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm4, xmm0, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xE0, 0x69", "roundps xmm4, xmm0, 105");
}



#[test]
fn roundsd3621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, xmm12, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0B, 0xE4, 0x3D", "roundsd xmm12, xmm12, 61");
}



#[test]
fn roundsd3622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm3, xmm11, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0B, 0xDB, 0x45", "roundsd xmm3, xmm11, 69");
}



#[test]
fn roundsd3623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, xmm3, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xE3, 0x3A", "roundsd xmm4, xmm3, 58");
}



#[test]
fn roundsd3624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm15, xmm1, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0xF9, 0x25", "roundsd xmm15, xmm1, 37");
}



#[test]
fn roundsd3625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm0, xmm2, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xC2, 0x3D", "roundsd xmm0, xmm2, 61");
}



#[test]
fn roundss3626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, xmm3, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xE3, 0x41", "roundss xmm4, xmm3, 65");
}



#[test]
fn roundss3627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, xmm2, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xCA, 0x5D", "roundss xmm1, xmm2, 93");
}



#[test]
fn roundss3628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm11, xmm0, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0xD8, 0x0D", "roundss xmm11, xmm0, 13");
}



#[test]
fn roundss3629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, xmm12, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xCC, 0x2D", "roundss xmm1, xmm12, 45");
}



#[test]
fn roundss3630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm3, xmm0, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xD8, 0x6F", "roundss xmm3, xmm0, 111");
}



#[test]
fn rsldt3631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsm3636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAA", "rsm");
}



#[test]
fn rsqrtps3637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xDB", "rsqrtps xmm3, xmm3");
}



#[test]
fn rsqrtps3638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xC1", "rsqrtps xmm0, xmm1");
}



#[test]
fn rsqrtps3639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xC0", "rsqrtps xmm0, xmm0");
}



#[test]
fn rsqrtps3640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xD0", "rsqrtps xmm2, xmm0");
}



#[test]
fn rsqrtps3641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x52, 0xC4", "rsqrtps xmm0, xmm12");
}



#[test]
fn rsqrtss3642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x52, 0xC3", "rsqrtss xmm0, xmm11");
}



#[test]
fn rsqrtss3643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x52, 0xC4", "rsqrtss xmm0, xmm12");
}



#[test]
fn rsqrtss3644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x52, 0xCB", "rsqrtss xmm1, xmm11");
}



#[test]
fn rsqrtss3645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x52, 0xDB", "rsqrtss xmm11, xmm11");
}



#[test]
fn rsqrtss3646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0xE3", "rsqrtss xmm12, xmm3");
}



#[test]
fn rsts3647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn sahf3652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9E", "sahf");
}



#[test]
fn sal3653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x08", "sal QWORD [rax], 8");
}



#[test]
fn sal3654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x79", "sal QWORD [rax], 121");
}



#[test]
fn sal3655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x2C", "sal QWORD [rax], 44");
}



#[test]
fn sal3656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD1, 0x20", "sal QWORD [rax], 1");
}



#[test]
fn sal3657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x73", "sal rcx, 115");
}



#[test]
fn sal3658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "sal rcx, cl");
}



#[test]
fn sal3661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "sal rcx, cl");
}



#[test]
fn sal3663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x21", "sal BYTE [rax], 33");
}



#[test]
fn sal3664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x07", "sal al, 7");
}



#[test]
fn sal3665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x03", "sal al, 3");
}



#[test]
fn sal3666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x62", "sal BYTE [rax], 98");
}



#[test]
fn sal3667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x6C", "sal al, 108");
}



#[test]
fn sal3668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn sal3669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn sal3670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn sal3671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn sal3672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn sar3673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xF9", "sar rcx, cl");
}



#[test]
fn sar3678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn sar3679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn sar3680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn sar3681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn sar3682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn sar3683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x12", "sar QWORD [rax], 18");
}



#[test]
fn sar3684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x36", "sar QWORD [rax], 54");
}



#[test]
fn sar3685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x0C", "sar QWORD [rax], 12");
}



#[test]
fn sar3686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x7C", "sar QWORD [rax], 124");
}



#[test]
fn sar3687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x53", "sar QWORD [rax], 83");
}



#[test]
fn sar3688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x29", "sar BYTE [rax], 41");
}



#[test]
fn sar3689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x6F", "sar BYTE [rax], 111");
}



#[test]
fn sar3690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x49", "sar BYTE [rax], 73");
}



#[test]
fn sar3691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x1F", "sar BYTE [rax], 31");
}



#[test]
fn sar3692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x25", "sar BYTE [rax], 37");
}



#[test]
fn sbb3693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x11", "sbb rbx, 17");
}



#[test]
fn sbb3694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x64", "sbb rax, 100");
}



#[test]
fn sbb3695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x23", "sbb rcx, 35");
}



#[test]
fn sbb3696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x3F", "sbb rdx, 63");
}



#[test]
fn sbb3697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x0D", "sbb rcx, 13");
}



#[test]
fn sbb3698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x18", "sbb rbx, QWORD [rax]");
}



#[test]
fn sbb3699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x00", "sbb rax, QWORD [rax]");
}



#[test]
fn sbb3700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x10", "sbb rdx, QWORD [rax]");
}



#[test]
fn sbb3701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x08", "sbb rcx, QWORD [rax]");
}



#[test]
fn sbb3702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC9", "sbb rcx, rcx");
}



#[test]
fn sbb3703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb eax, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD8, 0x68", "sbb eax, 104");
}



#[test]
fn sbb3704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb eax, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD8, 0x12", "sbb eax, 18");
}



#[test]
fn sbb3705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x30", "sbb ax, 48");
}



#[test]
fn sbb3706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x58", "sbb rax, 88");
}



#[test]
fn sbb3707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x47", "sbb ax, 71");
}



#[test]
fn sbb3708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x66", "sbb al, 102");
}



#[test]
fn sbb3709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x78", "sbb al, 120");
}



#[test]
fn sbb3710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x20", "sbb al, 32");
}



#[test]
fn sbb3711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x1B", "sbb al, 27");
}



#[test]
fn sbb3712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x1A", "sbb al, 26");
}



#[test]
fn sbb3713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x08", "sbb BYTE [rax], cl");
}



#[test]
fn sbb3719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x00", "sbb BYTE [rax], al");
}



#[test]
fn sbb3720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x00", "sbb BYTE [rax], al");
}



#[test]
fn sbb3721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x00", "sbb BYTE [rax], al");
}



#[test]
fn sbb3722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x10", "sbb BYTE [rax], dl");
}



#[test]
fn sbb3723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x53", "sbb BYTE [rax], 83");
}



#[test]
fn sbb3724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x3A", "sbb BYTE [rax], 58");
}



#[test]
fn sbb3725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x55", "sbb BYTE [rax], 85");
}



#[test]
fn sbb3726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x53", "sbb BYTE [rax], 83");
}



#[test]
fn sbb3727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x1B", "sbb BYTE [rax], 27");
}



#[test]
fn sbb3728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x10", "sbb dl, BYTE [rax]");
}



#[test]
fn sbb3729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC2", "sbb dl, al");
}



#[test]
fn sbb3730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x10", "sbb dl, BYTE [rax]");
}



#[test]
fn sbb3731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x08", "sbb cl, BYTE [rax]");
}



#[test]
fn sbb3732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x10", "sbb dl, BYTE [rax]");
}



#[test]
fn sbb3733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC2", "sbb dl, al");
}



#[test]
fn sbb3734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC8", "sbb al, cl");
}



#[test]
fn sbb3735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC9", "sbb cl, cl");
}



#[test]
fn sbb3736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xCA", "sbb dl, cl");
}



#[test]
fn sbb3737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC0", "sbb al, al");
}



#[test]
fn sbb3738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xDA, 0x78", "sbb dl, 120");
}



#[test]
fn sbb3739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x3C", "sbb cl, 60");
}



#[test]
fn sbb3740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x51", "sbb al, 81");
}



#[test]
fn sbb3741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x6D", "sbb cl, 109");
}



#[test]
fn sbb3742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x00", "sbb cl, 0");
}



#[test]
fn sbb3743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x7C", "sbb rcx, 124");
}



#[test]
fn sbb3744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x6D", "sbb rcx, 109");
}



#[test]
fn sbb3745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x5B", "sbb rcx, 91");
}



#[test]
fn sbb3746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x51", "sbb rbx, 81");
}



#[test]
fn sbb3747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x22", "sbb rbx, 34");
}



#[test]
fn scasb3748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAE", "scasb");
}



#[test]
fn scasd3749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAF", "scasd");
}



#[test]
fn scasq3750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAF", "scasq");
}



#[test]
fn scasw3751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAF", "scasw");
}



#[test]
fn sfence3752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xF8", "sfence");
}



#[test]
fn sgdt3753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sha1msg13758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC9, 0x3A", "sha1msg1 xmm15, OWORD [rdx]");
}



#[test]
fn sha1msg13759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC9, 0xDC", "sha1msg1 xmm11, xmm12");
}



#[test]
fn sha1msg13760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC9, 0xF8", "sha1msg1 xmm15, xmm0");
}



#[test]
fn sha1msg13761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC9, 0xFC", "sha1msg1 xmm15, xmm12");
}



#[test]
fn sha1msg13762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC9, 0xE7", "sha1msg1 xmm4, xmm15");
}



#[test]
fn sha1msg23763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0x08", "sha1msg2 xmm1, OWORD [rax]");
}



#[test]
fn sha1msg23764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0xF8", "sha1msg2 xmm15, xmm0");
}



#[test]
fn sha1msg23765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xCC", "sha1msg2 xmm1, xmm12");
}



#[test]
fn sha1msg23766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0xE0", "sha1msg2 xmm4, xmm0");
}



#[test]
fn sha1msg23767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xD3", "sha1msg2 xmm2, xmm11");
}



#[test]
fn sha1nexte3768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC8, 0xE7", "sha1nexte xmm4, xmm15");
}



#[test]
fn sha1nexte3769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0xE0", "sha1nexte xmm4, xmm0");
}



#[test]
fn sha1nexte3770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC8, 0xD7", "sha1nexte xmm2, xmm15");
}



#[test]
fn sha1nexte3771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC8, 0xFC", "sha1nexte xmm15, xmm12");
}



#[test]
fn sha1nexte3772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC8, 0xE0", "sha1nexte xmm12, xmm0");
}



#[test]
fn sha1rnds43773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm15, xmm0, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x3A, 0xCC, 0xF8, 0x4B", "sha1rnds4 xmm15, xmm0, 75");
}



#[test]
fn sha1rnds43774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, xmm11, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x3A, 0xCC, 0xDB, 0x49", "sha1rnds4 xmm3, xmm11, 73");
}



#[test]
fn sha1rnds43775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, xmm0, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xD8, 0x77", "sha1rnds4 xmm3, xmm0, 119");
}



#[test]
fn sha1rnds43776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, xmm15, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x3A, 0xCC, 0xDF, 0x3B", "sha1rnds4 xmm3, xmm15, 59");
}



#[test]
fn sha1rnds43777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm1, xmm3, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xCB, 0x1F", "sha1rnds4 xmm1, xmm3, 31");
}



#[test]
fn sha256msg13778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCC, 0xF8", "sha256msg1 xmm15, xmm0");
}



#[test]
fn sha256msg13779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xC3", "sha256msg1 xmm0, xmm3");
}



#[test]
fn sha256msg13780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x00", "sha256msg1 xmm0, OWORD [rax]");
}



#[test]
fn sha256msg13781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x0A", "sha256msg1 xmm1, OWORD [rdx]");
}



#[test]
fn sha256msg13782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCC, 0xD4", "sha256msg1 xmm2, xmm12");
}



#[test]
fn sha256msg23783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xD9", "sha256msg2 xmm11, xmm1");
}



#[test]
fn sha256msg23784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xDB", "sha256msg2 xmm11, xmm3");
}



#[test]
fn sha256msg23785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xFB", "sha256msg2 xmm15, xmm3");
}



#[test]
fn sha256msg23786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xDC", "sha256msg2 xmm11, xmm4");
}



#[test]
fn sha256msg23787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xE1", "sha256msg2 xmm12, xmm1");
}



#[test]
fn sha256rnds23788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xE3", "sha256rnds2 xmm4, xmm11");
}



#[test]
fn sha256rnds23789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xD2", "sha256rnds2 xmm2, xmm2");
}



#[test]
fn sha256rnds23790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCB, 0xE3", "sha256rnds2 xmm12, xmm3");
}



#[test]
fn sha256rnds23791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xC0", "sha256rnds2 xmm0, xmm0");
}



#[test]
fn sha256rnds23792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCB, 0xF9", "sha256rnds2 xmm15, xmm1");
}



#[test]
fn shl3793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x39", "shl al, 57");
}



#[test]
fn shl3794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x35", "shl BYTE [rax], 53");
}



#[test]
fn shl3795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x40", "shl BYTE [rax], 64");
}



#[test]
fn shl3796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x14", "shl BYTE [rax], 20");
}



#[test]
fn shl3797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x5F", "shl al, 95");
}



#[test]
fn shl3798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "shl QWORD [rax], cl");
}



#[test]
fn shl3799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shl3800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shl3801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "shl QWORD [rax], cl");
}



#[test]
fn shl3802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "shl QWORD [rax], cl");
}



#[test]
fn shl3803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x45", "shl rcx, 69");
}



#[test]
fn shl3804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x6F", "shl rcx, 111");
}



#[test]
fn shl3805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x00", "shl rcx, 0");
}



#[test]
fn shl3806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x39", "shl rcx, 57");
}



#[test]
fn shl3807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x70", "shl rcx, 112");
}



#[test]
fn shl3808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn shl3809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn shl3810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn shl3811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn shl3812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn shld3813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x08", "shld QWORD [rax], rcx, cl");
}



#[test]
fn shld3814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xD1", "shld rcx, rdx, cl");
}



#[test]
fn shld3815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xD1", "shld rcx, rdx, cl");
}



#[test]
fn shld3816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xD1", "shld rcx, rdx, cl");
}



#[test]
fn shld3817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rbx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xD9", "shld rcx, rbx, cl");
}



#[test]
fn shld3818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rax, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x00, 0x38", "shld QWORD [rax], rax, 56");
}



#[test]
fn shld3819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rbx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x18, 0x76", "shld QWORD [rax], rbx, 118");
}



#[test]
fn shld3820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rcx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x08, 0x55", "shld QWORD [rax], rcx, 85");
}



#[test]
fn shld3821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rcx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC9, 0x29", "shld rcx, rcx, 41");
}



#[test]
fn shld3822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rbx, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xD9, 0x09", "shld rcx, rbx, 9");
}



#[test]
fn shr3823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn shr3824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn shr3825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn shr3826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn shr3827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn shr3828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x35", "shr BYTE [rax], 53");
}



#[test]
fn shr3829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x11", "shr BYTE [rax], 17");
}



#[test]
fn shr3830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x13", "shr BYTE [rax], 19");
}



#[test]
fn shr3831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x51", "shr BYTE [rax], 81");
}



#[test]
fn shr3832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x58", "shr BYTE [rax], 88");
}



#[test]
fn shr3833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x78", "shr rcx, 120");
}



#[test]
fn shr3834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x66", "shr rcx, 102");
}



#[test]
fn shr3835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x2D", "shr rcx, 45");
}



#[test]
fn shr3836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x53", "shr rcx, 83");
}



#[test]
fn shr3837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x14", "shr QWORD [rax], 20");
}



#[test]
fn shr3838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn shr3839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn shr3840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn shr3841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn shr3842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn shrd3843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rbx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0xD9, 0x22", "shrd rcx, rbx, 34");
}



#[test]
fn shrd3844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rax, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x00, 0x62", "shrd QWORD [rax], rax, 98");
}



#[test]
fn shrd3845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rbx, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x18, 0x4F", "shrd QWORD [rax], rbx, 79");
}



#[test]
fn shrd3846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rbx, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0xD9, 0x7C", "shrd rcx, rbx, 124");
}



#[test]
fn shrd3847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rax, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0xC1, 0x22", "shrd rcx, rax, 34");
}



#[test]
fn shrd3848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rbx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x18", "shrd QWORD [rax], rbx, cl");
}



#[test]
fn shrd3849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x08", "shrd QWORD [rax], rcx, cl");
}



#[test]
fn shrd3850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD1", "shrd rcx, rdx, cl");
}



#[test]
fn shrd3851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rbx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x18", "shrd QWORD [rax], rbx, cl");
}



#[test]
fn shrd3852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD1", "shrd rcx, rdx, cl");
}



#[test]
fn shufpd3853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm12, xmm3, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0xE3, 0x70", "shufpd xmm12, xmm3, 112");
}



#[test]
fn shufpd3854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm3, xmm11, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC6, 0xDB, 0x28", "shufpd xmm3, xmm11, 40");
}



#[test]
fn shufpd3855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm4, xmm4, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xE4, 0x7B", "shufpd xmm4, xmm4, 123");
}



#[test]
fn shufpd3856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm3, xmm1, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xD9, 0x63", "shufpd xmm3, xmm1, 99");
}



#[test]
fn shufpd3857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm12, xmm1, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0xE1, 0x1A", "shufpd xmm12, xmm1, 26");
}



#[test]
fn shufps3858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm2, xmm4, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xD4, 0x08", "shufps xmm2, xmm4, 8");
}



#[test]
fn shufps3859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm0, xmm15, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC6, 0xC7, 0x61", "shufps xmm0, xmm15, 97");
}



#[test]
fn shufps3860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm1, xmm11, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC6, 0xCB, 0x26", "shufps xmm1, xmm11, 38");
}



#[test]
fn shufps3861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm12, xmm3, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC6, 0xE3, 0x0E", "shufps xmm12, xmm3, 14");
}



#[test]
fn shufps3862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm3, xmm11, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC6, 0xDB, 0x76", "shufps xmm3, xmm11, 118");
}



#[test]
fn sidt3863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn skinit3868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; skinit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDE", "skinit");
}



#[test]
fn sldt3869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC0", "sldt rax");
}



#[test]
fn sldt3875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC0", "sldt rax");
}



#[test]
fn sldt3876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn sldt3877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC1", "sldt rcx");
}



#[test]
fn sldt3878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn smint3879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smint
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38", "smint");
}



#[test]
fn smsw3880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE2", "smsw rdx");
}



#[test]
fn smsw3886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE1", "smsw rcx");
}



#[test]
fn smsw3887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE1", "smsw rcx");
}



#[test]
fn smsw3888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE2", "smsw rdx");
}



#[test]
fn smsw3889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE1", "smsw rcx");
}



#[test]
fn sqrtpd3890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0x20", "sqrtpd xmm12, OWORD [rax]");
}



#[test]
fn sqrtpd3891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0x18", "sqrtpd xmm3, OWORD [rax]");
}



#[test]
fn sqrtpd3892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0xDC", "sqrtpd xmm11, xmm4");
}



#[test]
fn sqrtpd3893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0x1A", "sqrtpd xmm3, OWORD [rdx]");
}



#[test]
fn sqrtpd3894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0x0A", "sqrtpd xmm1, OWORD [rdx]");
}



#[test]
fn sqrtps3895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x1A", "sqrtps xmm3, OWORD [rdx]");
}



#[test]
fn sqrtps3896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x1A", "sqrtps xmm3, OWORD [rdx]");
}



#[test]
fn sqrtps3897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xD4", "sqrtps xmm2, xmm4");
}



#[test]
fn sqrtps3898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x22", "sqrtps xmm4, OWORD [rdx]");
}



#[test]
fn sqrtps3899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x22", "sqrtps xmm4, OWORD [rdx]");
}



#[test]
fn sqrtsd3900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x51, 0xDF", "sqrtsd xmm11, xmm15");
}



#[test]
fn sqrtsd3901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xC3", "sqrtsd xmm0, xmm11");
}



#[test]
fn sqrtsd3902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xDF", "sqrtsd xmm3, xmm15");
}



#[test]
fn sqrtsd3903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xDC", "sqrtsd xmm3, xmm12");
}



#[test]
fn sqrtsd3904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xFC", "sqrtsd xmm15, xmm4");
}



#[test]
fn sqrtss3905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0xD2", "sqrtss xmm2, xmm2");
}



#[test]
fn sqrtss3906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x51, 0xFB", "sqrtss xmm15, xmm11");
}



#[test]
fn sqrtss3907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0xE2", "sqrtss xmm4, xmm2");
}



#[test]
fn sqrtss3908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x51, 0xFF", "sqrtss xmm15, xmm15");
}



#[test]
fn sqrtss3909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0xC4", "sqrtss xmm0, xmm4");
}



#[test]
fn stac3910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCB", "stac");
}



#[test]
fn stc3911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF9", "stc");
}



#[test]
fn std3912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; std
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFD", "std");
}



#[test]
fn stgi3913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stgi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDC", "stgi");
}



#[test]
fn sti3914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sti
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFB", "sti");
}



#[test]
fn stmxcsr3915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stosb3920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAA", "stosb");
}



#[test]
fn stosd3921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAB", "stosd");
}



#[test]
fn stosq3922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAB", "stosq");
}



#[test]
fn stosw3923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAB", "stosw");
}



#[test]
fn str3924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC9", "str rcx");
}



#[test]
fn str3930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCB", "str rbx");
}



#[test]
fn str3931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCA", "str rdx");
}



#[test]
fn str3932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC9", "str rcx");
}



#[test]
fn str3933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCB", "str rbx");
}



#[test]
fn sub3934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn sub3935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x10", "sub dl, BYTE [rax]");
}



#[test]
fn sub3936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn sub3937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x10", "sub dl, BYTE [rax]");
}



#[test]
fn sub3938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC0", "sub al, al");
}



#[test]
fn sub3939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x6A", "sub ax, 106");
}



#[test]
fn sub3940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x63", "sub rax, 99");
}



#[test]
fn sub3941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x24", "sub ax, 36");
}



#[test]
fn sub3942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x67", "sub eax, 103");
}



#[test]
fn sub3943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x7E", "sub ax, 126");
}



#[test]
fn sub3944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x25", "sub rcx, 37");
}



#[test]
fn sub3945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x61", "sub rdx, 97");
}



#[test]
fn sub3946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x29", "sub rdx, 41");
}



#[test]
fn sub3947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x67", "sub rax, 103");
}



#[test]
fn sub3948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x6C", "sub rax, 108");
}



#[test]
fn sub3949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x10", "sub BYTE [rax], 16");
}



#[test]
fn sub3950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x63", "sub BYTE [rax], 99");
}



#[test]
fn sub3951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x1E", "sub BYTE [rax], 30");
}



#[test]
fn sub3952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x0D", "sub BYTE [rax], 13");
}



#[test]
fn sub3953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x14", "sub BYTE [rax], 20");
}



#[test]
fn sub3954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x00", "sub BYTE [rax], al");
}



#[test]
fn sub3955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x00", "sub BYTE [rax], al");
}



#[test]
fn sub3956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x10", "sub BYTE [rax], dl");
}



#[test]
fn sub3957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x08", "sub BYTE [rax], cl");
}



#[test]
fn sub3958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x08", "sub BYTE [rax], cl");
}



#[test]
fn sub3959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x3D", "sub al, 61");
}



#[test]
fn sub3960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x0C", "sub al, 12");
}



#[test]
fn sub3961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x2C", "sub al, 44");
}



#[test]
fn sub3962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x05", "sub al, 5");
}



#[test]
fn sub3963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x45", "sub al, 69");
}



#[test]
fn sub3964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x10", "sub rdx, QWORD [rax]");
}



#[test]
fn sub3970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x08", "sub rcx, QWORD [rax]");
}



#[test]
fn sub3971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x08", "sub rcx, QWORD [rax]");
}



#[test]
fn sub3972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x10", "sub rdx, QWORD [rax]");
}



#[test]
fn sub3973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xCA", "sub rdx, rcx");
}



#[test]
fn sub3974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xD0", "sub al, dl");
}



#[test]
fn sub3975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC9", "sub cl, cl");
}



#[test]
fn sub3976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC8", "sub al, cl");
}



#[test]
fn sub3977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC9", "sub cl, cl");
}



#[test]
fn sub3978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xD0", "sub al, dl");
}



#[test]
fn sub3979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x7C", "sub rbx, 124");
}



#[test]
fn sub3980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x33", "sub rax, 51");
}



#[test]
fn sub3981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x12", "sub rax, 18");
}



#[test]
fn sub3982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x27", "sub rcx, 39");
}



#[test]
fn sub3983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x56", "sub rcx, 86");
}



#[test]
fn sub3984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x57", "sub al, 87");
}



#[test]
fn sub3985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE9, 0x69", "sub cl, 105");
}



#[test]
fn sub3986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE9, 0x3D", "sub cl, 61");
}



#[test]
fn sub3987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x50", "sub dl, 80");
}



#[test]
fn sub3988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x68", "sub al, 104");
}



#[test]
fn subpd3989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5C, 0xC7", "subpd xmm0, xmm15");
}



#[test]
fn subpd3990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5C, 0xDC", "subpd xmm3, xmm12");
}



#[test]
fn subpd3991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0xC4", "subpd xmm0, xmm4");
}



#[test]
fn subpd3992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0x00", "subpd xmm0, OWORD [rax]");
}



#[test]
fn subpd3993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0xFB", "subpd xmm15, xmm3");
}



#[test]
fn subps3994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5C, 0xF9", "subps xmm15, xmm1");
}



#[test]
fn subps3995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0xCB", "subps xmm1, xmm3");
}



#[test]
fn subps3996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5C, 0xDB", "subps xmm11, xmm3");
}



#[test]
fn subps3997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5C, 0xE0", "subps xmm12, xmm0");
}



#[test]
fn subps3998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5C, 0xFF", "subps xmm15, xmm15");
}



#[test]
fn subsd3999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xDB", "subsd xmm3, xmm3");
}



#[test]
fn subsd4000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5C, 0xC7", "subsd xmm0, xmm15");
}



#[test]
fn subsd4001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xC1", "subsd xmm0, xmm1");
}



#[test]
fn subsd4002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xFB", "subsd xmm15, xmm11");
}



#[test]
fn subsd4003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xFF", "subsd xmm15, xmm15");
}



#[test]
fn subss4004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5C, 0xFB", "subss xmm15, xmm11");
}



#[test]
fn subss4005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xD4", "subss xmm2, xmm12");
}



#[test]
fn subss4006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xE7", "subss xmm4, xmm15");
}



#[test]
fn subss4007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xC7", "subss xmm0, xmm15");
}



#[test]
fn subss4008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xE4", "subss xmm4, xmm12");
}



#[test]
fn svldt4009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt4010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt4011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt4012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt4013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svts4014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts4015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts4016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts4017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts4018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn swapgs4019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; swapgs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF8", "swapgs");
}



#[test]
fn syscall4020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; syscall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x05", "syscall");
}



#[test]
fn sysenter4021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysenter
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x34", "sysenter");
}



#[test]
fn sysexit4022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysexit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x35", "sysexit");
}



#[test]
fn sysret4023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x07", "sysret");
}



#[test]
fn test4024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x46", "test al, 70");
}



#[test]
fn test4025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x1B", "test BYTE [rax], 27");
}



#[test]
fn test4026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x65", "test al, 101");
}



#[test]
fn test4027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x1B", "test BYTE [rax], 27");
}



#[test]
fn test4028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x75", "test BYTE [rax], 117");
}



#[test]
fn test4029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xC9", "test rcx, rcx");
}



#[test]
fn test4030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xC1", "test rcx, rax");
}



#[test]
fn test4031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x00", "test QWORD [rax], rax");
}



#[test]
fn test4032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x18", "test QWORD [rax], rbx");
}



#[test]
fn test4033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x00", "test QWORD [rax], rax");
}



#[test]
fn test4034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x4A, 0x00, 0x00, 0x00", "test rax, 74");
}



#[test]
fn test4035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x6D, 0x00, 0x00, 0x00", "test rax, 109");
}



#[test]
fn test4036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x43, 0x00, 0x00, 0x00", "test eax, 67");
}



#[test]
fn test4037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x00, 0x00", "test ax, 0");
}



#[test]
fn test4038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x15, 0x00, 0x00, 0x00", "test eax, 21");
}



#[test]
fn test4039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test BYTE [rax], al");
}



#[test]
fn test4040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC0", "test al, al");
}



#[test]
fn test4041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC8", "test al, cl");
}



#[test]
fn test4042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test BYTE [rax], al");
}



#[test]
fn test4043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xD0", "test al, dl");
}



#[test]
fn test4044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x42, 0x00, 0x00, 0x00", "test rcx, 66");
}



#[test]
fn test4045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x52, 0x00, 0x00, 0x00", "test rcx, 82");
}



#[test]
fn test4046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x1A, 0x00, 0x00, 0x00", "test QWORD [rax], 26");
}



#[test]
fn test4047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x10, 0x00, 0x00, 0x00", "test QWORD [rax], 16");
}



#[test]
fn test4048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x60, 0x00, 0x00, 0x00", "test rcx, 96");
}



#[test]
fn test4049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x10", "test dl, BYTE [rax]");
}



#[test]
fn test4050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x10", "test dl, BYTE [rax]");
}



#[test]
fn test4051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test al, BYTE [rax]");
}



#[test]
fn test4052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test al, BYTE [rax]");
}



#[test]
fn test4053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x08", "test cl, BYTE [rax]");
}



#[test]
fn test4054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x6A", "test al, 106");
}



#[test]
fn test4055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x20", "test al, 32");
}



#[test]
fn test4056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x06", "test al, 6");
}



#[test]
fn test4057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x1B", "test al, 27");
}



#[test]
fn test4058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x5E", "test al, 94");
}



#[test]
fn tzcnt4059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xD1", "tzcnt rdx, rcx");
}



#[test]
fn tzcnt4060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x08", "tzcnt rcx, QWORD [rax]");
}



#[test]
fn tzcnt4061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x08", "tzcnt rcx, QWORD [rax]");
}



#[test]
fn tzcnt4062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xD1", "tzcnt rdx, rcx");
}



#[test]
fn tzcnt4063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x18", "tzcnt rbx, QWORD [rax]");
}



#[test]
fn ucomisd4064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0xF9", "ucomisd xmm15, xmm1");
}



#[test]
fn ucomisd4065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x2E, 0xE7", "ucomisd xmm12, xmm15");
}



#[test]
fn ucomisd4066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xCB", "ucomisd xmm1, xmm3");
}



#[test]
fn ucomisd4067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x2E, 0xFB", "ucomisd xmm15, xmm11");
}



#[test]
fn ucomisd4068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2E, 0xD3", "ucomisd xmm2, xmm11");
}



#[test]
fn ucomiss4069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xD4", "ucomiss xmm2, xmm4");
}



#[test]
fn ucomiss4070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xCC", "ucomiss xmm1, xmm4");
}



#[test]
fn ucomiss4071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0xF8", "ucomiss xmm15, xmm0");
}



#[test]
fn ucomiss4072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0xDC", "ucomiss xmm11, xmm4");
}



#[test]
fn ucomiss4073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2E, 0xDF", "ucomiss xmm3, xmm15");
}



#[test]
fn ud24074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2");
}



#[test]
fn ud2a4075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2a
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2a");
}



#[test]
fn unpckhpd4076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x15, 0xE3", "unpckhpd xmm4, xmm11");
}



#[test]
fn unpckhpd4077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x15, 0xE7", "unpckhpd xmm4, xmm15");
}



#[test]
fn unpckhpd4078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xCA", "unpckhpd xmm1, xmm2");
}



#[test]
fn unpckhpd4079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xD4", "unpckhpd xmm2, xmm4");
}



#[test]
fn unpckhpd4080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x15, 0xDB", "unpckhpd xmm11, xmm3");
}



#[test]
fn unpckhps4081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x15, 0xDF", "unpckhps xmm11, xmm15");
}



#[test]
fn unpckhps4082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x15, 0xF8", "unpckhps xmm15, xmm0");
}



#[test]
fn unpckhps4083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x15, 0xDC", "unpckhps xmm3, xmm12");
}



#[test]
fn unpckhps4084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0xC8", "unpckhps xmm1, xmm0");
}



#[test]
fn unpckhps4085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x15, 0xF9", "unpckhps xmm15, xmm1");
}



#[test]
fn unpcklpd4086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0x1A", "unpcklpd xmm3, OWORD [rdx]");
}



#[test]
fn unpcklpd4087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0x12", "unpcklpd xmm2, OWORD [rdx]");
}



#[test]
fn unpcklpd4088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0xDC", "unpcklpd xmm3, xmm4");
}



#[test]
fn unpcklpd4089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0xDC", "unpcklpd xmm11, xmm4");
}



#[test]
fn unpcklpd4090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0x0A", "unpcklpd xmm1, OWORD [rdx]");
}



#[test]
fn unpcklps4091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0xE1", "unpcklps xmm4, xmm1");
}



#[test]
fn unpcklps4092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0xDB", "unpcklps xmm3, xmm3");
}



#[test]
fn unpcklps4093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0xE3", "unpcklps xmm12, xmm3");
}



#[test]
fn unpcklps4094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0xD8", "unpcklps xmm11, xmm0");
}



#[test]
fn unpcklps4095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0xE3", "unpcklps xmm12, xmm3");
}



#[test]
fn verr4096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verw4101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn vmcall4106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmcall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC1", "vmcall");
}



#[test]
fn vmclear4107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmfunc4112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmfunc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD4", "vmfunc");
}



#[test]
fn vmlaunch4113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmlaunch
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC2", "vmlaunch");
}



#[test]
fn vmload4114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmload
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDA", "vmload");
}



#[test]
fn vmmcall4115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmmcall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD9", "vmmcall");
}



#[test]
fn vmptrld4116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrst4121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmread4126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC8", "vmread rax, rcx");
}



#[test]
fn vmread4127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC8", "vmread rax, rcx");
}



#[test]
fn vmread4128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0x08", "vmread [rax], rcx");
}



#[test]
fn vmread4129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0x08", "vmread [rax], rcx");
}



#[test]
fn vmread4130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC8", "vmread rax, rcx");
}



#[test]
fn vmresume4131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmresume
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC3", "vmresume");
}



#[test]
fn vmrun4132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmrun
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD8", "vmrun");
}



#[test]
fn vmsave4133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmsave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDB", "vmsave");
}



#[test]
fn vmwrite4134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xC0", "vmwrite rax, rax");
}



#[test]
fn vmwrite4135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0x00", "vmwrite rax, [rax]");
}



#[test]
fn vmwrite4136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0x08", "vmwrite rcx, [rax]");
}



#[test]
fn vmwrite4137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xC8", "vmwrite rcx, rax");
}



#[test]
fn vmwrite4138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xC0", "vmwrite rax, rax");
}



#[test]
fn vmxoff4139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxoff
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC4", "vmxoff");
}



#[test]
fn vmxon4140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn wbinvd4145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wbinvd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x09", "wbinvd");
}



#[test]
fn wrfsbase4146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD0", "wrfsbase rax");
}



#[test]
fn wrfsbase4147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD3", "wrfsbase rbx");
}



#[test]
fn wrfsbase4148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD1", "wrfsbase rcx");
}



#[test]
fn wrfsbase4149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD0", "wrfsbase rax");
}



#[test]
fn wrfsbase4150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD1", "wrfsbase rcx");
}



#[test]
fn wrgsbase4151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn wrgsbase4152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD8", "wrgsbase rax");
}



#[test]
fn wrgsbase4153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD8", "wrgsbase rax");
}



#[test]
fn wrgsbase4154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDB", "wrgsbase rbx");
}



#[test]
fn wrgsbase4155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD9", "wrgsbase rcx");
}



#[test]
fn wrmsr4156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x30", "wrmsr");
}



#[test]
fn wrpkru4157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEF", "wrpkru");
}



#[test]
fn wrshr4158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn wrshr4159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn wrshr4160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn wrshr4161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0x00", "wrshr DWORD [rax]");
}



#[test]
fn wrshr4162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn xabort4163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x07", "xabort 7");
}



#[test]
fn xabort4164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x64", "xabort 100");
}



#[test]
fn xabort4165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x39", "xabort 57");
}



#[test]
fn xabort4166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x02", "xabort 2");
}



#[test]
fn xabort4167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x0A", "xabort 10");
}



#[test]
fn xadd4168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD2", "xadd dl, dl");
}



#[test]
fn xadd4169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xCA", "xadd dl, cl");
}



#[test]
fn xadd4170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD1", "xadd cl, dl");
}



#[test]
fn xadd4171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD2", "xadd dl, dl");
}



#[test]
fn xadd4172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD0", "xadd al, dl");
}



#[test]
fn xadd4173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x08", "xadd BYTE [rax], cl");
}



#[test]
fn xadd4179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x10", "xadd BYTE [rax], dl");
}



#[test]
fn xadd4180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x00", "xadd BYTE [rax], al");
}



#[test]
fn xadd4181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x08", "xadd BYTE [rax], cl");
}



#[test]
fn xadd4182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x10", "xadd BYTE [rax], dl");
}



#[test]
fn xchg4183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn xchg4184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC9", "xchg cl, cl");
}



#[test]
fn xchg4185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC0", "xchg al, al");
}



#[test]
fn xchg4186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn xchg4187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn xchg4188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg BYTE [rax], al");
}



#[test]
fn xchg4189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg BYTE [rax], dl");
}



#[test]
fn xchg4190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg BYTE [rax], dl");
}



#[test]
fn xchg4191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg BYTE [rax], cl");
}



#[test]
fn xchg4192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg BYTE [rax], dl");
}



#[test]
fn xchg4193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn xchg4204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn xchg4205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn xchg4206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn xchg4207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD2", "xchg dl, dl");
}



#[test]
fn xchg4208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn xchg4209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg dl, BYTE [rax]");
}



#[test]
fn xchg4210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn xchg4211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn xchg4212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg dl, BYTE [rax]");
}



#[test]
fn xchg4213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xcryptcbc4223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptcbc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xD0", "xcryptcbc");
}



#[test]
fn xcryptcfb4224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptcfb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xE0", "xcryptcfb");
}



#[test]
fn xcryptctr4225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptctr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xD8", "xcryptctr");
}



#[test]
fn xcryptecb4226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptecb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xC8", "xcryptecb");
}



#[test]
fn xcryptofb4227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptofb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xE8", "xcryptofb");
}



#[test]
fn xend4228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xend
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD5", "xend");
}



#[test]
fn xgetbv4229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xgetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD0", "xgetbv");
}



#[test]
fn xlat4230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlat
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlat");
}



#[test]
fn xlatb4231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlatb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlatb");
}



#[test]
fn xor4232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD1", "xor cl, dl");
}



#[test]
fn xor4238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC2", "xor dl, al");
}



#[test]
fn xor4239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD1", "xor cl, dl");
}



#[test]
fn xor4240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD0", "xor al, dl");
}



#[test]
fn xor4241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn xor4242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x3C", "xor rax, 60");
}



#[test]
fn xor4243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x74", "xor rax, 116");
}



#[test]
fn xor4244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x4E", "xor rdx, 78");
}



#[test]
fn xor4245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x1A", "xor rcx, 26");
}



#[test]
fn xor4246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x36", "xor rbx, 54");
}



#[test]
fn xor4247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x52", "xor dl, 82");
}



#[test]
fn xor4248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF1, 0x61", "xor cl, 97");
}



#[test]
fn xor4249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x6D", "xor dl, 109");
}



#[test]
fn xor4250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x0A", "xor dl, 10");
}



#[test]
fn xor4251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF1, 0x1C", "xor cl, 28");
}



#[test]
fn xor4252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC9", "xor rcx, rcx");
}



#[test]
fn xor4253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x10", "xor rdx, QWORD [rax]");
}



#[test]
fn xor4254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xCB", "xor rbx, rcx");
}



#[test]
fn xor4255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x18", "xor rbx, QWORD [rax]");
}



#[test]
fn xor4256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x10", "xor rdx, QWORD [rax]");
}



#[test]
fn xor4257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x1F", "xor al, 31");
}



#[test]
fn xor4258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x44", "xor al, 68");
}



#[test]
fn xor4259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x45", "xor al, 69");
}



#[test]
fn xor4260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x6B", "xor al, 107");
}



#[test]
fn xor4261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x48", "xor al, 72");
}



#[test]
fn xor4262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn xor4263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn xor4264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x08", "xor cl, BYTE [rax]");
}



#[test]
fn xor4265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn xor4266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn xor4267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn xor4268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x00", "xor BYTE [rax], al");
}



#[test]
fn xor4269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn xor4270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn xor4271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x08", "xor BYTE [rax], cl");
}



#[test]
fn xor4272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x39", "xor BYTE [rax], 57");
}



#[test]
fn xor4273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x3F", "xor BYTE [rax], 63");
}



#[test]
fn xor4274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x5A", "xor BYTE [rax], 90");
}



#[test]
fn xor4275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x54", "xor BYTE [rax], 84");
}



#[test]
fn xor4276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x5C", "xor BYTE [rax], 92");
}



#[test]
fn xor4277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x12", "xor rax, 18");
}



#[test]
fn xor4278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x30", "xor rdx, 48");
}



#[test]
fn xor4279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x29", "xor rax, 41");
}



#[test]
fn xor4280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x76", "xor rbx, 118");
}



#[test]
fn xor4281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x1D", "xor rcx, 29");
}



#[test]
fn xor4282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x35", "xor rax, 53");
}



#[test]
fn xor4283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor ax, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF0, 0x38", "xor ax, 56");
}



#[test]
fn xor4284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x31", "xor rax, 49");
}



#[test]
fn xor4285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x2F", "xor rax, 47");
}



#[test]
fn xor4286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor eax, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF0, 0x47", "xor eax, 71");
}



#[test]
fn xorpd4287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xD9", "xorpd xmm3, xmm1");
}



#[test]
fn xorpd4288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x57, 0xDB", "xorpd xmm11, xmm11");
}



#[test]
fn xorpd4289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x57, 0xCB", "xorpd xmm1, xmm11");
}



#[test]
fn xorpd4290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0x10", "xorpd xmm2, OWORD [rax]");
}



#[test]
fn xorpd4291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xD1", "xorpd xmm2, xmm1");
}



#[test]
fn xorps4292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0xC8", "xorps xmm1, xmm0");
}



#[test]
fn xorps4293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0x1A", "xorps xmm3, OWORD [rdx]");
}



#[test]
fn xorps4294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0xC0", "xorps xmm0, xmm0");
}



#[test]
fn xorps4295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0x08", "xorps xmm1, OWORD [rax]");
}



#[test]
fn xorps4296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0xDC", "xorps xmm11, xmm4");
}



#[test]
fn xrstor4297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor644302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstors644307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xsave4312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave644317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsavec644322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsaveopt644327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaves644332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsetbv4337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD1", "xsetbv");
}



#[test]
fn xsha14338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsha1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA6, 0xC8", "xsha1");
}



#[test]
fn xsha2564339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsha256
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA6, 0xD0", "xsha256");
}



#[test]
fn xstore4340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xstore
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA7, 0xC0", "xstore");
}



#[test]
fn xtest4341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xtest
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD6", "xtest");
}


