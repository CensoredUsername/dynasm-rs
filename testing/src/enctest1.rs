
#[test]
fn adc0() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD2", "adc dl, dl");
}



#[test]
fn adc1() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD1", "adc cl, dl");
}



#[test]
fn adc2() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC1", "adc cl, al");
}



#[test]
fn adc3() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC9", "adc cl, cl");
}



#[test]
fn adc4() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC9", "adc cl, cl");
}



#[test]
fn adc5() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc6() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc7() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc8() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc9() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn adc10() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x2A", "adc rcx, 42");
}



#[test]
fn adc11() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x46", "adc rbx, 70");
}



#[test]
fn adc12() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x03", "adc rax, 3");
}



#[test]
fn adc13() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x09", "adc rbx, 9");
}



#[test]
fn adc14() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x56", "adc rax, 86");
}



#[test]
fn adc15() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x08", "adc cl, BYTE [rax]");
}



#[test]
fn adc16() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x08", "adc cl, BYTE [rax]");
}



#[test]
fn adc17() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x08", "adc cl, BYTE [rax]");
}



#[test]
fn adc18() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC1", "adc cl, al");
}



#[test]
fn adc19() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x00", "adc al, BYTE [rax]");
}



#[test]
fn adc20() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD2, 0x63", "adc rdx, 99");
}



#[test]
fn adc21() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x6B", "adc rbx, 107");
}



#[test]
fn adc22() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x48", "adc rcx, 72");
}



#[test]
fn adc23() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x0F", "adc rcx, 15");
}



#[test]
fn adc24() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x14", "adc rbx, 20");
}



#[test]
fn adc25() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x75", "adc al, 117");
}



#[test]
fn adc26() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x38", "adc al, 56");
}



#[test]
fn adc27() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x06", "adc al, 6");
}



#[test]
fn adc28() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x44", "adc al, 68");
}



#[test]
fn adc29() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x52", "adc al, 82");
}



#[test]
fn adc30() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc ax, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD0, 0x62", "adc ax, 98");
}



#[test]
fn adc31() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x5B", "adc eax, 91");
}



#[test]
fn adc32() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x2C", "adc eax, 44");
}



#[test]
fn adc33() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc ax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD0, 0x1C", "adc ax, 28");
}



#[test]
fn adc34() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x02", "adc rax, 2");
}



#[test]
fn adc35() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x2F", "adc BYTE [rax], 47");
}



#[test]
fn adc36() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x65", "adc BYTE [rax], 101");
}



#[test]
fn adc37() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x26", "adc BYTE [rax], 38");
}



#[test]
fn adc38() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x6C", "adc BYTE [rax], 108");
}



#[test]
fn adc39() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x4A", "adc BYTE [rax], 74");
}



#[test]
fn adc40() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xCA", "adc rdx, rcx");
}



#[test]
fn adc41() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x08", "adc rcx, QWORD [rax]");
}



#[test]
fn adc42() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xCB", "adc rbx, rcx");
}



#[test]
fn adc43() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC9", "adc rcx, rcx");
}



#[test]
fn adc44() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x00", "adc rax, QWORD [rax]");
}



#[test]
fn adc45() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x00", "adc BYTE [rax], al");
}



#[test]
fn adc46() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x00", "adc BYTE [rax], al");
}



#[test]
fn adc47() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x08", "adc BYTE [rax], cl");
}



#[test]
fn adc48() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x10", "adc BYTE [rax], dl");
}



#[test]
fn adc49() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x10", "adc BYTE [rax], dl");
}



#[test]
fn adc50() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x0D", "adc cl, 13");
}



#[test]
fn adc51() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x44", "adc cl, 68");
}



#[test]
fn adc52() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x21", "adc cl, 33");
}



#[test]
fn adc53() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x2B", "adc dl, 43");
}



#[test]
fn adc54() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x55", "adc al, 85");
}



#[test]
fn adcx55() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adcx rdx, rax");
}



#[test]
fn adcx56() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x10", "adcx rdx, [rax]");
}



#[test]
fn adcx57() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xC0", "adcx rax, rax");
}



#[test]
fn adcx58() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xC8", "adcx rcx, rax");
}



#[test]
fn adcx59() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adcx rdx, rax");
}



#[test]
fn add60() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD1", "add cl, dl");
}



#[test]
fn add61() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD2", "add dl, dl");
}



#[test]
fn add62() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add63() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD0", "add al, dl");
}



#[test]
fn add64() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC2", "add dl, al");
}



#[test]
fn add65() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x46", "add rcx, 70");
}



#[test]
fn add66() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x09", "add rdx, 9");
}



#[test]
fn add67() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x04", "add rax, 4");
}



#[test]
fn add68() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x6B", "add rax, 107");
}



#[test]
fn add69() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x76", "add rbx, 118");
}



#[test]
fn add70() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x43", "add rbx, 67");
}



#[test]
fn add71() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x21", "add rbx, 33");
}



#[test]
fn add72() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x38", "add rdx, 56");
}



#[test]
fn add73() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x31", "add rcx, 49");
}



#[test]
fn add74() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x64", "add rbx, 100");
}



#[test]
fn add75() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x47", "add eax, 71");
}



#[test]
fn add76() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x05", "add eax, 5");
}



#[test]
fn add77() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x3E", "add rax, 62");
}



#[test]
fn add78() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x4A", "add rax, 74");
}



#[test]
fn add79() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x2B", "add eax, 43");
}



#[test]
fn add80() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x56", "add al, 86");
}



#[test]
fn add81() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x18", "add al, 24");
}



#[test]
fn add82() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x54", "add al, 84");
}



#[test]
fn add83() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x05", "add al, 5");
}



#[test]
fn add84() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x3A", "add al, 58");
}



#[test]
fn add85() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add86() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add87() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add88() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add89() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn add90() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x35", "add BYTE [rax], 53");
}



#[test]
fn add91() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x39", "add BYTE [rax], 57");
}



#[test]
fn add92() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x67", "add BYTE [rax], 103");
}



#[test]
fn add93() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x6C", "add BYTE [rax], 108");
}



#[test]
fn add94() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x2D", "add BYTE [rax], 45");
}



#[test]
fn add95() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xCA", "add rdx, rcx");
}



#[test]
fn add96() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xCB", "add rbx, rcx");
}



#[test]
fn add97() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC9", "add rcx, rcx");
}



#[test]
fn add98() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x10", "add rdx, QWORD [rax]");
}



#[test]
fn add99() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x00", "add rax, QWORD [rax]");
}



#[test]
fn add100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x00", "add BYTE [rax], al");
}



#[test]
fn add101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x00", "add BYTE [rax], al");
}



#[test]
fn add102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x10", "add BYTE [rax], dl");
}



#[test]
fn add103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x00", "add BYTE [rax], al");
}



#[test]
fn add104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x10", "add BYTE [rax], dl");
}



#[test]
fn add105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn add108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x10", "add dl, BYTE [rax]");
}



#[test]
fn add109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC2", "add dl, al");
}



#[test]
fn add110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x6E", "add cl, 110");
}



#[test]
fn add111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x36", "add al, 54");
}



#[test]
fn add112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x04", "add dl, 4");
}



#[test]
fn add113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x06", "add al, 6");
}



#[test]
fn add114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x74", "add cl, 116");
}



#[test]
fn addpd115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x58, 0xFC", "addpd xmm15, xmm12");
}



#[test]
fn addpd116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xD1", "addpd xmm2, xmm1");
}



#[test]
fn addpd117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x58, 0xDF", "addpd xmm11, xmm15");
}



#[test]
fn addpd118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x58, 0x38", "addpd xmm15, OWORD [rax]");
}



#[test]
fn addpd119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xCC", "addpd xmm1, xmm4");
}



#[test]
fn addps120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x58, 0xDB", "addps xmm3, xmm11");
}



#[test]
fn addps121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x58, 0xC3", "addps xmm0, xmm11");
}



#[test]
fn addps122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0xC9", "addps xmm1, xmm1");
}



#[test]
fn addps123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x00", "addps xmm0, OWORD [rax]");
}



#[test]
fn addps124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0xC8", "addps xmm1, xmm0");
}



#[test]
fn addsd125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0xF9", "addsd xmm15, xmm1");
}



#[test]
fn addsd126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x58, 0xDF", "addsd xmm3, xmm15");
}



#[test]
fn addsd127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xD0", "addsd xmm2, xmm0");
}



#[test]
fn addsd128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x58, 0xCB", "addsd xmm1, xmm11");
}



#[test]
fn addsd129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x58, 0xE7", "addsd xmm12, xmm15");
}



#[test]
fn addss130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xDA", "addss xmm3, xmm2");
}



#[test]
fn addss131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xC2", "addss xmm0, xmm2");
}



#[test]
fn addss132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xC2", "addss xmm0, xmm2");
}



#[test]
fn addss133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x58, 0xCB", "addss xmm1, xmm11");
}



#[test]
fn addss134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0xF9", "addss xmm15, xmm1");
}



#[test]
fn addsubpd135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD0, 0xCF", "addsubpd xmm1, xmm15");
}



#[test]
fn addsubpd136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD0, 0xDC", "addsubpd xmm11, xmm12");
}



#[test]
fn addsubpd137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xCB", "addsubpd xmm1, xmm3");
}



#[test]
fn addsubpd138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xD8", "addsubpd xmm3, xmm0");
}



#[test]
fn addsubpd139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD0, 0xE7", "addsubpd xmm4, xmm15");
}



#[test]
fn addsubps140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xE3", "addsubps xmm12, xmm3");
}



#[test]
fn addsubps141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD0, 0x02", "addsubps xmm0, OWORD [rdx]");
}



#[test]
fn addsubps142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xD0, 0xE3", "addsubps xmm12, xmm11");
}



#[test]
fn addsubps143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xE0", "addsubps xmm12, xmm0");
}



#[test]
fn addsubps144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xE2", "addsubps xmm12, xmm2");
}



#[test]
fn adox145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adox rcx, [rax]");
}



#[test]
fn adox146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xC0", "adox rax, rax");
}



#[test]
fn adox147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xC0", "adox rax, rax");
}



#[test]
fn adox148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adox rax, [rax]");
}



#[test]
fn adox149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xC0", "adox rax, rax");
}



#[test]
fn aesdec150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0xC2", "aesdec xmm0, xmm2");
}



#[test]
fn aesdec151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDE, 0xDA", "aesdec xmm11, xmm2");
}



#[test]
fn aesdec152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0xC8", "aesdec xmm1, xmm0");
}



#[test]
fn aesdec153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0xD4", "aesdec xmm2, xmm4");
}



#[test]
fn aesdec154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0x22", "aesdec xmm4, OWORD [rdx]");
}



#[test]
fn aesdeclast155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDF, 0xDF", "aesdeclast xmm3, xmm15");
}



#[test]
fn aesdeclast156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0x1A", "aesdeclast xmm3, OWORD [rdx]");
}



#[test]
fn aesdeclast157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0xC8", "aesdeclast xmm1, xmm0");
}



#[test]
fn aesdeclast158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0x10", "aesdeclast xmm2, OWORD [rax]");
}



#[test]
fn aesdeclast159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0xD4", "aesdeclast xmm2, xmm4");
}



#[test]
fn aesenc160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xDC", "aesenc xmm3, xmm4");
}



#[test]
fn aesenc161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDC, 0xE4", "aesenc xmm12, xmm12");
}



#[test]
fn aesenc162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDC, 0x22", "aesenc xmm12, OWORD [rdx]");
}



#[test]
fn aesenc163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDC, 0xC4", "aesenc xmm0, xmm12");
}



#[test]
fn aesenc164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0x10", "aesenc xmm2, OWORD [rax]");
}



#[test]
fn aesenclast165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDD, 0xCF", "aesenclast xmm1, xmm15");
}



#[test]
fn aesenclast166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xDC", "aesenclast xmm3, xmm4");
}



#[test]
fn aesenclast167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDD, 0xDB", "aesenclast xmm11, xmm11");
}



#[test]
fn aesenclast168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDD, 0xDC", "aesenclast xmm3, xmm12");
}



#[test]
fn aesenclast169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDD, 0x20", "aesenclast xmm12, OWORD [rax]");
}



#[test]
fn aesimc170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDB, 0xFC", "aesimc xmm15, xmm12");
}



#[test]
fn aesimc171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xE4", "aesimc xmm4, xmm4");
}



#[test]
fn aesimc172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xE3", "aesimc xmm4, xmm3");
}



#[test]
fn aesimc173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xC3", "aesimc xmm0, xmm3");
}



#[test]
fn aesimc174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDB, 0xFA", "aesimc xmm15, xmm2");
}



#[test]
fn aeskeygenassist175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm3, xmm0, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0xD8, 0x34", "aeskeygenassist xmm3, xmm0, 52");
}



#[test]
fn aeskeygenassist176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm1, OWORD [rdx], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0x0A, 0x10", "aeskeygenassist xmm1, OWORD [rdx], 16");
}



#[test]
fn aeskeygenassist177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm12, xmm11, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0xDF, 0xE3, 0x5C", "aeskeygenassist xmm12, xmm11, 92");
}



#[test]
fn aeskeygenassist178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm1, OWORD [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0x08, 0x7D", "aeskeygenassist xmm1, OWORD [rax], 125");
}



#[test]
fn aeskeygenassist179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm2, xmm12, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0xDF, 0xD4, 0x77", "aeskeygenassist xmm2, xmm12, 119");
}



#[test]
fn and180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn and185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x22", "and al, 34");
}



#[test]
fn and186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x73", "and al, 115");
}



#[test]
fn and187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x2E", "and al, 46");
}



#[test]
fn and188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x34", "and al, 52");
}



#[test]
fn and189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x5E", "and al, 94");
}



#[test]
fn and190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x3C", "and eax, 60");
}



#[test]
fn and191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x25", "and eax, 37");
}



#[test]
fn and192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x37", "and eax, 55");
}



#[test]
fn and193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x55", "and eax, 85");
}



#[test]
fn and194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x16", "and rax, 22");
}



#[test]
fn and195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x47", "and rax, 71");
}



#[test]
fn and196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x3F", "and rax, 63");
}



#[test]
fn and197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x32", "and rdx, 50");
}



#[test]
fn and198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x6C", "and rax, 108");
}



#[test]
fn and199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x2B", "and rax, 43");
}



#[test]
fn and200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x75", "and dl, 117");
}



#[test]
fn and201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x3A", "and al, 58");
}



#[test]
fn and202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x3D", "and dl, 61");
}



#[test]
fn and203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x78", "and dl, 120");
}



#[test]
fn and204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x6C", "and cl, 108");
}



#[test]
fn and205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x3E", "and BYTE [rax], 62");
}



#[test]
fn and206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x73", "and BYTE [rax], 115");
}



#[test]
fn and207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x20", "and BYTE [rax], 32");
}



#[test]
fn and208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x75", "and BYTE [rax], 117");
}



#[test]
fn and209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x6D", "and BYTE [rax], 109");
}



#[test]
fn and210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC2", "and dl, al");
}



#[test]
fn and211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x08", "and cl, BYTE [rax]");
}



#[test]
fn and212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn and213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC1", "and cl, al");
}



#[test]
fn and214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x08", "and cl, BYTE [rax]");
}



#[test]
fn and215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xCA", "and dl, cl");
}



#[test]
fn and216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC9", "and cl, cl");
}



#[test]
fn and217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD0", "and al, dl");
}



#[test]
fn and218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn and219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD2", "and dl, dl");
}



#[test]
fn and220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x22", "and rdx, 34");
}



#[test]
fn and221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x6B", "and rax, 107");
}



#[test]
fn and222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x6D", "and rdx, 109");
}



#[test]
fn and223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x66", "and rcx, 102");
}



#[test]
fn and224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x62", "and rax, 98");
}



#[test]
fn and225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x00", "and rax, QWORD [rax]");
}



#[test]
fn and226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC8", "and rax, rcx");
}



#[test]
fn and227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x00", "and rax, QWORD [rax]");
}



#[test]
fn and228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x10", "and rdx, QWORD [rax]");
}



#[test]
fn and229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x18", "and rbx, QWORD [rax]");
}



#[test]
fn and230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x00", "and BYTE [rax], al");
}



#[test]
fn and231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn and232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x08", "and BYTE [rax], cl");
}



#[test]
fn and233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x08", "and BYTE [rax], cl");
}



#[test]
fn and234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x00", "and BYTE [rax], al");
}



#[test]
fn andnpd235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x55, 0xE7", "andnpd xmm12, xmm15");
}



#[test]
fn andnpd236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x55, 0xFB", "andnpd xmm15, xmm3");
}



#[test]
fn andnpd237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x55, 0xE4", "andnpd xmm12, xmm12");
}



#[test]
fn andnpd238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0x1A", "andnpd xmm3, OWORD [rdx]");
}



#[test]
fn andnpd239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xC9", "andnpd xmm1, xmm1");
}



#[test]
fn andnps240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0xE3", "andnps xmm12, xmm3");
}



#[test]
fn andnps241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x0A", "andnps xmm1, OWORD [rdx]");
}



#[test]
fn andnps242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x10", "andnps xmm2, OWORD [rax]");
}



#[test]
fn andnps243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x55, 0xD7", "andnps xmm2, xmm15");
}



#[test]
fn andnps244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0xF8", "andnps xmm15, xmm0");
}



#[test]
fn andpd245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x54, 0xFF", "andpd xmm15, xmm15");
}



#[test]
fn andpd246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x54, 0xE4", "andpd xmm12, xmm12");
}



#[test]
fn andpd247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0xE2", "andpd xmm4, xmm2");
}



#[test]
fn andpd248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0xF8", "andpd xmm15, xmm0");
}



#[test]
fn andpd249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0x08", "andpd xmm1, OWORD [rax]");
}



#[test]
fn andps250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x54, 0xD3", "andps xmm2, xmm11");
}



#[test]
fn andps251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0xC1", "andps xmm0, xmm1");
}



#[test]
fn andps252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0xCB", "andps xmm1, xmm3");
}



#[test]
fn andps253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x20", "andps xmm4, OWORD [rax]");
}



#[test]
fn andps254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x54, 0xC3", "andps xmm0, xmm11");
}



#[test]
fn blendpd255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm2, xmm4, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xD4, 0x73", "blendpd xmm2, xmm4, 115");
}



#[test]
fn blendpd256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm11, xmm11, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xDB, 0x0D", "blendpd xmm11, xmm11, 13");
}



#[test]
fn blendpd257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm0, xmm0, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xC0, 0x20", "blendpd xmm0, xmm0, 32");
}



#[test]
fn blendpd258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm4, xmm4, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xE4, 0x5E", "blendpd xmm4, xmm4, 94");
}



#[test]
fn blendpd259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm4, xmm0, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xE0, 0x42", "blendpd xmm4, xmm0, 66");
}



#[test]
fn blendps260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm15, xmm2, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xFA, 0x0B", "blendps xmm15, xmm2, 11");
}



#[test]
fn blendps261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm15, xmm2, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xFA, 0x76", "blendps xmm15, xmm2, 118");
}



#[test]
fn blendps262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm12, xmm1, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xE1, 0x56", "blendps xmm12, xmm1, 86");
}



#[test]
fn blendps263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm12, xmm12, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0C, 0xE4, 0x17", "blendps xmm12, xmm12, 23");
}



#[test]
fn blendps264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm1, xmm3, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xCB, 0x6B", "blendps xmm1, xmm3, 107");
}



#[test]
fn blendvpd265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xD0", "blendvpd xmm2, xmm0");
}



#[test]
fn blendvpd266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x15, 0xDB", "blendvpd xmm11, xmm11");
}



#[test]
fn blendvpd267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xD8", "blendvpd xmm3, xmm0");
}



#[test]
fn blendvpd268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x15, 0xCF", "blendvpd xmm1, xmm15");
}



#[test]
fn blendvpd269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x15, 0xDB", "blendvpd xmm3, xmm11");
}



#[test]
fn blendvps270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x14, 0xE4", "blendvps xmm12, xmm12");
}



#[test]
fn blendvps271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xD4", "blendvps xmm2, xmm4");
}



#[test]
fn blendvps272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x14, 0xE4", "blendvps xmm4, xmm12");
}



#[test]
fn blendvps273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xC4", "blendvps xmm0, xmm4");
}



#[test]
fn blendvps274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x14, 0xD7", "blendvps xmm2, xmm15");
}



#[test]
fn bsf275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xC1", "bsf rax, rcx");
}



#[test]
fn bsf276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xD1", "bsf rdx, rcx");
}



#[test]
fn bsf277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xC9", "bsf rcx, rcx");
}



#[test]
fn bsf278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x18", "bsf rbx, QWORD [rax]");
}



#[test]
fn bsf279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xD9", "bsf rbx, rcx");
}



#[test]
fn bsr280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xD9", "bsr rbx, rcx");
}



#[test]
fn bsr281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xC9", "bsr rcx, rcx");
}



#[test]
fn bsr282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xC1", "bsr rax, rcx");
}



#[test]
fn bsr283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x18", "bsr rbx, QWORD [rax]");
}



#[test]
fn bsr284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x18", "bsr rbx, QWORD [rax]");
}



#[test]
fn bswap285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCB", "bswap rbx");
}



#[test]
fn bswap286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCB", "bswap rbx");
}



#[test]
fn bswap287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn bswap288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn bswap289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCA", "bswap rdx");
}



#[test]
fn bt290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x5C", "bt rcx, 92");
}



#[test]
fn bt291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x19", "bt QWORD [rax], 25");
}



#[test]
fn bt292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x1F", "bt QWORD [rax], 31");
}



#[test]
fn bt293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x02", "bt QWORD [rax], 2");
}



#[test]
fn bt294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x2F", "bt rcx, 47");
}



#[test]
fn bt295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xC9", "bt rcx, rcx");
}



#[test]
fn bt296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x08", "bt QWORD [rax], rcx");
}



#[test]
fn bt297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x10", "bt QWORD [rax], rdx");
}



#[test]
fn bt298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xC9", "bt rcx, rcx");
}



#[test]
fn bt299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xD9", "bt rcx, rbx");
}



#[test]
fn btc300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x1B", "btc rdx, 27");
}



#[test]
fn btc301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x09", "btc rdx, 9");
}



#[test]
fn btc302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x53", "btc rdx, 83");
}



#[test]
fn btc303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF8, 0x2C", "btc rax, 44");
}



#[test]
fn btc304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x4D", "btc rbx, 77");
}



#[test]
fn btc305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btc309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn btr310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rbx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF3, 0x23", "btr rbx, 35");
}



#[test]
fn btr311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rcx, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF1, 0x2C", "btr rcx, 44");
}



#[test]
fn btr312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rbx, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF3, 0x7E", "btr rbx, 126");
}



#[test]
fn btr313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x2B", "btr rax, 43");
}



#[test]
fn btr314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x43", "btr rax, 67");
}



#[test]
fn btr315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn btr319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn bts320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x0C", "bts rdx, 12");
}



#[test]
fn bts321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x1F", "bts rcx, 31");
}



#[test]
fn bts322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE8, 0x54", "bts rax, 84");
}



#[test]
fn bts323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE8, 0x43", "bts rax, 67");
}



#[test]
fn bts324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x34", "bts rcx, 52");
}



#[test]
fn bts325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn bts329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn cbw330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cbw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x98", "cbw");
}



#[test]
fn cdq331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x99", "cdq");
}



#[test]
fn cdqe332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdqe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x98", "cdqe");
}



#[test]
fn clac333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCA", "clac");
}



#[test]
fn clc334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF8", "clc");
}



#[test]
fn cld335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFC", "cld");
}



#[test]
fn clgi336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clgi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDD", "clgi");
}



#[test]
fn cli337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cli
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFA", "cli");
}



#[test]
fn clts338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clts
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x06", "clts");
}



#[test]
fn clzero339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clzero
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFC", "clzero");
}



#[test]
fn cmc340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF5", "cmc");
}



#[test]
fn comisd341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xF8", "comisd xmm15, xmm0");
}



#[test]
fn comisd342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xD8", "comisd xmm11, xmm0");
}



#[test]
fn comisd343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xD9", "comisd xmm11, xmm1");
}



#[test]
fn comisd344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xE4", "comisd xmm4, xmm4");
}



#[test]
fn comisd345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2F, 0xE4", "comisd xmm4, xmm12");
}



#[test]
fn comiss346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2F, 0xE3", "comiss xmm4, xmm11");
}



#[test]
fn comiss347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xD0", "comiss xmm2, xmm0");
}



#[test]
fn comiss348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xCB", "comiss xmm1, xmm3");
}



#[test]
fn comiss349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0xDC", "comiss xmm11, xmm4");
}



#[test]
fn comiss350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0xDA", "comiss xmm11, xmm2");
}



#[test]
fn cpu_read351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpu_read
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3D", "cpu_read");
}



#[test]
fn cpu_write352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpu_write
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3C", "cpu_write");
}



#[test]
fn cpuid353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpuid
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA2", "cpuid");
}



#[test]
fn cqo354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cqo
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x99", "cqo");
}



#[test]
fn cvtdq2pd355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xDC", "cvtdq2pd xmm11, xmm4");
}



#[test]
fn cvtdq2pd356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xDC", "cvtdq2pd xmm11, xmm4");
}



#[test]
fn cvtdq2pd357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xFB", "cvtdq2pd xmm15, xmm3");
}



#[test]
fn cvtdq2pd358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xCF", "cvtdq2pd xmm1, xmm15");
}



#[test]
fn cvtdq2pd359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xD4", "cvtdq2pd xmm2, xmm12");
}



#[test]
fn cvtdq2ps360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xCA", "cvtdq2ps xmm1, xmm2");
}



#[test]
fn cvtdq2ps361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5B, 0xDF", "cvtdq2ps xmm11, xmm15");
}



#[test]
fn cvtdq2ps362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5B, 0xDB", "cvtdq2ps xmm3, xmm11");
}



#[test]
fn cvtdq2ps363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5B, 0xE1", "cvtdq2ps xmm12, xmm1");
}



#[test]
fn cvtdq2ps364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x10", "cvtdq2ps xmm2, OWORD [rax]");
}



#[test]
fn cvtpd2dq365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0x22", "cvtpd2dq xmm12, OWORD [rdx]");
}



#[test]
fn cvtpd2dq366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xE4", "cvtpd2dq xmm12, xmm4");
}



#[test]
fn cvtpd2dq367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0xCC", "cvtpd2dq xmm1, xmm4");
}



#[test]
fn cvtpd2dq368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xE6, 0xDB", "cvtpd2dq xmm3, xmm11");
}



#[test]
fn cvtpd2dq369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0xC2", "cvtpd2dq xmm0, xmm2");
}



#[test]
fn cvtpd2pi370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xDB", "cvtpd2pi mm3, xmm11");
}



#[test]
fn cvtpd2pi371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xE7", "cvtpd2pi mm4, xmm15");
}



#[test]
fn cvtpd2pi372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xE3", "cvtpd2pi mm4, xmm3");
}



#[test]
fn cvtpd2pi373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xD1", "cvtpd2pi mm2, xmm1");
}



#[test]
fn cvtpd2pi374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xE4", "cvtpd2pi mm4, xmm4");
}



#[test]
fn cvtpd2ps375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0xFC", "cvtpd2ps xmm15, xmm4");
}



#[test]
fn cvtpd2ps376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0xE4", "cvtpd2ps xmm12, xmm4");
}



#[test]
fn cvtpd2ps377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0xDC", "cvtpd2ps xmm11, xmm4");
}



#[test]
fn cvtpd2ps378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5A, 0xE7", "cvtpd2ps xmm4, xmm15");
}



#[test]
fn cvtpd2ps379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0xDC", "cvtpd2ps xmm11, xmm4");
}



#[test]
fn cvtpi2pd380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0xE0", "cvtpi2pd xmm4, mm0");
}



#[test]
fn cvtpi2pd381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x08", "cvtpi2pd xmm1, [rax]");
}



#[test]
fn cvtpi2pd382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0xD8", "cvtpi2pd xmm3, mm0");
}



#[test]
fn cvtpi2pd383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x12", "cvtpi2pd xmm2, [rdx]");
}



#[test]
fn cvtpi2pd384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x0A", "cvtpi2pd xmm1, [rdx]");
}



#[test]
fn cvtpi2ps385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm15, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2A, 0x3A", "cvtpi2ps xmm15, [rdx]");
}



#[test]
fn cvtpi2ps386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0xC0", "cvtpi2ps xmm0, mm0");
}



#[test]
fn cvtpi2ps387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0xD8", "cvtpi2ps xmm3, mm0");
}



#[test]
fn cvtpi2ps388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x20", "cvtpi2ps xmm4, [rax]");
}



#[test]
fn cvtpi2ps389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x02", "cvtpi2ps xmm0, [rdx]");
}



#[test]
fn cvtps2dq390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5B, 0xE3", "cvtps2dq xmm12, xmm11");
}



#[test]
fn cvtps2dq391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xE1", "cvtps2dq xmm4, xmm1");
}



#[test]
fn cvtps2dq392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xE4", "cvtps2dq xmm4, xmm4");
}



#[test]
fn cvtps2dq393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xD0", "cvtps2dq xmm2, xmm0");
}



#[test]
fn cvtps2dq394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0x0A", "cvtps2dq xmm1, OWORD [rdx]");
}



#[test]
fn cvtps2pd395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xC0", "cvtps2pd xmm0, xmm0");
}



#[test]
fn cvtps2pd396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xDB", "cvtps2pd xmm3, xmm11");
}



#[test]
fn cvtps2pd397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xD2", "cvtps2pd xmm2, xmm2");
}



#[test]
fn cvtps2pd398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xCF", "cvtps2pd xmm1, xmm15");
}



#[test]
fn cvtps2pd399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0xFA", "cvtps2pd xmm15, xmm2");
}



#[test]
fn cvtps2pi400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm5, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xE8", "cvtps2pi mm5, xmm0");
}



#[test]
fn cvtps2pi401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xCC", "cvtps2pi mm1, xmm12");
}



#[test]
fn cvtps2pi402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xCA", "cvtps2pi mm1, xmm2");
}



#[test]
fn cvtps2pi403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xD4", "cvtps2pi mm2, xmm12");
}



#[test]
fn cvtps2pi404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xC8", "cvtps2pi mm1, xmm0");
}



#[test]
fn cvtsd2si405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xCF", "cvtsd2si rcx, xmm15");
}



#[test]
fn cvtsd2si406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD4", "cvtsd2si rdx, xmm4");
}



#[test]
fn cvtsd2si407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xCA", "cvtsd2si rcx, xmm2");
}



#[test]
fn cvtsd2si408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xCC", "cvtsd2si rcx, xmm4");
}



#[test]
fn cvtsd2si409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rbx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xDA", "cvtsd2si rbx, xmm2");
}



#[test]
fn cvtsd2si410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x00", "cvtsd2si rax, QWORD [rax]");
}



#[test]
fn cvtsd2si411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x08", "cvtsd2si rcx, QWORD [rax]");
}



#[test]
fn cvtsd2si412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x00", "cvtsd2si rax, QWORD [rax]");
}



#[test]
fn cvtsd2si413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x08", "cvtsd2si rcx, QWORD [rax]");
}



#[test]
fn cvtsd2si414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x00", "cvtsd2si rax, QWORD [rax]");
}



#[test]
fn cvtsd2ss415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xD9", "cvtsd2ss xmm3, xmm1");
}



#[test]
fn cvtsd2ss416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xE1", "cvtsd2ss xmm4, xmm1");
}



#[test]
fn cvtsd2ss417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0xD9", "cvtsd2ss xmm11, xmm1");
}



#[test]
fn cvtsd2ss418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xE7", "cvtsd2ss xmm4, xmm15");
}



#[test]
fn cvtsd2ss419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xDC", "cvtsd2ss xmm3, xmm12");
}



#[test]
fn cvtsi2sd420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0x00", "cvtsi2sd xmm0, QWORD [rax]");
}



#[test]
fn cvtsi2sd421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0x10", "cvtsi2sd xmm2, QWORD [rax]");
}



#[test]
fn cvtsi2sd422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0xF9", "cvtsi2sd xmm15, rcx");
}



#[test]
fn cvtsi2sd423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm4, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0xE1", "cvtsi2sd xmm4, rcx");
}



#[test]
fn cvtsi2sd424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0x38", "cvtsi2sd xmm15, QWORD [rax]");
}



#[test]
fn cvtsi2ss425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm12, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0xE1", "cvtsi2ss xmm12, rcx");
}



#[test]
fn cvtsi2ss426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm15, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0xF9", "cvtsi2ss xmm15, rcx");
}



#[test]
fn cvtsi2ss427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm3, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0xD9", "cvtsi2ss xmm3, rcx");
}



#[test]
fn cvtsi2ss428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0x18", "cvtsi2ss xmm11, QWORD [rax]");
}



#[test]
fn cvtsi2ss429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm1, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0xC9", "cvtsi2ss xmm1, rcx");
}



#[test]
fn cvtss2sd430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xD3", "cvtss2sd xmm2, xmm11");
}



#[test]
fn cvtss2sd431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xE0", "cvtss2sd xmm4, xmm0");
}



#[test]
fn cvtss2sd432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5A, 0xDF", "cvtss2sd xmm11, xmm15");
}



#[test]
fn cvtss2sd433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xC9", "cvtss2sd xmm1, xmm1");
}



#[test]
fn cvtss2sd434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xD2", "cvtss2sd xmm2, xmm2");
}



#[test]
fn cvtss2si435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xC4", "cvtss2si rax, xmm4");
}



#[test]
fn cvtss2si436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rbx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD8", "cvtss2si rbx, xmm0");
}



#[test]
fn cvtss2si437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD3", "cvtss2si rdx, xmm3");
}



#[test]
fn cvtss2si438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xC2", "cvtss2si rax, xmm2");
}



#[test]
fn cvtss2si439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD1", "cvtss2si rdx, xmm1");
}



#[test]
fn cvtss2si440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x10", "cvtss2si rdx, DWORD [rax]");
}



#[test]
fn cvtss2si441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x08", "cvtss2si rcx, DWORD [rax]");
}



#[test]
fn cvtss2si442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x18", "cvtss2si rbx, DWORD [rax]");
}



#[test]
fn cvtss2si443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x08", "cvtss2si rcx, DWORD [rax]");
}



#[test]
fn cvtss2si444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x08", "cvtss2si rcx, DWORD [rax]");
}



#[test]
fn cvttpd2dq445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE6, 0xDC", "cvttpd2dq xmm11, xmm4");
}



#[test]
fn cvttpd2dq446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0xDA", "cvttpd2dq xmm3, xmm2");
}



#[test]
fn cvttpd2dq447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE6, 0xE4", "cvttpd2dq xmm12, xmm12");
}



#[test]
fn cvttpd2dq448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0xE0", "cvttpd2dq xmm4, xmm0");
}



#[test]
fn cvttpd2dq449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE6, 0x1A", "cvttpd2dq xmm11, OWORD [rdx]");
}



#[test]
fn cvttpd2pi450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xC1", "cvttpd2pi mm0, xmm1");
}



#[test]
fn cvttpd2pi451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2C, 0xDF", "cvttpd2pi mm3, xmm15");
}



#[test]
fn cvttpd2pi452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xD2", "cvttpd2pi mm2, xmm2");
}



#[test]
fn cvttpd2pi453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0x08", "cvttpd2pi mm1, OWORD [rax]");
}



#[test]
fn cvttpd2pi454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xC8", "cvttpd2pi mm1, xmm0");
}



#[test]
fn cvttps2dq455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xCA", "cvttps2dq xmm1, xmm2");
}



#[test]
fn cvttps2dq456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5B, 0xDC", "cvttps2dq xmm3, xmm12");
}



#[test]
fn cvttps2dq457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0x18", "cvttps2dq xmm3, OWORD [rax]");
}



#[test]
fn cvttps2dq458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0x02", "cvttps2dq xmm0, OWORD [rdx]");
}



#[test]
fn cvttps2dq459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xD2", "cvttps2dq xmm2, xmm2");
}



#[test]
fn cvttps2pi460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xE2", "cvttps2pi mm4, xmm2");
}



#[test]
fn cvttps2pi461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xCC", "cvttps2pi mm1, xmm4");
}



#[test]
fn cvttps2pi462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xCC", "cvttps2pi mm1, xmm12");
}



#[test]
fn cvttps2pi463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xD3", "cvttps2pi mm2, xmm11");
}



#[test]
fn cvttps2pi464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xDB", "cvttps2pi mm3, xmm11");
}



#[test]
fn cvttsd2si465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xCB", "cvttsd2si rcx, xmm3");
}



#[test]
fn cvttsd2si466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xCB", "cvttsd2si rcx, xmm3");
}



#[test]
fn cvttsd2si467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD0", "cvttsd2si rdx, xmm0");
}



#[test]
fn cvttsd2si468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD0", "cvttsd2si rdx, xmm0");
}



#[test]
fn cvttsd2si469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD2", "cvttsd2si rdx, xmm2");
}



#[test]
fn cvttsd2si470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x08", "cvttsd2si rcx, QWORD [rax]");
}



#[test]
fn cvttsd2si471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x18", "cvttsd2si rbx, QWORD [rax]");
}



#[test]
fn cvttsd2si472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x10", "cvttsd2si rdx, QWORD [rax]");
}



#[test]
fn cvttsd2si473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x00", "cvttsd2si rax, QWORD [rax]");
}



#[test]
fn cvttsd2si474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x10", "cvttsd2si rdx, QWORD [rax]");
}



#[test]
fn cvttss2si475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD0", "cvttss2si rdx, xmm0");
}



#[test]
fn cvttss2si476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xC4", "cvttss2si rax, xmm4");
}



#[test]
fn cvttss2si477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD2", "cvttss2si rdx, xmm2");
}



#[test]
fn cvttss2si478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2C, 0xC3", "cvttss2si rax, xmm11");
}



#[test]
fn cvttss2si479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD8", "cvttss2si rbx, xmm0");
}



#[test]
fn cvttss2si480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x18", "cvttss2si rbx, DWORD [rax]");
}



#[test]
fn cvttss2si481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x18", "cvttss2si rbx, DWORD [rax]");
}



#[test]
fn cvttss2si482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x10", "cvttss2si rdx, DWORD [rax]");
}



#[test]
fn cvttss2si483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x08", "cvttss2si rcx, DWORD [rax]");
}



#[test]
fn cvttss2si484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x08", "cvttss2si rcx, DWORD [rax]");
}



#[test]
fn cwd485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x99", "cwd");
}



#[test]
fn cwde486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwde
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x98", "cwde");
}



#[test]
fn dec487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC8", "dec rax");
}



#[test]
fn dec488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCB", "dec rbx");
}



#[test]
fn dec489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC9", "dec rcx");
}



#[test]
fn dec490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCA", "dec rdx");
}



#[test]
fn dec491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCA", "dec rdx");
}



#[test]
fn dec492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn dec497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xCA", "dec dl");
}



#[test]
fn dec498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn dec499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC9", "dec cl");
}



#[test]
fn dec500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xCA", "dec dl");
}



#[test]
fn dec501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC9", "dec cl");
}



#[test]
fn div502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn div503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn div504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn div505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn div506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn div507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn div508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn div509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn div510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn div511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn divpd512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0xC8", "divpd xmm1, xmm0");
}



#[test]
fn divpd513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0x20", "divpd xmm12, OWORD [rax]");
}



#[test]
fn divpd514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xE1", "divpd xmm12, xmm1");
}



#[test]
fn divpd515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xE3", "divpd xmm12, xmm3");
}



#[test]
fn divpd516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5E, 0xE4", "divpd xmm12, xmm12");
}



#[test]
fn divps517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0xE1", "divps xmm4, xmm1");
}



#[test]
fn divps518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0xE4", "divps xmm4, xmm4");
}



#[test]
fn divps519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0xDA", "divps xmm3, xmm2");
}



#[test]
fn divps520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0xC4", "divps xmm0, xmm4");
}



#[test]
fn divps521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0xE0", "divps xmm12, xmm0");
}



#[test]
fn divsd522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0xE2", "divsd xmm12, xmm2");
}



#[test]
fn divsd523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xD9", "divsd xmm3, xmm1");
}



#[test]
fn divsd524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xE7", "divsd xmm4, xmm15");
}



#[test]
fn divsd525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xE1", "divsd xmm4, xmm1");
}



#[test]
fn divsd526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xDB", "divsd xmm3, xmm11");
}



#[test]
fn divss527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xDB", "divss xmm3, xmm3");
}



#[test]
fn divss528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0xFB", "divss xmm15, xmm3");
}



#[test]
fn divss529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5E, 0xCC", "divss xmm1, xmm12");
}



#[test]
fn divss530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5E, 0xD7", "divss xmm2, xmm15");
}



#[test]
fn divss531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xC2", "divss xmm0, xmm2");
}



#[test]
fn dmint532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dmint
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x39", "dmint");
}



#[test]
fn dppd533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm11, xmm3, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0xDB, 0x71", "dppd xmm11, xmm3, 113");
}



#[test]
fn dppd534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, xmm15, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x41, 0xFF, 0x11", "dppd xmm15, xmm15, 17");
}



#[test]
fn dppd535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm4, xmm3, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xE3, 0x1B", "dppd xmm4, xmm3, 27");
}



#[test]
fn dppd536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm1, xmm1, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xC9, 0x2E", "dppd xmm1, xmm1, 46");
}



#[test]
fn dppd537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm11, xmm4, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0xDC, 0x3F", "dppd xmm11, xmm4, 63");
}



#[test]
fn dpps538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm11, xmm4, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xDC, 0x27", "dpps xmm11, xmm4, 39");
}



#[test]
fn dpps539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm11, xmm15, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x40, 0xDF, 0x70", "dpps xmm11, xmm15, 112");
}



#[test]
fn dpps540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm15, xmm4, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xFC, 0x17", "dpps xmm15, xmm4, 23");
}



#[test]
fn dpps541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm2, xmm0, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xD0, 0x6A", "dpps xmm2, xmm0, 106");
}



#[test]
fn dpps542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm1, xmm1, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xC9, 0x50", "dpps xmm1, xmm1, 80");
}



#[test]
fn emms543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; emms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x77", "emms");
}



#[test]
fn enter544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 15874, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x02, 0x3E, 0x52", "enter 15874, 82");
}



#[test]
fn enter545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 1414, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x86, 0x05, 0x0C", "enter 1414, 12");
}



#[test]
fn enter546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 7797, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x75, 0x1E, 0x67", "enter 7797, 103");
}



#[test]
fn enter547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 5430, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x36, 0x15, 0x58", "enter 5430, 88");
}



#[test]
fn enter548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 10817, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x41, 0x2A, 0x60", "enter 10817, 96");
}



#[test]
fn extractps549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm15, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x38, 0x70", "extractps DWORD [rax], xmm15, 112");
}



#[test]
fn extractps550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm12, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x20, 0x71", "extractps DWORD [rax], xmm12, 113");
}



#[test]
fn extractps551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm11, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0xD8, 0x0C", "extractps eax, xmm11, 12");
}



#[test]
fn extractps552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm1, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0xC8, 0x10", "extractps eax, xmm1, 16");
}



#[test]
fn extractps553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm1, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x08, 0x6B", "extractps DWORD [rax], xmm1, 107");
}



#[test]
fn extrq554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm11, 6, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC3, 0x06, 0x00", "extrq xmm11, 6, 0");
}



#[test]
fn extrq555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm12, 78, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC4, 0x4E, 0x12", "extrq xmm12, 78, 18");
}



#[test]
fn extrq556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm2, 96, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC2, 0x60, 0x43", "extrq xmm2, 96, 67");
}



#[test]
fn extrq557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm2, 72, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC2, 0x48, 0x60", "extrq xmm2, 72, 96");
}



#[test]
fn extrq558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm1, 117, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC1, 0x75, 0x7B", "extrq xmm1, 117, 123");
}



#[test]
fn extrq559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xDC", "extrq xmm3, xmm4");
}



#[test]
fn extrq560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xC2", "extrq xmm0, xmm2");
}



#[test]
fn extrq561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xCA", "extrq xmm1, xmm2");
}



#[test]
fn extrq562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xCA", "extrq xmm1, xmm2");
}



#[test]
fn extrq563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xC9", "extrq xmm1, xmm1");
}



#[test]
fn f2xm1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; f2xm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF0", "f2xm1");
}



#[test]
fn fabs565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fabs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE1", "fabs");
}



#[test]
fn fadd566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC1", "fadd st1, st0");
}



#[test]
fn fadd567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC4", "fadd st4, st0");
}



#[test]
fn fadd568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC1", "fadd st1, st0");
}



#[test]
fn fadd569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC4", "fadd st4, st0");
}



#[test]
fn fadd570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC2", "fadd st2, st0");
}



#[test]
fn fadd571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC4", "fadd st4, st0");
}



#[test]
fn fadd572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC3", "fadd st3, st0");
}



#[test]
fn fadd573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC5", "fadd st5, st0");
}



#[test]
fn fadd574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC4", "fadd st4, st0");
}



#[test]
fn fadd575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xC2", "fadd st2, st0");
}



#[test]
fn fadd576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC5", "fadd st5");
}



#[test]
fn fadd577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC4", "fadd st4");
}



#[test]
fn fadd578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC3", "fadd st3");
}



#[test]
fn fadd579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC6", "fadd st6");
}



#[test]
fn fadd580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC2", "fadd st2");
}



#[test]
fn fadd581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x00", "fadd DWORD [rax]");
}



#[test]
fn fadd586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x00", "fadd QWORD [rax]");
}



#[test]
fn fadd591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "fadd");
}



#[test]
fn fadd592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC1", "fadd st0, st1");
}



#[test]
fn fadd593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC3", "fadd st0, st3");
}



#[test]
fn fadd594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC2", "fadd st0, st2");
}



#[test]
fn fadd595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC5", "fadd st0, st5");
}



#[test]
fn fadd596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fadd st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC1", "fadd st0, st1");
}



#[test]
fn faddp597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC5", "faddp st5");
}



#[test]
fn faddp598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC6", "faddp st6");
}



#[test]
fn faddp599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC2", "faddp st2");
}



#[test]
fn faddp600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC4", "faddp st4");
}



#[test]
fn faddp601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC4", "faddp st4");
}



#[test]
fn faddp602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "faddp st1, st0");
}



#[test]
fn faddp603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC4", "faddp st4, st0");
}



#[test]
fn faddp604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC4", "faddp st4, st0");
}



#[test]
fn faddp605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC4", "faddp st4, st0");
}



#[test]
fn faddp606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC2", "faddp st2, st0");
}



#[test]
fn faddp607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; faddp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC1", "faddp");
}



#[test]
fn fbld608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbld612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x20", "fbld [rax]");
}



#[test]
fn fbstp613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fbstp617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fbstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x30", "fbstp [rax]");
}



#[test]
fn fchs618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fchs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE0", "fchs");
}



#[test]
fn fclex619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fclex
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE2", "fclex");
}



#[test]
fn fcmovb620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb st1");
}



#[test]
fn fcmovb621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb st1");
}



#[test]
fn fcmovb622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC5", "fcmovb st5");
}



#[test]
fn fcmovb623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC5", "fcmovb st5");
}



#[test]
fn fcmovb624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb st1");
}



#[test]
fn fcmovb625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC4", "fcmovb st0, st4");
}



#[test]
fn fcmovb626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC3", "fcmovb st0, st3");
}



#[test]
fn fcmovb627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC2", "fcmovb st0, st2");
}



#[test]
fn fcmovb628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC4", "fcmovb st0, st4");
}



#[test]
fn fcmovb629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC3", "fcmovb st0, st3");
}



#[test]
fn fcmovb630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC1", "fcmovb");
}



#[test]
fn fcmovbe631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD1", "fcmovbe");
}



#[test]
fn fcmovbe632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD3", "fcmovbe st0, st3");
}



#[test]
fn fcmovbe633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD3", "fcmovbe st0, st3");
}



#[test]
fn fcmovbe634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD6", "fcmovbe st0, st6");
}



#[test]
fn fcmovbe635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD1", "fcmovbe st0, st1");
}



#[test]
fn fcmovbe636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD6", "fcmovbe st0, st6");
}



#[test]
fn fcmovbe637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD3", "fcmovbe st3");
}



#[test]
fn fcmovbe638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD5", "fcmovbe st5");
}



#[test]
fn fcmovbe639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD3", "fcmovbe st3");
}



#[test]
fn fcmovbe640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD2", "fcmovbe st2");
}



#[test]
fn fcmovbe641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovbe st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD6", "fcmovbe st6");
}



#[test]
fn fcmove642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC9", "fcmove");
}



#[test]
fn fcmove643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCB", "fcmove st0, st3");
}



#[test]
fn fcmove644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCD", "fcmove st0, st5");
}



#[test]
fn fcmove645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCC", "fcmove st0, st4");
}



#[test]
fn fcmove646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCA", "fcmove st0, st2");
}



#[test]
fn fcmove647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xC9", "fcmove st0, st1");
}



#[test]
fn fcmove648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCD", "fcmove st5");
}



#[test]
fn fcmove649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCA", "fcmove st2");
}



#[test]
fn fcmove650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCB", "fcmove st3");
}



#[test]
fn fcmove651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCE", "fcmove st6");
}



#[test]
fn fcmove652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmove st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xCA", "fcmove st2");
}



#[test]
fn fcmovnb653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC1", "fcmovnb st0, st1");
}



#[test]
fn fcmovnb654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC1", "fcmovnb st0, st1");
}



#[test]
fn fcmovnb655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC7", "fcmovnb st0, st7");
}



#[test]
fn fcmovnb656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC5", "fcmovnb st0, st5");
}



#[test]
fn fcmovnb657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC6", "fcmovnb st0, st6");
}



#[test]
fn fcmovnb658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC1", "fcmovnb");
}



#[test]
fn fcmovnb659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC6", "fcmovnb st6");
}



#[test]
fn fcmovnb660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC3", "fcmovnb st3");
}



#[test]
fn fcmovnb661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC3", "fcmovnb st3");
}



#[test]
fn fcmovnb662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC5", "fcmovnb st5");
}



#[test]
fn fcmovnb663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnb st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC4", "fcmovnb st4");
}



#[test]
fn fcmovnbe664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD4", "fcmovnbe st0, st4");
}



#[test]
fn fcmovnbe665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD3", "fcmovnbe st0, st3");
}



#[test]
fn fcmovnbe666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD4", "fcmovnbe st0, st4");
}



#[test]
fn fcmovnbe667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD1", "fcmovnbe st0, st1");
}



#[test]
fn fcmovnbe668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD2", "fcmovnbe st0, st2");
}



#[test]
fn fcmovnbe669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD1", "fcmovnbe");
}



#[test]
fn fcmovnbe670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD6", "fcmovnbe st6");
}



#[test]
fn fcmovnbe671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD1", "fcmovnbe st1");
}



#[test]
fn fcmovnbe672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD5", "fcmovnbe st5");
}



#[test]
fn fcmovnbe673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD3", "fcmovnbe st3");
}



#[test]
fn fcmovnbe674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnbe st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD3", "fcmovnbe st3");
}



#[test]
fn fcmovne675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCE", "fcmovne st6");
}



#[test]
fn fcmovne676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCB", "fcmovne st3");
}



#[test]
fn fcmovne677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC9", "fcmovne st1");
}



#[test]
fn fcmovne678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCC", "fcmovne st4");
}



#[test]
fn fcmovne679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCB", "fcmovne st3");
}



#[test]
fn fcmovne680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCD", "fcmovne st0, st5");
}



#[test]
fn fcmovne681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCE", "fcmovne st0, st6");
}



#[test]
fn fcmovne682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCA", "fcmovne st0, st2");
}



#[test]
fn fcmovne683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xCA", "fcmovne st0, st2");
}



#[test]
fn fcmovne684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC9", "fcmovne st0, st1");
}



#[test]
fn fcmovne685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovne
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xC9", "fcmovne");
}



#[test]
fn fcmovnu686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD9", "fcmovnu");
}



#[test]
fn fcmovnu687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDD", "fcmovnu st5");
}



#[test]
fn fcmovnu688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD9", "fcmovnu st1");
}



#[test]
fn fcmovnu689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDA", "fcmovnu st2");
}



#[test]
fn fcmovnu690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDA", "fcmovnu st2");
}



#[test]
fn fcmovnu691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDE", "fcmovnu st6");
}



#[test]
fn fcmovnu692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDE", "fcmovnu st0, st6");
}



#[test]
fn fcmovnu693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDA", "fcmovnu st0, st2");
}



#[test]
fn fcmovnu694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xD9", "fcmovnu st0, st1");
}



#[test]
fn fcmovnu695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDC", "fcmovnu st0, st4");
}



#[test]
fn fcmovnu696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovnu st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xDE", "fcmovnu st0, st6");
}



#[test]
fn fcmovu697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD9", "fcmovu");
}



#[test]
fn fcmovu698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDF", "fcmovu st0, st7");
}



#[test]
fn fcmovu699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDB", "fcmovu st0, st3");
}



#[test]
fn fcmovu700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD9", "fcmovu st0, st1");
}



#[test]
fn fcmovu701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDF", "fcmovu st0, st7");
}



#[test]
fn fcmovu702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDD", "fcmovu st0, st5");
}



#[test]
fn fcmovu703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDB", "fcmovu st3");
}



#[test]
fn fcmovu704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDD", "fcmovu st5");
}



#[test]
fn fcmovu705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDE", "fcmovu st6");
}



#[test]
fn fcmovu706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xDA", "fcmovu st2");
}



#[test]
fn fcmovu707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcmovu st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xD9", "fcmovu st1");
}



#[test]
fn fcom708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD6", "fcom st0, st6");
}



#[test]
fn fcom709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD3", "fcom st0, st3");
}



#[test]
fn fcom710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD4", "fcom st0, st4");
}



#[test]
fn fcom711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD3", "fcom st0, st3");
}



#[test]
fn fcom712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD6", "fcom st0, st6");
}



#[test]
fn fcom713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x10", "fcom QWORD [rax]");
}



#[test]
fn fcom718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD1", "fcom");
}



#[test]
fn fcom719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD5", "fcom st5");
}



#[test]
fn fcom720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD1", "fcom st1");
}



#[test]
fn fcom721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD2", "fcom st2");
}



#[test]
fn fcom722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD3", "fcom st3");
}



#[test]
fn fcom723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD6", "fcom st6");
}



#[test]
fn fcom724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcom728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x10", "fcom DWORD [rax]");
}



#[test]
fn fcomi729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF1", "fcomi");
}



#[test]
fn fcomi730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF3", "fcomi st0, st3");
}



#[test]
fn fcomi731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF7", "fcomi st0, st7");
}



#[test]
fn fcomi732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF3", "fcomi st0, st3");
}



#[test]
fn fcomi733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF1", "fcomi st0, st1");
}



#[test]
fn fcomi734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF5", "fcomi st0, st5");
}



#[test]
fn fcomi735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF6", "fcomi st6");
}



#[test]
fn fcomi736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF4", "fcomi st4");
}



#[test]
fn fcomi737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF6", "fcomi st6");
}



#[test]
fn fcomi738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF5", "fcomi st5");
}



#[test]
fn fcomi739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomi st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xF4", "fcomi st4");
}



#[test]
fn fcomip740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF7", "fcomip st7");
}



#[test]
fn fcomip741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF7", "fcomip st7");
}



#[test]
fn fcomip742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip st1");
}



#[test]
fn fcomip743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF4", "fcomip st4");
}



#[test]
fn fcomip744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF2", "fcomip st2");
}



#[test]
fn fcomip745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF3", "fcomip st0, st3");
}



#[test]
fn fcomip746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF6", "fcomip st0, st6");
}



#[test]
fn fcomip747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF7", "fcomip st0, st7");
}



#[test]
fn fcomip748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF6", "fcomip st0, st6");
}



#[test]
fn fcomip749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF7", "fcomip st0, st7");
}



#[test]
fn fcomip750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomip
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xF1", "fcomip");
}



#[test]
fn fcomp751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD9", "fcomp");
}



#[test]
fn fcomp752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDB", "fcomp st0, st3");
}



#[test]
fn fcomp753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDC", "fcomp st0, st4");
}



#[test]
fn fcomp754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xD9", "fcomp st0, st1");
}



#[test]
fn fcomp755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDC", "fcomp st0, st4");
}



#[test]
fn fcomp756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDB", "fcomp st0, st3");
}



#[test]
fn fcomp757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x18", "fcomp QWORD [rax]");
}



#[test]
fn fcomp762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x18", "fcomp DWORD [rax]");
}



#[test]
fn fcomp767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDE", "fcomp st6");
}



#[test]
fn fcomp768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDD", "fcomp st5");
}



#[test]
fn fcomp769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDA", "fcomp st2");
}



#[test]
fn fcomp770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDA", "fcomp st2");
}



#[test]
fn fcomp771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcomp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xDC", "fcomp st4");
}



#[test]
fn fcompp772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcompp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xD9", "fcompp");
}



#[test]
fn fcos773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fcos
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFF", "fcos");
}



#[test]
fn fdecstp774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdecstp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF6", "fdecstp");
}



#[test]
fn fdisi775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdisi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE1", "fdisi");
}



#[test]
fn fdiv776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x30", "fdiv DWORD [rax]");
}



#[test]
fn fdiv781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF9", "fdiv st1, st0");
}



#[test]
fn fdiv782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFD", "fdiv st5, st0");
}



#[test]
fn fdiv783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFE", "fdiv st6, st0");
}



#[test]
fn fdiv784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF9", "fdiv st1, st0");
}



#[test]
fn fdiv785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFE", "fdiv st6, st0");
}



#[test]
fn fdiv786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdiv");
}



#[test]
fn fdiv787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFF", "fdiv st7, st0");
}



#[test]
fn fdiv788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFF", "fdiv st7, st0");
}



#[test]
fn fdiv789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFC", "fdiv st4, st0");
}



#[test]
fn fdiv790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFE", "fdiv st6, st0");
}



#[test]
fn fdiv791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xFC", "fdiv st4, st0");
}



#[test]
fn fdiv792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x30", "fdiv QWORD [rax]");
}



#[test]
fn fdiv797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF2", "fdiv st0, st2");
}



#[test]
fn fdiv798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF5", "fdiv st0, st5");
}



#[test]
fn fdiv799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF5", "fdiv st0, st5");
}



#[test]
fn fdiv800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF3", "fdiv st0, st3");
}



#[test]
fn fdiv801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF3", "fdiv st0, st3");
}



#[test]
fn fdiv802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF1", "fdiv st1");
}



#[test]
fn fdiv803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF7", "fdiv st7");
}



#[test]
fn fdiv804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF2", "fdiv st2");
}



#[test]
fn fdiv805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF1", "fdiv st1");
}



#[test]
fn fdiv806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdiv st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF1", "fdiv st1");
}



#[test]
fn fdivp807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdivp");
}



#[test]
fn fdivp808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFD", "fdivp st5, st0");
}



#[test]
fn fdivp809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFC", "fdivp st4, st0");
}



#[test]
fn fdivp810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFB", "fdivp st3, st0");
}



#[test]
fn fdivp811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFB", "fdivp st3, st0");
}



#[test]
fn fdivp812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFF", "fdivp st7, st0");
}



#[test]
fn fdivp813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFB", "fdivp st3");
}



#[test]
fn fdivp814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFF", "fdivp st7");
}



#[test]
fn fdivp815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFD", "fdivp st5");
}



#[test]
fn fdivp816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF9", "fdivp st1");
}



#[test]
fn fdivp817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xFA", "fdivp st2");
}



#[test]
fn fdivr818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x38", "fdivr QWORD [rax]");
}



#[test]
fn fdivr823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFD", "fdivr st5");
}



#[test]
fn fdivr824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFC", "fdivr st4");
}



#[test]
fn fdivr825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFC", "fdivr st4");
}



#[test]
fn fdivr826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFC", "fdivr st4");
}



#[test]
fn fdivr827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF9", "fdivr st1");
}



#[test]
fn fdivr828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x38", "fdivr DWORD [rax]");
}



#[test]
fn fdivr833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xF9", "fdivr st0, st1");
}



#[test]
fn fdivr834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFC", "fdivr st0, st4");
}



#[test]
fn fdivr835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFE", "fdivr st0, st6");
}



#[test]
fn fdivr836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFF", "fdivr st0, st7");
}



#[test]
fn fdivr837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xFB", "fdivr st0, st3");
}



#[test]
fn fdivr838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF2", "fdivr st2, st0");
}



#[test]
fn fdivr839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF2", "fdivr st2, st0");
}



#[test]
fn fdivr840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF7", "fdivr st7, st0");
}



#[test]
fn fdivr841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF3", "fdivr st3, st0");
}



#[test]
fn fdivr842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF4", "fdivr st4, st0");
}



#[test]
fn fdivr843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF3", "fdivr st3, st0");
}



#[test]
fn fdivr844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF1", "fdivr st1, st0");
}



#[test]
fn fdivr845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF1", "fdivr st1, st0");
}



#[test]
fn fdivr846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF3", "fdivr st3, st0");
}



#[test]
fn fdivr847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xF4", "fdivr st4, st0");
}



#[test]
fn fdivr848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF1", "fdivr");
}



#[test]
fn fdivrp849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF1", "fdivrp");
}



#[test]
fn fdivrp850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF4", "fdivrp st4");
}



#[test]
fn fdivrp851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF3", "fdivrp st3");
}



#[test]
fn fdivrp852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF3", "fdivrp st3");
}



#[test]
fn fdivrp853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF7", "fdivrp st7");
}



#[test]
fn fdivrp854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF4", "fdivrp st4");
}



#[test]
fn fdivrp855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF5", "fdivrp st5, st0");
}



#[test]
fn fdivrp856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF4", "fdivrp st4, st0");
}



#[test]
fn fdivrp857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF6", "fdivrp st6, st0");
}



#[test]
fn fdivrp858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF2", "fdivrp st2, st0");
}



#[test]
fn fdivrp859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fdivrp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xF6", "fdivrp st6, st0");
}



#[test]
fn femms860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; femms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0E", "femms");
}



#[test]
fn feni861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; feni
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE0", "feni");
}



#[test]
fn ffree862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC1", "ffree");
}



#[test]
fn ffree863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC4", "ffree st4");
}



#[test]
fn ffree864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC5", "ffree st5");
}



#[test]
fn ffree865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC6", "ffree st6");
}



#[test]
fn ffree866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC5", "ffree st5");
}



#[test]
fn ffree867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ffree st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xC2", "ffree st2");
}



#[test]
fn fiadd868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x00", "fiadd DWORD [rax]");
}



#[test]
fn fiadd873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn fiadd877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fiadd WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x00", "fiadd WORD [rax]");
}



#[test]
fn ficom878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x10", "ficom WORD [rax]");
}



#[test]
fn ficom883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficom887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficom DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x10", "ficom DWORD [rax]");
}



#[test]
fn ficomp888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x18", "ficomp WORD [rax]");
}



#[test]
fn ficomp893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn ficomp897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ficomp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x18", "ficomp DWORD [rax]");
}



#[test]
fn fidiv898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x30", "fidiv WORD [rax]");
}



#[test]
fn fidiv903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidiv907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidiv DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x30", "fidiv DWORD [rax]");
}



#[test]
fn fidivr908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x38", "fidivr DWORD [rax]");
}



#[test]
fn fidivr913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fidivr917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fidivr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x38", "fidivr WORD [rax]");
}



#[test]
fn fild918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x28", "fild QWORD [rax]");
}



#[test]
fn fild923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x00", "fild DWORD [rax]");
}



#[test]
fn fild928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fild932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fild WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x00", "fild WORD [rax]");
}



#[test]
fn fimul933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x08", "fimul WORD [rax]");
}



#[test]
fn fimul938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fimul942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fimul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x08", "fimul DWORD [rax]");
}



#[test]
fn fincstp943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fincstp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF7", "fincstp");
}



#[test]
fn finit944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; finit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDB, 0xE3", "finit");
}



#[test]
fn fist945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x10", "fist WORD [rax]");
}



#[test]
fn fist950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fist954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fist DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x10", "fist DWORD [rax]");
}



#[test]
fn fistp955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x18", "fistp WORD [rax]");
}



#[test]
fn fistp960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x18", "fistp DWORD [rax]");
}



#[test]
fn fistp965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fistp969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fistp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x38", "fistp QWORD [rax]");
}



#[test]
fn fisttp970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x08", "fisttp DWORD [rax]");
}



#[test]
fn fisttp975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0x08", "fisttp WORD [rax]");
}



#[test]
fn fisttp980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisttp984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisttp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x08", "fisttp QWORD [rax]");
}



#[test]
fn fisub985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x20", "fisub WORD [rax]");
}



#[test]
fn fisub990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisub994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x20", "fisub DWORD [rax]");
}



#[test]
fn fisubr995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0x28", "fisubr DWORD [rax]");
}



#[test]
fn fisubr1000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr1001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr1002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr1003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fisubr1004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fisubr WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0x28", "fisubr WORD [rax]");
}



#[test]
fn fld1005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x00", "fld DWORD [rax]");
}



#[test]
fn fld1010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC5", "fld st5");
}



#[test]
fn fld1011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC5", "fld st5");
}



#[test]
fn fld1012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC2", "fld st2");
}



#[test]
fn fld1013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC4", "fld st4");
}



#[test]
fn fld1014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC6", "fld st6");
}



#[test]
fn fld1015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC1", "fld");
}



#[test]
fn fld1016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x00", "fld QWORD [rax]");
}



#[test]
fn fld1021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld1025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x28", "fld [rax]");
}



#[test]
fn fld11026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fld1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE8", "fld1");
}



#[test]
fn fldcw1027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldcw1031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x28", "fldcw WORD [rax]");
}



#[test]
fn fldenv1032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldenv1036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x20", "fldenv [rax]");
}



#[test]
fn fldl2e1037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldl2e
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEA", "fldl2e");
}



#[test]
fn fldl2t1038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldl2t
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE9", "fldl2t");
}



#[test]
fn fldlg21039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldlg2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEC", "fldlg2");
}



#[test]
fn fldln21040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldln2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xED", "fldln2");
}



#[test]
fn fldpi1041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldpi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEB", "fldpi");
}



#[test]
fn fldz1042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fldz
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xEE", "fldz");
}



#[test]
fn fmul1043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCE", "fmul st0, st6");
}



#[test]
fn fmul1044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCC", "fmul st0, st4");
}



#[test]
fn fmul1045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCB", "fmul st0, st3");
}



#[test]
fn fmul1046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCD", "fmul st0, st5");
}



#[test]
fn fmul1047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCF", "fmul st0, st7");
}



#[test]
fn fmul1048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCC", "fmul st4, st0");
}



#[test]
fn fmul1049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCF", "fmul st7, st0");
}



#[test]
fn fmul1050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCB", "fmul st3, st0");
}



#[test]
fn fmul1051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCD", "fmul st5, st0");
}



#[test]
fn fmul1052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCD", "fmul st5, st0");
}



#[test]
fn fmul1053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCC", "fmul st4");
}



#[test]
fn fmul1054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC9", "fmul st1");
}



#[test]
fn fmul1055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCF", "fmul st7");
}



#[test]
fn fmul1056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xC9", "fmul st1");
}



#[test]
fn fmul1057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xCE", "fmul st6");
}



#[test]
fn fmul1058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmul");
}



#[test]
fn fmul1059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x08", "fmul DWORD [rax]");
}



#[test]
fn fmul1064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCD", "fmul st5, st0");
}



#[test]
fn fmul1065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCF", "fmul st7, st0");
}



#[test]
fn fmul1066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCE", "fmul st6, st0");
}



#[test]
fn fmul1067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCD", "fmul st5, st0");
}



#[test]
fn fmul1068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xCA", "fmul st2, st0");
}



#[test]
fn fmul1069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmul1073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x08", "fmul QWORD [rax]");
}



#[test]
fn fmulp1074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp st1");
}



#[test]
fn fmulp1075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCE", "fmulp st6");
}



#[test]
fn fmulp1076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp st1");
}



#[test]
fn fmulp1077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCF", "fmulp st7");
}



#[test]
fn fmulp1078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCA", "fmulp st2");
}



#[test]
fn fmulp1079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCD", "fmulp st5, st0");
}



#[test]
fn fmulp1080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp st1, st0");
}



#[test]
fn fmulp1081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCE", "fmulp st6, st0");
}



#[test]
fn fmulp1082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCE", "fmulp st6, st0");
}



#[test]
fn fmulp1083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xCD", "fmulp st5, st0");
}



#[test]
fn fmulp1084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fmulp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xC9", "fmulp");
}



#[test]
fn fnclex1085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnclex
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE2", "fnclex");
}



#[test]
fn fndisi1086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fndisi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE1", "fndisi");
}



#[test]
fn fneni1087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fneni
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE0", "fneni");
}



#[test]
fn fninit1088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fninit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE3", "fninit");
}



#[test]
fn fnop1089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xD0", "fnop");
}



#[test]
fn fnsave1090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnsave1094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x30", "fnsave [rax]");
}



#[test]
fn fnstcw1095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstcw1099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x38", "fnstcw WORD [rax]");
}



#[test]
fn fnstenv1100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstenv1104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x30", "fnstenv [rax]");
}



#[test]
fn fnstsw1105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x38", "fnstsw WORD [rax]");
}



#[test]
fn fnstsw1110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fnstsw1114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fnstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE0", "fnstsw ax");
}



#[test]
fn fpatan1115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fpatan
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF3", "fpatan");
}



#[test]
fn fprem1116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fprem
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF8", "fprem");
}



#[test]
fn fprem11117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fprem1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF5", "fprem1");
}



#[test]
fn fptan1118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fptan
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF2", "fptan");
}



#[test]
fn frndint1119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frndint
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFC", "frndint");
}



#[test]
fn frstor1120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn frstor1124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; frstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x20", "frstor [rax]");
}



#[test]
fn fsave1125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fsave1129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x30", "fsave [rax]");
}



#[test]
fn fscale1130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fscale
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFD", "fscale");
}



#[test]
fn fsetpm1131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsetpm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE4", "fsetpm");
}



#[test]
fn fsin1132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsin
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFE", "fsin");
}



#[test]
fn fsincos1133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsincos
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFB", "fsincos");
}



#[test]
fn fsqrt1134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsqrt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xFA", "fsqrt");
}



#[test]
fn fst1135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD1", "fst");
}



#[test]
fn fst1136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x10", "fst QWORD [rax]");
}



#[test]
fn fst1141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x10", "fst DWORD [rax]");
}



#[test]
fn fst1146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD4", "fst st4");
}



#[test]
fn fst1147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD7", "fst st7");
}



#[test]
fn fst1148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD1", "fst st1");
}



#[test]
fn fst1149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD7", "fst st7");
}



#[test]
fn fst1150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fst st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD3", "fst st3");
}



#[test]
fn fstcw1151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstcw1155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstcw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x38", "fstcw WORD [rax]");
}



#[test]
fn fstenv1156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstenv1160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstenv [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xD9, 0x30", "fstenv [rax]");
}



#[test]
fn fstp1161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0x18", "fstp DWORD [rax]");
}



#[test]
fn fstp1166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0x18", "fstp QWORD [rax]");
}



#[test]
fn fstp1171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0x38", "fstp [rax]");
}



#[test]
fn fstp1176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xD9", "fstp");
}



#[test]
fn fstp1177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDB", "fstp st3");
}



#[test]
fn fstp1178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDE", "fstp st6");
}



#[test]
fn fstp1179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDF", "fstp st7");
}



#[test]
fn fstp1180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDA", "fstp st2");
}



#[test]
fn fstp1181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xDD", "fstp st5");
}



#[test]
fn fstsw1182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDF, 0xE0", "fstsw ax");
}



#[test]
fn fstsw1187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fstsw1191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fstsw WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B, 0xDD, 0x38", "fstsw WORD [rax]");
}



#[test]
fn fsub1192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEB", "fsub st3, st0");
}



#[test]
fn fsub1193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE9", "fsub st1, st0");
}



#[test]
fn fsub1194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEA", "fsub st2, st0");
}



#[test]
fn fsub1195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEA", "fsub st2, st0");
}



#[test]
fn fsub1196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xED", "fsub st5, st0");
}



#[test]
fn fsub1197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEE", "fsub st6, st0");
}



#[test]
fn fsub1198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEE", "fsub st6, st0");
}



#[test]
fn fsub1199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE9", "fsub st1, st0");
}



#[test]
fn fsub1200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xED", "fsub st5, st0");
}



#[test]
fn fsub1201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xEE", "fsub st6, st0");
}



#[test]
fn fsub1202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x20", "fsub DWORD [rax]");
}



#[test]
fn fsub1207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE9", "fsub");
}



#[test]
fn fsub1208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE5", "fsub st0, st5");
}



#[test]
fn fsub1209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE2", "fsub st0, st2");
}



#[test]
fn fsub1210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE3", "fsub st0, st3");
}



#[test]
fn fsub1211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE4", "fsub st0, st4");
}



#[test]
fn fsub1212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE4", "fsub st0, st4");
}



#[test]
fn fsub1213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x20", "fsub QWORD [rax]");
}



#[test]
fn fsub1218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE6", "fsub st6");
}



#[test]
fn fsub1219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE1", "fsub st1");
}



#[test]
fn fsub1220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE5", "fsub st5");
}



#[test]
fn fsub1221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE5", "fsub st5");
}



#[test]
fn fsub1222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsub st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE2", "fsub st2");
}



#[test]
fn fsubp1223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEC", "fsubp st4");
}



#[test]
fn fsubp1224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEE", "fsubp st6");
}



#[test]
fn fsubp1225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEB", "fsubp st3");
}



#[test]
fn fsubp1226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEF", "fsubp st7");
}



#[test]
fn fsubp1227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xED", "fsubp st5");
}



#[test]
fn fsubp1228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE9", "fsubp st1, st0");
}



#[test]
fn fsubp1229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEA", "fsubp st2, st0");
}



#[test]
fn fsubp1230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEF", "fsubp st7, st0");
}



#[test]
fn fsubp1231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xEC", "fsubp st4, st0");
}



#[test]
fn fsubp1232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xED", "fsubp st5, st0");
}



#[test]
fn fsubp1233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE9", "fsubp");
}



#[test]
fn fsubr1234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE3", "fsubr st3, st0");
}



#[test]
fn fsubr1235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE2", "fsubr st2, st0");
}



#[test]
fn fsubr1236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE2", "fsubr st2, st0");
}



#[test]
fn fsubr1237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE2", "fsubr st2, st0");
}



#[test]
fn fsubr1238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st6, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE6", "fsubr st6, st0");
}



#[test]
fn fsubr1239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEE", "fsubr st6");
}



#[test]
fn fsubr1240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEE", "fsubr st6");
}



#[test]
fn fsubr1241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xED", "fsubr st5");
}



#[test]
fn fsubr1242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xED", "fsubr st5");
}



#[test]
fn fsubr1243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE9", "fsubr st1");
}



#[test]
fn fsubr1244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0x28", "fsubr QWORD [rax]");
}



#[test]
fn fsubr1249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE5", "fsubr st5, st0");
}



#[test]
fn fsubr1250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE7", "fsubr st7, st0");
}



#[test]
fn fsubr1251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE5", "fsubr st5, st0");
}



#[test]
fn fsubr1252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE7", "fsubr st7, st0");
}



#[test]
fn fsubr1253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDC, 0xE3", "fsubr st3, st0");
}



#[test]
fn fsubr1254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE1", "fsubr");
}



#[test]
fn fsubr1255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEB", "fsubr st0, st3");
}



#[test]
fn fsubr1256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEF", "fsubr st0, st7");
}



#[test]
fn fsubr1257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xE9", "fsubr st0, st1");
}



#[test]
fn fsubr1258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEE", "fsubr st0, st6");
}



#[test]
fn fsubr1259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0xEB", "fsubr st0, st3");
}



#[test]
fn fsubr1260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubr1264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD8, 0x28", "fsubr DWORD [rax]");
}



#[test]
fn fsubrp1265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE1", "fsubrp st1, st0");
}



#[test]
fn fsubrp1266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE7", "fsubrp st7, st0");
}



#[test]
fn fsubrp1267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE2", "fsubrp st2, st0");
}



#[test]
fn fsubrp1268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE4", "fsubrp st4, st0");
}



#[test]
fn fsubrp1269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st7, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE7", "fsubrp st7, st0");
}



#[test]
fn fsubrp1270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE3", "fsubrp st3");
}



#[test]
fn fsubrp1271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE4", "fsubrp st4");
}



#[test]
fn fsubrp1272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE5", "fsubrp st5");
}



#[test]
fn fsubrp1273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE2", "fsubrp st2");
}



#[test]
fn fsubrp1274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE6", "fsubrp st6");
}



#[test]
fn fsubrp1275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fsubrp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDE, 0xE1", "fsubrp");
}



#[test]
fn ftst1276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ftst
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE4", "ftst");
}



#[test]
fn fucom1277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE1", "fucom");
}



#[test]
fn fucom1278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE3", "fucom st3");
}



#[test]
fn fucom1279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE7", "fucom st7");
}



#[test]
fn fucom1280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE7", "fucom st7");
}



#[test]
fn fucom1281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE5", "fucom st5");
}



#[test]
fn fucom1282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE7", "fucom st7");
}



#[test]
fn fucom1283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE1", "fucom st0, st1");
}



#[test]
fn fucom1284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE1", "fucom st0, st1");
}



#[test]
fn fucom1285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE3", "fucom st0, st3");
}



#[test]
fn fucom1286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE6", "fucom st0, st6");
}



#[test]
fn fucom1287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucom st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE3", "fucom st0, st3");
}



#[test]
fn fucomi1288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xE9", "fucomi");
}



#[test]
fn fucomi1289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEF", "fucomi st0, st7");
}



#[test]
fn fucomi1290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEE", "fucomi st0, st6");
}



#[test]
fn fucomi1291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xED", "fucomi st0, st5");
}



#[test]
fn fucomi1292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEA", "fucomi st0, st2");
}



#[test]
fn fucomi1293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEC", "fucomi st0, st4");
}



#[test]
fn fucomi1294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEC", "fucomi st4");
}



#[test]
fn fucomi1295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEE", "fucomi st6");
}



#[test]
fn fucomi1296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEF", "fucomi st7");
}



#[test]
fn fucomi1297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEC", "fucomi st4");
}



#[test]
fn fucomi1298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomi st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDB, 0xEF", "fucomi st7");
}



#[test]
fn fucomip1299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEB", "fucomip st0, st3");
}



#[test]
fn fucomip1300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEB", "fucomip st0, st3");
}



#[test]
fn fucomip1301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEA", "fucomip st0, st2");
}



#[test]
fn fucomip1302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEA", "fucomip st0, st2");
}



#[test]
fn fucomip1303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEA", "fucomip st0, st2");
}



#[test]
fn fucomip1304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEC", "fucomip st4");
}



#[test]
fn fucomip1305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xED", "fucomip st5");
}



#[test]
fn fucomip1306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE9", "fucomip st1");
}



#[test]
fn fucomip1307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEC", "fucomip st4");
}



#[test]
fn fucomip1308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip st7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xEF", "fucomip st7");
}



#[test]
fn fucomip1309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomip
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDF, 0xE9", "fucomip");
}



#[test]
fn fucomp1310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xED", "fucomp st0, st5");
}



#[test]
fn fucomp1311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEA", "fucomp st0, st2");
}



#[test]
fn fucomp1312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE9", "fucomp st0, st1");
}



#[test]
fn fucomp1313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEC", "fucomp st0, st4");
}



#[test]
fn fucomp1314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xED", "fucomp st0, st5");
}



#[test]
fn fucomp1315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xE9", "fucomp");
}



#[test]
fn fucomp1316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEE", "fucomp st6");
}



#[test]
fn fucomp1317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEC", "fucomp st4");
}



#[test]
fn fucomp1318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEB", "fucomp st3");
}



#[test]
fn fucomp1319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEC", "fucomp st4");
}



#[test]
fn fucomp1320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucomp st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDD, 0xEE", "fucomp st6");
}



#[test]
fn fucompp1321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fucompp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xDA, 0xE9", "fucompp");
}



#[test]
fn fwait1322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B", "fwait");
}



#[test]
fn fxam1323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxam
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xE5", "fxam");
}



#[test]
fn fxch1324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch st1");
}



#[test]
fn fxch1325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCC", "fxch st4");
}



#[test]
fn fxch1326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCB", "fxch st3");
}



#[test]
fn fxch1327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCB", "fxch st3");
}



#[test]
fn fxch1328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCD", "fxch st5");
}



#[test]
fn fxch1329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st5, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCD", "fxch st5, st0");
}



#[test]
fn fxch1330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st3, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCB", "fxch st3, st0");
}



#[test]
fn fxch1331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st4, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCC", "fxch st4, st0");
}



#[test]
fn fxch1332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st1, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch st1, st0");
}



#[test]
fn fxch1333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st2, st0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCA", "fxch st2, st0");
}



#[test]
fn fxch1334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCA", "fxch st0, st2");
}



#[test]
fn fxch1335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCC", "fxch st0, st4");
}



#[test]
fn fxch1336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCD", "fxch st0, st5");
}



#[test]
fn fxch1337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st0, st6");
}



#[test]
fn fxch1338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch st0, st6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xCE", "fxch st0, st6");
}



#[test]
fn fxch1339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxch
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xC9", "fxch");
}



#[test]
fn fxrstor1340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor1344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x08", "fxrstor [rax]");
}



#[test]
fn fxrstor641345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxrstor641349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x08", "fxrstor64 [rax]");
}



#[test]
fn fxsave1350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave1354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x00", "fxsave [rax]");
}



#[test]
fn fxsave641355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxsave641359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x00", "fxsave64 [rax]");
}



#[test]
fn fxtract1360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fxtract
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF4", "fxtract");
}



#[test]
fn fyl2x1361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fyl2x
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF1", "fyl2x");
}



#[test]
fn fyl2xp11362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fyl2xp1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD9, 0xF9", "fyl2xp1");
}



#[test]
fn getsec1363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; getsec
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37", "getsec");
}



#[test]
fn haddpd1364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7C, 0xE7", "haddpd xmm4, xmm15");
}



#[test]
fn haddpd1365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7C, 0xC7", "haddpd xmm0, xmm15");
}



#[test]
fn haddpd1366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7C, 0x22", "haddpd xmm12, OWORD [rdx]");
}



#[test]
fn haddpd1367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0xE4", "haddpd xmm4, xmm4");
}



#[test]
fn haddpd1368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7C, 0x22", "haddpd xmm12, OWORD [rdx]");
}



#[test]
fn haddps1369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x7C, 0xFB", "haddps xmm15, xmm11");
}



#[test]
fn haddps1370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xC3", "haddps xmm0, xmm3");
}



#[test]
fn haddps1371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0x00", "haddps xmm0, OWORD [rax]");
}



#[test]
fn haddps1372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7C, 0xDB", "haddps xmm3, xmm11");
}



#[test]
fn haddps1373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0x00", "haddps xmm0, OWORD [rax]");
}



#[test]
fn hlt1374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hlt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF4", "hlt");
}



#[test]
fn hsubpd1375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0x1A", "hsubpd xmm3, OWORD [rdx]");
}



#[test]
fn hsubpd1376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0xDC", "hsubpd xmm3, xmm4");
}



#[test]
fn hsubpd1377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7D, 0x18", "hsubpd xmm11, OWORD [rax]");
}



#[test]
fn hsubpd1378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0xC2", "hsubpd xmm0, xmm2");
}



#[test]
fn hsubpd1379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7D, 0xE3", "hsubpd xmm12, xmm11");
}



#[test]
fn hsubps1380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0xD2", "hsubps xmm2, xmm2");
}



#[test]
fn hsubps1381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0xC0", "hsubps xmm0, xmm0");
}



#[test]
fn hsubps1382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0xFA", "hsubps xmm15, xmm2");
}



#[test]
fn hsubps1383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0xDA", "hsubps xmm11, xmm2");
}



#[test]
fn hsubps1384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0xC4", "hsubps xmm0, xmm4");
}



#[test]
fn icebp1385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; icebp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "icebp");
}



#[test]
fn idiv1386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn idiv1387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn idiv1388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn idiv1389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn idiv1390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn idiv1391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF8", "idiv al");
}



#[test]
fn idiv1394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn idiv1395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn inc1396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn inc1401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC0", "inc al");
}



#[test]
fn inc1402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn inc1403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn inc1404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC0", "inc al");
}



#[test]
fn inc1405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn inc1406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC1", "inc rcx");
}



#[test]
fn inc1407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC0", "inc rax");
}



#[test]
fn inc1408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC1", "inc rcx");
}



#[test]
fn inc1409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC0", "inc rax");
}



#[test]
fn inc1410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC2", "inc rdx");
}



#[test]
fn insb1411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6C", "insb");
}



#[test]
fn insd1412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6D", "insd");
}



#[test]
fn insertps1413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, xmm12, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x21, 0xFC, 0x24", "insertps xmm15, xmm12, 36");
}



#[test]
fn insertps1414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm12, xmm2, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xE2, 0x51", "insertps xmm12, xmm2, 81");
}



#[test]
fn insertps1415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, xmm3, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xFB, 0x53", "insertps xmm15, xmm3, 83");
}



#[test]
fn insertps1416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm3, xmm3, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xDB, 0x0F", "insertps xmm3, xmm3, 15");
}



#[test]
fn insertps1417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm4, xmm11, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x21, 0xE3, 0x3E", "insertps xmm4, xmm11, 62");
}



#[test]
fn insertq1418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xC1", "insertq xmm0, xmm1");
}



#[test]
fn insertq1419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xE0", "insertq xmm4, xmm0");
}



#[test]
fn insertq1420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x79, 0xE4", "insertq xmm4, xmm12");
}



#[test]
fn insertq1421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xC3", "insertq xmm0, xmm3");
}



#[test]
fn insertq1422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xDB", "insertq xmm3, xmm3");
}



#[test]
fn insertq1423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm3, 14, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x78, 0xFB, 0x0E, 0x3A", "insertq xmm15, xmm3, 14, 58");
}



#[test]
fn insertq1424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm3, xmm4, 21, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xDC, 0x15, 0x0F", "insertq xmm3, xmm4, 21, 15");
}



#[test]
fn insertq1425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm4, 98, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x78, 0xFC, 0x62, 0x21", "insertq xmm15, xmm4, 98, 33");
}



#[test]
fn insertq1426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm3, 89, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x78, 0xFB, 0x59, 0x7E", "insertq xmm15, xmm3, 89, 126");
}



#[test]
fn insertq1427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm15, 1, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x78, 0xE7, 0x01, 0x18", "insertq xmm4, xmm15, 1, 24");
}



#[test]
fn insw1428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6D", "insw");
}



#[test]
fn int1429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x61", "int 97");
}



#[test]
fn int1430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x16", "int 22");
}



#[test]
fn int1431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x47", "int 71");
}



#[test]
fn int1432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x1F", "int 31");
}



#[test]
fn int1433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x10", "int 16");
}



#[test]
fn int011434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int01
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int01");
}



#[test]
fn int031435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int03
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int03");
}



#[test]
fn int11436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int1");
}



#[test]
fn int31437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int3");
}



#[test]
fn invd1438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x08", "invd");
}



#[test]
fn invept1439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x08", "invept rcx, OWORD [rax]");
}



#[test]
fn invept1440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x00", "invept rax, OWORD [rax]");
}



#[test]
fn invept1441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x10", "invept rdx, OWORD [rax]");
}



#[test]
fn invept1442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x08", "invept rcx, OWORD [rax]");
}



#[test]
fn invept1443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x08", "invept rcx, OWORD [rax]");
}



#[test]
fn invlpg1444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpg1448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn invlpga1449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga");
}



#[test]
fn invlpga1450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invlpga1454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn invpcid1455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x00", "invpcid rax, OWORD [rax]");
}



#[test]
fn invpcid1456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x00", "invpcid rax, OWORD [rax]");
}



#[test]
fn invpcid1457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x10", "invpcid rdx, OWORD [rax]");
}



#[test]
fn invpcid1458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x08", "invpcid rcx, OWORD [rax]");
}



#[test]
fn invpcid1459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0x82, 0x08", "invpcid rcx, OWORD [rax]");
}



#[test]
fn invvpid1460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x10", "invvpid rdx, OWORD [rax]");
}



#[test]
fn invvpid1461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x00", "invvpid rax, OWORD [rax]");
}



#[test]
fn invvpid1462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x10", "invvpid rdx, OWORD [rax]");
}



#[test]
fn invvpid1463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rdx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x10", "invvpid rdx, OWORD [rax]");
}



#[test]
fn invvpid1464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x00", "invvpid rax, OWORD [rax]");
}



#[test]
fn iret1465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iret");
}



#[test]
fn iretd1466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iretd");
}



#[test]
fn iretq1467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xCF", "iretq");
}



#[test]
fn iretw1468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xCF", "iretw");
}



#[test]
fn lahf1469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9F", "lahf");
}



#[test]
fn lar1470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn lar1475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x18", "lar rbx, WORD [rax]");
}



#[test]
fn lar1476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x00", "lar rax, WORD [rax]");
}



#[test]
fn lar1477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x00", "lar rax, WORD [rax]");
}



#[test]
fn lar1478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x18", "lar rbx, WORD [rax]");
}



#[test]
fn lar1479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x00", "lar rax, WORD [rax]");
}



#[test]
fn lddqu1480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x00", "lddqu xmm0, OWORD [rax]");
}



#[test]
fn lddqu1481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x38", "lddqu xmm15, OWORD [rax]");
}



#[test]
fn lddqu1482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x08", "lddqu xmm1, OWORD [rax]");
}



#[test]
fn lddqu1483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x10", "lddqu xmm2, OWORD [rax]");
}



#[test]
fn lddqu1484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x38", "lddqu xmm15, OWORD [rax]");
}



#[test]
fn ldmxcsr1485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn ldmxcsr1489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn lea1490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x08", "lea rcx, [rax]");
}



#[test]
fn lea1491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x18", "lea rbx, [rax]");
}



#[test]
fn lea1492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x00", "lea rax, [rax]");
}



#[test]
fn lea1493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x10", "lea rdx, [rax]");
}



#[test]
fn lea1494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x18", "lea rbx, [rax]");
}



#[test]
fn leave1495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; leave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC9", "leave");
}



#[test]
fn lfence1496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xE8", "lfence");
}



#[test]
fn lfs1497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn lfs1498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x08", "lfs rcx, [rax]");
}



#[test]
fn lfs1499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x10", "lfs rdx, [rax]");
}



#[test]
fn lfs1500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x10", "lfs rdx, [rax]");
}



#[test]
fn lfs1501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn lgdt1502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgdt1506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn lgs1507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x10", "lgs rdx, [rax]");
}



#[test]
fn lgs1508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x08", "lgs rcx, [rax]");
}



#[test]
fn lgs1509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x08", "lgs rcx, [rax]");
}



#[test]
fn lgs1510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x10", "lgs rdx, [rax]");
}



#[test]
fn lgs1511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x10", "lgs rdx, [rax]");
}



#[test]
fn lidt1512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lidt1516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn lldt1517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lldt1521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn lmsw1522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lmsw1526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn lodsb1527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAC", "lodsb");
}



#[test]
fn lodsd1528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAD", "lodsd");
}



#[test]
fn lodsq1529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAD", "lodsq");
}



#[test]
fn lodsw1530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAD", "lodsw");
}



#[test]
fn lsl1531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x00", "lsl rax, WORD [rax]");
}



#[test]
fn lsl1532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x08", "lsl rcx, WORD [rax]");
}



#[test]
fn lsl1533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x00", "lsl rax, WORD [rax]");
}



#[test]
fn lsl1534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x08", "lsl rcx, WORD [rax]");
}



#[test]
fn lsl1535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x10", "lsl rdx, WORD [rax]");
}



#[test]
fn lsl1536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lsl1540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn lss1541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn lss1542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x10", "lss rdx, [rax]");
}



#[test]
fn lss1543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x08", "lss rcx, [rax]");
}



#[test]
fn lss1544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x00", "lss rax, [rax]");
}



#[test]
fn lss1545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x08", "lss rcx, [rax]");
}



#[test]
fn ltr1546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn ltr1550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn lzcnt1551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xC9", "lzcnt rcx, rcx");
}



#[test]
fn lzcnt1552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xC1", "lzcnt rax, rcx");
}



#[test]
fn lzcnt1553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xD9", "lzcnt rbx, rcx");
}



#[test]
fn lzcnt1554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0x08", "lzcnt rcx, QWORD [rax]");
}



#[test]
fn lzcnt1555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lzcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0x10", "lzcnt rdx, QWORD [rax]");
}



#[test]
fn maskmovdqu1556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xCA", "maskmovdqu xmm1, xmm2");
}



#[test]
fn maskmovdqu1557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xF8", "maskmovdqu xmm15, xmm0");
}



#[test]
fn maskmovdqu1558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xC2", "maskmovdqu xmm0, xmm2");
}



#[test]
fn maskmovdqu1559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xDA", "maskmovdqu xmm11, xmm2");
}



#[test]
fn maskmovdqu1560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF7, 0xE4", "maskmovdqu xmm12, xmm12");
}



#[test]
fn maskmovq1561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xE8", "maskmovq mm5, mm0");
}



#[test]
fn maskmovq1562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xC0", "maskmovq mm0, mm0");
}



#[test]
fn maskmovq1563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm1, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xCB", "maskmovq mm1, mm3");
}



#[test]
fn maskmovq1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm5, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xEB", "maskmovq mm5, mm3");
}



#[test]
fn maskmovq1565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm4, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xE5", "maskmovq mm4, mm5");
}



#[test]
fn maxpd1566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xDB", "maxpd xmm3, xmm3");
}



#[test]
fn maxpd1567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xDC", "maxpd xmm3, xmm4");
}



#[test]
fn maxpd1568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xD9", "maxpd xmm3, xmm1");
}



#[test]
fn maxpd1569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0x18", "maxpd xmm11, OWORD [rax]");
}



#[test]
fn maxpd1570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xD9", "maxpd xmm3, xmm1");
}



#[test]
fn maxps1571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0xE1", "maxps xmm12, xmm1");
}



#[test]
fn maxps1572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0x38", "maxps xmm15, OWORD [rax]");
}



#[test]
fn maxps1573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0x22", "maxps xmm4, OWORD [rdx]");
}



#[test]
fn maxps1574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0x1A", "maxps xmm11, OWORD [rdx]");
}



#[test]
fn maxps1575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0x18", "maxps xmm11, OWORD [rax]");
}



#[test]
fn maxsd1576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xE4", "maxsd xmm4, xmm4");
}



#[test]
fn maxsd1577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xD4", "maxsd xmm2, xmm4");
}



#[test]
fn maxsd1578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xDA", "maxsd xmm11, xmm2");
}



#[test]
fn maxsd1579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5F, 0xE3", "maxsd xmm4, xmm11");
}



#[test]
fn maxsd1580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5F, 0xCF", "maxsd xmm1, xmm15");
}



#[test]
fn maxss1581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xD2", "maxss xmm2, xmm2");
}



#[test]
fn maxss1582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5F, 0xDF", "maxss xmm11, xmm15");
}



#[test]
fn maxss1583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xC8", "maxss xmm1, xmm0");
}



#[test]
fn maxss1584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0xE0", "maxss xmm12, xmm0");
}



#[test]
fn maxss1585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xDA", "maxss xmm3, xmm2");
}



#[test]
fn mfence1586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xF0", "mfence");
}



#[test]
fn minpd1587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xFB", "minpd xmm15, xmm11");
}



#[test]
fn minpd1588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0xCA", "minpd xmm1, xmm2");
}



#[test]
fn minpd1589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xDF", "minpd xmm11, xmm15");
}



#[test]
fn minpd1590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0xC1", "minpd xmm0, xmm1");
}



#[test]
fn minpd1591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5D, 0xD7", "minpd xmm2, xmm15");
}



#[test]
fn minps1592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xD9", "minps xmm3, xmm1");
}



#[test]
fn minps1593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5D, 0xFF", "minps xmm15, xmm15");
}



#[test]
fn minps1594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5D, 0xD7", "minps xmm2, xmm15");
}



#[test]
fn minps1595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xC0", "minps xmm0, xmm0");
}



#[test]
fn minps1596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xCA", "minps xmm1, xmm2");
}



#[test]
fn minsd1597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xE3", "minsd xmm4, xmm3");
}



#[test]
fn minsd1598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xD9", "minsd xmm3, xmm1");
}



#[test]
fn minsd1599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xDC", "minsd xmm3, xmm4");
}



#[test]
fn minsd1600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5D, 0xE7", "minsd xmm12, xmm15");
}



#[test]
fn minsd1601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5D, 0xE3", "minsd xmm12, xmm11");
}



#[test]
fn minss1602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xD3", "minss xmm2, xmm11");
}



#[test]
fn minss1603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0xD9", "minss xmm11, xmm1");
}



#[test]
fn minss1604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xD3", "minss xmm2, xmm11");
}



#[test]
fn minss1605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0xFB", "minss xmm15, xmm3");
}



#[test]
fn minss1606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0xD4", "minss xmm2, xmm4");
}



#[test]
fn monitor1607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn monitor1612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor");
}



#[test]
fn monitorx1613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn monitorx1614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx rax, ecx, edx");
}



#[test]
fn monitorx1615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn monitorx1616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn monitorx1617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn monitorx1618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitorx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx");
}



#[test]
fn montmul1619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; montmul
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA6, 0xC0", "montmul");
}



#[test]
fn movapd1620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x18", "movapd OWORD [rax], xmm3");
}



#[test]
fn movapd1621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x38", "movapd OWORD [rax], xmm15");
}



#[test]
fn movapd1622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x20", "movapd OWORD [rax], xmm4");
}



#[test]
fn movapd1623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x38", "movapd OWORD [rax], xmm15");
}



#[test]
fn movapd1624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x38", "movapd OWORD [rax], xmm15");
}



#[test]
fn movapd1625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x38", "movapd xmm15, OWORD [rax]");
}



#[test]
fn movapd1626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x20", "movapd xmm4, OWORD [rax]");
}



#[test]
fn movapd1627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x08", "movapd xmm1, OWORD [rax]");
}



#[test]
fn movapd1628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x20", "movapd xmm12, OWORD [rax]");
}



#[test]
fn movapd1629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x20", "movapd xmm12, OWORD [rax]");
}



#[test]
fn movapd1630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xD4", "movapd xmm2, xmm12");
}



#[test]
fn movapd1631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xFA", "movapd xmm15, xmm2");
}



#[test]
fn movapd1632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xD7", "movapd xmm2, xmm15");
}



#[test]
fn movapd1633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xCA", "movapd xmm1, xmm2");
}



#[test]
fn movapd1634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xE4", "movapd xmm4, xmm12");
}



#[test]
fn movapd1635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xD3", "movapd xmm2, xmm11");
}



#[test]
fn movapd1636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xDC", "movapd xmm3, xmm12");
}



#[test]
fn movapd1637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xDF", "movapd xmm3, xmm15");
}



#[test]
fn movapd1638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xF9", "movapd xmm15, xmm1");
}



#[test]
fn movapd1639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xDA", "movapd xmm11, xmm2");
}



#[test]
fn movaps1640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x28, 0xDC", "movaps xmm3, xmm12");
}



#[test]
fn movaps1641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xE0", "movaps xmm4, xmm0");
}



#[test]
fn movaps1642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xD3", "movaps xmm2, xmm3");
}



#[test]
fn movaps1643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xD3", "movaps xmm2, xmm3");
}



#[test]
fn movaps1644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xDB", "movaps xmm11, xmm3");
}



#[test]
fn movaps1645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x28, 0xD4", "movaps xmm2, xmm12");
}



#[test]
fn movaps1646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x29, 0x38", "movaps OWORD [rax], xmm15");
}



#[test]
fn movaps1647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xE1", "movaps xmm12, xmm1");
}



#[test]
fn movaps1648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xCC", "movaps xmm1, xmm4");
}



#[test]
fn movaps1649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x28, 0xE4", "movaps xmm12, xmm12");
}



#[test]
fn movd1650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xE8", "movd eax, mm5");
}



#[test]
fn movd1651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD8", "movd eax, mm3");
}



#[test]
fn movd1652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD0", "movd eax, mm2");
}



#[test]
fn movd1653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD0", "movd eax, mm2");
}



#[test]
fn movd1654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x18", "movd DWORD [rax], mm3");
}



#[test]
fn movd1655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE8", "movd mm5, rax");
}



#[test]
fn movd1656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, [rax]");
}



#[test]
fn movd1657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, [rax]");
}



#[test]
fn movd1658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC8", "movd mm1, rax");
}



#[test]
fn movd1659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x00", "movd mm0, [rax]");
}



#[test]
fn movd1660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xE8", "movd mm5, eax");
}



#[test]
fn movd1661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x10", "movd mm2, DWORD [rax]");
}



#[test]
fn movd1662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, DWORD [rax]");
}



#[test]
fn movd1663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm2, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xD0", "movd mm2, eax");
}



#[test]
fn movd1664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, DWORD [rax]");
}



#[test]
fn movd1665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD0", "movd rax, mm2");
}



#[test]
fn movd1666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd [rax], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x08", "movd [rax], mm1");
}



#[test]
fn movd1667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD8", "movd rax, mm3");
}



#[test]
fn movd1668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD0", "movd rax, mm2");
}



#[test]
fn movd1669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xC8", "movd rax, mm1");
}



#[test]
fn movddup1670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xDC", "movddup xmm11, xmm4");
}



#[test]
fn movddup1671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xC3", "movddup xmm0, xmm3");
}



#[test]
fn movddup1672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xDB", "movddup xmm11, xmm3");
}



#[test]
fn movddup1673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xDC", "movddup xmm11, xmm4");
}



#[test]
fn movddup1674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x12, 0xE7", "movddup xmm12, xmm15");
}



#[test]
fn movdq2q1675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xD2", "movdq2q mm2, xmm2");
}



#[test]
fn movdq2q1676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xEF", "movdq2q mm5, xmm15");
}



#[test]
fn movdq2q1677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xD3", "movdq2q mm2, xmm11");
}



#[test]
fn movdq2q1678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xD8", "movdq2q mm3, xmm0");
}



#[test]
fn movdq2q1679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xD3", "movdq2q mm2, xmm11");
}



#[test]
fn movdqa1680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xDB", "movdqa xmm11, xmm3");
}



#[test]
fn movdqa1681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xCB", "movdqa xmm1, xmm3");
}



#[test]
fn movdqa1682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xFB", "movdqa xmm15, xmm11");
}



#[test]
fn movdqa1683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xFB", "movdqa xmm15, xmm3");
}



#[test]
fn movdqa1684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xE4", "movdqa xmm4, xmm4");
}



#[test]
fn movdqa1685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x38", "movdqa OWORD [rax], xmm15");
}



#[test]
fn movdqa1686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x20", "movdqa OWORD [rax], xmm12");
}



#[test]
fn movdqa1687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x20", "movdqa OWORD [rax], xmm12");
}



#[test]
fn movdqa1688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x38", "movdqa OWORD [rax], xmm15");
}



#[test]
fn movdqa1689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x20", "movdqa OWORD [rax], xmm12");
}



#[test]
fn movdqa1690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x20", "movdqa xmm12, OWORD [rax]");
}



#[test]
fn movdqa1691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x10", "movdqa xmm2, OWORD [rax]");
}



#[test]
fn movdqa1692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x18", "movdqa xmm3, OWORD [rax]");
}



#[test]
fn movdqa1693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x18", "movdqa xmm11, OWORD [rax]");
}



#[test]
fn movdqa1694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x08", "movdqa xmm1, OWORD [rax]");
}



#[test]
fn movdqa1695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xD9", "movdqa xmm3, xmm1");
}



#[test]
fn movdqa1696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xDA", "movdqa xmm11, xmm2");
}



#[test]
fn movdqa1697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xCC", "movdqa xmm1, xmm12");
}



#[test]
fn movdqa1698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xCF", "movdqa xmm1, xmm15");
}



#[test]
fn movdqa1699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xD4", "movdqa xmm2, xmm12");
}



#[test]
fn movdqu1700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xDC", "movdqu xmm3, xmm4");
}



#[test]
fn movdqu1701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xE7", "movdqu xmm12, xmm15");
}



#[test]
fn movdqu1702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xCC", "movdqu xmm1, xmm4");
}



#[test]
fn movdqu1703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xC8", "movdqu xmm1, xmm0");
}



#[test]
fn movdqu1704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xDC", "movdqu xmm11, xmm4");
}



#[test]
fn movdqu1705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x18", "movdqu OWORD [rax], xmm11");
}



#[test]
fn movdqu1706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x00", "movdqu OWORD [rax], xmm0");
}



#[test]
fn movdqu1707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x20", "movdqu OWORD [rax], xmm4");
}



#[test]
fn movdqu1708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x20", "movdqu OWORD [rax], xmm12");
}



#[test]
fn movdqu1709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x00", "movdqu OWORD [rax], xmm0");
}



#[test]
fn movdqu1710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x18", "movdqu xmm11, OWORD [rax]");
}



#[test]
fn movdqu1711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x08", "movdqu xmm1, OWORD [rax]");
}



#[test]
fn movdqu1712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x20", "movdqu xmm12, OWORD [rax]");
}



#[test]
fn movdqu1713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x10", "movdqu xmm2, OWORD [rax]");
}



#[test]
fn movdqu1714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x08", "movdqu xmm1, OWORD [rax]");
}



#[test]
fn movdqu1715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xE3", "movdqu xmm4, xmm3");
}



#[test]
fn movdqu1716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xE4", "movdqu xmm12, xmm12");
}



#[test]
fn movdqu1717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xC3", "movdqu xmm0, xmm3");
}



#[test]
fn movdqu1718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xCC", "movdqu xmm1, xmm4");
}



#[test]
fn movdqu1719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xE1", "movdqu xmm12, xmm1");
}



#[test]
fn movhlps1720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x12, 0xC4", "movhlps xmm0, xmm12");
}



#[test]
fn movhlps1721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0xC8", "movhlps xmm1, xmm0");
}



#[test]
fn movhlps1722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0xE2", "movhlps xmm4, xmm2");
}



#[test]
fn movhlps1723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x12, 0xCB", "movhlps xmm1, xmm11");
}



#[test]
fn movhlps1724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x12, 0xC7", "movhlps xmm0, xmm15");
}



#[test]
fn movhpd1725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x20", "movhpd [rax], xmm12");
}



#[test]
fn movhpd1726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x20", "movhpd [rax], xmm4");
}



#[test]
fn movhpd1727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x18", "movhpd [rax], xmm3");
}



#[test]
fn movhpd1728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x10", "movhpd [rax], xmm2");
}



#[test]
fn movhpd1729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x38", "movhpd [rax], xmm15");
}



#[test]
fn movhpd1730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x00", "movhpd xmm0, [rax]");
}



#[test]
fn movhpd1731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm11, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x18", "movhpd xmm11, [rax]");
}



#[test]
fn movhpd1732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x38", "movhpd xmm15, [rax]");
}



#[test]
fn movhpd1733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x08", "movhpd xmm1, [rax]");
}



#[test]
fn movhpd1734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm11, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x18", "movhpd xmm11, [rax]");
}



#[test]
fn movhps1735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0x20", "movhps xmm12, QWORD [rax]");
}



#[test]
fn movhps1736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x10", "movhps xmm2, QWORD [rax]");
}



#[test]
fn movhps1737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x08", "movhps xmm1, QWORD [rax]");
}



#[test]
fn movhps1738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0x38", "movhps xmm15, QWORD [rax]");
}



#[test]
fn movhps1739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x20", "movhps xmm4, QWORD [rax]");
}



#[test]
fn movhps1740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x18", "movhps QWORD [rax], xmm3");
}



#[test]
fn movhps1741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm12");
}



#[test]
fn movhps1742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm4");
}



#[test]
fn movhps1743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm12");
}



#[test]
fn movhps1744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x08", "movhps QWORD [rax], xmm1");
}



#[test]
fn movlhps1745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xFC", "movlhps xmm15, xmm4");
}



#[test]
fn movlhps1746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0xD4", "movlhps xmm2, xmm4");
}



#[test]
fn movlhps1747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xDB", "movlhps xmm11, xmm3");
}



#[test]
fn movlhps1748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0xD8", "movlhps xmm3, xmm0");
}



#[test]
fn movlhps1749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xE0", "movlhps xmm12, xmm0");
}



#[test]
fn movlpd1750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x18", "movlpd xmm11, QWORD [rax]");
}



#[test]
fn movlpd1751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x20", "movlpd xmm12, QWORD [rax]");
}



#[test]
fn movlpd1752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x00", "movlpd xmm0, QWORD [rax]");
}



#[test]
fn movlpd1753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x18", "movlpd xmm3, QWORD [rax]");
}



#[test]
fn movlpd1754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x20", "movlpd xmm4, QWORD [rax]");
}



#[test]
fn movlpd1755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x00", "movlpd QWORD [rax], xmm0");
}



#[test]
fn movlpd1756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x00", "movlpd QWORD [rax], xmm0");
}



#[test]
fn movlpd1757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x38", "movlpd QWORD [rax], xmm15");
}



#[test]
fn movlpd1758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x18", "movlpd QWORD [rax], xmm3");
}



#[test]
fn movlpd1759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x20", "movlpd QWORD [rax], xmm12");
}



#[test]
fn movlps1760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x18", "movlps xmm11, QWORD [rax]");
}



#[test]
fn movlps1761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x18", "movlps xmm3, QWORD [rax]");
}



#[test]
fn movlps1762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x20", "movlps xmm12, QWORD [rax]");
}



#[test]
fn movlps1763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x38", "movlps xmm15, QWORD [rax]");
}



#[test]
fn movlps1764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x08", "movlps xmm1, QWORD [rax]");
}



#[test]
fn movlps1765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x18", "movlps QWORD [rax], xmm3");
}



#[test]
fn movlps1766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x00", "movlps QWORD [rax], xmm0");
}



#[test]
fn movlps1767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x18", "movlps QWORD [rax], xmm3");
}



#[test]
fn movlps1768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x13, 0x20", "movlps QWORD [rax], xmm12");
}



#[test]
fn movlps1769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x18", "movlps QWORD [rax], xmm3");
}



#[test]
fn movmskpd1770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rdx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xD3", "movmskpd rdx, xmm11");
}



#[test]
fn movmskpd1771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xD4", "movmskpd rdx, xmm4");
}



#[test]
fn movmskpd1772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xD0", "movmskpd rdx, xmm0");
}



#[test]
fn movmskpd1773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rbx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xDC", "movmskpd rbx, xmm4");
}



#[test]
fn movmskpd1774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xCC", "movmskpd rcx, xmm4");
}



#[test]
fn movmskps1775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC8", "movmskps rcx, xmm0");
}



#[test]
fn movmskps1776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC8", "movmskps rcx, xmm0");
}



#[test]
fn movmskps1777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xCB", "movmskps rcx, xmm3");
}



#[test]
fn movmskps1778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xD4", "movmskps rdx, xmm12");
}



#[test]
fn movmskps1779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC1", "movmskps rax, xmm1");
}



#[test]
fn movntdq1780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x38", "movntdq OWORD [rax], xmm15");
}



#[test]
fn movntdq1781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x18", "movntdq OWORD [rax], xmm11");
}



#[test]
fn movntdq1782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x18", "movntdq OWORD [rax], xmm3");
}



#[test]
fn movntdq1783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x10", "movntdq OWORD [rax], xmm2");
}



#[test]
fn movntdq1784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x00", "movntdq OWORD [rax], xmm0");
}



#[test]
fn movntdqa1785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x18", "movntdqa xmm3, OWORD [rax]");
}



#[test]
fn movntdqa1786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x08", "movntdqa xmm1, OWORD [rax]");
}



#[test]
fn movntdqa1787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x20", "movntdqa xmm4, OWORD [rax]");
}



#[test]
fn movntdqa1788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x18", "movntdqa xmm11, OWORD [rax]");
}



#[test]
fn movntdqa1789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x00", "movntdqa xmm0, OWORD [rax]");
}



#[test]
fn movntpd1790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x38", "movntpd OWORD [rax], xmm15");
}



#[test]
fn movntpd1791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x18", "movntpd OWORD [rax], xmm3");
}



#[test]
fn movntpd1792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x20", "movntpd OWORD [rax], xmm12");
}



#[test]
fn movntpd1793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x18", "movntpd OWORD [rax], xmm3");
}



#[test]
fn movntpd1794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x10", "movntpd OWORD [rax], xmm2");
}



#[test]
fn movntps1795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x10", "movntps OWORD [rax], xmm2");
}



#[test]
fn movntps1796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x38", "movntps OWORD [rax], xmm15");
}



#[test]
fn movntps1797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x10", "movntps OWORD [rax], xmm2");
}



#[test]
fn movntps1798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x20", "movntps OWORD [rax], xmm4");
}



#[test]
fn movntps1799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x18", "movntps OWORD [rax], xmm3");
}



#[test]
fn movntq1800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn movntq1801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn movntq1802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn movntq1803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x20", "movntq QWORD [rax], mm4");
}



#[test]
fn movntq1804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn movntsd1805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x10", "movntsd QWORD [rax], xmm2");
}



#[test]
fn movntsd1806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x08", "movntsd QWORD [rax], xmm1");
}



#[test]
fn movntsd1807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x20", "movntsd QWORD [rax], xmm12");
}



#[test]
fn movntsd1808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x20", "movntsd QWORD [rax], xmm12");
}



#[test]
fn movntsd1809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x38", "movntsd QWORD [rax], xmm15");
}



#[test]
fn movntss1810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x20", "movntss DWORD [rax], xmm4");
}



#[test]
fn movntss1811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x08", "movntss DWORD [rax], xmm1");
}



#[test]
fn movntss1812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2B, 0x38", "movntss DWORD [rax], xmm15");
}



#[test]
fn movntss1813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x20", "movntss DWORD [rax], xmm4");
}



#[test]
fn movntss1814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x10", "movntss DWORD [rax], xmm2");
}



#[test]
fn movq1815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC9", "movq xmm1, xmm1");
}



#[test]
fn movq1816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xE3", "movq xmm4, xmm11");
}



#[test]
fn movq1817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xD9", "movq xmm11, xmm1");
}



#[test]
fn movq1818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xD0", "movq xmm2, xmm0");
}



#[test]
fn movq1819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xD9", "movq xmm3, xmm1");
}



#[test]
fn movq1820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xC0", "movq rax, mm0");
}



#[test]
fn movq1821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x20", "movq [rax], mm4");
}



#[test]
fn movq1822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x28", "movq [rax], mm5");
}



#[test]
fn movq1823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD0", "movq rax, mm2");
}



#[test]
fn movq1824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x28", "movq [rax], mm5");
}



#[test]
fn movq1825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x18", "movq QWORD [rax], xmm11");
}



#[test]
fn movq1826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x20", "movq QWORD [rax], xmm4");
}



#[test]
fn movq1827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x00", "movq QWORD [rax], xmm0");
}



#[test]
fn movq1828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x18", "movq QWORD [rax], xmm11");
}



#[test]
fn movq1829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x20", "movq QWORD [rax], xmm4");
}



#[test]
fn movq1830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xE8", "movq mm5, mm0");
}



#[test]
fn movq1831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x2A", "movq mm5, [rdx]");
}



#[test]
fn movq1832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xD0", "movq mm2, mm0");
}



#[test]
fn movq1833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x10", "movq mm2, [rax]");
}



#[test]
fn movq1834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x28", "movq mm5, [rax]");
}



#[test]
fn movq1835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x2A", "movq [rdx], mm5");
}



#[test]
fn movq1836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xC4", "movq mm0, mm4");
}



#[test]
fn movq1837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x18", "movq [rax], mm3");
}



#[test]
fn movq1838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x2A", "movq [rdx], mm5");
}



#[test]
fn movq1839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x1A", "movq [rdx], mm3");
}



#[test]
fn movq1840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xFB", "movq xmm15, xmm11");
}



#[test]
fn movq1841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xD3", "movq xmm2, xmm11");
}



#[test]
fn movq1842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xE0", "movq xmm4, xmm0");
}



#[test]
fn movq1843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xD2", "movq xmm2, xmm2");
}



#[test]
fn movq1844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC8", "movq xmm1, xmm0");
}



#[test]
fn movq1845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x20", "movq xmm12, QWORD [rax]");
}



#[test]
fn movq1846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x10", "movq xmm2, QWORD [rax]");
}



#[test]
fn movq1847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x08", "movq xmm1, QWORD [rax]");
}



#[test]
fn movq1848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x10", "movq xmm2, QWORD [rax]");
}



#[test]
fn movq1849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x38", "movq xmm15, QWORD [rax]");
}



#[test]
fn movq1850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x08", "movq mm1, [rax]");
}



#[test]
fn movq1851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC0", "movq mm0, rax");
}



#[test]
fn movq1852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC0", "movq mm0, rax");
}



#[test]
fn movq1853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x20", "movq mm4, [rax]");
}



#[test]
fn movq1854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x00", "movq mm0, [rax]");
}



#[test]
fn movq2dq1855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm3, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xDA", "movq2dq xmm3, mm2");
}



#[test]
fn movq2dq1856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm11, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xDA", "movq2dq xmm11, mm2");
}



#[test]
fn movq2dq1857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm12, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xE1", "movq2dq xmm12, mm1");
}



#[test]
fn movq2dq1858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm15, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xF8", "movq2dq xmm15, mm0");
}



#[test]
fn movq2dq1859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm12, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xE4", "movq2dq xmm12, mm4");
}



#[test]
fn movsb1860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA4", "movsb");
}



#[test]
fn movsd1861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA5", "movsd");
}



#[test]
fn movsd1862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xC4", "movsd xmm0, xmm4");
}



#[test]
fn movsd1863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xC1", "movsd xmm0, xmm1");
}



#[test]
fn movsd1864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xE4", "movsd xmm4, xmm4");
}



#[test]
fn movsd1865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xD4", "movsd xmm2, xmm12");
}



#[test]
fn movsd1866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xCA", "movsd xmm1, xmm2");
}



#[test]
fn movsd1867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x10, 0xFC", "movsd xmm15, xmm12");
}



#[test]
fn movsd1868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xD8", "movsd xmm11, xmm0");
}



#[test]
fn movsd1869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xE4", "movsd xmm4, xmm4");
}



#[test]
fn movsd1870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xD4", "movsd xmm2, xmm12");
}



#[test]
fn movsd1871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xDA", "movsd xmm3, xmm2");
}



#[test]
fn movshdup1872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x16, 0xCB", "movshdup xmm1, xmm11");
}



#[test]
fn movshdup1873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xE1", "movshdup xmm4, xmm1");
}



#[test]
fn movshdup1874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xC3", "movshdup xmm0, xmm3");
}



#[test]
fn movshdup1875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xCA", "movshdup xmm1, xmm2");
}



#[test]
fn movshdup1876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0xF8", "movshdup xmm15, xmm0");
}



#[test]
fn movsldup1877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xD3", "movsldup xmm2, xmm3");
}



#[test]
fn movsldup1878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xD9", "movsldup xmm3, xmm1");
}



#[test]
fn movsldup1879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xCA", "movsldup xmm1, xmm2");
}



#[test]
fn movsldup1880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x12, 0xE3", "movsldup xmm4, xmm11");
}



#[test]
fn movsldup1881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xD4", "movsldup xmm2, xmm4");
}



#[test]
fn movsq1882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA5", "movsq");
}



#[test]
fn movss1883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x20", "movss DWORD [rax], xmm12");
}



#[test]
fn movss1884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x18", "movss DWORD [rax], xmm3");
}



#[test]
fn movss1885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x20", "movss DWORD [rax], xmm12");
}



#[test]
fn movss1886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x18", "movss DWORD [rax], xmm3");
}



#[test]
fn movss1887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x08", "movss DWORD [rax], xmm1");
}



#[test]
fn movss1888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x10, 0xCF", "movss xmm1, xmm15");
}



#[test]
fn movss1889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xD9", "movss xmm3, xmm1");
}



#[test]
fn movss1890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xCC", "movss xmm1, xmm4");
}



#[test]
fn movss1891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xE0", "movss xmm12, xmm0");
}



#[test]
fn movss1892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xFC", "movss xmm15, xmm4");
}



#[test]
fn movsw1893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA5", "movsw");
}



#[test]
fn movsx1894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsx rax, DWORD [rax]");
}



#[test]
fn movsx1895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsx rdx, DWORD [rax]");
}



#[test]
fn movsx1896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsx rcx, DWORD [rax]");
}



#[test]
fn movsx1897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC0", "movsx rax, eax");
}



#[test]
fn movsx1898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsx rdx, DWORD [rax]");
}



#[test]
fn movsx1899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xC8", "movsx rcx, ax");
}



#[test]
fn movsx1900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xC0", "movsx rax, ax");
}



#[test]
fn movsx1901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD0", "movsx rdx, ax");
}



#[test]
fn movsx1902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD8", "movsx rbx, ax");
}



#[test]
fn movsx1903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD8", "movsx rbx, ax");
}



#[test]
fn movsx1904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn movsx1905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn movsx1906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x08", "movsx cx, BYTE [rax]");
}



#[test]
fn movsx1907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x10", "movsx dx, BYTE [rax]");
}



#[test]
fn movsx1908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x10", "movsx dx, BYTE [rax]");
}



#[test]
fn movsx1909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0xD0", "movsx rdx, al");
}



#[test]
fn movsx1910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x00", "movsx rax, BYTE [rax]");
}



#[test]
fn movsx1911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x08", "movsx rcx, BYTE [rax]");
}



#[test]
fn movsx1912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x18", "movsx rbx, BYTE [rax]");
}



#[test]
fn movsx1913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x18", "movsx rbx, BYTE [rax]");
}



#[test]
fn movsxd1914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsxd rax, DWORD [rax]");
}



#[test]
fn movsxd1915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn movsxd1916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn movsxd1917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rax, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC0", "movsxd rax, eax");
}



#[test]
fn movsxd1918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn movupd1919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x20", "movupd xmm12, OWORD [rax]");
}



#[test]
fn movupd1920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x20", "movupd xmm12, OWORD [rax]");
}



#[test]
fn movupd1921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x20", "movupd xmm12, OWORD [rax]");
}



#[test]
fn movupd1922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x20", "movupd xmm4, OWORD [rax]");
}



#[test]
fn movupd1923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x10", "movupd xmm2, OWORD [rax]");
}



#[test]
fn movupd1924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xCB", "movupd xmm1, xmm3");
}



#[test]
fn movupd1925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xE4", "movupd xmm4, xmm4");
}



#[test]
fn movupd1926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xE3", "movupd xmm12, xmm11");
}



#[test]
fn movupd1927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC4", "movupd xmm0, xmm4");
}



#[test]
fn movupd1928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xE3", "movupd xmm12, xmm11");
}



#[test]
fn movupd1929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC8", "movupd xmm1, xmm0");
}



#[test]
fn movupd1930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xE2", "movupd xmm4, xmm2");
}



#[test]
fn movupd1931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xDB", "movupd xmm11, xmm11");
}



#[test]
fn movupd1932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xE4", "movupd xmm4, xmm12");
}



#[test]
fn movupd1933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xD9", "movupd xmm3, xmm1");
}



#[test]
fn movupd1934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x18", "movupd OWORD [rax], xmm11");
}



#[test]
fn movupd1935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x11, 0x20", "movupd OWORD [rax], xmm4");
}



#[test]
fn movupd1936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x38", "movupd OWORD [rax], xmm15");
}



#[test]
fn movupd1937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x20", "movupd OWORD [rax], xmm12");
}



#[test]
fn movupd1938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x11, 0x18", "movupd OWORD [rax], xmm3");
}



#[test]
fn movups1939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xE2", "movups xmm12, xmm2");
}



#[test]
fn movups1940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xDB", "movups xmm11, xmm3");
}



#[test]
fn movups1941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x10, 0xC7", "movups xmm0, xmm15");
}



#[test]
fn movups1942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x11, 0x20", "movups OWORD [rax], xmm4");
}



#[test]
fn movups1943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xE4", "movups xmm4, xmm4");
}



#[test]
fn movups1944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xE3", "movups xmm12, xmm3");
}



#[test]
fn movups1945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0x20", "movups xmm4, OWORD [rax]");
}



#[test]
fn movups1946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x10, 0xFB", "movups xmm15, xmm11");
}



#[test]
fn movups1947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x10, 0xFC", "movups xmm15, xmm12");
}



#[test]
fn movups1948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xC4", "movups xmm0, xmm4");
}



#[test]
fn movzx1949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xD8", "movzx rbx, al");
}



#[test]
fn movzx1950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x08", "movzx rcx, BYTE [rax]");
}



#[test]
fn movzx1951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x18", "movzx rbx, BYTE [rax]");
}



#[test]
fn movzx1952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC8", "movzx rcx, al");
}



#[test]
fn movzx1953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC8", "movzx rcx, al");
}



#[test]
fn movzx1954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC8", "movzx rcx, ax");
}



#[test]
fn movzx1955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0x00", "movzx rax, WORD [rax]");
}



#[test]
fn movzx1956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xD0", "movzx rdx, ax");
}



#[test]
fn movzx1957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC8", "movzx rcx, ax");
}



#[test]
fn movzx1958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0x10", "movzx rdx, WORD [rax]");
}



#[test]
fn movzx1959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn movzx1960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn movzx1961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x10", "movzx dx, BYTE [rax]");
}



#[test]
fn movzx1962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x10", "movzx dx, BYTE [rax]");
}



#[test]
fn movzx1963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x10", "movzx dx, BYTE [rax]");
}



#[test]
fn mpsadbw1964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm1, xmm4, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xCC, 0x3B", "mpsadbw xmm1, xmm4, 59");
}



#[test]
fn mpsadbw1965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, xmm2, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xDA, 0x15", "mpsadbw xmm3, xmm2, 21");
}



#[test]
fn mpsadbw1966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm0, xmm4, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xC4, 0x10", "mpsadbw xmm0, xmm4, 16");
}



#[test]
fn mpsadbw1967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm1, xmm11, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xCB, 0x48", "mpsadbw xmm1, xmm11, 72");
}



#[test]
fn mpsadbw1968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, xmm11, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xDB, 0x05", "mpsadbw xmm3, xmm11, 5");
}



#[test]
fn mul1969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn mul1970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn mul1971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x20", "mul BYTE [rax]");
}



#[test]
fn mul1972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn mul1973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x20", "mul BYTE [rax]");
}



#[test]
fn mul1974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn mul1975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn mul1976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn mul1977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn mul1978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn mulpd1979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0xE4", "mulpd xmm4, xmm4");
}



#[test]
fn mulpd1980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0xF9", "mulpd xmm15, xmm1");
}



#[test]
fn mulpd1981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0xE2", "mulpd xmm12, xmm2");
}



#[test]
fn mulpd1982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0x08", "mulpd xmm1, OWORD [rax]");
}



#[test]
fn mulpd1983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0xE4", "mulpd xmm4, xmm4");
}



#[test]
fn mulps1984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xE3", "mulps xmm4, xmm3");
}



#[test]
fn mulps1985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x59, 0xDC", "mulps xmm11, xmm12");
}



#[test]
fn mulps1986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x59, 0xFC", "mulps xmm15, xmm4");
}



#[test]
fn mulps1987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x12", "mulps xmm2, OWORD [rdx]");
}



#[test]
fn mulps1988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x59, 0xDB", "mulps xmm11, xmm11");
}



#[test]
fn mulsd1989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x59, 0xE4", "mulsd xmm4, xmm12");
}



#[test]
fn mulsd1990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x59, 0xE4", "mulsd xmm4, xmm12");
}



#[test]
fn mulsd1991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0xE3", "mulsd xmm12, xmm3");
}



#[test]
fn mulsd1992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x59, 0xFC", "mulsd xmm15, xmm12");
}



#[test]
fn mulsd1993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x59, 0xD7", "mulsd xmm2, xmm15");
}



#[test]
fn mulss1994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0xF9", "mulss xmm15, xmm1");
}



#[test]
fn mulss1995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x59, 0xFC", "mulss xmm15, xmm12");
}



#[test]
fn mulss1996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x59, 0xC3", "mulss xmm0, xmm11");
}



#[test]
fn mulss1997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xD1", "mulss xmm2, xmm1");
}



#[test]
fn mulss1998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x59, 0xE3", "mulss xmm4, xmm11");
}



#[test]
fn mwait1999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn mwait2004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait");
}



#[test]
fn mwaitx2005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx");
}



#[test]
fn mwaitx2006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn mwaitx2010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn neg2011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn neg2012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xDA", "neg dl");
}



#[test]
fn neg2013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn neg2014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD9", "neg cl");
}



#[test]
fn neg2015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD9", "neg cl");
}



#[test]
fn neg2016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD9", "neg rcx");
}



#[test]
fn neg2017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD8", "neg rax");
}



#[test]
fn neg2018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn neg2019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD9", "neg rcx");
}



#[test]
fn neg2020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn neg2021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn neg2025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn nop2026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x90", "nop");
}



#[test]
fn nop2027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn nop2028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn nop2029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn nop2030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn nop2031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn not2032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD0", "not al");
}



#[test]
fn not2033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn not2034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn not2035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD1", "not cl");
}



#[test]
fn not2036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn not2037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD2", "not rdx");
}



#[test]
fn not2038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD1", "not rcx");
}



#[test]
fn not2039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD3", "not rbx");
}



#[test]
fn not2040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD1", "not rcx");
}



#[test]
fn not2041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD3", "not rbx");
}



#[test]
fn not2042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn not2046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn or2047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x25", "or BYTE [rax], 37");
}



#[test]
fn or2048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x6A", "or BYTE [rax], 106");
}



#[test]
fn or2049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x73", "or BYTE [rax], 115");
}



#[test]
fn or2050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x26", "or BYTE [rax], 38");
}



#[test]
fn or2051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x6A", "or BYTE [rax], 106");
}



#[test]
fn or2052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x02", "or rdx, 2");
}



#[test]
fn or2053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x20", "or rax, 32");
}



#[test]
fn or2054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x2C", "or rdx, 44");
}



#[test]
fn or2055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x00", "or rax, 0");
}



#[test]
fn or2056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x4C", "or rax, 76");
}



#[test]
fn or2057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn or2058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn or2059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC1", "or cl, al");
}



#[test]
fn or2060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x08", "or cl, BYTE [rax]");
}



#[test]
fn or2061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x10", "or dl, BYTE [rax]");
}



#[test]
fn or2062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC8", "or rax, rcx");
}



#[test]
fn or2063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xCA", "or rdx, rcx");
}



#[test]
fn or2064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC8", "or rax, rcx");
}



#[test]
fn or2065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xCA", "or rdx, rcx");
}



#[test]
fn or2066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x18", "or rbx, QWORD [rax]");
}



#[test]
fn or2067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn or2068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xD1", "or cl, dl");
}



#[test]
fn or2069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC2", "or dl, al");
}



#[test]
fn or2070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC1", "or cl, al");
}



#[test]
fn or2071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC2", "or dl, al");
}



#[test]
fn or2072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x10", "or al, 16");
}



#[test]
fn or2073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x19", "or al, 25");
}



#[test]
fn or2074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x4B", "or al, 75");
}



#[test]
fn or2075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x0F", "or al, 15");
}



#[test]
fn or2076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x50", "or al, 80");
}



#[test]
fn or2077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x10", "or BYTE [rax], dl");
}



#[test]
fn or2078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x10", "or BYTE [rax], dl");
}



#[test]
fn or2079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x00", "or BYTE [rax], al");
}



#[test]
fn or2080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x00", "or BYTE [rax], al");
}



#[test]
fn or2081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x08", "or BYTE [rax], cl");
}



#[test]
fn or2082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x0A", "or al, 10");
}



#[test]
fn or2083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x55", "or cl, 85");
}



#[test]
fn or2084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x5B", "or cl, 91");
}



#[test]
fn or2085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x51", "or dl, 81");
}



#[test]
fn or2086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x79", "or al, 121");
}



#[test]
fn or2087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x35", "or rcx, 53");
}



#[test]
fn or2088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x47", "or rbx, 71");
}



#[test]
fn or2089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x5E", "or rbx, 94");
}



#[test]
fn or2090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x39", "or rbx, 57");
}



#[test]
fn or2091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x15", "or rdx, 21");
}



#[test]
fn or2092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x22", "or eax, 34");
}



#[test]
fn or2093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x08", "or eax, 8");
}



#[test]
fn or2094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x69", "or rax, 105");
}



#[test]
fn or2095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x19", "or rax, 25");
}



#[test]
fn or2096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x4D", "or ax, 77");
}



#[test]
fn or2097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn or2101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn orpd2102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xDB", "orpd xmm11, xmm3");
}



#[test]
fn orpd2103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xE2", "orpd xmm12, xmm2");
}



#[test]
fn orpd2104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0x18", "orpd xmm3, OWORD [rax]");
}



#[test]
fn orpd2105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xF9", "orpd xmm15, xmm1");
}



#[test]
fn orpd2106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xD8", "orpd xmm11, xmm0");
}



#[test]
fn orps2107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xD4", "orps xmm2, xmm4");
}



#[test]
fn orps2108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xC8", "orps xmm1, xmm0");
}



#[test]
fn orps2109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xDC", "orps xmm3, xmm4");
}



#[test]
fn orps2110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x56, 0xC4", "orps xmm0, xmm12");
}



#[test]
fn orps2111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x56, 0xDC", "orps xmm11, xmm4");
}



#[test]
fn outsb2112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6E", "outsb");
}



#[test]
fn outsd2113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6F", "outsd");
}



#[test]
fn outsw2114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6F", "outsw");
}



#[test]
fn pabsb2115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xD8", "pabsb mm3, mm0");
}



#[test]
fn pabsb2116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xE8", "pabsb mm5, mm0");
}



#[test]
fn pabsb2117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x28", "pabsb mm5, [rax]");
}



#[test]
fn pabsb2118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xE8", "pabsb mm5, mm0");
}



#[test]
fn pabsb2119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xC0", "pabsb mm0, mm0");
}



#[test]
fn pabsb2120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1C, 0xC3", "pabsb xmm0, xmm3");
}



#[test]
fn pabsb2121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x1C, 0xE4", "pabsb xmm12, xmm4");
}



#[test]
fn pabsb2122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1C, 0xDB", "pabsb xmm3, xmm3");
}



#[test]
fn pabsb2123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x1C, 0xD9", "pabsb xmm11, xmm1");
}



#[test]
fn pabsb2124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1C, 0xD8", "pabsb xmm3, xmm0");
}



#[test]
fn pabsd2125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1E, 0xCC", "pabsd xmm1, xmm4");
}



#[test]
fn pabsd2126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x1E, 0xDC", "pabsd xmm11, xmm12");
}



#[test]
fn pabsd2127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1E, 0xD8", "pabsd xmm3, xmm0");
}



#[test]
fn pabsd2128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1E, 0xC2", "pabsd xmm0, xmm2");
}



#[test]
fn pabsd2129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1E, 0xD2", "pabsd xmm2, xmm2");
}



#[test]
fn pabsd2130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x08", "pabsd mm1, [rax]");
}



#[test]
fn pabsd2131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x12", "pabsd mm2, [rdx]");
}



#[test]
fn pabsd2132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x10", "pabsd mm2, [rax]");
}



#[test]
fn pabsd2133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x20", "pabsd mm4, [rax]");
}



#[test]
fn pabsd2134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0xD8", "pabsd mm3, mm0");
}



#[test]
fn pabsw2135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1D, 0xCC", "pabsw xmm1, xmm4");
}



#[test]
fn pabsw2136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x1D, 0xE4", "pabsw xmm12, xmm12");
}



#[test]
fn pabsw2137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x1D, 0xE4", "pabsw xmm12, xmm4");
}



#[test]
fn pabsw2138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x1D, 0xE3", "pabsw xmm12, xmm11");
}



#[test]
fn pabsw2139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x1D, 0xD8", "pabsw xmm3, xmm0");
}



#[test]
fn pabsw2140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xD0", "pabsw mm2, mm0");
}



#[test]
fn pabsw2141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x20", "pabsw mm4, [rax]");
}



#[test]
fn pabsw2142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xC8", "pabsw mm1, mm0");
}



#[test]
fn pabsw2143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x12", "pabsw mm2, [rdx]");
}



#[test]
fn pabsw2144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xD0", "pabsw mm2, mm0");
}



#[test]
fn packssdw2145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x10", "packssdw mm2, [rax]");
}



#[test]
fn packssdw2146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xD0", "packssdw mm2, mm0");
}



#[test]
fn packssdw2147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xD8", "packssdw mm3, mm0");
}



#[test]
fn packssdw2148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x12", "packssdw mm2, [rdx]");
}



#[test]
fn packssdw2149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x08", "packssdw mm1, [rax]");
}



#[test]
fn packssdw2150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xC2", "packssdw xmm0, xmm2");
}



#[test]
fn packssdw2151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6B, 0x38", "packssdw xmm15, OWORD [rax]");
}



#[test]
fn packssdw2152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xC3", "packssdw xmm0, xmm3");
}



#[test]
fn packssdw2153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6B, 0xE2", "packssdw xmm12, xmm2");
}



#[test]
fn packssdw2154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xDC", "packssdw xmm3, xmm4");
}



#[test]
fn packsswb2155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x02", "packsswb mm0, [rdx]");
}



#[test]
fn packsswb2156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xD8", "packsswb mm3, mm0");
}



#[test]
fn packsswb2157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x1A", "packsswb mm3, [rdx]");
}



#[test]
fn packsswb2158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xE8", "packsswb mm5, mm0");
}



#[test]
fn packsswb2159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xC0", "packsswb mm0, mm0");
}



#[test]
fn packsswb2160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x63, 0xE7", "packsswb xmm4, xmm15");
}



#[test]
fn packsswb2161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0x08", "packsswb xmm1, OWORD [rax]");
}



#[test]
fn packsswb2162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xFB", "packsswb xmm15, xmm3");
}



#[test]
fn packsswb2163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0x02", "packsswb xmm0, OWORD [rdx]");
}



#[test]
fn packsswb2164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xE2", "packsswb xmm12, xmm2");
}



#[test]
fn packusdw2165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xD9", "packusdw xmm11, xmm1");
}



#[test]
fn packusdw2166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xDC", "packusdw xmm3, xmm4");
}



#[test]
fn packusdw2167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xE3", "packusdw xmm4, xmm3");
}



#[test]
fn packusdw2168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xD8", "packusdw xmm3, xmm0");
}



#[test]
fn packusdw2169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x2B, 0xC7", "packusdw xmm0, xmm15");
}



#[test]
fn packuswb2170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x1A", "packuswb mm3, [rdx]");
}



#[test]
fn packuswb2171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x2A", "packuswb mm5, [rdx]");
}



#[test]
fn packuswb2172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x08", "packuswb mm1, [rax]");
}



#[test]
fn packuswb2173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0xC0", "packuswb mm0, mm0");
}



#[test]
fn packuswb2174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x2A", "packuswb mm5, [rdx]");
}



#[test]
fn packuswb2175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xE2", "packuswb xmm4, xmm2");
}



#[test]
fn packuswb2176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x67, 0xE3", "packuswb xmm4, xmm11");
}



#[test]
fn packuswb2177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xD3", "packuswb xmm2, xmm3");
}



#[test]
fn packuswb2178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x67, 0xCF", "packuswb xmm1, xmm15");
}



#[test]
fn packuswb2179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xD0", "packuswb xmm2, xmm0");
}



#[test]
fn paddb2180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x0A", "paddb mm1, [rdx]");
}



#[test]
fn paddb2181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x18", "paddb mm3, [rax]");
}



#[test]
fn paddb2182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x22", "paddb mm4, [rdx]");
}



#[test]
fn paddb2183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xD0", "paddb mm2, mm0");
}



#[test]
fn paddb2184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x02", "paddb mm0, [rdx]");
}



#[test]
fn paddb2185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFC, 0xDA", "paddb xmm11, xmm2");
}



#[test]
fn paddb2186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xCC", "paddb xmm1, xmm4");
}



#[test]
fn paddb2187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xDC", "paddb xmm3, xmm4");
}



#[test]
fn paddb2188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFC, 0xE7", "paddb xmm12, xmm15");
}



#[test]
fn paddb2189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xCB", "paddb xmm1, xmm3");
}



#[test]
fn paddd2190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x28", "paddd mm5, [rax]");
}



#[test]
fn paddd2191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x02", "paddd mm0, [rdx]");
}



#[test]
fn paddd2192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x28", "paddd mm5, [rax]");
}



#[test]
fn paddd2193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x18", "paddd mm3, [rax]");
}



#[test]
fn paddd2194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x22", "paddd mm4, [rdx]");
}



#[test]
fn paddd2195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFE, 0xE7", "paddd xmm12, xmm15");
}



#[test]
fn paddd2196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0x38", "paddd xmm15, OWORD [rax]");
}



#[test]
fn paddd2197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0xDC", "paddd xmm3, xmm4");
}



#[test]
fn paddd2198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0x1A", "paddd xmm11, OWORD [rdx]");
}



#[test]
fn paddd2199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0x20", "paddd xmm12, OWORD [rax]");
}



#[test]
fn paddq2200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xE8", "paddq mm5, mm0");
}



#[test]
fn paddq2201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xC0", "paddq mm0, mm0");
}



#[test]
fn paddq2202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xD0", "paddq mm2, mm0");
}



#[test]
fn paddq2203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xC8", "paddq mm1, mm0");
}



#[test]
fn paddq2204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x28", "paddq mm5, [rax]");
}



#[test]
fn paddq2205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xDA", "paddq xmm3, xmm2");
}



#[test]
fn paddq2206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD4, 0xDB", "paddq xmm11, xmm11");
}



#[test]
fn paddq2207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD4, 0xD9", "paddq xmm11, xmm1");
}



#[test]
fn paddq2208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD4, 0xFB", "paddq xmm15, xmm11");
}



#[test]
fn paddq2209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD4, 0xFB", "paddq xmm15, xmm11");
}



#[test]
fn paddsb2210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x10", "paddsb mm2, [rax]");
}



#[test]
fn paddsb2211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xC0", "paddsb mm0, mm0");
}



#[test]
fn paddsb2212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xC8", "paddsb mm1, mm0");
}



#[test]
fn paddsb2213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xC8", "paddsb mm1, mm0");
}



#[test]
fn paddsb2214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x20", "paddsb mm4, [rax]");
}



#[test]
fn paddsb2215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0xF8", "paddsb xmm15, xmm0");
}



#[test]
fn paddsb2216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0xDB", "paddsb xmm11, xmm3");
}



#[test]
fn paddsb2217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0xE1", "paddsb xmm12, xmm1");
}



#[test]
fn paddsb2218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0xCB", "paddsb xmm1, xmm3");
}



#[test]
fn paddsb2219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEC, 0xC3", "paddsb xmm0, xmm11");
}



#[test]
fn paddsiw2220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xE0", "paddsiw mm4, mm0");
}



#[test]
fn paddsiw2221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xE8", "paddsiw mm5, mm0");
}



#[test]
fn paddsiw2222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xE0", "paddsiw mm4, mm0");
}



#[test]
fn paddsiw2223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x20", "paddsiw mm4, [rax]");
}



#[test]
fn paddsiw2224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x18", "paddsiw mm3, [rax]");
}



#[test]
fn paddsw2225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xE0", "paddsw mm4, mm0");
}



#[test]
fn paddsw2226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xD8", "paddsw mm3, mm0");
}



#[test]
fn paddsw2227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xD8", "paddsw mm3, mm0");
}



#[test]
fn paddsw2228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x2A", "paddsw mm5, [rdx]");
}



#[test]
fn paddsw2229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xD8", "paddsw mm3, mm0");
}



#[test]
fn paddsw2230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xDC", "paddsw xmm3, xmm12");
}



#[test]
fn paddsw2231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xD7", "paddsw xmm2, xmm15");
}



#[test]
fn paddsw2232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xED, 0xE0", "paddsw xmm12, xmm0");
}



#[test]
fn paddsw2233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xD9", "paddsw xmm3, xmm1");
}



#[test]
fn paddsw2234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xE1", "paddsw xmm4, xmm1");
}



#[test]
fn paddusb2235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0xD8", "paddusb mm3, mm0");
}



#[test]
fn paddusb2236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x00", "paddusb mm0, [rax]");
}



#[test]
fn paddusb2237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x10", "paddusb mm2, [rax]");
}



#[test]
fn paddusb2238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x1A", "paddusb mm3, [rdx]");
}



#[test]
fn paddusb2239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x20", "paddusb mm4, [rax]");
}



#[test]
fn paddusb2240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDC, 0xE3", "paddusb xmm4, xmm3");
}



#[test]
fn paddusb2241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xDF", "paddusb xmm3, xmm15");
}



#[test]
fn paddusb2242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xE7", "paddusb xmm4, xmm15");
}



#[test]
fn paddusb2243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xD4", "paddusb xmm2, xmm12");
}



#[test]
fn paddusb2244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDC, 0xCA", "paddusb xmm1, xmm2");
}



#[test]
fn paddusw2245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x20", "paddusw mm4, [rax]");
}



#[test]
fn paddusw2246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0xC0", "paddusw mm0, mm0");
}



#[test]
fn paddusw2247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0xE0", "paddusw mm4, mm0");
}



#[test]
fn paddusw2248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x0A", "paddusw mm1, [rdx]");
}



#[test]
fn paddusw2249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x22", "paddusw mm4, [rdx]");
}



#[test]
fn paddusw2250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0xDC", "paddusw xmm11, xmm4");
}



#[test]
fn paddusw2251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDD, 0xFF", "paddusw xmm15, xmm15");
}



#[test]
fn paddusw2252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0xE1", "paddusw xmm12, xmm1");
}



#[test]
fn paddusw2253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0x0A", "paddusw xmm1, OWORD [rdx]");
}



#[test]
fn paddusw2254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0x22", "paddusw xmm12, OWORD [rdx]");
}



#[test]
fn paddw2255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0xD8", "paddw mm3, mm0");
}



#[test]
fn paddw2256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x2A", "paddw mm5, [rdx]");
}



#[test]
fn paddw2257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0xE8", "paddw mm5, mm0");
}



#[test]
fn paddw2258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x08", "paddw mm1, [rax]");
}



#[test]
fn paddw2259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x12", "paddw mm2, [rdx]");
}



#[test]
fn paddw2260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFD, 0xE4", "paddw xmm12, xmm4");
}



#[test]
fn paddw2261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0x02", "paddw xmm0, OWORD [rdx]");
}



#[test]
fn paddw2262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xD1", "paddw xmm2, xmm1");
}



#[test]
fn paddw2263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0x1A", "paddw xmm3, OWORD [rdx]");
}



#[test]
fn paddw2264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xCC", "paddw xmm1, xmm4");
}



#[test]
fn palignr2265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm11, xmm1, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0F, 0xD9, 0x6F", "palignr xmm11, xmm1, 111");
}



#[test]
fn palignr2266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm4, xmm15, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0F, 0xE7, 0x6F", "palignr xmm4, xmm15, 111");
}



#[test]
fn palignr2267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm0, xmm12, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0F, 0xC4, 0x79", "palignr xmm0, xmm12, 121");
}



#[test]
fn palignr2268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm15, xmm0, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0F, 0xF8, 0x2D", "palignr xmm15, xmm0, 45");
}



#[test]
fn palignr2269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr xmm15, xmm1, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0F, 0xF9, 0x7E", "palignr xmm15, xmm1, 126");
}



#[test]
fn palignr2270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm2, mm0, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0xD0, 0x46", "palignr mm2, mm0, 70");
}



#[test]
fn palignr2271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm4, [rax], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x20, 0x09", "palignr mm4, [rax], 9");
}



#[test]
fn palignr2272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm0, mm0, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0xC0, 0x3F", "palignr mm0, mm0, 63");
}



#[test]
fn palignr2273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm1, [rdx], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x0A, 0x68", "palignr mm1, [rdx], 104");
}



#[test]
fn palignr2274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm1, [rdx], 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x0A, 0x28", "palignr mm1, [rdx], 40");
}



#[test]
fn pand2275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x00", "pand mm0, [rax]");
}



#[test]
fn pand2276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0xE0", "pand mm4, mm0");
}



#[test]
fn pand2277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x08", "pand mm1, [rax]");
}



#[test]
fn pand2278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x28", "pand mm5, [rax]");
}



#[test]
fn pand2279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x1A", "pand mm3, [rdx]");
}



#[test]
fn pand2280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDB, 0xE3", "pand xmm12, xmm11");
}



#[test]
fn pand2281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDB, 0xE7", "pand xmm4, xmm15");
}



#[test]
fn pand2282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0xE4", "pand xmm4, xmm4");
}



#[test]
fn pand2283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0xDB", "pand xmm11, xmm3");
}



#[test]
fn pand2284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDB, 0xFB", "pand xmm15, xmm11");
}



#[test]
fn pandn2285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x02", "pandn mm0, [rdx]");
}



#[test]
fn pandn2286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0xE0", "pandn mm4, mm0");
}



#[test]
fn pandn2287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x0A", "pandn mm1, [rdx]");
}



#[test]
fn pandn2288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x1A", "pandn mm3, [rdx]");
}



#[test]
fn pandn2289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x02", "pandn mm0, [rdx]");
}



#[test]
fn pandn2290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x10", "pandn xmm2, OWORD [rax]");
}



#[test]
fn pandn2291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xE3", "pandn xmm4, xmm3");
}



#[test]
fn pandn2292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDF, 0xFB", "pandn xmm15, xmm11");
}



#[test]
fn pandn2293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xC8", "pandn xmm1, xmm0");
}



#[test]
fn pandn2294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDF, 0xDB", "pandn xmm11, xmm3");
}



#[test]
fn pause2295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pause
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x90", "pause");
}



#[test]
fn paveb2296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xE8", "paveb mm5, mm0");
}



#[test]
fn paveb2297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xC8", "paveb mm1, mm0");
}



#[test]
fn paveb2298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x0A", "paveb mm1, [rdx]");
}



#[test]
fn paveb2299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x18", "paveb mm3, [rax]");
}



#[test]
fn paveb2300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xE8", "paveb mm5, mm0");
}



#[test]
fn pavgb2301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x18", "pavgb mm3, [rax]");
}



#[test]
fn pavgb2302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xD8", "pavgb mm3, mm0");
}



#[test]
fn pavgb2303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x22", "pavgb mm4, [rdx]");
}



#[test]
fn pavgb2304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x22", "pavgb mm4, [rdx]");
}



#[test]
fn pavgb2305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xE0", "pavgb mm4, mm0");
}



#[test]
fn pavgb2306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0x00", "pavgb xmm0, OWORD [rax]");
}



#[test]
fn pavgb2307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE0, 0xE3", "pavgb xmm12, xmm11");
}



#[test]
fn pavgb2308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE0, 0xD3", "pavgb xmm2, xmm11");
}



#[test]
fn pavgb2309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0xE4", "pavgb xmm12, xmm4");
}



#[test]
fn pavgb2310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0xE4", "pavgb xmm12, xmm4");
}



#[test]
fn pavgusb2311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xBF", "pavgusb mm4, [rdx]");
}



#[test]
fn pavgusb2312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xBF", "pavgusb mm0, mm0");
}



#[test]
fn pavgusb2313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xBF", "pavgusb mm0, [rax]");
}



#[test]
fn pavgusb2314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xBF", "pavgusb mm2, [rdx]");
}



#[test]
fn pavgusb2315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xBF", "pavgusb mm5, mm0");
}



#[test]
fn pavgw2316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x22", "pavgw mm4, [rdx]");
}



#[test]
fn pavgw2317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0xD8", "pavgw mm3, mm0");
}



#[test]
fn pavgw2318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x2A", "pavgw mm5, [rdx]");
}



#[test]
fn pavgw2319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x1A", "pavgw mm3, [rdx]");
}



#[test]
fn pavgw2320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x12", "pavgw mm2, [rdx]");
}



#[test]
fn pavgw2321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE3, 0xDF", "pavgw xmm3, xmm15");
}



#[test]
fn pavgw2322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE3, 0xFC", "pavgw xmm15, xmm4");
}



#[test]
fn pavgw2323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE3, 0xE7", "pavgw xmm12, xmm15");
}



#[test]
fn pavgw2324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE3, 0xFC", "pavgw xmm15, xmm4");
}



#[test]
fn pavgw2325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE3, 0xFC", "pavgw xmm15, xmm12");
}



#[test]
fn pblendvb2326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xCA", "pblendvb xmm1, xmm2");
}



#[test]
fn pblendvb2327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x10, 0xD7", "pblendvb xmm2, xmm15");
}



#[test]
fn pblendvb2328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xD1", "pblendvb xmm2, xmm1");
}



#[test]
fn pblendvb2329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x10, 0xE3", "pblendvb xmm12, xmm11");
}



#[test]
fn pblendvb2330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xDB", "pblendvb xmm3, xmm3");
}



#[test]
fn pblendw2331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm11, xmm0, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0xD8, 0x7D", "pblendw xmm11, xmm0, 125");
}



#[test]
fn pblendw2332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm1, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0xF9, 0x2D", "pblendw xmm15, xmm1, 45");
}



#[test]
fn pblendw2333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm12, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0E, 0xFC, 0x16", "pblendw xmm15, xmm12, 22");
}



#[test]
fn pblendw2334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm4, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0xFC, 0x7A", "pblendw xmm15, xmm4, 122");
}



#[test]
fn pblendw2335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm2, xmm12, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0E, 0xD4, 0x3A", "pblendw xmm2, xmm12, 58");
}



#[test]
fn pclmulhqhqdq2336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xC7, 0x11", "pclmulhqhqdq xmm0, xmm15");
}



#[test]
fn pclmulhqhqdq2337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xD4, 0x11", "pclmulhqhqdq xmm2, xmm12");
}



#[test]
fn pclmulhqhqdq2338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xCC, 0x11", "pclmulhqhqdq xmm1, xmm4");
}



#[test]
fn pclmulhqhqdq2339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xC3, 0x11", "pclmulhqhqdq xmm0, xmm11");
}



#[test]
fn pclmulhqhqdq2340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xE4, 0x11", "pclmulhqhqdq xmm12, xmm4");
}



#[test]
fn pclmulhqlqdq2341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x0A, 0x01", "pclmulhqlqdq xmm1, OWORD [rdx]");
}



#[test]
fn pclmulhqlqdq2342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x08, 0x01", "pclmulhqlqdq xmm1, OWORD [rax]");
}



#[test]
fn pclmulhqlqdq2343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xE3, 0x01", "pclmulhqlqdq xmm4, xmm3");
}



#[test]
fn pclmulhqlqdq2344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xE2, 0x01", "pclmulhqlqdq xmm12, xmm2");
}



#[test]
fn pclmulhqlqdq2345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xF9, 0x01", "pclmulhqlqdq xmm15, xmm1");
}



#[test]
fn pclmullqhqdq2346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x38, 0x10", "pclmullqhqdq xmm15, OWORD [rax]");
}



#[test]
fn pclmullqhqdq2347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xC4, 0x10", "pclmullqhqdq xmm0, xmm12");
}



#[test]
fn pclmullqhqdq2348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xFA, 0x10", "pclmullqhqdq xmm15, xmm2");
}



#[test]
fn pclmullqhqdq2349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD8, 0x10", "pclmullqhqdq xmm3, xmm0");
}



#[test]
fn pclmullqhqdq2350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x18, 0x10", "pclmullqhqdq xmm3, OWORD [rax]");
}



#[test]
fn pclmullqlqdq2351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xDB, 0x00", "pclmullqlqdq xmm3, xmm3");
}



#[test]
fn pclmullqlqdq2352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xDB, 0x00", "pclmullqlqdq xmm3, xmm11");
}



#[test]
fn pclmullqlqdq2353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD9, 0x00", "pclmullqlqdq xmm3, xmm1");
}



#[test]
fn pclmullqlqdq2354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xD8, 0x00", "pclmullqlqdq xmm11, xmm0");
}



#[test]
fn pclmullqlqdq2355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xFA, 0x00", "pclmullqlqdq xmm15, xmm2");
}



#[test]
fn pclmulqdq2356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm3, xmm3, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xDB, 0x39", "pclmulqdq xmm3, xmm3, 57");
}



#[test]
fn pclmulqdq2357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm11, xmm4, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xDC, 0x26", "pclmulqdq xmm11, xmm4, 38");
}



#[test]
fn pclmulqdq2358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm2, xmm4, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD4, 0x0D", "pclmulqdq xmm2, xmm4, 13");
}



#[test]
fn pclmulqdq2359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm12, xmm12, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xE4, 0x6C", "pclmulqdq xmm12, xmm12, 108");
}



#[test]
fn pclmulqdq2360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm12, OWORD [rdx], 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x22, 0x78", "pclmulqdq xmm12, OWORD [rdx], 120");
}



#[test]
fn pdistib2361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x10", "pdistib mm2, [rax]");
}



#[test]
fn pdistib2362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x00", "pdistib mm0, [rax]");
}



#[test]
fn pdistib2363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x10", "pdistib mm2, [rax]");
}



#[test]
fn pdistib2364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x00", "pdistib mm0, [rax]");
}



#[test]
fn pdistib2365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x20", "pdistib mm4, [rax]");
}



#[test]
fn pextrb2366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm11, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xD8, 0x02", "pextrb eax, xmm11, 2");
}



#[test]
fn pextrb2367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm0, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC0, 0x0E", "pextrb eax, xmm0, 14");
}



#[test]
fn pextrb2368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm1, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xCA, 0x1A", "pextrb edx, xmm1, 26");
}



#[test]
fn pextrb2369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm11, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xD9, 0x09", "pextrb ecx, xmm11, 9");
}



#[test]
fn pextrb2370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm15, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xFA, 0x09", "pextrb edx, xmm15, 9");
}



#[test]
fn pextrb2371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm1, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x08, 0x7D", "pextrb BYTE [rax], xmm1, 125");
}



#[test]
fn pextrb2372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm3, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x18, 0x01", "pextrb BYTE [rax], xmm3, 1");
}



#[test]
fn pextrb2373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm12, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x20, 0x06", "pextrb BYTE [rax], xmm12, 6");
}



#[test]
fn pextrb2374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm3, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x18, 0x08", "pextrb BYTE [rax], xmm3, 8");
}



#[test]
fn pextrb2375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm15, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x38, 0x4E", "pextrb BYTE [rax], xmm15, 78");
}



#[test]
fn pextrb2376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm0, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xC2, 0x4E", "pextrb rdx, xmm0, 78");
}



#[test]
fn pextrb2377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm2, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD1, 0x7A", "pextrb rcx, xmm2, 122");
}



#[test]
fn pextrb2378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm12, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xE0, 0x08", "pextrb rax, xmm12, 8");
}



#[test]
fn pextrb2379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm2, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD2, 0x66", "pextrb rdx, xmm2, 102");
}



#[test]
fn pextrb2380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm15, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xFA, 0x1F", "pextrb rdx, xmm15, 31");
}



#[test]
fn pextrd2381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm15, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0xF8, 0x47", "pextrd eax, xmm15, 71");
}



#[test]
fn pextrd2382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm3, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x18, 0x5B", "pextrd DWORD [rax], xmm3, 91");
}



#[test]
fn pextrd2383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm11, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0xD8, 0x5E", "pextrd eax, xmm11, 94");
}



#[test]
fn pextrd2384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm2, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x10, 0x26", "pextrd DWORD [rax], xmm2, 38");
}



#[test]
fn pextrd2385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm2, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x10, 0x73", "pextrd DWORD [rax], xmm2, 115");
}



#[test]
fn pextrq2386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm4, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0xE0, 0x5A", "pextrq rax, xmm4, 90");
}



#[test]
fn pextrq2387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm3, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x18, 0x39", "pextrq [rax], xmm3, 57");
}



#[test]
fn pextrq2388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm11, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0xD8, 0x54", "pextrq rax, xmm11, 84");
}



#[test]
fn pextrq2389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm12, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x20, 0x4D", "pextrq [rax], xmm12, 77");
}



#[test]
fn pextrq2390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm12, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0xE0, 0x59", "pextrq rax, xmm12, 89");
}



#[test]
fn pextrw2391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, mm1, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC1, 0x5E", "pextrw eax, mm1, 94");
}



#[test]
fn pextrw2392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm3, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xCB, 0x23", "pextrw ecx, mm3, 35");
}



#[test]
fn pextrw2393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm3, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xCB, 0x67", "pextrw ecx, mm3, 103");
}



#[test]
fn pextrw2394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, mm5, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xD5, 0x10", "pextrw edx, mm5, 16");
}



#[test]
fn pextrw2395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm1, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC9, 0x42", "pextrw ecx, mm1, 66");
}



#[test]
fn pextrw2396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm3, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC3, 0x06", "pextrw eax, xmm3, 6");
}



#[test]
fn pextrw2397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm0, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC0, 0x46", "pextrw eax, xmm0, 70");
}



#[test]
fn pextrw2398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm4, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC4, 0x31", "pextrw eax, xmm4, 49");
}



#[test]
fn pextrw2399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm2, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC2, 0x2E", "pextrw eax, xmm2, 46");
}



#[test]
fn pextrw2400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm4, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD4, 0x76", "pextrw edx, xmm4, 118");
}



#[test]
fn pextrw2401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm0, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x00, 0x09", "pextrw WORD [rax], xmm0, 9");
}



#[test]
fn pextrw2402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm15, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x38, 0x0B", "pextrw WORD [rax], xmm15, 11");
}



#[test]
fn pextrw2403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm12, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x20, 0x6C", "pextrw WORD [rax], xmm12, 108");
}



#[test]
fn pextrw2404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm3, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x18, 0x57", "pextrw WORD [rax], xmm3, 87");
}



#[test]
fn pextrw2405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm0, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x00, 0x31", "pextrw WORD [rax], xmm0, 49");
}



#[test]
fn pextrw2406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rcx, xmm3, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xD9, 0x3B", "pextrw rcx, xmm3, 59");
}



#[test]
fn pextrw2407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm15, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x15, 0xFA, 0x41", "pextrw rdx, xmm15, 65");
}



#[test]
fn pextrw2408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rcx, xmm15, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x15, 0xF9, 0x62", "pextrw rcx, xmm15, 98");
}



#[test]
fn pextrw2409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm3, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xD8, 0x34", "pextrw rax, xmm3, 52");
}



#[test]
fn pextrw2410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm4, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xE0, 0x16", "pextrw rax, xmm4, 22");
}



#[test]
fn pf2id2411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x1D", "pf2id mm5, [rdx]");
}



#[test]
fn pf2id2412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x1D", "pf2id mm3, [rdx]");
}



#[test]
fn pf2id2413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x1D", "pf2id mm4, [rax]");
}



#[test]
fn pf2id2414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x1D", "pf2id mm3, mm0");
}



#[test]
fn pf2id2415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x1D", "pf2id mm5, mm0");
}



#[test]
fn pf2iw2416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x1C", "pf2iw mm2, [rax]");
}



#[test]
fn pf2iw2417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x1C", "pf2iw mm5, [rdx]");
}



#[test]
fn pf2iw2418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x1C", "pf2iw mm4, [rax]");
}



#[test]
fn pf2iw2419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x1C", "pf2iw mm1, mm0");
}



#[test]
fn pf2iw2420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x1C", "pf2iw mm2, mm0");
}



#[test]
fn pfacc2421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xAE", "pfacc mm4, mm0");
}



#[test]
fn pfacc2422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xAE", "pfacc mm2, [rdx]");
}



#[test]
fn pfacc2423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xAE", "pfacc mm4, [rdx]");
}



#[test]
fn pfacc2424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xAE", "pfacc mm4, mm0");
}



#[test]
fn pfacc2425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAE", "pfacc mm0, [rax]");
}



#[test]
fn pfadd2426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x9E", "pfadd mm5, [rax]");
}



#[test]
fn pfadd2427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x9E", "pfadd mm5, mm0");
}



#[test]
fn pfadd2428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x9E", "pfadd mm1, [rax]");
}



#[test]
fn pfadd2429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x9E", "pfadd mm5, [rdx]");
}



#[test]
fn pfadd2430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x9E", "pfadd mm2, [rax]");
}



#[test]
fn pfmax2431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xA4", "pfmax mm4, mm0");
}



#[test]
fn pfmax2432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xA4", "pfmax mm2, [rdx]");
}



#[test]
fn pfmax2433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA4", "pfmax mm0, [rax]");
}



#[test]
fn pfmax2434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xA4", "pfmax mm1, mm0");
}



#[test]
fn pfmax2435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xA4", "pfmax mm4, [rdx]");
}



#[test]
fn pfmin2436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x94", "pfmin mm5, [rax]");
}



#[test]
fn pfmin2437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x94", "pfmin mm2, mm0");
}



#[test]
fn pfmin2438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x94", "pfmin mm1, mm0");
}



#[test]
fn pfmin2439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x94", "pfmin mm4, [rdx]");
}



#[test]
fn pfmin2440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x94", "pfmin mm1, mm0");
}



#[test]
fn pfmul2441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xB4", "pfmul mm2, [rax]");
}



#[test]
fn pfmul2442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0xB4", "pfmul mm5, [rdx]");
}



#[test]
fn pfmul2443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xB4", "pfmul mm2, [rax]");
}



#[test]
fn pfmul2444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xB4", "pfmul mm2, mm0");
}



#[test]
fn pfmul2445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xB4", "pfmul mm2, [rdx]");
}



#[test]
fn pfnacc2446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x8A", "pfnacc mm5, [rdx]");
}



#[test]
fn pfnacc2447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x8A", "pfnacc mm2, [rax]");
}



#[test]
fn pfnacc2448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x8A", "pfnacc mm3, mm0");
}



#[test]
fn pfnacc2449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x8A", "pfnacc mm0, [rax]");
}



#[test]
fn pfnacc2450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x8A", "pfnacc mm4, [rdx]");
}



#[test]
fn pfpnacc2451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x8E", "pfpnacc mm1, [rax]");
}



#[test]
fn pfpnacc2452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x8E", "pfpnacc mm5, [rdx]");
}



#[test]
fn pfpnacc2453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x8E", "pfpnacc mm2, mm0");
}



#[test]
fn pfpnacc2454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x8E", "pfpnacc mm0, mm0");
}



#[test]
fn pfpnacc2455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x8E", "pfpnacc mm4, [rax]");
}



#[test]
fn pfrcp2456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x96", "pfrcp mm4, [rax]");
}



#[test]
fn pfrcp2457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x96", "pfrcp mm2, [rdx]");
}



#[test]
fn pfrcp2458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x96", "pfrcp mm5, mm0");
}



#[test]
fn pfrcp2459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x96", "pfrcp mm3, [rdx]");
}



#[test]
fn pfrcp2460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x96", "pfrcp mm3, mm0");
}



#[test]
fn pfrcpit12461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA6", "pfrcpit1 mm0, [rax]");
}



#[test]
fn pfrcpit12462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xA6", "pfrcpit1 mm1, [rax]");
}



#[test]
fn pfrcpit12463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xA6", "pfrcpit1 mm0, [rdx]");
}



#[test]
fn pfrcpit12464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xA6", "pfrcpit1 mm5, [rax]");
}



#[test]
fn pfrcpit12465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xA6", "pfrcpit1 mm2, mm0");
}



#[test]
fn pfrcpit22466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xB6", "pfrcpit2 mm4, mm0");
}



#[test]
fn pfrcpit22467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xB6", "pfrcpit2 mm0, [rax]");
}



#[test]
fn pfrcpit22468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xB6", "pfrcpit2 mm2, [rax]");
}



#[test]
fn pfrcpit22469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xB6", "pfrcpit2 mm0, [rax]");
}



#[test]
fn pfrcpit22470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xB6", "pfrcpit2 mm3, [rax]");
}



#[test]
fn pfrcpv2471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x86", "pfrcpv mm3, [rdx]");
}



#[test]
fn pfrcpv2472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x86", "pfrcpv mm2, mm0");
}



#[test]
fn pfrcpv2473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x86", "pfrcpv mm4, mm0");
}



#[test]
fn pfrcpv2474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x86", "pfrcpv mm0, [rax]");
}



#[test]
fn pfrcpv2475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x86", "pfrcpv mm4, mm0");
}



#[test]
fn pfrsqit12476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA7", "pfrsqit1 mm0, [rax]");
}



#[test]
fn pfrsqit12477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xA7", "pfrsqit1 mm4, [rdx]");
}



#[test]
fn pfrsqit12478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xA7", "pfrsqit1 mm3, [rax]");
}



#[test]
fn pfrsqit12479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xA7", "pfrsqit1 mm3, mm0");
}



#[test]
fn pfrsqit12480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xA7", "pfrsqit1 mm5, [rax]");
}



#[test]
fn pfrsqrt2481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x97", "pfrsqrt mm3, [rax]");
}



#[test]
fn pfrsqrt2482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x97", "pfrsqrt mm2, [rax]");
}



#[test]
fn pfrsqrt2483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x97", "pfrsqrt mm4, [rdx]");
}



#[test]
fn pfrsqrt2484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x97", "pfrsqrt mm3, [rdx]");
}



#[test]
fn pfrsqrt2485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x97", "pfrsqrt mm4, [rax]");
}



#[test]
fn pfrsqrtv2486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x87", "pfrsqrtv mm1, [rdx]");
}



#[test]
fn pfrsqrtv2487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x87", "pfrsqrtv mm4, mm0");
}



#[test]
fn pfrsqrtv2488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x87", "pfrsqrtv mm5, [rax]");
}



#[test]
fn pfrsqrtv2489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x87", "pfrsqrtv mm1, [rax]");
}



#[test]
fn pfrsqrtv2490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x87", "pfrsqrtv mm4, [rdx]");
}



#[test]
fn pfsub2491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x9A", "pfsub mm4, [rdx]");
}



#[test]
fn pfsub2492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x9A", "pfsub mm0, [rax]");
}



#[test]
fn pfsub2493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x9A", "pfsub mm3, mm0");
}



#[test]
fn pfsub2494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x9A", "pfsub mm1, mm0");
}



#[test]
fn pfsub2495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x9A", "pfsub mm1, mm0");
}



#[test]
fn pfsubr2496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAA", "pfsubr mm0, [rax]");
}



#[test]
fn pfsubr2497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAA", "pfsubr mm0, [rax]");
}



#[test]
fn pfsubr2498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xAA", "pfsubr mm3, [rax]");
}



#[test]
fn pfsubr2499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xAA", "pfsubr mm3, [rdx]");
}



#[test]
fn pfsubr2500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xAA", "pfsubr mm3, [rdx]");
}



#[test]
fn phaddd2501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x02, 0xFA", "phaddd xmm15, xmm2");
}



#[test]
fn phaddd2502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x02, 0xCC", "phaddd xmm1, xmm4");
}



#[test]
fn phaddd2503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x02, 0xC1", "phaddd xmm0, xmm1");
}



#[test]
fn phaddd2504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x02, 0xDB", "phaddd xmm11, xmm11");
}



#[test]
fn phaddd2505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x02, 0xE3", "phaddd xmm12, xmm11");
}



#[test]
fn phaddd2506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x1A", "phaddd mm3, [rdx]");
}



#[test]
fn phaddd2507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xE0", "phaddd mm4, mm0");
}



#[test]
fn phaddd2508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x10", "phaddd mm2, [rax]");
}



#[test]
fn phaddd2509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x1A", "phaddd mm3, [rdx]");
}



#[test]
fn phaddd2510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x0A", "phaddd mm1, [rdx]");
}



#[test]
fn phaddsw2511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x03, 0xDF", "phaddsw xmm11, xmm15");
}



#[test]
fn phaddsw2512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x03, 0xDB", "phaddsw xmm3, xmm3");
}



#[test]
fn phaddsw2513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x03, 0xD7", "phaddsw xmm2, xmm15");
}



#[test]
fn phaddsw2514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x03, 0xDB", "phaddsw xmm11, xmm3");
}



#[test]
fn phaddsw2515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x03, 0xC2", "phaddsw xmm0, xmm2");
}



#[test]
fn phaddsw2516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x10", "phaddsw mm2, [rax]");
}



#[test]
fn phaddsw2517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x08", "phaddsw mm1, [rax]");
}



#[test]
fn phaddsw2518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x22", "phaddsw mm4, [rdx]");
}



#[test]
fn phaddsw2519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0xE8", "phaddsw mm5, mm0");
}



#[test]
fn phaddsw2520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x12", "phaddsw mm2, [rdx]");
}



#[test]
fn phaddw2521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x01, 0xDC", "phaddw xmm3, xmm12");
}



#[test]
fn phaddw2522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x01, 0xD3", "phaddw xmm2, xmm3");
}



#[test]
fn phaddw2523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x01, 0xC9", "phaddw xmm1, xmm1");
}



#[test]
fn phaddw2524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x01, 0xCC", "phaddw xmm1, xmm12");
}



#[test]
fn phaddw2525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x01, 0xC4", "phaddw xmm0, xmm12");
}



#[test]
fn phaddw2526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x10", "phaddw mm2, [rax]");
}



#[test]
fn phaddw2527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x00", "phaddw mm0, [rax]");
}



#[test]
fn phaddw2528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xD8", "phaddw mm3, mm0");
}



#[test]
fn phaddw2529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x18", "phaddw mm3, [rax]");
}



#[test]
fn phaddw2530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x2A", "phaddw mm5, [rdx]");
}



#[test]
fn phminposuw2531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xDA", "phminposuw xmm3, xmm2");
}



#[test]
fn phminposuw2532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x41, 0xD7", "phminposuw xmm2, xmm15");
}



#[test]
fn phminposuw2533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xE0", "phminposuw xmm12, xmm0");
}



#[test]
fn phminposuw2534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xF8", "phminposuw xmm15, xmm0");
}



#[test]
fn phminposuw2535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xE4", "phminposuw xmm12, xmm4");
}



#[test]
fn phsubd2536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x06, 0xD4", "phsubd xmm2, xmm12");
}



#[test]
fn phsubd2537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x06, 0xDC", "phsubd xmm3, xmm4");
}



#[test]
fn phsubd2538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x06, 0xE4", "phsubd xmm4, xmm4");
}



#[test]
fn phsubd2539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x06, 0xC7", "phsubd xmm0, xmm15");
}



#[test]
fn phsubd2540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x06, 0xDB", "phsubd xmm11, xmm3");
}



#[test]
fn phsubd2541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x02", "phsubd mm0, [rdx]");
}



#[test]
fn phsubd2542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x1A", "phsubd mm3, [rdx]");
}



#[test]
fn phsubd2543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xD8", "phsubd mm3, mm0");
}



#[test]
fn phsubd2544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x02", "phsubd mm0, [rdx]");
}



#[test]
fn phsubd2545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x2A", "phsubd mm5, [rdx]");
}



#[test]
fn phsubsw2546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x22", "phsubsw mm4, [rdx]");
}



#[test]
fn phsubsw2547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xD8", "phsubsw mm3, mm0");
}



#[test]
fn phsubsw2548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xC0", "phsubsw mm0, mm0");
}



#[test]
fn phsubsw2549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x20", "phsubsw mm4, [rax]");
}



#[test]
fn phsubsw2550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x0A", "phsubsw mm1, [rdx]");
}



#[test]
fn phsubsw2551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x07, 0xC9", "phsubsw xmm1, xmm1");
}



#[test]
fn phsubsw2552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x07, 0xC1", "phsubsw xmm0, xmm1");
}



#[test]
fn phsubsw2553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x07, 0xC7", "phsubsw xmm0, xmm15");
}



#[test]
fn phsubsw2554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x07, 0xD4", "phsubsw xmm2, xmm12");
}



#[test]
fn phsubsw2555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x07, 0xFF", "phsubsw xmm15, xmm15");
}



#[test]
fn phsubw2556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x20", "phsubw mm4, [rax]");
}



#[test]
fn phsubw2557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x28", "phsubw mm5, [rax]");
}



#[test]
fn phsubw2558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x08", "phsubw mm1, [rax]");
}



#[test]
fn phsubw2559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xE8", "phsubw mm5, mm0");
}



#[test]
fn phsubw2560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xD8", "phsubw mm3, mm0");
}



#[test]
fn phsubw2561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x05, 0xD1", "phsubw xmm2, xmm1");
}



#[test]
fn phsubw2562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x05, 0xFB", "phsubw xmm15, xmm11");
}



#[test]
fn phsubw2563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x05, 0xE4", "phsubw xmm12, xmm12");
}



#[test]
fn phsubw2564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x05, 0xE7", "phsubw xmm12, xmm15");
}



#[test]
fn phsubw2565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x05, 0xD4", "phsubw xmm2, xmm4");
}



#[test]
fn pi2fd2566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x0D", "pi2fd mm5, [rdx]");
}



#[test]
fn pi2fd2567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x0D", "pi2fd mm5, [rdx]");
}



#[test]
fn pi2fd2568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x0D", "pi2fd mm1, [rdx]");
}



#[test]
fn pi2fd2569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x0D", "pi2fd mm0, [rax]");
}



#[test]
fn pi2fd2570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x0D", "pi2fd mm2, [rax]");
}



#[test]
fn pi2fw2571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x0C", "pi2fw mm4, [rdx]");
}



#[test]
fn pi2fw2572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x0C", "pi2fw mm5, mm0");
}



#[test]
fn pi2fw2573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x0C", "pi2fw mm2, [rax]");
}



#[test]
fn pi2fw2574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x0C", "pi2fw mm2, mm0");
}



#[test]
fn pi2fw2575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x0C", "pi2fw mm3, mm0");
}



#[test]
fn pinsrb2576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm0, [rax], 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x00, 0x23", "pinsrb xmm0, [rax], 35");
}



#[test]
fn pinsrb2577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, [rax], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x20, 0x0A", "pinsrb xmm4, [rax], 10");
}



#[test]
fn pinsrb2578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x20, 0x30", "pinsrb xmm4, [rax], 48");
}



#[test]
fn pinsrb2579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm15, [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x38, 0x10", "pinsrb xmm15, [rax], 16");
}



#[test]
fn pinsrb2580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x18, 0x30", "pinsrb xmm11, [rax], 48");
}



#[test]
fn pinsrb2581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm15, BYTE [rax], 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x38, 0x1A", "pinsrb xmm15, BYTE [rax], 26");
}



#[test]
fn pinsrb2582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, BYTE [rax], 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x08, 0x54", "pinsrb xmm1, BYTE [rax], 84");
}



#[test]
fn pinsrb2583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, BYTE [rax], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x18, 0x08", "pinsrb xmm11, BYTE [rax], 8");
}



#[test]
fn pinsrb2584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, al, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE0, 0x72", "pinsrb xmm12, al, 114");
}



#[test]
fn pinsrb2585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, al, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD8, 0x67", "pinsrb xmm3, al, 103");
}



#[test]
fn pinsrb2586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm15, edx, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xFA, 0x4F", "pinsrb xmm15, edx, 79");
}



#[test]
fn pinsrb2587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, edx, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xDA, 0x5B", "pinsrb xmm3, edx, 91");
}



#[test]
fn pinsrb2588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, ecx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xE1, 0x23", "pinsrb xmm4, ecx, 35");
}



#[test]
fn pinsrb2589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, edx, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD2, 0x3F", "pinsrb xmm2, edx, 63");
}



#[test]
fn pinsrb2590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, edx, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xE2, 0x0B", "pinsrb xmm4, edx, 11");
}



#[test]
fn pinsrd2591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, [rax], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x38, 0x33", "pinsrd xmm15, [rax], 51");
}



#[test]
fn pinsrd2592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, [rax], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x38, 0x4D", "pinsrd xmm15, [rax], 77");
}



#[test]
fn pinsrd2593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm4, [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x20, 0x53", "pinsrd xmm4, [rax], 83");
}



#[test]
fn pinsrd2594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm0, [rax], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x00, 0x04", "pinsrd xmm0, [rax], 4");
}



#[test]
fn pinsrd2595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm2, [rax], 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x10, 0x40", "pinsrd xmm2, [rax], 64");
}



#[test]
fn pinsrq2596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm3, [rax], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x18, 0x5A", "pinsrq xmm3, [rax], 90");
}



#[test]
fn pinsrq2597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm1, [rax], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x08, 0x5E", "pinsrq xmm1, [rax], 94");
}



#[test]
fn pinsrq2598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x05", "pinsrq xmm11, [rax], 5");
}



#[test]
fn pinsrq2599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm0, [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x00, 0x26", "pinsrq xmm0, [rax], 38");
}



#[test]
fn pinsrq2600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm1, [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x08, 0x06", "pinsrq xmm1, [rax], 6");
}



#[test]
fn pinsrw2601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, [rax], 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x1C", "pinsrw mm2, [rax], 28");
}



#[test]
fn pinsrw2602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x18, 0x1B", "pinsrw mm3, [rax], 27");
}



#[test]
fn pinsrw2603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, [rax], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x34", "pinsrw mm2, [rax], 52");
}



#[test]
fn pinsrw2604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, [rax], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x18, 0x64", "pinsrw mm3, [rax], 100");
}



#[test]
fn pinsrw2605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, [rax], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x79", "pinsrw mm0, [rax], 121");
}



#[test]
fn pinsrw2606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, ax, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE8, 0x4D", "pinsrw mm5, ax, 77");
}



#[test]
fn pinsrw2607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, WORD [rax], 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x28, 0x3A", "pinsrw mm5, WORD [rax], 58");
}



#[test]
fn pinsrw2608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, ax, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE8, 0x25", "pinsrw mm5, ax, 37");
}



#[test]
fn pinsrw2609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, WORD [rax], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x0D", "pinsrw mm0, WORD [rax], 13");
}



#[test]
fn pinsrw2610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, WORD [rax], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x20", "pinsrw mm0, WORD [rax], 32");
}



#[test]
fn pinsrw2611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, eax, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC0, 0x47", "pinsrw mm0, eax, 71");
}



#[test]
fn pinsrw2612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, edx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xEA, 0x14", "pinsrw mm5, edx, 20");
}



#[test]
fn pinsrw2613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, edx, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xD2, 0x75", "pinsrw mm2, edx, 117");
}



#[test]
fn pinsrw2614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, eax, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC8, 0x6D", "pinsrw mm1, eax, 109");
}



#[test]
fn pinsrw2615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, eax, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC0, 0x60", "pinsrw mm0, eax, 96");
}



#[test]
fn pinsrw2616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, cx, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD1, 0x42", "pinsrw xmm2, cx, 66");
}



#[test]
fn pinsrw2617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, cx, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC9, 0x4F", "pinsrw xmm1, cx, 79");
}



#[test]
fn pinsrw2618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, dx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE2, 0x6E", "pinsrw xmm12, dx, 110");
}



#[test]
fn pinsrw2619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, ax, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC0, 0x31", "pinsrw xmm0, ax, 49");
}



#[test]
fn pinsrw2620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, ax, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC8, 0x7B", "pinsrw xmm1, ax, 123");
}



#[test]
fn pinsrw2621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, edx, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xFA, 0x12", "pinsrw xmm15, edx, 18");
}



#[test]
fn pinsrw2622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, edx, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xFA, 0x3D", "pinsrw xmm15, edx, 61");
}



#[test]
fn pinsrw2623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, ecx, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD1, 0x68", "pinsrw xmm2, ecx, 104");
}



#[test]
fn pinsrw2624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, edx, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC2, 0x72", "pinsrw xmm0, edx, 114");
}



#[test]
fn pinsrw2625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, edx, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD2, 0x52", "pinsrw xmm2, edx, 82");
}



#[test]
fn pinsrw2626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, [rax], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x18, 0x09", "pinsrw xmm11, [rax], 9");
}



#[test]
fn pinsrw2627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x1B", "pinsrw xmm4, [rax], 27");
}



#[test]
fn pinsrw2628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x06", "pinsrw xmm4, [rax], 6");
}



#[test]
fn pinsrw2629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, [rax], 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x38, 0x0F", "pinsrw xmm15, [rax], 15");
}



#[test]
fn pinsrw2630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, [rax], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x10, 0x29", "pinsrw xmm2, [rax], 41");
}



#[test]
fn pinsrw2631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x31", "pinsrw xmm0, WORD [rax], 49");
}



#[test]
fn pinsrw2632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, WORD [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x18, 0x73", "pinsrw xmm11, WORD [rax], 115");
}



#[test]
fn pinsrw2633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, WORD [rax], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x08, 0x4A", "pinsrw xmm1, WORD [rax], 74");
}



#[test]
fn pinsrw2634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, WORD [rax], 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x18, 0x00", "pinsrw xmm3, WORD [rax], 0");
}



#[test]
fn pinsrw2635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, WORD [rax], 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x38, 0x4C", "pinsrw xmm15, WORD [rax], 76");
}



#[test]
fn pmachriw2636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x00", "pmachriw mm0, [rax]");
}



#[test]
fn pmachriw2637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x20", "pmachriw mm4, [rax]");
}



#[test]
fn pmachriw2638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x28", "pmachriw mm5, [rax]");
}



#[test]
fn pmachriw2639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x20", "pmachriw mm4, [rax]");
}



#[test]
fn pmachriw2640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x28", "pmachriw mm5, [rax]");
}



#[test]
fn pmaddubsw2641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x22", "pmaddubsw mm4, [rdx]");
}



#[test]
fn pmaddubsw2642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0xD0", "pmaddubsw mm2, mm0");
}



#[test]
fn pmaddubsw2643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x28", "pmaddubsw mm5, [rax]");
}



#[test]
fn pmaddubsw2644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x20", "pmaddubsw mm4, [rax]");
}



#[test]
fn pmaddubsw2645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x20", "pmaddubsw mm4, [rax]");
}



#[test]
fn pmaddubsw2646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x04, 0xD7", "pmaddubsw xmm2, xmm15");
}



#[test]
fn pmaddubsw2647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x04, 0xC3", "pmaddubsw xmm0, xmm3");
}



#[test]
fn pmaddubsw2648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x04, 0xDC", "pmaddubsw xmm3, xmm12");
}



#[test]
fn pmaddubsw2649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x04, 0xE1", "pmaddubsw xmm4, xmm1");
}



#[test]
fn pmaddubsw2650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x04, 0xD4", "pmaddubsw xmm2, xmm12");
}



#[test]
fn pmaddwd2651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x22", "pmaddwd mm4, [rdx]");
}



#[test]
fn pmaddwd2652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0xD8", "pmaddwd mm3, mm0");
}



#[test]
fn pmaddwd2653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x18", "pmaddwd mm3, [rax]");
}



#[test]
fn pmaddwd2654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x02", "pmaddwd mm0, [rdx]");
}



#[test]
fn pmaddwd2655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0xE0", "pmaddwd mm4, mm0");
}



#[test]
fn pmaddwd2656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0x22", "pmaddwd xmm4, OWORD [rdx]");
}



#[test]
fn pmaddwd2657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF5, 0xC3", "pmaddwd xmm0, xmm11");
}



#[test]
fn pmaddwd2658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xE1", "pmaddwd xmm12, xmm1");
}



#[test]
fn pmaddwd2659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0x12", "pmaddwd xmm2, OWORD [rdx]");
}



#[test]
fn pmaddwd2660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xF8", "pmaddwd xmm15, xmm0");
}



#[test]
fn pmagw2661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x0A", "pmagw mm1, [rdx]");
}



#[test]
fn pmagw2662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xE0", "pmagw mm4, mm0");
}



#[test]
fn pmagw2663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x20", "pmagw mm4, [rax]");
}



#[test]
fn pmagw2664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x20", "pmagw mm4, [rax]");
}



#[test]
fn pmagw2665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x22", "pmagw mm4, [rdx]");
}



#[test]
fn pmaxsb2666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xD3", "pmaxsb xmm2, xmm3");
}



#[test]
fn pmaxsb2667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3C, 0xE3", "pmaxsb xmm12, xmm11");
}



#[test]
fn pmaxsb2668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3C, 0xD7", "pmaxsb xmm2, xmm15");
}



#[test]
fn pmaxsb2669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3C, 0xE7", "pmaxsb xmm12, xmm15");
}



#[test]
fn pmaxsb2670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0xD9", "pmaxsb xmm11, xmm1");
}



#[test]
fn pmaxsd2671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0xF8", "pmaxsd xmm15, xmm0");
}



#[test]
fn pmaxsd2672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0xE3", "pmaxsd xmm12, xmm3");
}



#[test]
fn pmaxsd2673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0xE4", "pmaxsd xmm12, xmm4");
}



#[test]
fn pmaxsd2674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xD9", "pmaxsd xmm3, xmm1");
}



#[test]
fn pmaxsd2675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xD2", "pmaxsd xmm2, xmm2");
}



#[test]
fn pmaxsw2676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xD8", "pmaxsw mm3, mm0");
}



#[test]
fn pmaxsw2677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x18", "pmaxsw mm3, [rax]");
}



#[test]
fn pmaxsw2678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xE0", "pmaxsw mm4, mm0");
}



#[test]
fn pmaxsw2679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x20", "pmaxsw mm4, [rax]");
}



#[test]
fn pmaxsw2680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x2A", "pmaxsw mm5, [rdx]");
}



#[test]
fn pmaxsw2681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0x1A", "pmaxsw xmm3, OWORD [rdx]");
}



#[test]
fn pmaxsw2682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xD9", "pmaxsw xmm3, xmm1");
}



#[test]
fn pmaxsw2683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEE, 0xDC", "pmaxsw xmm11, xmm12");
}



#[test]
fn pmaxsw2684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xD8", "pmaxsw xmm3, xmm0");
}



#[test]
fn pmaxsw2685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEE, 0xFA", "pmaxsw xmm15, xmm2");
}



#[test]
fn pmaxub2686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x1A", "pmaxub mm3, [rdx]");
}



#[test]
fn pmaxub2687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x10", "pmaxub mm2, [rax]");
}



#[test]
fn pmaxub2688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0xE8", "pmaxub mm5, mm0");
}



#[test]
fn pmaxub2689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x18", "pmaxub mm3, [rax]");
}



#[test]
fn pmaxub2690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x18", "pmaxub mm3, [rax]");
}



#[test]
fn pmaxub2691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xD3", "pmaxub xmm2, xmm11");
}



#[test]
fn pmaxub2692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xDF", "pmaxub xmm3, xmm15");
}



#[test]
fn pmaxub2693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xDB", "pmaxub xmm3, xmm11");
}



#[test]
fn pmaxub2694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xD4", "pmaxub xmm2, xmm12");
}



#[test]
fn pmaxub2695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDE, 0xE1", "pmaxub xmm12, xmm1");
}



#[test]
fn pmaxud2696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xF8", "pmaxud xmm15, xmm0");
}



#[test]
fn pmaxud2697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xDC", "pmaxud xmm3, xmm12");
}



#[test]
fn pmaxud2698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xD4", "pmaxud xmm2, xmm12");
}



#[test]
fn pmaxud2699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xC3", "pmaxud xmm0, xmm3");
}



#[test]
fn pmaxud2700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xDA", "pmaxud xmm3, xmm2");
}



#[test]
fn pmaxuw2701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xC8", "pmaxuw xmm1, xmm0");
}



#[test]
fn pmaxuw2702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xCC", "pmaxuw xmm1, xmm4");
}



#[test]
fn pmaxuw2703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0xD8", "pmaxuw xmm11, xmm0");
}



#[test]
fn pmaxuw2704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xD4", "pmaxuw xmm2, xmm12");
}



#[test]
fn pmaxuw2705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0xD8", "pmaxuw xmm11, xmm0");
}



#[test]
fn pminsb2706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xD9", "pminsb xmm3, xmm1");
}



#[test]
fn pminsb2707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x38, 0xD7", "pminsb xmm2, xmm15");
}



#[test]
fn pminsb2708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x38, 0xDF", "pminsb xmm11, xmm15");
}



#[test]
fn pminsb2709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xD0", "pminsb xmm2, xmm0");
}



#[test]
fn pminsb2710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xE4", "pminsb xmm4, xmm4");
}



#[test]
fn pminsd2711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xFC", "pminsd xmm15, xmm4");
}



#[test]
fn pminsd2712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xCC", "pminsd xmm1, xmm4");
}



#[test]
fn pminsd2713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xC4", "pminsd xmm0, xmm12");
}



#[test]
fn pminsd2714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xD7", "pminsd xmm2, xmm15");
}



#[test]
fn pminsd2715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xD4", "pminsd xmm2, xmm12");
}



#[test]
fn pminsw2716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x00", "pminsw mm0, [rax]");
}



#[test]
fn pminsw2717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x22", "pminsw mm4, [rdx]");
}



#[test]
fn pminsw2718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x28", "pminsw mm5, [rax]");
}



#[test]
fn pminsw2719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x18", "pminsw mm3, [rax]");
}



#[test]
fn pminsw2720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x28", "pminsw mm5, [rax]");
}



#[test]
fn pminsw2721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0x18", "pminsw xmm11, OWORD [rax]");
}



#[test]
fn pminsw2722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xE1", "pminsw xmm4, xmm1");
}



#[test]
fn pminsw2723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xCA", "pminsw xmm1, xmm2");
}



#[test]
fn pminsw2724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0xFA", "pminsw xmm15, xmm2");
}



#[test]
fn pminsw2725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0xF8", "pminsw xmm15, xmm0");
}



#[test]
fn pminub2726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x00", "pminub mm0, [rax]");
}



#[test]
fn pminub2727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x0A", "pminub mm1, [rdx]");
}



#[test]
fn pminub2728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xD8", "pminub mm3, mm0");
}



#[test]
fn pminub2729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xD0", "pminub mm2, mm0");
}



#[test]
fn pminub2730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xD8", "pminub mm3, mm0");
}



#[test]
fn pminub2731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDA, 0xCF", "pminub xmm1, xmm15");
}



#[test]
fn pminub2732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x22", "pminub xmm4, OWORD [rdx]");
}



#[test]
fn pminub2733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xC1", "pminub xmm0, xmm1");
}



#[test]
fn pminub2734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xC0", "pminub xmm0, xmm0");
}



#[test]
fn pminub2735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDA, 0xDA", "pminub xmm11, xmm2");
}



#[test]
fn pminud2736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3B, 0xDF", "pminud xmm11, xmm15");
}



#[test]
fn pminud2737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xC4", "pminud xmm0, xmm4");
}



#[test]
fn pminud2738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xDC", "pminud xmm3, xmm12");
}



#[test]
fn pminud2739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3B, 0xE0", "pminud xmm12, xmm0");
}



#[test]
fn pminud2740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xD3", "pminud xmm2, xmm11");
}



#[test]
fn pminuw2741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xE4", "pminuw xmm4, xmm12");
}



#[test]
fn pminuw2742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xD1", "pminuw xmm2, xmm1");
}



#[test]
fn pminuw2743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xD4", "pminuw xmm2, xmm4");
}



#[test]
fn pminuw2744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xE1", "pminuw xmm4, xmm1");
}



#[test]
fn pminuw2745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xC9", "pminuw xmm1, xmm1");
}



#[test]
fn pmovmskb2746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xD0", "pmovmskb edx, mm0");
}



#[test]
fn pmovmskb2747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC5", "pmovmskb eax, mm5");
}



#[test]
fn pmovmskb2748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC2", "pmovmskb eax, mm2");
}



#[test]
fn pmovmskb2749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC8", "pmovmskb ecx, mm0");
}



#[test]
fn pmovmskb2750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xD1", "pmovmskb edx, mm1");
}



#[test]
fn pmovsxbd2751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xC2", "pmovsxbd xmm0, xmm2");
}



#[test]
fn pmovsxbd2752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x21, 0xFF", "pmovsxbd xmm15, xmm15");
}



#[test]
fn pmovsxbd2753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x21, 0xFF", "pmovsxbd xmm15, xmm15");
}



#[test]
fn pmovsxbd2754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xDA", "pmovsxbd xmm3, xmm2");
}



#[test]
fn pmovsxbd2755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xCB", "pmovsxbd xmm1, xmm3");
}



#[test]
fn pmovsxbq2756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x22, 0xD9", "pmovsxbq xmm11, xmm1");
}



#[test]
fn pmovsxbq2757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x22, 0xDC", "pmovsxbq xmm11, xmm12");
}



#[test]
fn pmovsxbq2758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xE4", "pmovsxbq xmm4, xmm4");
}



#[test]
fn pmovsxbq2759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x22, 0xD9", "pmovsxbq xmm11, xmm1");
}



#[test]
fn pmovsxbq2760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x22, 0xDB", "pmovsxbq xmm11, xmm11");
}



#[test]
fn pmovsxbw2761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xC1", "pmovsxbw xmm0, xmm1");
}



#[test]
fn pmovsxbw2762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x20, 0xCC", "pmovsxbw xmm1, xmm12");
}



#[test]
fn pmovsxbw2763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x20, 0xE4", "pmovsxbw xmm12, xmm12");
}



#[test]
fn pmovsxbw2764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x20, 0xCF", "pmovsxbw xmm1, xmm15");
}



#[test]
fn pmovsxbw2765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xD8", "pmovsxbw xmm3, xmm0");
}



#[test]
fn pmovsxdq2766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xD2", "pmovsxdq xmm2, xmm2");
}



#[test]
fn pmovsxdq2767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xDB", "pmovsxdq xmm3, xmm11");
}



#[test]
fn pmovsxdq2768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xD8", "pmovsxdq xmm3, xmm0");
}



#[test]
fn pmovsxdq2769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xE4", "pmovsxdq xmm4, xmm4");
}



#[test]
fn pmovsxdq2770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0xE3", "pmovsxdq xmm12, xmm3");
}



#[test]
fn pmovsxwd2771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xC9", "pmovsxwd xmm1, xmm1");
}



#[test]
fn pmovsxwd2772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xD8", "pmovsxwd xmm11, xmm0");
}



#[test]
fn pmovsxwd2773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xF8", "pmovsxwd xmm15, xmm0");
}



#[test]
fn pmovsxwd2774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xF9", "pmovsxwd xmm15, xmm1");
}



#[test]
fn pmovsxwd2775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xE1", "pmovsxwd xmm4, xmm1");
}



#[test]
fn pmovsxwq2776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xC0", "pmovsxwq xmm0, xmm0");
}



#[test]
fn pmovsxwq2777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xE0", "pmovsxwq xmm12, xmm0");
}



#[test]
fn pmovsxwq2778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x24, 0xE3", "pmovsxwq xmm4, xmm11");
}



#[test]
fn pmovsxwq2779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xE0", "pmovsxwq xmm12, xmm0");
}



#[test]
fn pmovsxwq2780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xE2", "pmovsxwq xmm12, xmm2");
}



#[test]
fn pmovzxbd2781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0xD8", "pmovzxbd xmm11, xmm0");
}



#[test]
fn pmovzxbd2782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0xD3", "pmovzxbd xmm2, xmm3");
}



#[test]
fn pmovzxbd2783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0xC1", "pmovzxbd xmm0, xmm1");
}



#[test]
fn pmovzxbd2784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0xC0", "pmovzxbd xmm0, xmm0");
}



#[test]
fn pmovzxbd2785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0xFA", "pmovzxbd xmm15, xmm2");
}



#[test]
fn pmovzxbq2786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xD8", "pmovzxbq xmm3, xmm0");
}



#[test]
fn pmovzxbq2787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0xE2", "pmovzxbq xmm12, xmm2");
}



#[test]
fn pmovzxbq2788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0xFA", "pmovzxbq xmm15, xmm2");
}



#[test]
fn pmovzxbq2789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xDA", "pmovzxbq xmm3, xmm2");
}



#[test]
fn pmovzxbq2790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xC1", "pmovzxbq xmm0, xmm1");
}



#[test]
fn pmovzxbw2791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xD3", "pmovzxbw xmm2, xmm11");
}



#[test]
fn pmovzxbw2792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xD1", "pmovzxbw xmm2, xmm1");
}



#[test]
fn pmovzxbw2793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xC7", "pmovzxbw xmm0, xmm15");
}



#[test]
fn pmovzxbw2794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xDB", "pmovzxbw xmm3, xmm11");
}



#[test]
fn pmovzxbw2795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xCC", "pmovzxbw xmm1, xmm12");
}



#[test]
fn pmovzxdq2796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x35, 0xCF", "pmovzxdq xmm1, xmm15");
}



#[test]
fn pmovzxdq2797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0xD8", "pmovzxdq xmm11, xmm0");
}



#[test]
fn pmovzxdq2798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x35, 0xE7", "pmovzxdq xmm4, xmm15");
}



#[test]
fn pmovzxdq2799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0xE1", "pmovzxdq xmm12, xmm1");
}



#[test]
fn pmovzxdq2800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0xE2", "pmovzxdq xmm12, xmm2");
}



#[test]
fn pmovzxwd2801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xC3", "pmovzxwd xmm0, xmm3");
}



#[test]
fn pmovzxwd2802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0xE0", "pmovzxwd xmm12, xmm0");
}



#[test]
fn pmovzxwd2803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0xDB", "pmovzxwd xmm11, xmm3");
}



#[test]
fn pmovzxwd2804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xCF", "pmovzxwd xmm1, xmm15");
}



#[test]
fn pmovzxwd2805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xDB", "pmovzxwd xmm3, xmm11");
}



#[test]
fn pmovzxwq2806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xDC", "pmovzxwq xmm3, xmm4");
}



#[test]
fn pmovzxwq2807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0xE1", "pmovzxwq xmm12, xmm1");
}



#[test]
fn pmovzxwq2808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xFC", "pmovzxwq xmm15, xmm12");
}



#[test]
fn pmovzxwq2809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xDF", "pmovzxwq xmm11, xmm15");
}



#[test]
fn pmovzxwq2810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xE7", "pmovzxwq xmm12, xmm15");
}



#[test]
fn pmuldq2811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0xD8", "pmuldq xmm11, xmm0");
}



#[test]
fn pmuldq2812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xE2", "pmuldq xmm4, xmm2");
}



#[test]
fn pmuldq2813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x28, 0xFC", "pmuldq xmm15, xmm12");
}



#[test]
fn pmuldq2814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xC9", "pmuldq xmm1, xmm1");
}



#[test]
fn pmuldq2815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0xDB", "pmuldq xmm11, xmm3");
}



#[test]
fn pmulhriw2816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x28", "pmulhriw mm5, [rax]");
}



#[test]
fn pmulhriw2817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xE0", "pmulhriw mm4, mm0");
}



#[test]
fn pmulhriw2818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x22", "pmulhriw mm4, [rdx]");
}



#[test]
fn pmulhriw2819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xD8", "pmulhriw mm3, mm0");
}



#[test]
fn pmulhriw2820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x10", "pmulhriw mm2, [rax]");
}



#[test]
fn pmulhrsw2821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x2A", "pmulhrsw mm5, [rdx]");
}



#[test]
fn pmulhrsw2822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x00", "pmulhrsw mm0, [rax]");
}



#[test]
fn pmulhrsw2823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xE0", "pmulhrsw mm4, mm0");
}



#[test]
fn pmulhrsw2824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xD8", "pmulhrsw mm3, mm0");
}



#[test]
fn pmulhrsw2825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x02", "pmulhrsw mm0, [rdx]");
}



#[test]
fn pmulhrsw2826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0B, 0xCB", "pmulhrsw xmm1, xmm11");
}



#[test]
fn pmulhrsw2827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x0B, 0xFB", "pmulhrsw xmm15, xmm11");
}



#[test]
fn pmulhrsw2828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x0B, 0xDC", "pmulhrsw xmm3, xmm4");
}



#[test]
fn pmulhrsw2829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x0B, 0xE1", "pmulhrsw xmm12, xmm1");
}



#[test]
fn pmulhrsw2830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0B, 0xE4", "pmulhrsw xmm4, xmm12");
}



#[test]
fn pmulhrwa2831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xB7", "pmulhrwa mm3, mm0");
}



#[test]
fn pmulhrwa2832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xB7", "pmulhrwa mm1, [rdx]");
}



#[test]
fn pmulhrwa2833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xB7", "pmulhrwa mm4, [rdx]");
}



#[test]
fn pmulhrwa2834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xB7", "pmulhrwa mm2, [rdx]");
}



#[test]
fn pmulhrwa2835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xB7", "pmulhrwa mm1, [rdx]");
}



#[test]
fn pmulhrwc2836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x10", "pmulhrwc mm2, [rax]");
}



#[test]
fn pmulhrwc2837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xD8", "pmulhrwc mm3, mm0");
}



#[test]
fn pmulhrwc2838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x0A", "pmulhrwc mm1, [rdx]");
}



#[test]
fn pmulhrwc2839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xE0", "pmulhrwc mm4, mm0");
}



#[test]
fn pmulhrwc2840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x2A", "pmulhrwc mm5, [rdx]");
}



#[test]
fn pmulhuw2841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xD0", "pmulhuw mm2, mm0");
}



#[test]
fn pmulhuw2842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x0A", "pmulhuw mm1, [rdx]");
}



#[test]
fn pmulhuw2843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xC0", "pmulhuw mm0, mm0");
}



#[test]
fn pmulhuw2844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xD0", "pmulhuw mm2, mm0");
}



#[test]
fn pmulhuw2845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x0A", "pmulhuw mm1, [rdx]");
}



#[test]
fn pmulhuw2846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xE3", "pmulhuw xmm4, xmm3");
}



#[test]
fn pmulhuw2847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE4, 0xFC", "pmulhuw xmm15, xmm12");
}



#[test]
fn pmulhuw2848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xC1", "pmulhuw xmm0, xmm1");
}



#[test]
fn pmulhuw2849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE4, 0xE7", "pmulhuw xmm12, xmm15");
}



#[test]
fn pmulhuw2850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE4, 0xF8", "pmulhuw xmm15, xmm0");
}



#[test]
fn pmulhw2851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x02", "pmulhw mm0, [rdx]");
}



#[test]
fn pmulhw2852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x00", "pmulhw mm0, [rax]");
}



#[test]
fn pmulhw2853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x00", "pmulhw mm0, [rax]");
}



#[test]
fn pmulhw2854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x08", "pmulhw mm1, [rax]");
}



#[test]
fn pmulhw2855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0xE0", "pmulhw mm4, mm0");
}



#[test]
fn pmulhw2856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE5, 0xFB", "pmulhw xmm15, xmm11");
}



#[test]
fn pmulhw2857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE5, 0xE3", "pmulhw xmm4, xmm11");
}



#[test]
fn pmulhw2858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE5, 0xD7", "pmulhw xmm2, xmm15");
}



#[test]
fn pmulhw2859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x22", "pmulhw xmm4, OWORD [rdx]");
}



#[test]
fn pmulhw2860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x0A", "pmulhw xmm1, OWORD [rdx]");
}



#[test]
fn pmulld2861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xDA", "pmulld xmm11, xmm2");
}



#[test]
fn pmulld2862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x40, 0xE7", "pmulld xmm12, xmm15");
}



#[test]
fn pmulld2863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xE0", "pmulld xmm4, xmm0");
}



#[test]
fn pmulld2864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xE3", "pmulld xmm12, xmm3");
}



#[test]
fn pmulld2865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x40, 0xCF", "pmulld xmm1, xmm15");
}



#[test]
fn pmullw2866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x08", "pmullw mm1, [rax]");
}



#[test]
fn pmullw2867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x28", "pmullw mm5, [rax]");
}



#[test]
fn pmullw2868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0xC8", "pmullw mm1, mm0");
}



#[test]
fn pmullw2869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0xD8", "pmullw mm3, mm0");
}



#[test]
fn pmullw2870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0xC8", "pmullw mm1, mm0");
}



#[test]
fn pmullw2871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xCA", "pmullw xmm1, xmm2");
}



#[test]
fn pmullw2872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD5, 0xC3", "pmullw xmm0, xmm11");
}



#[test]
fn pmullw2873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD5, 0xCB", "pmullw xmm1, xmm11");
}



#[test]
fn pmullw2874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xCC", "pmullw xmm1, xmm4");
}



#[test]
fn pmullw2875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0x00", "pmullw xmm0, OWORD [rax]");
}



#[test]
fn pmuludq2876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x00", "pmuludq mm0, [rax]");
}



#[test]
fn pmuludq2877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x20", "pmuludq mm4, [rax]");
}



#[test]
fn pmuludq2878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0xC8", "pmuludq mm1, mm0");
}



#[test]
fn pmuludq2879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x0A", "pmuludq mm1, [rdx]");
}



#[test]
fn pmuludq2880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x18", "pmuludq mm3, [rax]");
}



#[test]
fn pmuludq2881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0x12", "pmuludq xmm2, OWORD [rdx]");
}



#[test]
fn pmuludq2882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF4, 0xC7", "pmuludq xmm0, xmm15");
}



#[test]
fn pmuludq2883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xDA", "pmuludq xmm3, xmm2");
}



#[test]
fn pmuludq2884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xC9", "pmuludq xmm1, xmm1");
}



#[test]
fn pmuludq2885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xDA", "pmuludq xmm3, xmm2");
}



#[test]
fn pmvgezb2886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x10", "pmvgezb mm2, QWORD [rax]");
}



#[test]
fn pmvgezb2887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x08", "pmvgezb mm1, QWORD [rax]");
}



#[test]
fn pmvgezb2888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x10", "pmvgezb mm2, QWORD [rax]");
}



#[test]
fn pmvgezb2889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x10", "pmvgezb mm2, QWORD [rax]");
}



#[test]
fn pmvgezb2890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x00", "pmvgezb mm0, QWORD [rax]");
}



#[test]
fn pmvlzb2891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x20", "pmvlzb mm4, QWORD [rax]");
}



#[test]
fn pmvlzb2892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x20", "pmvlzb mm4, QWORD [rax]");
}



#[test]
fn pmvlzb2893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x08", "pmvlzb mm1, QWORD [rax]");
}



#[test]
fn pmvlzb2894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x28", "pmvlzb mm5, QWORD [rax]");
}



#[test]
fn pmvlzb2895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x00", "pmvlzb mm0, QWORD [rax]");
}



#[test]
fn pmvnzb2896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x18", "pmvnzb mm3, QWORD [rax]");
}



#[test]
fn pmvnzb2897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x20", "pmvnzb mm4, QWORD [rax]");
}



#[test]
fn pmvnzb2898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x28", "pmvnzb mm5, QWORD [rax]");
}



#[test]
fn pmvnzb2899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x00", "pmvnzb mm0, QWORD [rax]");
}



#[test]
fn pmvnzb2900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x20", "pmvnzb mm4, QWORD [rax]");
}



#[test]
fn pmvzb2901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x08", "pmvzb mm1, QWORD [rax]");
}



#[test]
fn pmvzb2902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x28", "pmvzb mm5, QWORD [rax]");
}



#[test]
fn pmvzb2903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x28", "pmvzb mm5, QWORD [rax]");
}



#[test]
fn pmvzb2904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x10", "pmvzb mm2, QWORD [rax]");
}



#[test]
fn pmvzb2905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x28", "pmvzb mm5, QWORD [rax]");
}



#[test]
fn pop2906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn pop2911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn pop2916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn pop2917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn pop2918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn pop2919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn pop2920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn pop2921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn pop2922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x58", "pop rax");
}



#[test]
fn pop2923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5B", "pop rbx");
}



#[test]
fn pop2924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5A", "pop rdx");
}



#[test]
fn pop2925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x58", "pop rax");
}



#[test]
fn popcnt2926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x00", "popcnt rax, QWORD [rax]");
}



#[test]
fn popcnt2927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x18", "popcnt rbx, QWORD [rax]");
}



#[test]
fn popcnt2928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD9", "popcnt rbx, rcx");
}



#[test]
fn popcnt2929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC9", "popcnt rcx, rcx");
}



#[test]
fn popcnt2930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x08", "popcnt rcx, QWORD [rax]");
}



#[test]
fn popf2931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popf");
}



#[test]
fn popfq2932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popfq");
}



#[test]
fn popfw2933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9D", "popfw");
}



#[test]
fn por2934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x20", "por mm4, [rax]");
}



#[test]
fn por2935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x0A", "por mm1, [rdx]");
}



#[test]
fn por2936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xC0", "por mm0, mm0");
}



#[test]
fn por2937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xE0", "por mm4, mm0");
}



#[test]
fn por2938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x12", "por mm2, [rdx]");
}



#[test]
fn por2939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0x00", "por xmm0, OWORD [rax]");
}



#[test]
fn por2940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEB, 0xC3", "por xmm0, xmm11");
}



#[test]
fn por2941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xE2", "por xmm4, xmm2");
}



#[test]
fn por2942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xC4", "por xmm0, xmm4");
}



#[test]
fn por2943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xCA", "por xmm1, xmm2");
}



#[test]
fn prefetch2944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetch2948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn prefetchnta2949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetchnta2953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn prefetcht02954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht02958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn prefetcht12959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht12960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht12961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht12962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht12963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn prefetcht22964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht22965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht22966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht22967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetcht22968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn prefetchw2969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw2970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw2971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw2972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchw2973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn prefetchwt12974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt12975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt12976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt12977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn prefetchwt12978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchwt1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x10", "prefetchwt1 BYTE [rax]");
}



#[test]
fn psadbw2979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x1A", "psadbw mm3, [rdx]");
}



#[test]
fn psadbw2980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0xC0", "psadbw mm0, mm0");
}



#[test]
fn psadbw2981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x2A", "psadbw mm5, [rdx]");
}



#[test]
fn psadbw2982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x22", "psadbw mm4, [rdx]");
}



#[test]
fn psadbw2983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x02", "psadbw mm0, [rdx]");
}



#[test]
fn psadbw2984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x12", "psadbw xmm2, OWORD [rdx]");
}



#[test]
fn psadbw2985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x00", "psadbw xmm0, OWORD [rax]");
}



#[test]
fn psadbw2986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x08", "psadbw xmm1, OWORD [rax]");
}



#[test]
fn psadbw2987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xCB", "psadbw xmm1, xmm3");
}



#[test]
fn psadbw2988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x00", "psadbw xmm0, OWORD [rax]");
}



#[test]
fn pshufb2989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x00, 0xC1", "pshufb xmm0, xmm1");
}



#[test]
fn pshufb2990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x00, 0xC2", "pshufb xmm0, xmm2");
}



#[test]
fn pshufb2991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x00, 0xD8", "pshufb xmm3, xmm0");
}



#[test]
fn pshufb2992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x00, 0xE2", "pshufb xmm12, xmm2");
}



#[test]
fn pshufb2993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x00, 0xC2", "pshufb xmm0, xmm2");
}



#[test]
fn pshufb2994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x28", "pshufb mm5, [rax]");
}



#[test]
fn pshufb2995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0xE0", "pshufb mm4, mm0");
}



#[test]
fn pshufb2996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x0A", "pshufb mm1, [rdx]");
}



#[test]
fn pshufb2997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x10", "pshufb mm2, [rax]");
}



#[test]
fn pshufb2998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x22", "pshufb mm4, [rdx]");
}



#[test]
fn pshufd2999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm15, xmm2, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xFA, 0x1C", "pshufd xmm15, xmm2, 28");
}



#[test]
fn pshufd3000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm0, xmm4, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0xC4, 0x56", "pshufd xmm0, xmm4, 86");
}



#[test]
fn pshufd3001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm4, xmm15, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x70, 0xE7, 0x11", "pshufd xmm4, xmm15, 17");
}



#[test]
fn pshufd3002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm1, xmm15, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x70, 0xCF, 0x71", "pshufd xmm1, xmm15, 113");
}



#[test]
fn pshufd3003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm15, xmm0, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xF8, 0x31", "pshufd xmm15, xmm0, 49");
}



#[test]
fn pshufhw3004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm2, xmm11, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xD3, 0x48", "pshufhw xmm2, xmm11, 72");
}



#[test]
fn pshufhw3005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm11, xmm3, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x70, 0xDB, 0x47", "pshufhw xmm11, xmm3, 71");
}



#[test]
fn pshufhw3006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm12, xmm15, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x70, 0xE7, 0x03", "pshufhw xmm12, xmm15, 3");
}



#[test]
fn pshufhw3007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm1, xmm1, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xC9, 0x21", "pshufhw xmm1, xmm1, 33");
}



#[test]
fn pshufhw3008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm2, xmm1, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xD1, 0x7C", "pshufhw xmm2, xmm1, 124");
}



#[test]
fn pshuflw3009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm11, xmm11, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x70, 0xDB, 0x24", "pshuflw xmm11, xmm11, 36");
}



#[test]
fn pshuflw3010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm12, xmm0, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x70, 0xE0, 0x61", "pshuflw xmm12, xmm0, 97");
}



#[test]
fn pshuflw3011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm2, xmm15, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x70, 0xD7, 0x62", "pshuflw xmm2, xmm15, 98");
}



#[test]
fn pshuflw3012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm4, xmm3, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xE3, 0x67", "pshuflw xmm4, xmm3, 103");
}



#[test]
fn pshuflw3013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm0, xmm4, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xC4, 0x32", "pshuflw xmm0, xmm4, 50");
}



#[test]
fn pshufw3014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm2, [rdx], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x12, 0x55", "pshufw mm2, [rdx], 85");
}



#[test]
fn pshufw3015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm0, [rax], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x00, 0x22", "pshufw mm0, [rax], 34");
}



#[test]
fn pshufw3016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm5, mm0, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0xE8, 0x60", "pshufw mm5, mm0, 96");
}



#[test]
fn pshufw3017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm0, [rdx], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x02, 0x18", "pshufw mm0, [rdx], 24");
}



#[test]
fn pshufw3018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm3, [rdx], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x1A, 0x33", "pshufw mm3, [rdx], 51");
}



#[test]
fn psignb3019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x08, 0xE1", "psignb xmm12, xmm1");
}



#[test]
fn psignb3020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x08, 0xE4", "psignb xmm12, xmm12");
}



#[test]
fn psignb3021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x08, 0xDB", "psignb xmm3, xmm11");
}



#[test]
fn psignb3022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x08, 0xFA", "psignb xmm15, xmm2");
}



#[test]
fn psignb3023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x08, 0xDC", "psignb xmm3, xmm4");
}



#[test]
fn psignb3024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x1A", "psignb mm3, [rdx]");
}



#[test]
fn psignb3025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x22", "psignb mm4, [rdx]");
}



#[test]
fn psignb3026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x12", "psignb mm2, [rdx]");
}



#[test]
fn psignb3027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x1A", "psignb mm3, [rdx]");
}



#[test]
fn psignb3028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x0A", "psignb mm1, [rdx]");
}



#[test]
fn psignd3029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x22", "psignd mm4, [rdx]");
}



#[test]
fn psignd3030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0xC0", "psignd mm0, mm0");
}



#[test]
fn psignd3031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x12", "psignd mm2, [rdx]");
}



#[test]
fn psignd3032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x08", "psignd mm1, [rax]");
}



#[test]
fn psignd3033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x02", "psignd mm0, [rdx]");
}



#[test]
fn psignd3034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x0A, 0xE3", "psignd xmm12, xmm11");
}



#[test]
fn psignd3035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x0A, 0xD4", "psignd xmm2, xmm12");
}



#[test]
fn psignd3036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x0A, 0xDB", "psignd xmm11, xmm3");
}



#[test]
fn psignd3037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x0A, 0xD1", "psignd xmm2, xmm1");
}



#[test]
fn psignd3038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x0A, 0xE2", "psignd xmm4, xmm2");
}



#[test]
fn psignw3039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0xC0", "psignw mm0, mm0");
}



#[test]
fn psignw3040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x28", "psignw mm5, [rax]");
}



#[test]
fn psignw3041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0xE8", "psignw mm5, mm0");
}



#[test]
fn psignw3042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x1A", "psignw mm3, [rdx]");
}



#[test]
fn psignw3043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x00", "psignw mm0, [rax]");
}



#[test]
fn psignw3044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x09, 0xDB", "psignw xmm11, xmm3");
}



#[test]
fn psignw3045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x09, 0xD9", "psignw xmm11, xmm1");
}



#[test]
fn psignw3046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x09, 0xE0", "psignw xmm12, xmm0");
}



#[test]
fn psignw3047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x09, 0xDC", "psignw xmm3, xmm12");
}



#[test]
fn psignw3048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x09, 0xE2", "psignw xmm4, xmm2");
}



#[test]
fn pslld3049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x12", "pslld mm2, [rdx]");
}



#[test]
fn pslld3050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xD0", "pslld mm2, mm0");
}



#[test]
fn pslld3051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x22", "pslld mm4, [rdx]");
}



#[test]
fn pslld3052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x1A", "pslld mm3, [rdx]");
}



#[test]
fn pslld3053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x28", "pslld mm5, [rax]");
}



#[test]
fn pslld3054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF1, 0x63", "pslld xmm1, 99");
}



#[test]
fn pslld3055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF3, 0x1D", "pslld xmm11, 29");
}



#[test]
fn pslld3056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF3, 0x39", "pslld xmm11, 57");
}



#[test]
fn pslld3057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF4, 0x26", "pslld xmm12, 38");
}



#[test]
fn pslld3058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF3, 0x5E", "pslld xmm11, 94");
}



#[test]
fn pslld3059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF2, 0xCB", "pslld xmm1, xmm11");
}



#[test]
fn pslld3060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0xC1", "pslld xmm0, xmm1");
}



#[test]
fn pslld3061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0xD8", "pslld xmm11, xmm0");
}



#[test]
fn pslld3062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0x18", "pslld xmm3, OWORD [rax]");
}



#[test]
fn pslld3063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0xD9", "pslld xmm3, xmm1");
}



#[test]
fn pslld3064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF3, 0x7E", "pslld mm3, 126");
}



#[test]
fn pslld3065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF4, 0x44", "pslld mm4, 68");
}



#[test]
fn pslld3066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF5, 0x6A", "pslld mm5, 106");
}



#[test]
fn pslld3067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF2, 0x46", "pslld mm2, 70");
}



#[test]
fn pslld3068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF3, 0x74", "pslld mm3, 116");
}



#[test]
fn pslldq3069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm15, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFF, 0x5F", "pslldq xmm15, 95");
}



#[test]
fn pslldq3070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm15, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFF, 0x1F", "pslldq xmm15, 31");
}



#[test]
fn pslldq3071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm4, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xFC, 0x05", "pslldq xmm4, 5");
}



#[test]
fn pslldq3072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm1, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF9, 0x03", "pslldq xmm1, 3");
}



#[test]
fn pslldq3073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm0, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF8, 0x1D", "pslldq xmm0, 29");
}



#[test]
fn psllq3074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF0, 0x70", "psllq mm0, 112");
}



#[test]
fn psllq3075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm4, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF4, 0x1D", "psllq mm4, 29");
}



#[test]
fn psllq3076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF5, 0x27", "psllq mm5, 39");
}



#[test]
fn psllq3077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm3, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF3, 0x09", "psllq mm3, 9");
}



#[test]
fn psllq3078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF5, 0x58", "psllq mm5, 88");
}



#[test]
fn psllq3079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm12, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF4, 0x69", "psllq xmm12, 105");
}



#[test]
fn psllq3080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm1, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF1, 0x17", "psllq xmm1, 23");
}



#[test]
fn psllq3081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF7, 0x3A", "psllq xmm15, 58");
}



#[test]
fn psllq3082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm11, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF3, 0x2C", "psllq xmm11, 44");
}



#[test]
fn psllq3083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm1, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF1, 0x72", "psllq xmm1, 114");
}



#[test]
fn psllq3084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x12", "psllq mm2, [rdx]");
}



#[test]
fn psllq3085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x20", "psllq mm4, [rax]");
}



#[test]
fn psllq3086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xE0", "psllq mm4, mm0");
}



#[test]
fn psllq3087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x00", "psllq mm0, [rax]");
}



#[test]
fn psllq3088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x12", "psllq mm2, [rdx]");
}



#[test]
fn psllq3089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF3, 0xD8", "psllq xmm11, xmm0");
}



#[test]
fn psllq3090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xDB", "psllq xmm3, xmm3");
}



#[test]
fn psllq3091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xC0", "psllq xmm0, xmm0");
}



#[test]
fn psllq3092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xCC", "psllq xmm1, xmm12");
}



#[test]
fn psllq3093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF3, 0x3A", "psllq xmm15, OWORD [rdx]");
}



#[test]
fn psllw3094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF4, 0x0D", "psllw xmm4, 13");
}



#[test]
fn psllw3095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm11, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF3, 0x3B", "psllw xmm11, 59");
}



#[test]
fn psllw3096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm2, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF2, 0x2B", "psllw xmm2, 43");
}



#[test]
fn psllw3097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm2, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF2, 0x68", "psllw xmm2, 104");
}



#[test]
fn psllw3098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm3, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF3, 0x1A", "psllw xmm3, 26");
}



#[test]
fn psllw3099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF1, 0x3B", "psllw mm1, 59");
}



#[test]
fn psllw3100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF4, 0x0B", "psllw mm4, 11");
}



#[test]
fn psllw3101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF3, 0x4B", "psllw mm3, 75");
}



#[test]
fn psllw3102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF1, 0x47", "psllw mm1, 71");
}



#[test]
fn psllw3103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF4, 0x3F", "psllw mm4, 63");
}



#[test]
fn psllw3104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x28", "psllw mm5, [rax]");
}



#[test]
fn psllw3105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x0A", "psllw mm1, [rdx]");
}



#[test]
fn psllw3106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x22", "psllw mm4, [rdx]");
}



#[test]
fn psllw3107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x10", "psllw mm2, [rax]");
}



#[test]
fn psllw3108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0xE0", "psllw mm4, mm0");
}



#[test]
fn psllw3109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF1, 0xFB", "psllw xmm15, xmm3");
}



#[test]
fn psllw3110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0x00", "psllw xmm0, OWORD [rax]");
}



#[test]
fn psllw3111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xDA", "psllw xmm3, xmm2");
}



#[test]
fn psllw3112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF1, 0xDC", "psllw xmm11, xmm4");
}



#[test]
fn psllw3113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF1, 0xFF", "psllw xmm15, xmm15");
}



#[test]
fn psrad3114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm4, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE4, 0x49", "psrad mm4, 73");
}



#[test]
fn psrad3115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm4, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE4, 0x4F", "psrad mm4, 79");
}



#[test]
fn psrad3116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm5, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE5, 0x7C", "psrad mm5, 124");
}



#[test]
fn psrad3117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE0, 0x72", "psrad mm0, 114");
}



#[test]
fn psrad3118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE3, 0x01", "psrad mm3, 1");
}



#[test]
fn psrad3119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm4, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE4, 0x3A", "psrad xmm4, 58");
}



#[test]
fn psrad3120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm1, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE1, 0x5C", "psrad xmm1, 92");
}



#[test]
fn psrad3121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x77", "psrad xmm15, 119");
}



#[test]
fn psrad3122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE2, 0x00", "psrad xmm2, 0");
}



#[test]
fn psrad3123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm4, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE4, 0x09", "psrad xmm4, 9");
}



#[test]
fn psrad3124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x02", "psrad mm0, [rdx]");
}



#[test]
fn psrad3125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x12", "psrad mm2, [rdx]");
}



#[test]
fn psrad3126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xC0", "psrad mm0, mm0");
}



#[test]
fn psrad3127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x00", "psrad mm0, [rax]");
}



#[test]
fn psrad3128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x08", "psrad mm1, [rax]");
}



#[test]
fn psrad3129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xD0", "psrad xmm2, xmm0");
}



#[test]
fn psrad3130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE2, 0xE4", "psrad xmm12, xmm4");
}



#[test]
fn psrad3131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE2, 0xC3", "psrad xmm0, xmm11");
}



#[test]
fn psrad3132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE2, 0xE3", "psrad xmm4, xmm11");
}



#[test]
fn psrad3133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE2, 0xE3", "psrad xmm12, xmm3");
}



#[test]
fn psraw3134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x1A", "psraw mm3, [rdx]");
}



#[test]
fn psraw3135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x18", "psraw mm3, [rax]");
}



#[test]
fn psraw3136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x22", "psraw mm4, [rdx]");
}



#[test]
fn psraw3137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x12", "psraw mm2, [rdx]");
}



#[test]
fn psraw3138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x18", "psraw mm3, [rax]");
}



#[test]
fn psraw3139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xCA", "psraw xmm1, xmm2");
}



#[test]
fn psraw3140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE1, 0xD4", "psraw xmm2, xmm12");
}



#[test]
fn psraw3141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0x08", "psraw xmm1, OWORD [rax]");
}



#[test]
fn psraw3142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0xF8", "psraw xmm15, xmm0");
}



#[test]
fn psraw3143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xD3", "psraw xmm2, xmm3");
}



#[test]
fn psraw3144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE3, 0x2F", "psraw xmm3, 47");
}



#[test]
fn psraw3145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm2, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE2, 0x01", "psraw xmm2, 1");
}



#[test]
fn psraw3146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE7, 0x53", "psraw xmm15, 83");
}



#[test]
fn psraw3147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE4, 0x13", "psraw xmm12, 19");
}



#[test]
fn psraw3148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE1, 0x77", "psraw xmm1, 119");
}



#[test]
fn psraw3149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE3, 0x7C", "psraw mm3, 124");
}



#[test]
fn psraw3150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE3, 0x31", "psraw mm3, 49");
}



#[test]
fn psraw3151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE4, 0x32", "psraw mm4, 50");
}



#[test]
fn psraw3152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm2, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE2, 0x56", "psraw mm2, 86");
}



#[test]
fn psraw3153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE3, 0x68", "psraw mm3, 104");
}



#[test]
fn psrld3154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x20", "psrld mm4, [rax]");
}



#[test]
fn psrld3155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0xE0", "psrld mm4, mm0");
}



#[test]
fn psrld3156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x28", "psrld mm5, [rax]");
}



#[test]
fn psrld3157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x10", "psrld mm2, [rax]");
}



#[test]
fn psrld3158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x0A", "psrld mm1, [rdx]");
}



#[test]
fn psrld3159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0x08", "psrld xmm1, OWORD [rax]");
}



#[test]
fn psrld3160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xE3", "psrld xmm12, xmm3");
}



#[test]
fn psrld3161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0xE1", "psrld xmm4, xmm1");
}



#[test]
fn psrld3162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xFC", "psrld xmm15, xmm4");
}



#[test]
fn psrld3163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD2, 0xD3", "psrld xmm2, xmm11");
}



#[test]
fn psrld3164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD4, 0x07", "psrld xmm12, 7");
}



#[test]
fn psrld3165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD4, 0x5A", "psrld xmm4, 90");
}



#[test]
fn psrld3166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD4, 0x3F", "psrld xmm4, 63");
}



#[test]
fn psrld3167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD4, 0x31", "psrld xmm4, 49");
}



#[test]
fn psrld3168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD4, 0x4C", "psrld xmm12, 76");
}



#[test]
fn psrld3169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD4, 0x13", "psrld mm4, 19");
}



#[test]
fn psrld3170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm3, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD3, 0x2A", "psrld mm3, 42");
}



#[test]
fn psrld3171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD2, 0x65", "psrld mm2, 101");
}



#[test]
fn psrld3172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD0, 0x40", "psrld mm0, 64");
}



#[test]
fn psrld3173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD2, 0x59", "psrld mm2, 89");
}



#[test]
fn psrldq3174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm12, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDC, 0x65", "psrldq xmm12, 101");
}



#[test]
fn psrldq3175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm3, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDB, 0x76", "psrldq xmm3, 118");
}



#[test]
fn psrldq3176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm3, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDB, 0x6D", "psrldq xmm3, 109");
}



#[test]
fn psrldq3177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm4, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDC, 0x41", "psrldq xmm4, 65");
}



#[test]
fn psrldq3178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm12, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDC, 0x02", "psrldq xmm12, 2");
}



#[test]
fn psrlq3179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm0, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD0, 0x44", "psrlq mm0, 68");
}



#[test]
fn psrlq3180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD4, 0x2F", "psrlq mm4, 47");
}



#[test]
fn psrlq3181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm0, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD0, 0x7A", "psrlq mm0, 122");
}



#[test]
fn psrlq3182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD5, 0x5B", "psrlq mm5, 91");
}



#[test]
fn psrlq3183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD4, 0x0C", "psrlq mm4, 12");
}



#[test]
fn psrlq3184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x1A", "psrlq mm3, [rdx]");
}



#[test]
fn psrlq3185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x1A", "psrlq mm3, [rdx]");
}



#[test]
fn psrlq3186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x10", "psrlq mm2, [rax]");
}



#[test]
fn psrlq3187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0xC0", "psrlq mm0, mm0");
}



#[test]
fn psrlq3188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x12", "psrlq mm2, [rdx]");
}



#[test]
fn psrlq3189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0x08", "psrlq xmm1, OWORD [rax]");
}



#[test]
fn psrlq3190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0x20", "psrlq xmm4, OWORD [rax]");
}



#[test]
fn psrlq3191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD3, 0xC7", "psrlq xmm0, xmm15");
}



#[test]
fn psrlq3192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0xDC", "psrlq xmm11, xmm4");
}



#[test]
fn psrlq3193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0x1A", "psrlq xmm11, OWORD [rdx]");
}



#[test]
fn psrlq3194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD4, 0x6A", "psrlq xmm4, 106");
}



#[test]
fn psrlq3195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm2, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD2, 0x0D", "psrlq xmm2, 13");
}



#[test]
fn psrlq3196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xD4, 0x74", "psrlq xmm12, 116");
}



#[test]
fn psrlq3197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD3, 0x27", "psrlq xmm3, 39");
}



#[test]
fn psrlq3198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm1, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD1, 0x51", "psrlq xmm1, 81");
}



#[test]
fn psrlw3199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD3, 0x36", "psrlw xmm3, 54");
}



#[test]
fn psrlw3200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD3, 0x18", "psrlw xmm11, 24");
}



#[test]
fn psrlw3201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm4, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD4, 0x22", "psrlw xmm4, 34");
}



#[test]
fn psrlw3202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD3, 0x43", "psrlw xmm11, 67");
}



#[test]
fn psrlw3203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD3, 0x6A", "psrlw xmm3, 106");
}



#[test]
fn psrlw3204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xD8", "psrlw mm3, mm0");
}



#[test]
fn psrlw3205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xC0", "psrlw mm0, mm0");
}



#[test]
fn psrlw3206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xE0", "psrlw mm4, mm0");
}



#[test]
fn psrlw3207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x0A", "psrlw mm1, [rdx]");
}



#[test]
fn psrlw3208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x0A", "psrlw mm1, [rdx]");
}



#[test]
fn psrlw3209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xD3", "psrlw xmm2, xmm3");
}



#[test]
fn psrlw3210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xE4", "psrlw xmm12, xmm4");
}



#[test]
fn psrlw3211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0x02", "psrlw xmm0, OWORD [rdx]");
}



#[test]
fn psrlw3212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xF8", "psrlw xmm15, xmm0");
}



#[test]
fn psrlw3213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xCA", "psrlw xmm1, xmm2");
}



#[test]
fn psrlw3214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD5, 0x00", "psrlw mm5, 0");
}



#[test]
fn psrlw3215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm1, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD1, 0x78", "psrlw mm1, 120");
}



#[test]
fn psrlw3216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD5, 0x5F", "psrlw mm5, 95");
}



#[test]
fn psrlw3217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD3, 0x4E", "psrlw mm3, 78");
}



#[test]
fn psrlw3218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD0, 0x0D", "psrlw mm0, 13");
}



#[test]
fn psubb3219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x08", "psubb mm1, [rax]");
}



#[test]
fn psubb3220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0xD0", "psubb mm2, mm0");
}



#[test]
fn psubb3221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x08", "psubb mm1, [rax]");
}



#[test]
fn psubb3222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0xD8", "psubb mm3, mm0");
}



#[test]
fn psubb3223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x20", "psubb mm4, [rax]");
}



#[test]
fn psubb3224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xDC", "psubb xmm11, xmm4");
}



#[test]
fn psubb3225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xD0", "psubb xmm2, xmm0");
}



#[test]
fn psubb3226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF8, 0xC4", "psubb xmm0, xmm12");
}



#[test]
fn psubb3227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xDB", "psubb xmm3, xmm3");
}



#[test]
fn psubb3228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xCB", "psubb xmm1, xmm3");
}



#[test]
fn psubd3229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x28", "psubd mm5, [rax]");
}



#[test]
fn psubd3230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0xE0", "psubd mm4, mm0");
}



#[test]
fn psubd3231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x10", "psubd mm2, [rax]");
}



#[test]
fn psubd3232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x18", "psubd mm3, [rax]");
}



#[test]
fn psubd3233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x22", "psubd mm4, [rdx]");
}



#[test]
fn psubd3234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0x38", "psubd xmm15, OWORD [rax]");
}



#[test]
fn psubd3235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0x20", "psubd xmm4, OWORD [rax]");
}



#[test]
fn psubd3236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0xFA", "psubd xmm15, xmm2");
}



#[test]
fn psubd3237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFA, 0xE3", "psubd xmm12, xmm11");
}



#[test]
fn psubd3238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xC8", "psubd xmm1, xmm0");
}



#[test]
fn psubq3239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x10", "psubq mm2, [rax]");
}



#[test]
fn psubq3240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xC0", "psubq mm0, mm0");
}



#[test]
fn psubq3241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xD8", "psubq mm3, mm0");
}



#[test]
fn psubq3242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xD8", "psubq mm3, mm0");
}



#[test]
fn psubq3243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x02", "psubq mm0, [rdx]");
}



#[test]
fn psubq3244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x12", "psubq xmm2, OWORD [rdx]");
}



#[test]
fn psubq3245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xCB", "psubq xmm1, xmm3");
}



#[test]
fn psubq3246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x02", "psubq xmm0, OWORD [rdx]");
}



#[test]
fn psubq3247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x10", "psubq xmm2, OWORD [rax]");
}



#[test]
fn psubq3248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x10", "psubq xmm2, OWORD [rax]");
}



#[test]
fn psubsb3249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0xD8", "psubsb mm3, mm0");
}



#[test]
fn psubsb3250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0xE8", "psubsb mm5, mm0");
}



#[test]
fn psubsb3251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x0A", "psubsb mm1, [rdx]");
}



#[test]
fn psubsb3252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x18", "psubsb mm3, [rax]");
}



#[test]
fn psubsb3253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x02", "psubsb mm0, [rdx]");
}



#[test]
fn psubsb3254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE8, 0xDC", "psubsb xmm3, xmm12");
}



#[test]
fn psubsb3255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE8, 0xE3", "psubsb xmm4, xmm11");
}



#[test]
fn psubsb3256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE8, 0xCB", "psubsb xmm1, xmm11");
}



#[test]
fn psubsb3257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE8, 0xE0", "psubsb xmm12, xmm0");
}



#[test]
fn psubsb3258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0x08", "psubsb xmm1, OWORD [rax]");
}



#[test]
fn psubsiw3259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x00", "psubsiw mm0, [rax]");
}



#[test]
fn psubsiw3260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x10", "psubsiw mm2, [rax]");
}



#[test]
fn psubsiw3261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x08", "psubsiw mm1, [rax]");
}



#[test]
fn psubsiw3262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xC0", "psubsiw mm0, mm0");
}



#[test]
fn psubsiw3263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xD8", "psubsiw mm3, mm0");
}



#[test]
fn psubsw3264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x12", "psubsw mm2, [rdx]");
}



#[test]
fn psubsw3265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0xD0", "psubsw mm2, mm0");
}



#[test]
fn psubsw3266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x08", "psubsw mm1, [rax]");
}



#[test]
fn psubsw3267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x12", "psubsw mm2, [rdx]");
}



#[test]
fn psubsw3268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x10", "psubsw mm2, [rax]");
}



#[test]
fn psubsw3269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0xE3", "psubsw xmm12, xmm3");
}



#[test]
fn psubsw3270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE9, 0xCB", "psubsw xmm1, xmm11");
}



#[test]
fn psubsw3271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE9, 0xC3", "psubsw xmm0, xmm11");
}



#[test]
fn psubsw3272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0xDB", "psubsw xmm11, xmm3");
}



#[test]
fn psubsw3273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE9, 0xD4", "psubsw xmm2, xmm12");
}



#[test]
fn psubusb3274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xE8", "psubusb mm5, mm0");
}



#[test]
fn psubusb3275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x08", "psubusb mm1, [rax]");
}



#[test]
fn psubusb3276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x12", "psubusb mm2, [rdx]");
}



#[test]
fn psubusb3277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x10", "psubusb mm2, [rax]");
}



#[test]
fn psubusb3278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xE0", "psubusb mm4, mm0");
}



#[test]
fn psubusb3279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0x12", "psubusb xmm2, OWORD [rdx]");
}



#[test]
fn psubusb3280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD8, 0xDF", "psubusb xmm11, xmm15");
}



#[test]
fn psubusb3281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0x0A", "psubusb xmm1, OWORD [rdx]");
}



#[test]
fn psubusb3282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD8, 0xDB", "psubusb xmm11, xmm11");
}



#[test]
fn psubusb3283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD8, 0xCC", "psubusb xmm1, xmm12");
}



#[test]
fn psubusw3284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x18", "psubusw mm3, [rax]");
}



#[test]
fn psubusw3285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x20", "psubusw mm4, [rax]");
}



#[test]
fn psubusw3286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0xC8", "psubusw mm1, mm0");
}



#[test]
fn psubusw3287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x08", "psubusw mm1, [rax]");
}



#[test]
fn psubusw3288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x00", "psubusw mm0, [rax]");
}



#[test]
fn psubusw3289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD9, 0xD3", "psubusw xmm2, xmm11");
}



#[test]
fn psubusw3290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xCC", "psubusw xmm1, xmm4");
}



#[test]
fn psubusw3291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xC1", "psubusw xmm0, xmm1");
}



#[test]
fn psubusw3292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xC1", "psubusw xmm0, xmm1");
}



#[test]
fn psubusw3293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xF8", "psubusw xmm15, xmm0");
}



#[test]
fn psubw3294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x12", "psubw mm2, [rdx]");
}



#[test]
fn psubw3295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x28", "psubw mm5, [rax]");
}



#[test]
fn psubw3296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xE8", "psubw mm5, mm0");
}



#[test]
fn psubw3297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x18", "psubw mm3, [rax]");
}



#[test]
fn psubw3298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x10", "psubw mm2, [rax]");
}



#[test]
fn psubw3299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0x08", "psubw xmm1, OWORD [rax]");
}



#[test]
fn psubw3300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xD9", "psubw xmm3, xmm1");
}



#[test]
fn psubw3301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xC8", "psubw xmm1, xmm0");
}



#[test]
fn psubw3302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xD4", "psubw xmm2, xmm4");
}



#[test]
fn psubw3303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF9, 0xE4", "psubw xmm12, xmm4");
}



#[test]
fn pswapd3304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xBB", "pswapd mm1, [rdx]");
}



#[test]
fn pswapd3305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xBB", "pswapd mm4, [rdx]");
}



#[test]
fn pswapd3306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xBB", "pswapd mm3, mm0");
}



#[test]
fn pswapd3307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xBB", "pswapd mm4, [rdx]");
}



#[test]
fn pswapd3308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xBB", "pswapd mm5, [rax]");
}



#[test]
fn ptest3309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xDC", "ptest xmm11, xmm4");
}



#[test]
fn ptest3310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xE0", "ptest xmm12, xmm0");
}



#[test]
fn ptest3311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x17, 0xDB", "ptest xmm11, xmm11");
}



#[test]
fn ptest3312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xC3", "ptest xmm0, xmm3");
}



#[test]
fn ptest3313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xC3", "ptest xmm0, xmm3");
}



#[test]
fn punpckhbw3314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x08", "punpckhbw mm1, [rax]");
}



#[test]
fn punpckhbw3315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x2A", "punpckhbw mm5, [rdx]");
}



#[test]
fn punpckhbw3316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x02", "punpckhbw mm0, [rdx]");
}



#[test]
fn punpckhbw3317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x10", "punpckhbw mm2, [rax]");
}



#[test]
fn punpckhbw3318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x28", "punpckhbw mm5, [rax]");
}



#[test]
fn punpckhbw3319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x68, 0xC4", "punpckhbw xmm0, xmm12");
}



#[test]
fn punpckhbw3320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xD3", "punpckhbw xmm2, xmm3");
}



#[test]
fn punpckhbw3321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x68, 0xFB", "punpckhbw xmm15, xmm11");
}



#[test]
fn punpckhbw3322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xC0", "punpckhbw xmm0, xmm0");
}



#[test]
fn punpckhbw3323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xD3", "punpckhbw xmm2, xmm3");
}



#[test]
fn punpckhdq3324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x2A", "punpckhdq mm5, [rdx]");
}



#[test]
fn punpckhdq3325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x18", "punpckhdq mm3, [rax]");
}



#[test]
fn punpckhdq3326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0xC8", "punpckhdq mm1, mm0");
}



#[test]
fn punpckhdq3327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x28", "punpckhdq mm5, [rax]");
}



#[test]
fn punpckhdq3328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0xE8", "punpckhdq mm5, mm0");
}



#[test]
fn punpckhdq3329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6A, 0xD3", "punpckhdq xmm2, xmm11");
}



#[test]
fn punpckhdq3330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0xDC", "punpckhdq xmm3, xmm4");
}



#[test]
fn punpckhdq3331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6A, 0xE3", "punpckhdq xmm12, xmm11");
}



#[test]
fn punpckhdq3332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0xE3", "punpckhdq xmm4, xmm3");
}



#[test]
fn punpckhdq3333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0xDA", "punpckhdq xmm11, xmm2");
}



#[test]
fn punpckhqdq3334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0x10", "punpckhqdq xmm2, OWORD [rax]");
}



#[test]
fn punpckhqdq3335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6D, 0xFC", "punpckhqdq xmm15, xmm12");
}



#[test]
fn punpckhqdq3336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6D, 0xCF", "punpckhqdq xmm1, xmm15");
}



#[test]
fn punpckhqdq3337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6D, 0xE2", "punpckhqdq xmm12, xmm2");
}



#[test]
fn punpckhqdq3338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xD8", "punpckhqdq xmm3, xmm0");
}



#[test]
fn punpckhwd3339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0xC8", "punpckhwd mm1, mm0");
}



#[test]
fn punpckhwd3340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x10", "punpckhwd mm2, [rax]");
}



#[test]
fn punpckhwd3341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x2A", "punpckhwd mm5, [rdx]");
}



#[test]
fn punpckhwd3342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x18", "punpckhwd mm3, [rax]");
}



#[test]
fn punpckhwd3343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0xC8", "punpckhwd mm1, mm0");
}



#[test]
fn punpckhwd3344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0xF8", "punpckhwd xmm15, xmm0");
}



#[test]
fn punpckhwd3345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x69, 0xC7", "punpckhwd xmm0, xmm15");
}



#[test]
fn punpckhwd3346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0x00", "punpckhwd xmm0, OWORD [rax]");
}



#[test]
fn punpckhwd3347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x69, 0xD3", "punpckhwd xmm2, xmm11");
}



#[test]
fn punpckhwd3348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x69, 0xDF", "punpckhwd xmm11, xmm15");
}



#[test]
fn punpcklbw3349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x10", "punpcklbw mm2, [rax]");
}



#[test]
fn punpcklbw3350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x1A", "punpcklbw mm3, [rdx]");
}



#[test]
fn punpcklbw3351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x10", "punpcklbw mm2, [rax]");
}



#[test]
fn punpcklbw3352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x18", "punpcklbw mm3, [rax]");
}



#[test]
fn punpcklbw3353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x10", "punpcklbw mm2, [rax]");
}



#[test]
fn punpcklbw3354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xCC", "punpcklbw xmm1, xmm4");
}



#[test]
fn punpcklbw3355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xCB", "punpcklbw xmm1, xmm3");
}



#[test]
fn punpcklbw3356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xD9", "punpcklbw xmm3, xmm1");
}



#[test]
fn punpcklbw3357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x60, 0xDB", "punpcklbw xmm3, xmm11");
}



#[test]
fn punpcklbw3358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x60, 0xFB", "punpcklbw xmm15, xmm11");
}



#[test]
fn punpckldq3359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xD8", "punpckldq mm3, mm0");
}



#[test]
fn punpckldq3360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xC0", "punpckldq mm0, mm0");
}



#[test]
fn punpckldq3361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x1A", "punpckldq mm3, [rdx]");
}



#[test]
fn punpckldq3362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xC0", "punpckldq mm0, mm0");
}



#[test]
fn punpckldq3363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x00", "punpckldq mm0, [rax]");
}



#[test]
fn punpckldq3364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x62, 0xDB", "punpckldq xmm11, xmm11");
}



#[test]
fn punpckldq3365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xC4", "punpckldq xmm0, xmm4");
}



#[test]
fn punpckldq3366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x62, 0xF8", "punpckldq xmm15, xmm0");
}



#[test]
fn punpckldq3367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0x10", "punpckldq xmm2, OWORD [rax]");
}



#[test]
fn punpckldq3368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xE4", "punpckldq xmm4, xmm12");
}



#[test]
fn punpcklqdq3369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6C, 0xFF", "punpcklqdq xmm15, xmm15");
}



#[test]
fn punpcklqdq3370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xE4", "punpcklqdq xmm4, xmm4");
}



#[test]
fn punpcklqdq3371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6C, 0xFA", "punpcklqdq xmm15, xmm2");
}



#[test]
fn punpcklqdq3372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0x0A", "punpcklqdq xmm1, OWORD [rdx]");
}



#[test]
fn punpcklqdq3373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xC9", "punpcklqdq xmm1, xmm1");
}



#[test]
fn punpcklwd3374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x10", "punpcklwd mm2, [rax]");
}



#[test]
fn punpcklwd3375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x2A", "punpcklwd mm5, [rdx]");
}



#[test]
fn punpcklwd3376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x02", "punpcklwd mm0, [rdx]");
}



#[test]
fn punpcklwd3377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x00", "punpcklwd mm0, [rax]");
}



#[test]
fn punpcklwd3378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x08", "punpcklwd mm1, [rax]");
}



#[test]
fn punpcklwd3379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0xDB", "punpcklwd xmm3, xmm3");
}



#[test]
fn punpcklwd3380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0xD8", "punpcklwd xmm3, xmm0");
}



#[test]
fn punpcklwd3381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0xC9", "punpcklwd xmm1, xmm1");
}



#[test]
fn punpcklwd3382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0xCA", "punpcklwd xmm1, xmm2");
}



#[test]
fn punpcklwd3383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0xD9", "punpcklwd xmm11, xmm1");
}



#[test]
fn push3384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn push3386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn push3387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn push3388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn push3389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x79", "push 121");
}



#[test]
fn push3390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x48", "push 72");
}



#[test]
fn push3391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x7C", "push 124");
}



#[test]
fn push3392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x10", "push 16");
}



#[test]
fn push3393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x3D", "push 61");
}



#[test]
fn push3394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x40", "push 64");
}



#[test]
fn push3395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x03", "push 3");
}



#[test]
fn push3396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x75", "push 117");
}



#[test]
fn push3397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x49", "push 73");
}



#[test]
fn push3398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x2F", "push 47");
}



#[test]
fn push3399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn push3404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x52", "push rdx");
}



#[test]
fn push3405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x50", "push rax");
}



#[test]
fn push3406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x50", "push rax");
}



#[test]
fn push3407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x52", "push rdx");
}



#[test]
fn push3408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x50", "push rax");
}



#[test]
fn push3409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn push3413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn pushf3414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushf");
}



#[test]
fn pushfq3415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushfq");
}



#[test]
fn pushfw3416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9C", "pushfw");
}



#[test]
fn pxor3417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x2A", "pxor mm5, [rdx]");
}



#[test]
fn pxor3418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x12", "pxor mm2, [rdx]");
}



#[test]
fn pxor3419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x12", "pxor mm2, [rdx]");
}



#[test]
fn pxor3420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x2A", "pxor mm5, [rdx]");
}



#[test]
fn pxor3421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x2A", "pxor mm5, [rdx]");
}



#[test]
fn pxor3422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0xE0", "pxor xmm4, xmm0");
}



#[test]
fn pxor3423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0xE0", "pxor xmm12, xmm0");
}



#[test]
fn pxor3424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0xE1", "pxor xmm12, xmm1");
}



#[test]
fn pxor3425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0xE4", "pxor xmm12, xmm4");
}



#[test]
fn pxor3426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0x20", "pxor xmm12, OWORD [rax]");
}



#[test]
fn rcl3427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x03", "rcl rcx, 3");
}



#[test]
fn rcl3428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x3E", "rcl rcx, 62");
}



#[test]
fn rcl3429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x13", "rcl rcx, 19");
}



#[test]
fn rcl3430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x4B", "rcl rcx, 75");
}



#[test]
fn rcl3431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x58", "rcl rcx, 88");
}



#[test]
fn rcl3432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD0", "rcl al, cl");
}



#[test]
fn rcl3433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcl3434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD0", "rcl al, cl");
}



#[test]
fn rcl3435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn rcl3436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD0", "rcl al, cl");
}



#[test]
fn rcl3437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn rcl3438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn rcl3439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn rcl3440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn rcl3441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn rcl3442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD0, 0xD0", "rcl al, 1");
}



#[test]
fn rcl3443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x25", "rcl al, 37");
}



#[test]
fn rcl3444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x4F", "rcl BYTE [rax], 79");
}



#[test]
fn rcl3445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x0A", "rcl BYTE [rax], 10");
}



#[test]
fn rcl3446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x2F", "rcl al, 47");
}



#[test]
fn rcpps3447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0x1A", "rcpps xmm3, OWORD [rdx]");
}



#[test]
fn rcpps3448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xE4", "rcpps xmm4, xmm12");
}



#[test]
fn rcpps3449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0xC9", "rcpps xmm1, xmm1");
}



#[test]
fn rcpps3450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0x08", "rcpps xmm1, OWORD [rax]");
}



#[test]
fn rcpps3451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xC4", "rcpps xmm0, xmm12");
}



#[test]
fn rcpss3452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xC8", "rcpss xmm1, xmm0");
}



#[test]
fn rcpss3453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x53, 0xD4", "rcpss xmm2, xmm12");
}



#[test]
fn rcpss3454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xD4", "rcpss xmm2, xmm4");
}



#[test]
fn rcpss3455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x53, 0xE1", "rcpss xmm12, xmm1");
}



#[test]
fn rcpss3456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xD2", "rcpss xmm2, xmm2");
}



#[test]
fn rcr3457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn rcr3458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn rcr3459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn rcr3460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn rcr3461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn rcr3462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn rcr3467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x57", "rcr QWORD [rax], 87");
}



#[test]
fn rcr3468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x61", "rcr rcx, 97");
}



#[test]
fn rcr3469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x0B", "rcr QWORD [rax], 11");
}



#[test]
fn rcr3470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x5F", "rcr QWORD [rax], 95");
}



#[test]
fn rcr3471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x57", "rcr rcx, 87");
}



#[test]
fn rcr3472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x3B", "rcr al, 59");
}



#[test]
fn rcr3473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x02", "rcr BYTE [rax], 2");
}



#[test]
fn rcr3474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x27", "rcr BYTE [rax], 39");
}



#[test]
fn rcr3475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x1C", "rcr al, 28");
}



#[test]
fn rcr3476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x70", "rcr BYTE [rax], 112");
}



#[test]
fn rdfsbase3477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn rdfsbase3478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC0", "rdfsbase rax");
}



#[test]
fn rdfsbase3479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn rdfsbase3480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn rdfsbase3481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC0", "rdfsbase rax");
}



#[test]
fn rdgsbase3482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC8", "rdgsbase rax");
}



#[test]
fn rdgsbase3483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCA", "rdgsbase rdx");
}



#[test]
fn rdgsbase3484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn rdgsbase3485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn rdgsbase3486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCB", "rdgsbase rbx");
}



#[test]
fn rdm3487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A", "rdm");
}



#[test]
fn rdmsr3488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x32", "rdmsr");
}



#[test]
fn rdpid3489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn rdpid3490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn rdpid3491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn rdpid3492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn rdpid3493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn rdpkru3494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEE", "rdpkru");
}



#[test]
fn rdpmc3495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x33", "rdpmc");
}



#[test]
fn rdrand3496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF1", "rdrand rcx");
}



#[test]
fn rdrand3497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn rdrand3498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF0", "rdrand rax");
}



#[test]
fn rdrand3499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF1", "rdrand rcx");
}



#[test]
fn rdrand3500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF0", "rdrand rax");
}



#[test]
fn rdseed3501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn rdseed3502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn rdseed3503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn rdseed3504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn rdseed3505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xFA", "rdseed rdx");
}



#[test]
fn rdshr3506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0x00", "rdshr DWORD [rax]");
}



#[test]
fn rdshr3507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0xC0", "rdshr eax");
}



#[test]
fn rdshr3508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0x00", "rdshr DWORD [rax]");
}



#[test]
fn rdshr3509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0xC0", "rdshr eax");
}



#[test]
fn rdshr3510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x36, 0x00", "rdshr DWORD [rax]");
}



#[test]
fn rdtsc3511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtsc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x31", "rdtsc");
}



#[test]
fn rdtscp3512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtscp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF9", "rdtscp");
}



#[test]
fn ret3513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "ret");
}



#[test]
fn ret3514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 4626
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x12, 0x12", "ret 4626");
}



#[test]
fn ret3515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 6531
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x83, 0x19", "ret 6531");
}



#[test]
fn ret3516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 3434
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x6A, 0x0D", "ret 3434");
}



#[test]
fn ret3517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 10677
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xB5, 0x29", "ret 10677");
}



#[test]
fn ret3518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 1017
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xF9, 0x03", "ret 1017");
}



#[test]
fn retf3519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCB", "retf");
}



#[test]
fn retf3520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 8038
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x66, 0x1F", "retf 8038");
}



#[test]
fn retf3521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 15863
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xF7, 0x3D", "retf 15863");
}



#[test]
fn retf3522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 10065
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x51, 0x27", "retf 10065");
}



#[test]
fn retf3523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 12136
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x68, 0x2F", "retf 12136");
}



#[test]
fn retf3524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 13880
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x38, 0x36", "retf 13880");
}



#[test]
fn retn3525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "retn");
}



#[test]
fn retn3526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 11533
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x0D, 0x2D", "retn 11533");
}



#[test]
fn retn3527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 13636
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x44, 0x35", "retn 13636");
}



#[test]
fn retn3528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 3476
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x94, 0x0D", "retn 3476");
}



#[test]
fn retn3529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 12542
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xFE, 0x30", "retn 12542");
}



#[test]
fn retn3530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 14600
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x08, 0x39", "retn 14600");
}



#[test]
fn rol3531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x46", "rol QWORD [rax], 70");
}



#[test]
fn rol3532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x2B", "rol rcx, 43");
}



#[test]
fn rol3533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x31", "rol QWORD [rax], 49");
}



#[test]
fn rol3534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x35", "rol rcx, 53");
}



#[test]
fn rol3535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x44", "rol QWORD [rax], 68");
}



#[test]
fn rol3536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn rol3537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn rol3538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn rol3539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn rol3540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn rol3541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x00", "rol BYTE [rax], cl");
}



#[test]
fn rol3544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x00", "rol BYTE [rax], cl");
}



#[test]
fn rol3545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn rol3546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x02", "rol al, 2");
}



#[test]
fn rol3547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x08", "rol BYTE [rax], 8");
}



#[test]
fn rol3548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x29", "rol al, 41");
}



#[test]
fn rol3549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x32", "rol BYTE [rax], 50");
}



#[test]
fn rol3550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x51", "rol BYTE [rax], 81");
}



#[test]
fn ror3551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x5E", "ror QWORD [rax], 94");
}



#[test]
fn ror3552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x52", "ror QWORD [rax], 82");
}



#[test]
fn ror3553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD1, 0xC9", "ror rcx, 1");
}



#[test]
fn ror3554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x70", "ror rcx, 112");
}



#[test]
fn ror3555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x2D", "ror rcx, 45");
}



#[test]
fn ror3556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x08", "ror BYTE [rax], cl");
}



#[test]
fn ror3557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x08", "ror BYTE [rax], cl");
}



#[test]
fn ror3558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn ror3559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn ror3560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x08", "ror BYTE [rax], cl");
}



#[test]
fn ror3561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x70", "ror al, 112");
}



#[test]
fn ror3562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x7B", "ror BYTE [rax], 123");
}



#[test]
fn ror3563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x5F", "ror BYTE [rax], 95");
}



#[test]
fn ror3564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x09", "ror BYTE [rax], 9");
}



#[test]
fn ror3565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x69", "ror BYTE [rax], 105");
}



#[test]
fn ror3566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn ror3567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x08", "ror QWORD [rax], cl");
}



#[test]
fn ror3568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x08", "ror QWORD [rax], cl");
}



#[test]
fn ror3569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn ror3570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn roundpd3571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, xmm12, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xD4, 0x21", "roundpd xmm2, xmm12, 33");
}



#[test]
fn roundpd3572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm1, xmm15, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xCF, 0x33", "roundpd xmm1, xmm15, 51");
}



#[test]
fn roundpd3573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, xmm1, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xD1, 0x1F", "roundpd xmm2, xmm1, 31");
}



#[test]
fn roundpd3574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm1, xmm0, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xC8, 0x0C", "roundpd xmm1, xmm0, 12");
}



#[test]
fn roundpd3575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, xmm4, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xC4, 0x7B", "roundpd xmm0, xmm4, 123");
}



#[test]
fn roundps3576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm1, xmm15, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x08, 0xCF, 0x43", "roundps xmm1, xmm15, 67");
}



#[test]
fn roundps3577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm12, xmm15, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x08, 0xE7, 0x40", "roundps xmm12, xmm15, 64");
}



#[test]
fn roundps3578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm15, xmm12, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x08, 0xFC, 0x3B", "roundps xmm15, xmm12, 59");
}



#[test]
fn roundps3579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm15, xmm4, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0xFC, 0x39", "roundps xmm15, xmm4, 57");
}



#[test]
fn roundps3580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, xmm1, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0xD9, 0x0D", "roundps xmm11, xmm1, 13");
}



#[test]
fn roundsd3581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm1, xmm2, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xCA, 0x0D", "roundsd xmm1, xmm2, 13");
}



#[test]
fn roundsd3582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, xmm3, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xE3, 0x2F", "roundsd xmm4, xmm3, 47");
}



#[test]
fn roundsd3583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm3, xmm15, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0B, 0xDF, 0x01", "roundsd xmm3, xmm15, 1");
}



#[test]
fn roundsd3584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm0, xmm3, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xC3, 0x5E", "roundsd xmm0, xmm3, 94");
}



#[test]
fn roundsd3585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm0, xmm0, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xC0, 0x20", "roundsd xmm0, xmm0, 32");
}



#[test]
fn roundss3586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm2, xmm12, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xD4, 0x5D", "roundss xmm2, xmm12, 93");
}



#[test]
fn roundss3587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm2, xmm1, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xD1, 0x65", "roundss xmm2, xmm1, 101");
}



#[test]
fn roundss3588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm0, xmm3, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xC3, 0x3D", "roundss xmm0, xmm3, 61");
}



#[test]
fn roundss3589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm2, xmm1, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xD1, 0x20", "roundss xmm2, xmm1, 32");
}



#[test]
fn roundss3590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, xmm12, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xE4, 0x2D", "roundss xmm4, xmm12, 45");
}



#[test]
fn rsldt3591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsldt3595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7B, 0x00", "rsldt [rax]");
}



#[test]
fn rsm3596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAA", "rsm");
}



#[test]
fn rsqrtps3597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xD1", "rsqrtps xmm2, xmm1");
}



#[test]
fn rsqrtps3598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x52, 0xDC", "rsqrtps xmm3, xmm12");
}



#[test]
fn rsqrtps3599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x52, 0xE7", "rsqrtps xmm12, xmm15");
}



#[test]
fn rsqrtps3600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x00", "rsqrtps xmm0, OWORD [rax]");
}



#[test]
fn rsqrtps3601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x52, 0x3A", "rsqrtps xmm15, OWORD [rdx]");
}



#[test]
fn rsqrtss3602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x52, 0xFF", "rsqrtss xmm15, xmm15");
}



#[test]
fn rsqrtss3603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0xFA", "rsqrtss xmm15, xmm2");
}



#[test]
fn rsqrtss3604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xC9", "rsqrtss xmm1, xmm1");
}



#[test]
fn rsqrtss3605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xC4", "rsqrtss xmm0, xmm4");
}



#[test]
fn rsqrtss3606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xCA", "rsqrtss xmm1, xmm2");
}



#[test]
fn rsts3607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn rsts3611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7D, 0x00", "rsts [rax]");
}



#[test]
fn sahf3612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9E", "sahf");
}



#[test]
fn sal3613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn sal3614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn sal3615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn sal3616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn sal3617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn sal3618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "sal rcx, cl");
}



#[test]
fn sal3621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn sal3623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x1E", "sal BYTE [rax], 30");
}



#[test]
fn sal3624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x2A", "sal al, 42");
}



#[test]
fn sal3625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x11", "sal BYTE [rax], 17");
}



#[test]
fn sal3626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x5F", "sal al, 95");
}



#[test]
fn sal3627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x6D", "sal BYTE [rax], 109");
}



#[test]
fn sal3628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x5A", "sal rcx, 90");
}



#[test]
fn sal3629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x06", "sal QWORD [rax], 6");
}



#[test]
fn sal3630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x7A", "sal QWORD [rax], 122");
}



#[test]
fn sal3631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x00", "sal QWORD [rax], 0");
}



#[test]
fn sal3632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x23", "sal rcx, 35");
}



#[test]
fn sar3633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x33", "sar QWORD [rax], 51");
}



#[test]
fn sar3634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x4E", "sar QWORD [rax], 78");
}



#[test]
fn sar3635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x79", "sar rcx, 121");
}



#[test]
fn sar3636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x10", "sar QWORD [rax], 16");
}



#[test]
fn sar3637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x19", "sar rcx, 25");
}



#[test]
fn sar3638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xF9", "sar rcx, cl");
}



#[test]
fn sar3641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xF9", "sar rcx, cl");
}



#[test]
fn sar3642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn sar3643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn sar3644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn sar3645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn sar3646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn sar3647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn sar3648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x56", "sar al, 86");
}



#[test]
fn sar3649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x27", "sar BYTE [rax], 39");
}



#[test]
fn sar3650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x5E", "sar BYTE [rax], 94");
}



#[test]
fn sar3651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x05", "sar al, 5");
}



#[test]
fn sar3652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD0, 0x38", "sar BYTE [rax], 1");
}



#[test]
fn sbb3653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x1C", "sbb rax, 28");
}



#[test]
fn sbb3654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x49", "sbb rcx, 73");
}



#[test]
fn sbb3655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x1C", "sbb rbx, 28");
}



#[test]
fn sbb3656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x17", "sbb rdx, 23");
}



#[test]
fn sbb3657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x02", "sbb rdx, 2");
}



#[test]
fn sbb3658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x1B", "sbb al, 27");
}



#[test]
fn sbb3659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x1D", "sbb al, 29");
}



#[test]
fn sbb3660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x4D", "sbb al, 77");
}



#[test]
fn sbb3661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x2E", "sbb al, 46");
}



#[test]
fn sbb3662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x25", "sbb al, 37");
}



#[test]
fn sbb3663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn sbb3668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC9", "sbb rcx, rcx");
}



#[test]
fn sbb3669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xCA", "sbb rdx, rcx");
}



#[test]
fn sbb3670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x00", "sbb rax, QWORD [rax]");
}



#[test]
fn sbb3671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC9", "sbb rcx, rcx");
}



#[test]
fn sbb3672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x00", "sbb rax, QWORD [rax]");
}



#[test]
fn sbb3673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x43", "sbb BYTE [rax], 67");
}



#[test]
fn sbb3674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x0C", "sbb BYTE [rax], 12");
}



#[test]
fn sbb3675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x70", "sbb BYTE [rax], 112");
}



#[test]
fn sbb3676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x2E", "sbb BYTE [rax], 46");
}



#[test]
fn sbb3677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x3C", "sbb BYTE [rax], 60");
}



#[test]
fn sbb3678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x26", "sbb rbx, 38");
}



#[test]
fn sbb3679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x58", "sbb rbx, 88");
}



#[test]
fn sbb3680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x5B", "sbb rax, 91");
}



#[test]
fn sbb3681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x64", "sbb rcx, 100");
}



#[test]
fn sbb3682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x2E", "sbb rbx, 46");
}



#[test]
fn sbb3683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x00", "sbb al, BYTE [rax]");
}



#[test]
fn sbb3684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC0", "sbb al, al");
}



#[test]
fn sbb3685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x10", "sbb dl, BYTE [rax]");
}



#[test]
fn sbb3686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC0", "sbb al, al");
}



#[test]
fn sbb3687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC2", "sbb dl, al");
}



#[test]
fn sbb3688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC9", "sbb cl, cl");
}



#[test]
fn sbb3689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC0", "sbb al, al");
}



#[test]
fn sbb3690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC8", "sbb al, cl");
}



#[test]
fn sbb3691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC9", "sbb cl, cl");
}



#[test]
fn sbb3692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC8", "sbb al, cl");
}



#[test]
fn sbb3693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x49", "sbb rax, 73");
}



#[test]
fn sbb3694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x76", "sbb ax, 118");
}



#[test]
fn sbb3695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x75", "sbb rax, 117");
}



#[test]
fn sbb3696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x62", "sbb rax, 98");
}



#[test]
fn sbb3697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x0B", "sbb ax, 11");
}



#[test]
fn sbb3698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x44", "sbb cl, 68");
}



#[test]
fn sbb3699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x61", "sbb al, 97");
}



#[test]
fn sbb3700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x12", "sbb cl, 18");
}



#[test]
fn sbb3701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x4F", "sbb cl, 79");
}



#[test]
fn sbb3702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x1D", "sbb cl, 29");
}



#[test]
fn sbb3703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x08", "sbb BYTE [rax], cl");
}



#[test]
fn sbb3704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x10", "sbb BYTE [rax], dl");
}



#[test]
fn sbb3705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x10", "sbb BYTE [rax], dl");
}



#[test]
fn sbb3706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x10", "sbb BYTE [rax], dl");
}



#[test]
fn sbb3707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x08", "sbb BYTE [rax], cl");
}



#[test]
fn scasb3708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAE", "scasb");
}



#[test]
fn scasd3709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAF", "scasd");
}



#[test]
fn scasq3710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAF", "scasq");
}



#[test]
fn scasw3711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAF", "scasw");
}



#[test]
fn sfence3712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xF8", "sfence");
}



#[test]
fn sgdt3713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sgdt3717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn sha1msg13718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC9, 0xCC", "sha1msg1 xmm1, xmm12");
}



#[test]
fn sha1msg13719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0xDB", "sha1msg1 xmm3, xmm3");
}



#[test]
fn sha1msg13720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC9, 0xE7", "sha1msg1 xmm12, xmm15");
}



#[test]
fn sha1msg13721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0x12", "sha1msg1 xmm2, OWORD [rdx]");
}



#[test]
fn sha1msg13722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC9, 0xFB", "sha1msg1 xmm15, xmm11");
}



#[test]
fn sha1msg23723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xD7", "sha1msg2 xmm2, xmm15");
}



#[test]
fn sha1msg23724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0x22", "sha1msg2 xmm12, OWORD [rdx]");
}



#[test]
fn sha1msg23725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xCF", "sha1msg2 xmm1, xmm15");
}



#[test]
fn sha1msg23726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0x12", "sha1msg2 xmm2, OWORD [rdx]");
}



#[test]
fn sha1msg23727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0xE1", "sha1msg2 xmm4, xmm1");
}



#[test]
fn sha1nexte3728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0x1A", "sha1nexte xmm3, OWORD [rdx]");
}



#[test]
fn sha1nexte3729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0xE2", "sha1nexte xmm4, xmm2");
}



#[test]
fn sha1nexte3730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC8, 0xF8", "sha1nexte xmm15, xmm0");
}



#[test]
fn sha1nexte3731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC8, 0x18", "sha1nexte xmm11, OWORD [rax]");
}



#[test]
fn sha1nexte3732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC8, 0xDF", "sha1nexte xmm11, xmm15");
}



#[test]
fn sha1rnds43733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm2, xmm4, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xD4, 0x17", "sha1rnds4 xmm2, xmm4, 23");
}



#[test]
fn sha1rnds43734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, OWORD [rax], 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0x18, 0x2F", "sha1rnds4 xmm3, OWORD [rax], 47");
}



#[test]
fn sha1rnds43735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, xmm3, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xDB, 0x70", "sha1rnds4 xmm3, xmm3, 112");
}



#[test]
fn sha1rnds43736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, OWORD [rax], 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0x18, 0x0E", "sha1rnds4 xmm3, OWORD [rax], 14");
}



#[test]
fn sha1rnds43737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm12, xmm11, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x3A, 0xCC, 0xE3, 0x7B", "sha1rnds4 xmm12, xmm11, 123");
}



#[test]
fn sha256msg13738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xE4", "sha256msg1 xmm4, xmm4");
}



#[test]
fn sha256msg13739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xE0", "sha256msg1 xmm4, xmm0");
}



#[test]
fn sha256msg13740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCC, 0xF9", "sha256msg1 xmm15, xmm1");
}



#[test]
fn sha256msg13741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x02", "sha256msg1 xmm0, OWORD [rdx]");
}



#[test]
fn sha256msg13742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x18", "sha256msg1 xmm3, OWORD [rax]");
}



#[test]
fn sha256msg23743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xD4", "sha256msg2 xmm2, xmm12");
}



#[test]
fn sha256msg23744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xE3", "sha256msg2 xmm12, xmm3");
}



#[test]
fn sha256msg23745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xDF", "sha256msg2 xmm3, xmm15");
}



#[test]
fn sha256msg23746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xC4", "sha256msg2 xmm0, xmm12");
}



#[test]
fn sha256msg23747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCD, 0xE3", "sha256msg2 xmm4, xmm3");
}



#[test]
fn sha256rnds23748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xC4", "sha256rnds2 xmm0, xmm12");
}



#[test]
fn sha256rnds23749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xD1", "sha256rnds2 xmm2, xmm1");
}



#[test]
fn sha256rnds23750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xD7", "sha256rnds2 xmm2, xmm15");
}



#[test]
fn sha256rnds23751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xC3", "sha256rnds2 xmm0, xmm3");
}



#[test]
fn sha256rnds23752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xDF", "sha256rnds2 xmm3, xmm15");
}



#[test]
fn shl3753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn shl3754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn shl3755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn shl3756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn shl3757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn shl3758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x02", "shl BYTE [rax], 2");
}



#[test]
fn shl3759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x1F", "shl al, 31");
}



#[test]
fn shl3760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x25", "shl BYTE [rax], 37");
}



#[test]
fn shl3761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x0C", "shl BYTE [rax], 12");
}



#[test]
fn shl3762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x43", "shl BYTE [rax], 67");
}



#[test]
fn shl3763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x18", "shl QWORD [rax], 24");
}



#[test]
fn shl3764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x26", "shl QWORD [rax], 38");
}



#[test]
fn shl3765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x43", "shl rcx, 67");
}



#[test]
fn shl3766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x44", "shl rcx, 68");
}



#[test]
fn shl3767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x78", "shl rcx, 120");
}



#[test]
fn shl3768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shl3769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shl3770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shl3771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shl3772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn shld3773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x00", "shld QWORD [rax], rax, cl");
}



#[test]
fn shld3774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xC9", "shld rcx, rcx, cl");
}



#[test]
fn shld3775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x10", "shld QWORD [rax], rdx, cl");
}



#[test]
fn shld3776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x08", "shld QWORD [rax], rcx, cl");
}



#[test]
fn shld3777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x00", "shld QWORD [rax], rax, cl");
}



#[test]
fn shld3778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rcx, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC9, 0x1C", "shld rcx, rcx, 28");
}



#[test]
fn shld3779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rax, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC1, 0x19", "shld rcx, rax, 25");
}



#[test]
fn shld3780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rcx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x08, 0x04", "shld QWORD [rax], rcx, 4");
}



#[test]
fn shld3781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rbx, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xD9, 0x02", "shld rcx, rbx, 2");
}



#[test]
fn shld3782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rdx, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xD1, 0x4E", "shld rcx, rdx, 78");
}



#[test]
fn shr3783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn shr3784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn shr3785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn shr3786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn shr3787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn shr3788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn shr3789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn shr3790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn shr3791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn shr3792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn shr3793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x66", "shr QWORD [rax], 102");
}



#[test]
fn shr3794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x1B", "shr rcx, 27");
}



#[test]
fn shr3795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x3C", "shr rcx, 60");
}



#[test]
fn shr3796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x77", "shr rcx, 119");
}



#[test]
fn shr3797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x46", "shr QWORD [rax], 70");
}



#[test]
fn shr3798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x3A", "shr al, 58");
}



#[test]
fn shr3799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x02", "shr al, 2");
}



#[test]
fn shr3800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x11", "shr BYTE [rax], 17");
}



#[test]
fn shr3801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x6F", "shr BYTE [rax], 111");
}



#[test]
fn shr3802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x2A", "shr al, 42");
}



#[test]
fn shrd3803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xC9", "shrd rcx, rcx, cl");
}



#[test]
fn shrd3804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xC1", "shrd rcx, rax, cl");
}



#[test]
fn shrd3805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD1", "shrd rcx, rdx, cl");
}



#[test]
fn shrd3806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x00", "shrd QWORD [rax], rax, cl");
}



#[test]
fn shrd3807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD1", "shrd rcx, rdx, cl");
}



#[test]
fn shrd3808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rcx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x08, 0x60", "shrd QWORD [rax], rcx, 96");
}



#[test]
fn shrd3809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rcx, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0xC9, 0x44", "shrd rcx, rcx, 68");
}



#[test]
fn shrd3810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rbx, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x18, 0x1A", "shrd QWORD [rax], rbx, 26");
}



#[test]
fn shrd3811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rcx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x08, 0x4D", "shrd QWORD [rax], rcx, 77");
}



#[test]
fn shrd3812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rdx, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x10, 0x4E", "shrd QWORD [rax], rdx, 78");
}



#[test]
fn shufpd3813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm11, xmm0, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0xD8, 0x13", "shufpd xmm11, xmm0, 19");
}



#[test]
fn shufpd3814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm11, xmm0, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0xD8, 0x0D", "shufpd xmm11, xmm0, 13");
}



#[test]
fn shufpd3815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm12, xmm1, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0xE1, 0x23", "shufpd xmm12, xmm1, 35");
}



#[test]
fn shufpd3816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm3, xmm1, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xD9, 0x26", "shufpd xmm3, xmm1, 38");
}



#[test]
fn shufpd3817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm2, xmm3, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xD3, 0x14", "shufpd xmm2, xmm3, 20");
}



#[test]
fn shufps3818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm4, xmm3, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xE3, 0x0D", "shufps xmm4, xmm3, 13");
}



#[test]
fn shufps3819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm3, OWORD [rdx], 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0x1A, 0x6E", "shufps xmm3, OWORD [rdx], 110");
}



#[test]
fn shufps3820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm1, xmm4, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xCC, 0x7E", "shufps xmm1, xmm4, 126");
}



#[test]
fn shufps3821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm11, xmm12, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC6, 0xDC, 0x06", "shufps xmm11, xmm12, 6");
}



#[test]
fn shufps3822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm4, OWORD [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0x20, 0x4F", "shufps xmm4, OWORD [rax], 79");
}



#[test]
fn sidt3823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn sidt3827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn skinit3828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; skinit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDE", "skinit");
}



#[test]
fn sldt3829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn sldt3834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn sldt3835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC3", "sldt rbx");
}



#[test]
fn sldt3836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn sldt3837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC0", "sldt rax");
}



#[test]
fn sldt3838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xC3", "sldt rbx");
}



#[test]
fn smint3839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smint
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38", "smint");
}



#[test]
fn smsw3840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn smsw3845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE3", "smsw rbx");
}



#[test]
fn smsw3846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE0", "smsw rax");
}



#[test]
fn smsw3847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE3", "smsw rbx");
}



#[test]
fn smsw3848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE3", "smsw rbx");
}



#[test]
fn smsw3849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE3", "smsw rbx");
}



#[test]
fn sqrtpd3850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x51, 0xDC", "sqrtpd xmm3, xmm12");
}



#[test]
fn sqrtpd3851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x51, 0xCC", "sqrtpd xmm1, xmm12");
}



#[test]
fn sqrtpd3852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x51, 0xD7", "sqrtpd xmm2, xmm15");
}



#[test]
fn sqrtpd3853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xC8", "sqrtpd xmm1, xmm0");
}



#[test]
fn sqrtpd3854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0xE3", "sqrtpd xmm12, xmm3");
}



#[test]
fn sqrtps3855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x0A", "sqrtps xmm1, OWORD [rdx]");
}



#[test]
fn sqrtps3856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x51, 0xDC", "sqrtps xmm3, xmm12");
}



#[test]
fn sqrtps3857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x51, 0xE3", "sqrtps xmm12, xmm11");
}



#[test]
fn sqrtps3858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xE2", "sqrtps xmm4, xmm2");
}



#[test]
fn sqrtps3859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x51, 0x22", "sqrtps xmm12, OWORD [rdx]");
}



#[test]
fn sqrtsd3860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0xCC", "sqrtsd xmm1, xmm4");
}



#[test]
fn sqrtsd3861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xD9", "sqrtsd xmm11, xmm1");
}



#[test]
fn sqrtsd3862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x51, 0xE3", "sqrtsd xmm12, xmm11");
}



#[test]
fn sqrtsd3863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xDB", "sqrtsd xmm11, xmm3");
}



#[test]
fn sqrtsd3864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x51, 0xFC", "sqrtsd xmm15, xmm12");
}



#[test]
fn sqrtss3865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0xFA", "sqrtss xmm15, xmm2");
}



#[test]
fn sqrtss3866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x51, 0xFF", "sqrtss xmm15, xmm15");
}



#[test]
fn sqrtss3867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x51, 0xDB", "sqrtss xmm11, xmm11");
}



#[test]
fn sqrtss3868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x51, 0xDC", "sqrtss xmm3, xmm12");
}



#[test]
fn sqrtss3869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0xD9", "sqrtss xmm11, xmm1");
}



#[test]
fn stac3870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCB", "stac");
}



#[test]
fn stc3871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF9", "stc");
}



#[test]
fn std3872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; std
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFD", "std");
}



#[test]
fn stgi3873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stgi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDC", "stgi");
}



#[test]
fn sti3874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sti
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFB", "sti");
}



#[test]
fn stmxcsr3875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stmxcsr3879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn stosb3880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAA", "stosb");
}



#[test]
fn stosd3881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAB", "stosd");
}



#[test]
fn stosq3882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAB", "stosq");
}



#[test]
fn stosw3883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAB", "stosw");
}



#[test]
fn str3884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn str3889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC8", "str rax");
}



#[test]
fn str3890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC8", "str rax");
}



#[test]
fn str3891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC8", "str rax");
}



#[test]
fn str3892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC8", "str rax");
}



#[test]
fn str3893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC9", "str rcx");
}



#[test]
fn sub3894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x00", "sub BYTE [rax], al");
}



#[test]
fn sub3895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x10", "sub BYTE [rax], dl");
}



#[test]
fn sub3896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x00", "sub BYTE [rax], al");
}



#[test]
fn sub3897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x08", "sub BYTE [rax], cl");
}



#[test]
fn sub3898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x10", "sub BYTE [rax], dl");
}



#[test]
fn sub3899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x3A", "sub al, 58");
}



#[test]
fn sub3900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x01", "sub al, 1");
}



#[test]
fn sub3901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x30", "sub al, 48");
}



#[test]
fn sub3902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x28", "sub al, 40");
}



#[test]
fn sub3903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x41", "sub al, 65");
}



#[test]
fn sub3904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xCA", "sub rdx, rcx");
}



#[test]
fn sub3905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC8", "sub rax, rcx");
}



#[test]
fn sub3906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC9", "sub rcx, rcx");
}



#[test]
fn sub3907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xCA", "sub rdx, rcx");
}



#[test]
fn sub3908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x18", "sub rbx, QWORD [rax]");
}



#[test]
fn sub3909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x10", "sub dl, BYTE [rax]");
}



#[test]
fn sub3910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC0", "sub al, al");
}



#[test]
fn sub3911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC0", "sub al, al");
}



#[test]
fn sub3912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x00", "sub al, BYTE [rax]");
}



#[test]
fn sub3913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x00", "sub al, BYTE [rax]");
}



#[test]
fn sub3914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x7B", "sub BYTE [rax], 123");
}



#[test]
fn sub3915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x33", "sub BYTE [rax], 51");
}



#[test]
fn sub3916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x25", "sub BYTE [rax], 37");
}



#[test]
fn sub3917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x3C", "sub BYTE [rax], 60");
}



#[test]
fn sub3918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x67", "sub BYTE [rax], 103");
}



#[test]
fn sub3919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x3C", "sub dl, 60");
}



#[test]
fn sub3920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x62", "sub al, 98");
}



#[test]
fn sub3921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x1F", "sub al, 31");
}



#[test]
fn sub3922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x43", "sub al, 67");
}



#[test]
fn sub3923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x7B", "sub al, 123");
}



#[test]
fn sub3924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xCA", "sub dl, cl");
}



#[test]
fn sub3925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xCA", "sub dl, cl");
}



#[test]
fn sub3926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC8", "sub al, cl");
}



#[test]
fn sub3927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xCA", "sub dl, cl");
}



#[test]
fn sub3928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC2", "sub dl, al");
}



#[test]
fn sub3929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn sub3934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x35", "sub eax, 53");
}



#[test]
fn sub3935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x15", "sub rax, 21");
}



#[test]
fn sub3936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x07", "sub rax, 7");
}



#[test]
fn sub3937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x4E", "sub ax, 78");
}



#[test]
fn sub3938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x6D", "sub ax, 109");
}



#[test]
fn sub3939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x17", "sub rax, 23");
}



#[test]
fn sub3940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x1E", "sub rdx, 30");
}



#[test]
fn sub3941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x2B", "sub rdx, 43");
}



#[test]
fn sub3942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x21", "sub rax, 33");
}



#[test]
fn sub3943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x5D", "sub rbx, 93");
}



#[test]
fn sub3944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x6B", "sub rcx, 107");
}



#[test]
fn sub3945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x28", "sub rax, 40");
}



#[test]
fn sub3946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x36", "sub rbx, 54");
}



#[test]
fn sub3947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x6A", "sub rax, 106");
}



#[test]
fn sub3948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x5F", "sub rbx, 95");
}



#[test]
fn subpd3949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0xCA", "subpd xmm1, xmm2");
}



#[test]
fn subpd3950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0xF9", "subpd xmm15, xmm1");
}



#[test]
fn subpd3951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0xF9", "subpd xmm15, xmm1");
}



#[test]
fn subpd3952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5C, 0xE7", "subpd xmm4, xmm15");
}



#[test]
fn subpd3953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0xCB", "subpd xmm1, xmm3");
}



#[test]
fn subps3954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0xC0", "subps xmm0, xmm0");
}



#[test]
fn subps3955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0xD1", "subps xmm2, xmm1");
}



#[test]
fn subps3956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5C, 0xF9", "subps xmm15, xmm1");
}



#[test]
fn subps3957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0xD4", "subps xmm2, xmm4");
}



#[test]
fn subps3958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5C, 0xD4", "subps xmm2, xmm12");
}



#[test]
fn subsd3959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xDB", "subsd xmm3, xmm3");
}



#[test]
fn subsd3960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0xFA", "subsd xmm15, xmm2");
}



#[test]
fn subsd3961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xE4", "subsd xmm12, xmm12");
}



#[test]
fn subsd3962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xDF", "subsd xmm11, xmm15");
}



#[test]
fn subsd3963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xFC", "subsd xmm15, xmm12");
}



#[test]
fn subss3964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xE2", "subss xmm4, xmm2");
}



#[test]
fn subss3965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xCB", "subss xmm1, xmm11");
}



#[test]
fn subss3966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xE7", "subss xmm4, xmm15");
}



#[test]
fn subss3967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0xE2", "subss xmm12, xmm2");
}



#[test]
fn subss3968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xDB", "subss xmm3, xmm3");
}



#[test]
fn svldt3969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt3970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt3971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt3972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svldt3973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7A, 0x00", "svldt [rax]");
}



#[test]
fn svts3974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts3975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts3976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts3977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn svts3978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; svts [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7C, 0x00", "svts [rax]");
}



#[test]
fn swapgs3979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; swapgs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF8", "swapgs");
}



#[test]
fn syscall3980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; syscall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x05", "syscall");
}



#[test]
fn sysenter3981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysenter
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x34", "sysenter");
}



#[test]
fn sysexit3982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysexit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x35", "sysexit");
}



#[test]
fn sysret3983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x07", "sysret");
}



#[test]
fn test3984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xC1", "test rcx, rax");
}



#[test]
fn test3985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x18", "test QWORD [rax], rbx");
}



#[test]
fn test3986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x08", "test QWORD [rax], rcx");
}



#[test]
fn test3987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xC1", "test rcx, rax");
}



#[test]
fn test3988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xC1", "test rcx, rax");
}



#[test]
fn test3989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x34, 0x00, 0x00, 0x00", "test rax, 52");
}



#[test]
fn test3990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x0C, 0x00, 0x00, 0x00", "test eax, 12");
}



#[test]
fn test3991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x35, 0x00, 0x00, 0x00", "test rax, 53");
}



#[test]
fn test3992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x7D, 0x00, 0x00, 0x00", "test rax, 125");
}



#[test]
fn test3993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x59, 0x00", "test ax, 89");
}



#[test]
fn test3994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x26", "test al, 38");
}



#[test]
fn test3995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x7D", "test al, 125");
}



#[test]
fn test3996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x61", "test al, 97");
}



#[test]
fn test3997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x3D", "test al, 61");
}



#[test]
fn test3998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x01", "test al, 1");
}



#[test]
fn test3999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x77, 0x00, 0x00, 0x00", "test rcx, 119");
}



#[test]
fn test4000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x7C, 0x00, 0x00, 0x00", "test rcx, 124");
}



#[test]
fn test4001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x5B, 0x00, 0x00, 0x00", "test QWORD [rax], 91");
}



#[test]
fn test4002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x17, 0x00, 0x00, 0x00", "test QWORD [rax], 23");
}



#[test]
fn test4003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x29, 0x00, 0x00, 0x00", "test rcx, 41");
}



#[test]
fn test4004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x4B", "test BYTE [rax], 75");
}



#[test]
fn test4005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x5A", "test al, 90");
}



#[test]
fn test4006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x68", "test al, 104");
}



#[test]
fn test4007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x7E", "test BYTE [rax], 126");
}



#[test]
fn test4008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x79", "test al, 121");
}



#[test]
fn test4009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test al, BYTE [rax]");
}



#[test]
fn test4010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x08", "test cl, BYTE [rax]");
}



#[test]
fn test4011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test al, BYTE [rax]");
}



#[test]
fn test4012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x08", "test cl, BYTE [rax]");
}



#[test]
fn test4013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x10", "test dl, BYTE [rax]");
}



#[test]
fn test4014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xD0", "test al, dl");
}



#[test]
fn test4015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC8", "test al, cl");
}



#[test]
fn test4016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC8", "test al, cl");
}



#[test]
fn test4017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test BYTE [rax], al");
}



#[test]
fn test4018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x08", "test BYTE [rax], cl");
}



#[test]
fn tzcnt4019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xC1", "tzcnt rax, rcx");
}



#[test]
fn tzcnt4020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xC9", "tzcnt rcx, rcx");
}



#[test]
fn tzcnt4021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x10", "tzcnt rdx, QWORD [rax]");
}



#[test]
fn tzcnt4022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xC1", "tzcnt rax, rcx");
}



#[test]
fn tzcnt4023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x00", "tzcnt rax, QWORD [rax]");
}



#[test]
fn ucomisd4024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0xE1", "ucomisd xmm12, xmm1");
}



#[test]
fn ucomisd4025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0xE2", "ucomisd xmm12, xmm2");
}



#[test]
fn ucomisd4026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xC0", "ucomisd xmm0, xmm0");
}



#[test]
fn ucomisd4027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xD2", "ucomisd xmm2, xmm2");
}



#[test]
fn ucomisd4028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x2E, 0xDB", "ucomisd xmm11, xmm11");
}



#[test]
fn ucomiss4029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2E, 0xD3", "ucomiss xmm2, xmm11");
}



#[test]
fn ucomiss4030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x2E, 0xDF", "ucomiss xmm11, xmm15");
}



#[test]
fn ucomiss4031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xC0", "ucomiss xmm0, xmm0");
}



#[test]
fn ucomiss4032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x2E, 0xFC", "ucomiss xmm15, xmm12");
}



#[test]
fn ucomiss4033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xC3", "ucomiss xmm0, xmm3");
}



#[test]
fn ud24034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2");
}



#[test]
fn ud2a4035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2a
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2a");
}



#[test]
fn unpckhpd4036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x15, 0xDF", "unpckhpd xmm3, xmm15");
}



#[test]
fn unpckhpd4037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xE4", "unpckhpd xmm12, xmm12");
}



#[test]
fn unpckhpd4038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xFC", "unpckhpd xmm15, xmm12");
}



#[test]
fn unpckhpd4039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x15, 0xE7", "unpckhpd xmm4, xmm15");
}



#[test]
fn unpckhpd4040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0x1A", "unpckhpd xmm3, OWORD [rdx]");
}



#[test]
fn unpckhps4041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0x08", "unpckhps xmm1, OWORD [rax]");
}



#[test]
fn unpckhps4042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0xD9", "unpckhps xmm3, xmm1");
}



#[test]
fn unpckhps4043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0xCB", "unpckhps xmm1, xmm3");
}



#[test]
fn unpckhps4044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0xC2", "unpckhps xmm0, xmm2");
}



#[test]
fn unpckhps4045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0x1A", "unpckhps xmm3, OWORD [rdx]");
}



#[test]
fn unpcklpd4046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0x10", "unpcklpd xmm2, OWORD [rax]");
}



#[test]
fn unpcklpd4047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0xD1", "unpcklpd xmm2, xmm1");
}



#[test]
fn unpcklpd4048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0xC3", "unpcklpd xmm0, xmm3");
}



#[test]
fn unpcklpd4049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x14, 0xFC", "unpcklpd xmm15, xmm12");
}



#[test]
fn unpcklpd4050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x14, 0xFF", "unpcklpd xmm15, xmm15");
}



#[test]
fn unpcklps4051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0xE2", "unpcklps xmm12, xmm2");
}



#[test]
fn unpcklps4052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0x1A", "unpcklps xmm3, OWORD [rdx]");
}



#[test]
fn unpcklps4053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0x0A", "unpcklps xmm1, OWORD [rdx]");
}



#[test]
fn unpcklps4054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x14, 0xCF", "unpcklps xmm1, xmm15");
}



#[test]
fn unpcklps4055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0x20", "unpcklps xmm12, OWORD [rax]");
}



#[test]
fn verr4056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verr4060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn verw4061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn verw4065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn vmcall4066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmcall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC1", "vmcall");
}



#[test]
fn vmclear4067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmclear4071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn vmfunc4072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmfunc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD4", "vmfunc");
}



#[test]
fn vmlaunch4073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmlaunch
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC2", "vmlaunch");
}



#[test]
fn vmload4074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmload
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDA", "vmload");
}



#[test]
fn vmmcall4075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmmcall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD9", "vmmcall");
}



#[test]
fn vmptrld4076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrld4080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn vmptrst4081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmptrst4085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn vmread4086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0x08", "vmread [rax], rcx");
}



#[test]
fn vmread4087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC8", "vmread rax, rcx");
}



#[test]
fn vmread4088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread [rax], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0x00", "vmread [rax], rax");
}



#[test]
fn vmread4089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC8", "vmread rax, rcx");
}



#[test]
fn vmread4090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC0", "vmread rax, rax");
}



#[test]
fn vmresume4091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmresume
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC3", "vmresume");
}



#[test]
fn vmrun4092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmrun
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD8", "vmrun");
}



#[test]
fn vmsave4093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmsave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDB", "vmsave");
}



#[test]
fn vmwrite4094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0x00", "vmwrite rax, [rax]");
}



#[test]
fn vmwrite4095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0x10", "vmwrite rdx, [rax]");
}



#[test]
fn vmwrite4096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xD0", "vmwrite rdx, rax");
}



#[test]
fn vmwrite4097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xD0", "vmwrite rdx, rax");
}



#[test]
fn vmwrite4098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xC0", "vmwrite rax, rax");
}



#[test]
fn vmxoff4099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxoff
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC4", "vmxoff");
}



#[test]
fn vmxon4100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn vmxon4104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}



#[test]
fn wbinvd4105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wbinvd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x09", "wbinvd");
}



#[test]
fn wrfsbase4106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD1", "wrfsbase rcx");
}



#[test]
fn wrfsbase4107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD3", "wrfsbase rbx");
}



#[test]
fn wrfsbase4108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD0", "wrfsbase rax");
}



#[test]
fn wrfsbase4109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD3", "wrfsbase rbx");
}



#[test]
fn wrfsbase4110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD1", "wrfsbase rcx");
}



#[test]
fn wrgsbase4111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn wrgsbase4112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn wrgsbase4113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn wrgsbase4114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD9", "wrgsbase rcx");
}



#[test]
fn wrgsbase4115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDB", "wrgsbase rbx");
}



#[test]
fn wrmsr4116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x30", "wrmsr");
}



#[test]
fn wrpkru4117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEF", "wrpkru");
}



#[test]
fn wrshr4118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn wrshr4119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn wrshr4120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0x00", "wrshr DWORD [rax]");
}



#[test]
fn wrshr4121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0x00", "wrshr DWORD [rax]");
}



#[test]
fn wrshr4122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrshr eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37, 0xC0", "wrshr eax");
}



#[test]
fn xabort4123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x20", "xabort 32");
}



#[test]
fn xabort4124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x35", "xabort 53");
}



#[test]
fn xabort4125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x4B", "xabort 75");
}



#[test]
fn xabort4126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x77", "xabort 119");
}



#[test]
fn xabort4127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x5D", "xabort 93");
}



#[test]
fn xadd4128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn xadd4133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x10", "xadd BYTE [rax], dl");
}



#[test]
fn xadd4134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x00", "xadd BYTE [rax], al");
}



#[test]
fn xadd4135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x00", "xadd BYTE [rax], al");
}



#[test]
fn xadd4136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x08", "xadd BYTE [rax], cl");
}



#[test]
fn xadd4137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x00", "xadd BYTE [rax], al");
}



#[test]
fn xadd4138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD2", "xadd dl, dl");
}



#[test]
fn xadd4139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC9", "xadd cl, cl");
}



#[test]
fn xadd4140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD0", "xadd al, dl");
}



#[test]
fn xadd4141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC2", "xadd dl, al");
}



#[test]
fn xadd4142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD1", "xadd cl, dl");
}



#[test]
fn xchg4143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg BYTE [rax], cl");
}



#[test]
fn xchg4144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg BYTE [rax], dl");
}



#[test]
fn xchg4145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg BYTE [rax], cl");
}



#[test]
fn xchg4146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg BYTE [rax], cl");
}



#[test]
fn xchg4147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg BYTE [rax], dl");
}



#[test]
fn xchg4148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg dl, BYTE [rax]");
}



#[test]
fn xchg4159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg al, BYTE [rax]");
}



#[test]
fn xchg4160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn xchg4161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg al, BYTE [rax]");
}



#[test]
fn xchg4162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg al, BYTE [rax]");
}



#[test]
fn xchg4163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC9", "xchg cl, cl");
}



#[test]
fn xchg4169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn xchg4170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC2", "xchg al, dl");
}



#[test]
fn xchg4171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC0", "xchg al, al");
}



#[test]
fn xchg4172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC0", "xchg al, al");
}



#[test]
fn xchg4173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn xchg4178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn xchg4179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn xchg4180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn xchg4181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn xchg4182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD2", "xchg dl, dl");
}



#[test]
fn xcryptcbc4183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptcbc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xD0", "xcryptcbc");
}



#[test]
fn xcryptcfb4184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptcfb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xE0", "xcryptcfb");
}



#[test]
fn xcryptctr4185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptctr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xD8", "xcryptctr");
}



#[test]
fn xcryptecb4186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptecb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xC8", "xcryptecb");
}



#[test]
fn xcryptofb4187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xcryptofb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA7, 0xE8", "xcryptofb");
}



#[test]
fn xend4188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xend
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD5", "xend");
}



#[test]
fn xgetbv4189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xgetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD0", "xgetbv");
}



#[test]
fn xlat4190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlat
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlat");
}



#[test]
fn xlatb4191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlatb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlatb");
}



#[test]
fn xor4192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC8", "xor al, cl");
}



#[test]
fn xor4193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC8", "xor al, cl");
}



#[test]
fn xor4194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn xor4195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD2", "xor dl, dl");
}



#[test]
fn xor4196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC9", "xor cl, cl");
}



#[test]
fn xor4197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x59", "xor rax, 89");
}



#[test]
fn xor4198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x6D", "xor rax, 109");
}



#[test]
fn xor4199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x66", "xor rdx, 102");
}



#[test]
fn xor4200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x6A", "xor rbx, 106");
}



#[test]
fn xor4201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x76", "xor rcx, 118");
}



#[test]
fn xor4202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xCB", "xor rbx, rcx");
}



#[test]
fn xor4203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x08", "xor rcx, QWORD [rax]");
}



#[test]
fn xor4204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xCA", "xor rdx, rcx");
}



#[test]
fn xor4205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xCB", "xor rbx, rcx");
}



#[test]
fn xor4206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x00", "xor rax, QWORD [rax]");
}



#[test]
fn xor4207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x35", "xor dl, 53");
}



#[test]
fn xor4208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x3B", "xor dl, 59");
}



#[test]
fn xor4209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x3F", "xor dl, 63");
}



#[test]
fn xor4210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x34", "xor dl, 52");
}



#[test]
fn xor4211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x77", "xor al, 119");
}



#[test]
fn xor4212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x18", "xor al, 24");
}



#[test]
fn xor4213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x36", "xor al, 54");
}



#[test]
fn xor4214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x71", "xor al, 113");
}



#[test]
fn xor4215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x2C", "xor al, 44");
}



#[test]
fn xor4216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x27", "xor al, 39");
}



#[test]
fn xor4217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x5A", "xor rax, 90");
}



#[test]
fn xor4218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x6B", "xor rcx, 107");
}



#[test]
fn xor4219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x21", "xor rbx, 33");
}



#[test]
fn xor4220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x2F", "xor rcx, 47");
}



#[test]
fn xor4221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x41", "xor rdx, 65");
}



#[test]
fn xor4222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x12", "xor rax, 18");
}



#[test]
fn xor4223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor ax, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF0, 0x41", "xor ax, 65");
}



#[test]
fn xor4224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor ax, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF0, 0x2F", "xor ax, 47");
}



#[test]
fn xor4225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor ax, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF0, 0x05", "xor ax, 5");
}



#[test]
fn xor4226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x33", "xor rax, 51");
}



#[test]
fn xor4227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x7D", "xor BYTE [rax], 125");
}



#[test]
fn xor4228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x79", "xor BYTE [rax], 121");
}



#[test]
fn xor4229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x2C", "xor BYTE [rax], 44");
}



#[test]
fn xor4230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x31", "xor BYTE [rax], 49");
}



#[test]
fn xor4231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x24", "xor BYTE [rax], 36");
}



#[test]
fn xor4232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x08", "xor cl, BYTE [rax]");
}



#[test]
fn xor4233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x10", "xor dl, BYTE [rax]");
}



#[test]
fn xor4234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x10", "xor dl, BYTE [rax]");
}



#[test]
fn xor4235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x08", "xor cl, BYTE [rax]");
}



#[test]
fn xor4236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn xor4237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x00", "xor BYTE [rax], al");
}



#[test]
fn xor4238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x00", "xor BYTE [rax], al");
}



#[test]
fn xor4239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn xor4240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn xor4241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x00", "xor BYTE [rax], al");
}



#[test]
fn xor4242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xor4246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn xorpd4247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xC4", "xorpd xmm0, xmm4");
}



#[test]
fn xorpd4248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x57, 0xDA", "xorpd xmm11, xmm2");
}



#[test]
fn xorpd4249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x57, 0x3A", "xorpd xmm15, OWORD [rdx]");
}



#[test]
fn xorpd4250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x57, 0xDF", "xorpd xmm3, xmm15");
}



#[test]
fn xorpd4251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x57, 0xD7", "xorpd xmm2, xmm15");
}



#[test]
fn xorps4252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0xDC", "xorps xmm11, xmm4");
}



#[test]
fn xorps4253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0x18", "xorps xmm3, OWORD [rax]");
}



#[test]
fn xorps4254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0x18", "xorps xmm11, OWORD [rax]");
}



#[test]
fn xorps4255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0xE1", "xorps xmm4, xmm1");
}



#[test]
fn xorps4256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0xE4", "xorps xmm12, xmm4");
}



#[test]
fn xrstor4257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor4261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn xrstor644262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstor644266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn xrstors644267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xrstors644271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn xsave4272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave4276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn xsave644277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsave644281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn xsavec644282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsavec644286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn xsaveopt644287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaveopt644291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn xsaves644292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsaves644296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn xsetbv4297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD1", "xsetbv");
}



#[test]
fn xsha14298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsha1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA6, 0xC8", "xsha1");
}



#[test]
fn xsha2564299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsha256
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xA6, 0xD0", "xsha256");
}



#[test]
fn xstore4300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xstore
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA7, 0xC0", "xstore");
}



#[test]
fn xtest4301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xtest
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD6", "xtest");
}


