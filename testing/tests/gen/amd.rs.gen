
#[test]
fn enc_amd_clzero4137() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; clzero
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFC", "clzero");
}



#[test]
fn enc_amd_invlpga4138() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; invlpga
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga");
}



#[test]
fn enc_amd_invlpga4139() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; invlpga rax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDF", "invlpga rax, ecx");
}



#[test]
fn enc_amd_lfence4140() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; lfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xE8", "lfence");
}



#[test]
fn enc_amd_llwpcb4141() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; llwpcb rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xC0", "llwpcb rax");
}



#[test]
fn enc_amd_llwpcb4142() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; llwpcb rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xC3", "llwpcb rbx");
}



#[test]
fn enc_amd_llwpcb4143() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; llwpcb rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xC1", "llwpcb rcx");
}



#[test]
fn enc_amd_lzcnt4144() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; lzcnt rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0x14, 0x42", "lzcnt rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_amd_lzcnt4145() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; lzcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xC9", "lzcnt rcx, rcx");
}



#[test]
fn enc_amd_lzcnt4146() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; lzcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xD1", "lzcnt rdx, rcx");
}



#[test]
fn enc_amd_lzcnt4147() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; lzcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBD, 0xC1", "lzcnt rax, rcx");
}



#[test]
fn enc_amd_mfence4148() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; mfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xF0", "mfence");
}



#[test]
fn enc_amd_monitorx4149() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; monitorx rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx rax, ecx, edx");
}



#[test]
fn enc_amd_monitorx4150() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; monitorx ax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx ax, ecx, edx");
}



#[test]
fn enc_amd_monitorx4151() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; monitorx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFA", "monitorx");
}



#[test]
fn enc_amd_mwaitx4152() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; mwaitx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx");
}



#[test]
fn enc_amd_mwaitx4153() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; mwaitx eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xFB", "mwaitx eax, ecx");
}



#[test]
fn enc_amd_sfence4154() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; sfence
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0xF8", "sfence");
}



#[test]
fn enc_amd_slwpcb4155() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; slwpcb rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xCA", "slwpcb rdx");
}



#[test]
fn enc_amd_slwpcb4156() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; slwpcb rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xCB", "slwpcb rbx");
}



#[test]
fn enc_amd_slwpcb4157() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; slwpcb rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xC9", "slwpcb rcx");
}



#[test]
fn enc_amd_slwpcb4158() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; slwpcb rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x12, 0xC8", "slwpcb rax");
}



#[test]
fn enc_amd_syscall4159() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; syscall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x05", "syscall");
}



#[test]
fn enc_amd_sysret4160() {
     let mut ops = dynasmrt::x64::Assembler::new().unwrap();
     dynasm!(ops
             ; sysret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x07", "sysret");
}


