
#[test]
fn enc_avx_vaddsd1001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0x58, 0xE3", "vaddsd xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vaddsd1002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm15, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x58, 0xFC", "vaddsd xmm15, xmm4, xmm4");
}



#[test]
fn enc_avx_vaddsd1003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x58, 0xDA", "vaddsd xmm3, xmm1, xmm2");
}



#[test]
fn enc_avx_vaddsd1004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm4, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x58, 0xE2", "vaddsd xmm4, xmm4, xmm2");
}



#[test]
fn enc_avx_vaddsd1005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm0, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x58, 0xC4", "vaddsd xmm0, xmm12, xmm12");
}



#[test]
fn enc_avx_vaddsd1006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm15, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x58, 0x78, 0x10", "vaddsd xmm15, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd1007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm1, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x58, 0x08", "vaddsd xmm1, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vaddsd1008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x58, 0x20", "vaddsd xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vaddsd1009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x58, 0x1C, 0x42", "vaddsd xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddsd1010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x58, 0x58, 0x10", "vaddsd xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddss1011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x58, 0xE1", "vaddss xmm12, xmm4, xmm1");
}



#[test]
fn enc_avx_vaddss1012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm4, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x58, 0xE2", "vaddss xmm4, xmm15, xmm2");
}



#[test]
fn enc_avx_vaddss1013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm12, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x58, 0xE2", "vaddss xmm12, xmm15, xmm2");
}



#[test]
fn enc_avx_vaddss1014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm12, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x58, 0xE3", "vaddss xmm12, xmm15, xmm3");
}



#[test]
fn enc_avx_vaddss1015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x58, 0xCC", "vaddss xmm1, xmm3, xmm12");
}



#[test]
fn enc_avx_vaddss1016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x58, 0x0C, 0x42", "vaddss xmm1, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddss1017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm3, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x58, 0x58, 0x10", "vaddss xmm3, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddss1018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm4, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x58, 0x20", "vaddss xmm4, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss1019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x58, 0x0C, 0x42", "vaddss xmm1, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddss1020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm12, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x58, 0x24, 0x42", "vaddss xmm12, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesdec1021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm12, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xDE, 0xE4", "vaesdec xmm12, xmm0, xmm12");
}



#[test]
fn enc_avx_vaesdec1022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm15, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xDE, 0xFA", "vaesdec xmm15, xmm2, xmm2");
}



#[test]
fn enc_avx_vaesdec1023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm12, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xDE, 0xE3", "vaesdec xmm12, xmm0, xmm3");
}



#[test]
fn enc_avx_vaesdec1024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xDE, 0xCC", "vaesdec xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vaesdec1025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0xDE, 0xDC", "vaesdec xmm11, xmm4, xmm12");
}



#[test]
fn enc_avx_vaesdeclast1026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xDF, 0xDC", "vaesdeclast xmm3, xmm4, xmm4");
}



#[test]
fn enc_avx_vaesdeclast1027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm15, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x01, 0xDF, 0xFC", "vaesdeclast xmm15, xmm15, xmm12");
}



#[test]
fn enc_avx_vaesdeclast1028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm1, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xDF, 0xCC", "vaesdeclast xmm1, xmm15, xmm12");
}



#[test]
fn enc_avx_vaesdeclast1029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm15, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xDF, 0xFC", "vaesdeclast xmm15, xmm1, xmm4");
}



#[test]
fn enc_avx_vaesdeclast1030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm2, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xDF, 0xD3", "vaesdeclast xmm2, xmm1, xmm11");
}



#[test]
fn enc_avx_vaesenc1031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm12, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xDC, 0xE3", "vaesenc xmm12, xmm4, xmm3");
}



#[test]
fn enc_avx_vaesenc1032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xDC, 0xDB", "vaesenc xmm3, xmm3, xmm3");
}



#[test]
fn enc_avx_vaesenc1033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm4, xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xDC, 0x20", "vaesenc xmm4, xmm11, OWORD [rax]");
}



#[test]
fn enc_avx_vaesenc1034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm12, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xDC, 0xE4", "vaesenc xmm12, xmm0, xmm12");
}



#[test]
fn enc_avx_vaesenc1035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm0, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xDC, 0xC0", "vaesenc xmm0, xmm15, xmm0");
}



#[test]
fn enc_avx_vaesenclast1036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm15, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0xDD, 0xFC", "vaesenclast xmm15, xmm2, xmm12");
}



#[test]
fn enc_avx_vaesenclast1037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm11, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xDD, 0xDB", "vaesenclast xmm11, xmm3, xmm11");
}



#[test]
fn enc_avx_vaesenclast1038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm1, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xDD, 0xC9", "vaesenclast xmm1, xmm3, xmm1");
}



#[test]
fn enc_avx_vaesenclast1039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm3, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xDD, 0xDF", "vaesenclast xmm3, xmm3, xmm15");
}



#[test]
fn enc_avx_vaesenclast1040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm0, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDD, 0xC0", "vaesenclast xmm0, xmm1, xmm0");
}



#[test]
fn enc_avx_vaesimc1041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0x20", "vaesimc xmm4, OWORD [rax]");
}



#[test]
fn enc_avx_vaesimc1042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xC9", "vaesimc xmm1, xmm1");
}



#[test]
fn enc_avx_vaesimc1043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xCA", "vaesimc xmm1, xmm2");
}



#[test]
fn enc_avx_vaesimc1044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xD3", "vaesimc xmm2, xmm3");
}



#[test]
fn enc_avx_vaesimc1045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xDB, 0xE4", "vaesimc xmm4, xmm12");
}



#[test]
fn enc_avx_vaeskeygenassist1046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm3, xmm3, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0xDB, 0x50", "vaeskeygenassist xmm3, xmm3, 80");
}



#[test]
fn enc_avx_vaeskeygenassist1047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm4, xmm0, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0xE0, 0x62", "vaeskeygenassist xmm4, xmm0, 98");
}



#[test]
fn enc_avx_vaeskeygenassist1048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm15, xmm15, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0xDF, 0xFF, 0x65", "vaeskeygenassist xmm15, xmm15, 101");
}



#[test]
fn enc_avx_vaeskeygenassist1049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm11, xmm2, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0xDF, 0xDA, 0x0A", "vaeskeygenassist xmm11, xmm2, 10");
}



#[test]
fn enc_avx_vaeskeygenassist1050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm2, OWORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0x10, 0x42", "vaeskeygenassist xmm2, OWORD [rax], 66");
}



#[test]
fn enc_avx_vbroadcastf1281051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x20", "vbroadcastf128 ymm4, OWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastf1281052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x0C, 0x42", "vbroadcastf128 ymm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastf1281053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm3, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x58, 0x10", "vbroadcastf128 ymm3, OWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastf1281054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x1A, 0x3C, 0x42", "vbroadcastf128 ymm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x24, 0x42", "vbroadcastsd ymm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x60, 0x10", "vbroadcastsd ymm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastsd1057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x40, 0x10", "vbroadcastsd ymm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastsd1058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0x58, 0x10", "vbroadcastsd ymm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastsd1059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xE3", "vbroadcastsd ymm4, xmm3");
}



#[test]
fn enc_avx_vbroadcastsd1060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xD0", "vbroadcastsd ymm2, xmm0");
}



#[test]
fn enc_avx_vbroadcastsd1061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xD8", "vbroadcastsd ymm3, xmm0");
}



#[test]
fn enc_avx_vbroadcastsd1062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x7D, 0x19, 0xE7", "vbroadcastsd ymm12, xmm15");
}



#[test]
fn enc_avx_vbroadcastsd1063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xC4", "vbroadcastsd ymm0, xmm4");
}



#[test]
fn enc_avx_vcomisd1064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2F, 0xE4", "vcomisd xmm12, xmm12");
}



#[test]
fn enc_avx_vcomisd1065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2F, 0xE7", "vcomisd xmm12, xmm15");
}



#[test]
fn enc_avx_vcomisd1066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xD9", "vcomisd xmm3, xmm1");
}



#[test]
fn enc_avx_vcomisd1067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2F, 0xFF", "vcomisd xmm15, xmm15");
}



#[test]
fn enc_avx_vcomisd1068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xE4", "vcomisd xmm12, xmm4");
}



#[test]
fn enc_avx_vcomisd1069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x60, 0x10", "vcomisd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomisd1070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x50, 0x10", "vcomisd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomisd1071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x3C, 0x42", "vcomisd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomisd1072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x14, 0x42", "vcomisd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomisd1073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x24, 0x42", "vcomisd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2F, 0xCF", "vcomiss xmm1, xmm15");
}



#[test]
fn enc_avx_vcomiss1075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2F, 0xDF", "vcomiss xmm3, xmm15");
}



#[test]
fn enc_avx_vcomiss1076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x2F, 0xDB", "vcomiss xmm11, xmm11");
}



#[test]
fn enc_avx_vcomiss1077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0xE1", "vcomiss xmm4, xmm1");
}



#[test]
fn enc_avx_vcomiss1078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x2F, 0xFB", "vcomiss xmm15, xmm11");
}



#[test]
fn enc_avx_vcomiss1079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x0C, 0x42", "vcomiss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x1C, 0x42", "vcomiss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x04, 0x42", "vcomiss xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x24, 0x42", "vcomiss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x78, 0x10", "vcomiss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd1084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x3C, 0x42", "vcvtdq2pd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd1085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x60, 0x10", "vcvtdq2pd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd1086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x1C, 0x42", "vcvtdq2pd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd1087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x50, 0x10", "vcvtdq2pd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd1088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x58, 0x10", "vcvtdq2pd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x18", "vcvtph2ps xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtph2ps1090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x24, 0x42", "vcvtph2ps xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtph2ps1091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x60, 0x10", "vcvtph2ps xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x14, 0x42", "vcvtph2ps xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtph2ps1093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x04, 0x42", "vcvtph2ps xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtps2pd1094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x60, 0x10", "vcvtps2pd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd1095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x40, 0x10", "vcvtps2pd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd1096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x18", "vcvtps2pd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd1097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x38", "vcvtps2pd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2ph1098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm0, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x04, 0x42, 0x3D", "vcvtps2ph QWORD [rax * 2 + rdx], xmm0, 61");
}



#[test]
fn enc_avx_vcvtps2ph1099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm1, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x0C, 0x42, 0x69", "vcvtps2ph QWORD [rax * 2 + rdx], xmm1, 105");
}



#[test]
fn enc_avx_vcvtps2ph1100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax + 16], xmm0, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x40, 0x10, 0x43", "vcvtps2ph QWORD [rax + 16], xmm0, 67");
}



#[test]
fn enc_avx_vcvtps2ph1101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax + 16], xmm0, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x40, 0x10, 0x4D", "vcvtps2ph QWORD [rax + 16], xmm0, 77");
}



#[test]
fn enc_avx_vcvtps2ph1102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm15, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x3C, 0x42, 0x63", "vcvtps2ph QWORD [rax * 2 + rdx], xmm15, 99");
}



#[test]
fn enc_avx_vcvtsd2si1103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xD1", "vcvtsd2si rdx, xmm1");
}



#[test]
fn enc_avx_vcvtsd2si1104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC9", "vcvtsd2si rcx, xmm1");
}



#[test]
fn enc_avx_vcvtsd2si1105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC8", "vcvtsd2si rcx, xmm0");
}



#[test]
fn enc_avx_vcvtsd2si1106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC2", "vcvtsd2si rax, xmm2");
}



#[test]
fn enc_avx_vcvtsd2si1107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x04, 0x42", "vcvtsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2si1108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x1C, 0x42", "vcvtsd2si rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2si1109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rdx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x50, 0x10", "vcvtsd2si rdx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss1110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5A, 0xF8", "vcvtsd2ss xmm15, xmm11, xmm0");
}



#[test]
fn enc_avx_vcvtsd2ss1111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5A, 0xC9", "vcvtsd2ss xmm1, xmm11, xmm1");
}



#[test]
fn enc_avx_vcvtsd2ss1112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5A, 0xC3", "vcvtsd2ss xmm0, xmm11, xmm3");
}



#[test]
fn enc_avx_vcvtsd2ss1113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x5A, 0xCC", "vcvtsd2ss xmm1, xmm3, xmm12");
}



#[test]
fn enc_avx_vcvtsd2ss1114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm4, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5A, 0xE7", "vcvtsd2ss xmm4, xmm1, xmm15");
}



#[test]
fn enc_avx_vcvtsd2ss1115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5A, 0x14, 0x42", "vcvtsd2ss xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2ss1116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5A, 0x60, 0x10", "vcvtsd2ss xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss1117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm4, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5A, 0x24, 0x42", "vcvtsd2ss xmm4, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2ss1118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5A, 0x10", "vcvtsd2ss xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2ss1119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm1, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5A, 0x0C, 0x42", "vcvtsd2ss xmm1, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm12, xmm12, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0x9B, 0x2A, 0xE1", "vcvtsi2sd xmm12, xmm12, rcx");
}



#[test]
fn enc_avx_vcvtsi2sd1121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm15, xmm4, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xDB, 0x2A, 0xF9", "vcvtsi2sd xmm15, xmm4, rcx");
}



#[test]
fn enc_avx_vcvtsi2sd1122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm12, xmm2, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xEB, 0x2A, 0xE1", "vcvtsi2sd xmm12, xmm2, rcx");
}



#[test]
fn enc_avx_vcvtsi2sd1123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xE3, 0x2A, 0x04, 0x42", "vcvtsi2sd xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm3, xmm11, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xA2, 0x2A, 0xD9", "vcvtsi2ss xmm3, xmm11, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss1125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xDA, 0x2A, 0x24, 0x42", "vcvtsi2ss xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm1, xmm2, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xEA, 0x2A, 0xC9", "vcvtsi2ss xmm1, xmm2, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss1127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm4, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xE2, 0x2A, 0x24, 0x42", "vcvtsi2ss xmm4, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm2, xmm15, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0x82, 0x2A, 0xD1", "vcvtsi2ss xmm2, xmm15, rcx");
}



#[test]
fn enc_avx_vcvtss2sd1129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm2, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x5A, 0xD3", "vcvtss2sd xmm2, xmm0, xmm11");
}



#[test]
fn enc_avx_vcvtss2sd1130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm3, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x5A, 0xDB", "vcvtss2sd xmm3, xmm0, xmm11");
}



#[test]
fn enc_avx_vcvtss2sd1131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm1, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0x5A, 0xCB", "vcvtss2sd xmm1, xmm15, xmm11");
}



#[test]
fn enc_avx_vcvtss2sd1132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm12, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5A, 0xE3", "vcvtss2sd xmm12, xmm15, xmm3");
}



#[test]
fn enc_avx_vcvtss2sd1133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5A, 0xC4", "vcvtss2sd xmm0, xmm0, xmm4");
}



#[test]
fn enc_avx_vcvtss2sd1134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm3, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5A, 0x58, 0x10", "vcvtss2sd xmm3, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2sd1135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm1, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5A, 0x08", "vcvtss2sd xmm1, xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2sd1136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm15, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5A, 0x3C, 0x42", "vcvtss2sd xmm15, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm1, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5A, 0x0C, 0x42", "vcvtss2sd xmm1, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm0, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5A, 0x04, 0x42", "vcvtss2sd xmm0, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xC4", "vcvtss2si rax, xmm4");
}



#[test]
fn enc_avx_vcvtss2si1140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xD9", "vcvtss2si rbx, xmm1");
}



#[test]
fn enc_avx_vcvtss2si1141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2D, 0xCC", "vcvtss2si rcx, xmm12");
}



#[test]
fn enc_avx_vcvtss2si1142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xDB", "vcvtss2si rbx, xmm3");
}



#[test]
fn enc_avx_vcvtss2si1143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2D, 0xC3", "vcvtss2si rax, xmm11");
}



#[test]
fn enc_avx_vcvtss2si1144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x1C, 0x42", "vcvtss2si rbx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x14, 0x42", "vcvtss2si rdx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x58, 0x10", "vcvtss2si rbx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2si1147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x04, 0x42", "vcvtss2si rax, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x50, 0x10", "vcvtss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si1149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2C, 0xC3", "vcvttsd2si rax, xmm11");
}



#[test]
fn enc_avx_vcvttsd2si1150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xD1", "vcvttsd2si rdx, xmm1");
}



#[test]
fn enc_avx_vcvttsd2si1151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xC2", "vcvttsd2si rax, xmm2");
}



#[test]
fn enc_avx_vcvttsd2si1152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xC9", "vcvttsd2si rcx, xmm1");
}



#[test]
fn enc_avx_vcvttsd2si1153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x18", "vcvttsd2si rbx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvttsd2si1154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x48, 0x10", "vcvttsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si1155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x1C, 0x42", "vcvttsd2si rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttsd2si1156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x04, 0x42", "vcvttsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttsd2si1157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x00", "vcvttsd2si rax, QWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si1158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xDC", "vcvttss2si rbx, xmm12");
}



#[test]
fn enc_avx_vcvttss2si1159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xD3", "vcvttss2si rdx, xmm3");
}



#[test]
fn enc_avx_vcvttss2si1160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xC4", "vcvttss2si rax, xmm4");
}



#[test]
fn enc_avx_vcvttss2si1161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xC3", "vcvttss2si rax, xmm11");
}



#[test]
fn enc_avx_vcvttss2si1162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rcx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xCB", "vcvttss2si rcx, xmm11");
}



#[test]
fn enc_avx_vcvttss2si1163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x58, 0x10", "vcvttss2si rbx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttss2si1164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x18", "vcvttss2si rbx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si1165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x1C, 0x42", "vcvttss2si rbx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttss2si1166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x10", "vcvttss2si rdx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si1167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x0C, 0x42", "vcvttss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd1168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5E, 0xC4", "vdivsd xmm0, xmm3, xmm4");
}



#[test]
fn enc_avx_vdivsd1169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm12, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5E, 0xE1", "vdivsd xmm12, xmm12, xmm1");
}



#[test]
fn enc_avx_vdivsd1170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5E, 0xDA", "vdivsd xmm11, xmm3, xmm2");
}



#[test]
fn enc_avx_vdivsd1171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm12, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5E, 0xE1", "vdivsd xmm12, xmm0, xmm1");
}



#[test]
fn enc_avx_vdivsd1172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5E, 0xD3", "vdivsd xmm2, xmm12, xmm3");
}



#[test]
fn enc_avx_vdivsd1173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5E, 0x78, 0x10", "vdivsd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd1174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5E, 0x58, 0x10", "vdivsd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd1175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5E, 0x00", "vdivsd xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vdivsd1176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5E, 0x1C, 0x42", "vdivsd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd1177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm12, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5E, 0x20", "vdivsd xmm12, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vdivss1178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm3, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5E, 0xD9", "vdivss xmm3, xmm4, xmm1");
}



#[test]
fn enc_avx_vdivss1179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x5E, 0xE2", "vdivss xmm12, xmm4, xmm2");
}



#[test]
fn enc_avx_vdivss1180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm4, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x5E, 0xE4", "vdivss xmm4, xmm1, xmm12");
}



#[test]
fn enc_avx_vdivss1181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm3, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5E, 0xD8", "vdivss xmm3, xmm3, xmm0");
}



#[test]
fn enc_avx_vdivss1182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm3, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x5E, 0xDF", "vdivss xmm3, xmm2, xmm15");
}



#[test]
fn enc_avx_vdivss1183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm4, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5E, 0x20", "vdivss xmm4, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vdivss1184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm2, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5E, 0x14, 0x42", "vdivss xmm2, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm12, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5E, 0x20", "vdivss xmm12, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vdivss1186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm15, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5E, 0x38", "vdivss xmm15, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vdivss1187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm15, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x5E, 0x38", "vdivss xmm15, xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vdppd1188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm2, xmm2, OWORD [rax * 2 + rdx], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x41, 0x14, 0x42, 0x49", "vdppd xmm2, xmm2, OWORD [rax * 2 + rdx], 73");
}



#[test]
fn enc_avx_vdppd1189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm15, xmm11, xmm3, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x41, 0xFB, 0x5C", "vdppd xmm15, xmm11, xmm3, 92");
}



#[test]
fn enc_avx_vdppd1190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm1, xmm1, xmm4, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x41, 0xCC, 0x3A", "vdppd xmm1, xmm1, xmm4, 58");
}



#[test]
fn enc_avx_vdppd1191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm1, xmm0, OWORD [rax * 2 + rdx], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x41, 0x0C, 0x42, 0x41", "vdppd xmm1, xmm0, OWORD [rax * 2 + rdx], 65");
}



#[test]
fn enc_avx_vdppd1192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm0, xmm15, xmm11, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x01, 0x41, 0xC3, 0x43", "vdppd xmm0, xmm15, xmm11, 67");
}



#[test]
fn enc_avx_vextractf1281193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm3, ymm1, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xCB, 0x40", "vextractf128 xmm3, ymm1, 64");
}



#[test]
fn enc_avx_vextractf1281194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm1, ymm2, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xD1, 0x42", "vextractf128 xmm1, ymm2, 66");
}



#[test]
fn enc_avx_vextractf1281195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 OWORD [rax], ymm1, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0x08, 0x49", "vextractf128 OWORD [rax], ymm1, 73");
}



#[test]
fn enc_avx_vextractf1281196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm12, ymm15, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x7D, 0x19, 0xFC, 0x6C", "vextractf128 xmm12, ymm15, 108");
}



#[test]
fn enc_avx_vextractf1281197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 OWORD [rax * 2 + rdx], ymm15, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x19, 0x3C, 0x42, 0x51", "vextractf128 OWORD [rax * 2 + rdx], ymm15, 81");
}



#[test]
fn enc_avx_vextractps1198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm2, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0x10, 0x6F", "vextractps DWORD [rax], xmm2, 111");
}



#[test]
fn enc_avx_vextractps1199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps eax, xmm11, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0xD8, 0x19", "vextractps eax, xmm11, 25");
}



#[test]
fn enc_avx_vextractps1200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm15, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0x38, 0x10", "vextractps DWORD [rax], xmm15, 16");
}



#[test]
fn enc_avx_vextractps1201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps eax, xmm11, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0xD8, 0x61", "vextractps eax, xmm11, 97");
}



#[test]
fn enc_avx_vextractps1202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps eax, xmm2, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xD0, 0x4E", "vextractps eax, xmm2, 78");
}



#[test]
fn enc_avx_vinsertf1281203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm15, ymm15, OWORD [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x05, 0x18, 0x38, 0x11", "vinsertf128 ymm15, ymm15, OWORD [rax], 17");
}



#[test]
fn enc_avx_vinsertf1281204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm15, ymm15, xmm12, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x05, 0x18, 0xFC, 0x22", "vinsertf128 ymm15, ymm15, xmm12, 34");
}



#[test]
fn enc_avx_vinsertf1281205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm15, ymm0, xmm0, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x18, 0xF8, 0x06", "vinsertf128 ymm15, ymm0, xmm0, 6");
}



#[test]
fn enc_avx_vinsertf1281206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm4, ymm2, xmm12, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x6D, 0x18, 0xE4, 0x1F", "vinsertf128 ymm4, ymm2, xmm12, 31");
}



#[test]
fn enc_avx_vinsertf1281207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm2, ymm11, OWORD [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x25, 0x18, 0x10, 0x6F", "vinsertf128 ymm2, ymm11, OWORD [rax], 111");
}



#[test]
fn enc_avx_vinsertps1208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm15, xmm12, xmm15, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x19, 0x21, 0xFF, 0x29", "vinsertps xmm15, xmm12, xmm15, 41");
}



#[test]
fn enc_avx_vinsertps1209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm15, xmm2, xmm2, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x21, 0xFA, 0x13", "vinsertps xmm15, xmm2, xmm2, 19");
}



#[test]
fn enc_avx_vinsertps1210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm11, xmm12, xmm11, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x19, 0x21, 0xDB, 0x05", "vinsertps xmm11, xmm12, xmm11, 5");
}



#[test]
fn enc_avx_vinsertps1211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm4, xmm4, xmm15, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x59, 0x21, 0xE7, 0x1C", "vinsertps xmm4, xmm4, xmm15, 28");
}



#[test]
fn enc_avx_vinsertps1212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm1, xmm4, xmm2, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x21, 0xCA, 0x07", "vinsertps xmm1, xmm4, xmm2, 7");
}



#[test]
fn enc_avx_vinsertps1213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm2, xmm1, DWORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x21, 0x10, 0x42", "vinsertps xmm2, xmm1, DWORD [rax], 66");
}



#[test]
fn enc_avx_vinsertps1214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm2, xmm11, DWORD [rax + 16], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x21, 0x50, 0x10, 0x17", "vinsertps xmm2, xmm11, DWORD [rax + 16], 23");
}



#[test]
fn enc_avx_vinsertps1215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm12, xmm12, DWORD [rax + 16], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x21, 0x60, 0x10, 0x7E", "vinsertps xmm12, xmm12, DWORD [rax + 16], 126");
}



#[test]
fn enc_avx_vinsertps1216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm11, xmm12, DWORD [rax * 2 + rdx], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x21, 0x1C, 0x42, 0x5A", "vinsertps xmm11, xmm12, DWORD [rax * 2 + rdx], 90");
}



#[test]
fn enc_avx_vinsertps1217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm15, xmm3, DWORD [rax * 2 + rdx], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x21, 0x3C, 0x42, 0x57", "vinsertps xmm15, xmm3, DWORD [rax * 2 + rdx], 87");
}



#[test]
fn enc_avx_vldmxcsr1218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x50, 0x10", "vldmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_avx_vldmxcsr1219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x10", "vldmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vldmxcsr1220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x14, 0x42", "vldmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm2, YWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x50, 0x10", "vldqqu ymm2, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu1222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm15, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x38", "vldqqu ymm15, YWORD [rax]");
}



#[test]
fn enc_avx_vldqqu1223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm15, YWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x78, 0x10", "vldqqu ymm15, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu1224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm11, YWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x58, 0x10", "vldqqu ymm11, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu1225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm4, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x24, 0x42", "vldqqu ymm4, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaskmovdqu1226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xC3", "vmaskmovdqu xmm0, xmm3");
}



#[test]
fn enc_avx_vmaskmovdqu1227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xF7, 0xE0", "vmaskmovdqu xmm12, xmm0");
}



#[test]
fn enc_avx_vmaskmovdqu1228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xD2", "vmaskmovdqu xmm2, xmm2");
}



#[test]
fn enc_avx_vmaskmovdqu1229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xD0", "vmaskmovdqu xmm2, xmm0");
}



#[test]
fn enc_avx_vmaskmovdqu1230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xF7, 0xDC", "vmaskmovdqu xmm3, xmm12");
}



#[test]
fn enc_avx_vmaxsd1231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm4, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5F, 0xE0", "vmaxsd xmm4, xmm15, xmm0");
}



#[test]
fn enc_avx_vmaxsd1232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm1, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x5F, 0xCC", "vmaxsd xmm1, xmm12, xmm12");
}



#[test]
fn enc_avx_vmaxsd1233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm2, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5F, 0xD1", "vmaxsd xmm2, xmm3, xmm1");
}



#[test]
fn enc_avx_vmaxsd1234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5F, 0xCC", "vmaxsd xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vmaxsd1235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm2, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5F, 0xD1", "vmaxsd xmm2, xmm1, xmm1");
}



#[test]
fn enc_avx_vmaxsd1236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm12, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5F, 0x24, 0x42", "vmaxsd xmm12, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxsd1237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm0, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5F, 0x40, 0x10", "vmaxsd xmm0, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxsd1238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5F, 0x40, 0x10", "vmaxsd xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxsd1239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm12, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5F, 0x20", "vmaxsd xmm12, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm12, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5F, 0x60, 0x10", "vmaxsd xmm12, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss1241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm2, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5F, 0xD1", "vmaxss xmm2, xmm3, xmm1");
}



#[test]
fn enc_avx_vmaxss1242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm2, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x5F, 0xD4", "vmaxss xmm2, xmm2, xmm12");
}



#[test]
fn enc_avx_vmaxss1243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm1, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x5F, 0xC8", "vmaxss xmm1, xmm1, xmm0");
}



#[test]
fn enc_avx_vmaxss1244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm0, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x5F, 0xC3", "vmaxss xmm0, xmm4, xmm11");
}



#[test]
fn enc_avx_vmaxss1245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm11, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5F, 0xDC", "vmaxss xmm11, xmm3, xmm4");
}



#[test]
fn enc_avx_vmaxss1246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm11, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5F, 0x1C, 0x42", "vmaxss xmm11, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm2, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5F, 0x50, 0x10", "vmaxss xmm2, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss1248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm1, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5F, 0x0C, 0x42", "vmaxss xmm1, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm0, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5F, 0x00", "vmaxss xmm0, xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vmaxss1250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm2, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5F, 0x14, 0x42", "vmaxss xmm2, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm15, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5D, 0xF8", "vminsd xmm15, xmm12, xmm0");
}



#[test]
fn enc_avx_vminsd1252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm2, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5D, 0xD7", "vminsd xmm2, xmm1, xmm15");
}



#[test]
fn enc_avx_vminsd1253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm2, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5D, 0xD2", "vminsd xmm2, xmm2, xmm2");
}



#[test]
fn enc_avx_vminsd1254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5D, 0xE0", "vminsd xmm4, xmm12, xmm0");
}



#[test]
fn enc_avx_vminsd1255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm15, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0x5D, 0xFC", "vminsd xmm15, xmm2, xmm12");
}



#[test]
fn enc_avx_vminsd1256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5D, 0x3C, 0x42", "vminsd xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5D, 0x38", "vminsd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vminsd1258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5D, 0x1C, 0x42", "vminsd xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5D, 0x0C, 0x42", "vminsd xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm12, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5D, 0x20", "vminsd xmm12, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vminss1261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm3, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5D, 0xDC", "vminss xmm3, xmm2, xmm4");
}



#[test]
fn enc_avx_vminss1262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm1, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5D, 0xCB", "vminss xmm1, xmm11, xmm3");
}



#[test]
fn enc_avx_vminss1263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm12, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5D, 0xE0", "vminss xmm12, xmm2, xmm0");
}



#[test]
fn enc_avx_vminss1264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5D, 0xFC", "vminss xmm15, xmm2, xmm4");
}



#[test]
fn enc_avx_vminss1265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm4, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x5D, 0xE4", "vminss xmm4, xmm2, xmm12");
}



#[test]
fn enc_avx_vminss1266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5D, 0x08", "vminss xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vminss1267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5D, 0x78, 0x10", "vminss xmm15, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss1268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x5D, 0x20", "vminss xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vminss1269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm1, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x5D, 0x08", "vminss xmm1, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vminss1270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5D, 0x78, 0x10", "vminss xmm15, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovapd1271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x29, 0x20", "vmovapd OWORD [rax], xmm4");
}



#[test]
fn enc_avx_vmovapd1272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x29, 0x1C, 0x42", "vmovapd OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovapd1273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xD4", "vmovapd xmm2, xmm4");
}



#[test]
fn enc_avx_vmovapd1274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x28, 0xFC", "vmovapd xmm15, xmm4");
}



#[test]
fn enc_avx_vmovapd1275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xC1", "vmovapd xmm0, xmm1");
}



#[test]
fn enc_avx_vmovapd1276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm2, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x28, 0xD2", "vmovapd ymm2, ymm2");
}



#[test]
fn enc_avx_vmovapd1277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd YWORD [rdx], ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x29, 0x1A", "vmovapd YWORD [rdx], ymm11");
}



#[test]
fn enc_avx_vmovapd1278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm3, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x28, 0xDB", "vmovapd ymm3, ymm3");
}



#[test]
fn enc_avx_vmovapd1279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm3, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x28, 0xDC", "vmovapd ymm3, ymm12");
}



#[test]
fn enc_avx_vmovaps1280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x28, 0xF8", "vmovaps xmm15, xmm0");
}



#[test]
fn enc_avx_vmovaps1281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps OWORD [rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x29, 0x02", "vmovaps OWORD [rdx], xmm0");
}



#[test]
fn enc_avx_vmovaps1282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x28, 0xE0", "vmovaps xmm4, xmm0");
}



#[test]
fn enc_avx_vmovaps1283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x28, 0xD8", "vmovaps xmm3, xmm0");
}



#[test]
fn enc_avx_vmovaps1284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x28, 0xE4", "vmovaps xmm12, xmm12");
}



#[test]
fn enc_avx_vmovaps1285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm11, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x28, 0xDB", "vmovaps ymm11, ymm3");
}



#[test]
fn enc_avx_vmovaps1286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm11, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7C, 0x28, 0xDC", "vmovaps ymm11, ymm12");
}



#[test]
fn enc_avx_vmovaps1287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm0, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7C, 0x28, 0xC7", "vmovaps ymm0, ymm15");
}



#[test]
fn enc_avx_vmovaps1288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps YWORD [rax], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x29, 0x18", "vmovaps YWORD [rax], ymm3");
}



#[test]
fn enc_avx_vmovaps1289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps YWORD [rax], ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x29, 0x38", "vmovaps YWORD [rax], ymm15");
}



#[test]
fn enc_avx_vmovd1290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xC0", "vmovd eax, xmm0");
}



#[test]
fn enc_avx_vmovd1291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0x38", "vmovd DWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovd1292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0x08", "vmovd DWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovd1293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0xE0", "vmovd eax, xmm12");
}



#[test]
fn enc_avx_vmovd1294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm4, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0xE0", "vmovd xmm4, eax");
}



#[test]
fn enc_avx_vmovd1295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm2, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0xD0", "vmovd xmm2, eax");
}



#[test]
fn enc_avx_vmovd1296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6E, 0x18", "vmovd xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vmovd1297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm12, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6E, 0xE0", "vmovd xmm12, eax");
}



#[test]
fn enc_avx_vmovddup1298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x1C, 0x42", "vmovddup xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x14, 0x42", "vmovddup xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x12, 0x24, 0x42", "vmovddup xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x08", "vmovddup xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovdqa1302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa OWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7F, 0x04, 0x42", "vmovdqa OWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovdqa1303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa OWORD [rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7F, 0x0A", "vmovdqa OWORD [rdx], xmm1");
}



#[test]
fn enc_avx_vmovdqa1304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7F, 0x08", "vmovdqa OWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovdqa1305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7F, 0x3C, 0x42", "vmovdqa OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovdqa1306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x6F, 0xD3", "vmovdqa xmm2, xmm11");
}



#[test]
fn enc_avx_vmovdqa1307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm1, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xCB", "vmovdqa ymm1, ymm11");
}



#[test]
fn enc_avx_vmovdqa1308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa YWORD [rax], ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x7F, 0x10", "vmovdqa YWORD [rax], ymm2");
}



#[test]
fn enc_avx_vmovdqa1309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa YWORD [rax * 2 + rdx], ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x7F, 0x1C, 0x42", "vmovdqa YWORD [rax * 2 + rdx], ymm11");
}



#[test]
fn enc_avx_vmovdqa1310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm4, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xE1", "vmovdqa ymm4, ymm1");
}



#[test]
fn enc_avx_vmovdqa1311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xDA", "vmovdqa ymm3, ymm2");
}



#[test]
fn enc_avx_vmovdqu1312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x6F, 0xD1", "vmovdqu xmm2, xmm1");
}



#[test]
fn enc_avx_vmovdqu1313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x6F, 0xD4", "vmovdqu xmm2, xmm4");
}



#[test]
fn enc_avx_vmovdqu1314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xE0", "vmovdqu xmm12, xmm0");
}



#[test]
fn enc_avx_vmovdqu1315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu OWORD [rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7F, 0x02", "vmovdqu OWORD [rdx], xmm0");
}



#[test]
fn enc_avx_vmovdqu1316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm11, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xDB", "vmovdqu ymm11, ymm3");
}



#[test]
fn enc_avx_vmovdqu1317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu YWORD [rax * 2 + rdx], ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x7F, 0x1C, 0x42", "vmovdqu YWORD [rax * 2 + rdx], ymm11");
}



#[test]
fn enc_avx_vmovdqu1318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm15, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xF8", "vmovdqu ymm15, ymm0");
}



#[test]
fn enc_avx_vmovdqu1319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu YWORD [rax * 2 + rdx], ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x24, 0x42", "vmovdqu YWORD [rax * 2 + rdx], ymm4");
}



#[test]
fn enc_avx_vmovdqu1320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm15, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xFA", "vmovdqu ymm15, ymm2");
}



#[test]
fn enc_avx_vmovhlps1321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm2, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x68, 0x12, 0xD4", "vmovhlps xmm2, xmm2, xmm12");
}



#[test]
fn enc_avx_vmovhlps1322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm3, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x12, 0xDC", "vmovhlps xmm3, xmm1, xmm4");
}



#[test]
fn enc_avx_vmovhlps1323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm1, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x00, 0x12, 0xCB", "vmovhlps xmm1, xmm15, xmm11");
}



#[test]
fn enc_avx_vmovhlps1324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm11, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x12, 0xDB", "vmovhlps xmm11, xmm0, xmm3");
}



#[test]
fn enc_avx_vmovhlps1325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm1, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x80, 0x12, 0xC8", "vmovhlps xmm1, xmm15, xmm0");
}



#[test]
fn enc_avx_vmovhpd1326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm2, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0x16, 0x14, 0x42", "vmovhpd xmm2, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm15, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x16, 0x78, 0x10", "vmovhpd xmm15, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhpd1328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm4, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0x16, 0x24, 0x42", "vmovhpd xmm4, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm15, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0x16, 0x3C, 0x42", "vmovhpd xmm15, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0x16, 0x38", "vmovhpd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhpd1331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x60, 0x10", "vmovhpd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovhpd1332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x04, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovhpd1333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x17, 0x1C, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovhpd1334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x17, 0x78, 0x10", "vmovhpd QWORD [rax + 16], xmm15");
}



#[test]
fn enc_avx_vmovhpd1335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x48, 0x10", "vmovhpd QWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovhps1336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm4, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA0, 0x16, 0x20", "vmovhps xmm4, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps1337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm11, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x20, 0x16, 0x18", "vmovhps xmm11, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps1338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm15, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x16, 0x78, 0x10", "vmovhps xmm15, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x16, 0x58, 0x10", "vmovhps xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm3, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x16, 0x58, 0x10", "vmovhps xmm3, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x10", "vmovhps QWORD [rax], xmm2");
}



#[test]
fn enc_avx_vmovhps1342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x38", "vmovhps QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovhps1343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x60, 0x10", "vmovhps QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovhps1344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x60, 0x10", "vmovhps QWORD [rax + 16], xmm12");
}



#[test]
fn enc_avx_vmovlhps1345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm1, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x16, 0xCF", "vmovlhps xmm1, xmm0, xmm15");
}



#[test]
fn enc_avx_vmovlhps1346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm4, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x98, 0x16, 0xE3", "vmovlhps xmm4, xmm12, xmm3");
}



#[test]
fn enc_avx_vmovlhps1347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm11, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x68, 0x16, 0xD8", "vmovlhps xmm11, xmm2, xmm0");
}



#[test]
fn enc_avx_vmovlhps1348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x98, 0x16, 0xC1", "vmovlhps xmm0, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovlhps1349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm0, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD8, 0x16, 0xC1", "vmovlhps xmm0, xmm4, xmm1");
}



#[test]
fn enc_avx_vmovlpd1350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0x12, 0x20", "vmovlpd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm11, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0x12, 0x58, 0x10", "vmovlpd xmm11, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd1352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0x12, 0x58, 0x10", "vmovlpd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd1353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm15, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0x12, 0x38", "vmovlpd xmm15, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm2, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0x12, 0x50, 0x10", "vmovlpd xmm2, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd1355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x08", "vmovlpd QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovlpd1356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x13, 0x18", "vmovlpd QWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovlpd1357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x00", "vmovlpd QWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovlpd1358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x50, 0x10", "vmovlpd QWORD [rax + 16], xmm2");
}



#[test]
fn enc_avx_vmovlpd1359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x0C, 0x42", "vmovlpd QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_avx_vmovlps1360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm12, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x12, 0x20", "vmovlps xmm12, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps1361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x12, 0x04, 0x42", "vmovlps xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlps1362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x60, 0x12, 0x1C, 0x42", "vmovlps xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlps1363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm15, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x20, 0x12, 0x38", "vmovlps xmm15, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps1364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm15, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x70, 0x12, 0x78, 0x10", "vmovlps xmm15, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlps1365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x24, 0x42", "vmovlps QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovlps1366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x58, 0x10", "vmovlps QWORD [rax + 16], xmm11");
}



#[test]
fn enc_avx_vmovlps1367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x08", "vmovlps QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovlps1368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x20", "vmovlps QWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovntqq1369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax + 16], ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xE7, 0x58, 0x10", "vmovntqq YWORD [rax + 16], ymm11");
}



#[test]
fn enc_avx_vmovntqq1370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax + 16], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x58, 0x10", "vmovntqq YWORD [rax + 16], ymm3");
}



#[test]
fn enc_avx_vmovntqq1371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax], ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x10", "vmovntqq YWORD [rax], ymm2");
}



#[test]
fn enc_avx_vmovntqq1372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax], ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x00", "vmovntqq YWORD [rax], ymm0");
}



#[test]
fn enc_avx_vmovntqq1373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax * 2 + rdx], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x1C, 0x42", "vmovntqq YWORD [rax * 2 + rdx], ymm3");
}



#[test]
fn enc_avx_vmovq1374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xCF", "vmovq xmm1, xmm15");
}



#[test]
fn enc_avx_vmovq1375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xE2", "vmovq xmm4, xmm2");
}



#[test]
fn enc_avx_vmovq1376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xE0", "vmovq xmm4, xmm0");
}



#[test]
fn enc_avx_vmovq1377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xC3", "vmovq xmm0, xmm11");
}



#[test]
fn enc_avx_vmovq1378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xE4", "vmovq xmm12, xmm4");
}



#[test]
fn enc_avx_vmovq1379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x20", "vmovq QWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovq1380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x60, 0x10", "vmovq QWORD [rax + 16], xmm12");
}



#[test]
fn enc_avx_vmovq1381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x3C, 0x42", "vmovq QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovq1382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x18", "vmovq QWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovq1383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x1C, 0x42", "vmovq QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovq1384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xC0", "vmovq rax, xmm0");
}



#[test]
fn enc_avx_vmovq1385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xC8", "vmovq rax, xmm1");
}



#[test]
fn enc_avx_vmovq1386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xE0", "vmovq rax, xmm4");
}



#[test]
fn enc_avx_vmovq1387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xE0", "vmovq xmm12, xmm0");
}



#[test]
fn enc_avx_vmovq1388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xD7", "vmovq xmm2, xmm15");
}



#[test]
fn enc_avx_vmovq1389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xDA", "vmovq xmm11, xmm2");
}



#[test]
fn enc_avx_vmovq1390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xC0", "vmovq xmm0, xmm0");
}



#[test]
fn enc_avx_vmovq1391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x58, 0x10", "vmovq xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x1C, 0x42", "vmovq xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovq1393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x40, 0x10", "vmovq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x48, 0x10", "vmovq xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x50, 0x10", "vmovq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0x20", "vmovq xmm12, [rax]");
}



#[test]
fn enc_avx_vmovq1397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0x38", "vmovq xmm15, [rax]");
}



#[test]
fn enc_avx_vmovq1398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xC8", "vmovq xmm1, rax");
}



#[test]
fn enc_avx_vmovq1399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x08", "vmovq xmm1, [rax]");
}



#[test]
fn enc_avx_vmovqqa1400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm1, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xCF", "vmovqqa ymm1, ymm15");
}



#[test]
fn enc_avx_vmovqqa1401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xCA", "vmovqqa ymm1, ymm2");
}



#[test]
fn enc_avx_vmovqqa1402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm12, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x6F, 0xE3", "vmovqqa ymm12, ymm11");
}



#[test]
fn enc_avx_vmovqqa1403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm11, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x6F, 0xDB", "vmovqqa ymm11, ymm11");
}



#[test]
fn enc_avx_vmovqqa1404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm12, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0x20", "vmovqqa ymm12, YWORD [rax]");
}



#[test]
fn enc_avx_vmovqqa1405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm15, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0x3C, 0x42", "vmovqqa ymm15, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovqqa1406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm3, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xDB", "vmovqqa ymm3, ymm11");
}



#[test]
fn enc_avx_vmovqqa1407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm11, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xD8", "vmovqqa ymm11, ymm0");
}



#[test]
fn enc_avx_vmovqqa1408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm0, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xC3", "vmovqqa ymm0, ymm11");
}



#[test]
fn enc_avx_vmovqqu1409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm4, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xE0", "vmovqqu ymm4, ymm0");
}



#[test]
fn enc_avx_vmovqqu1410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0x0A", "vmovqqu ymm1, YWORD [rdx]");
}



#[test]
fn enc_avx_vmovqqu1411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xCB", "vmovqqu ymm1, ymm11");
}



#[test]
fn enc_avx_vmovqqu1412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm3, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0x1A", "vmovqqu ymm3, YWORD [rdx]");
}



#[test]
fn enc_avx_vmovqqu1413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm12, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xE0", "vmovqqu ymm12, ymm0");
}



#[test]
fn enc_avx_vmovqqu1414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xC4", "vmovqqu ymm0, ymm4");
}



#[test]
fn enc_avx_vmovqqu1415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm11, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xDC", "vmovqqu ymm11, ymm4");
}



#[test]
fn enc_avx_vmovqqu1416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm0, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xC4", "vmovqqu ymm0, ymm12");
}



#[test]
fn enc_avx_vmovqqu1417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm2, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xD0", "vmovqqu ymm2, ymm0");
}



#[test]
fn enc_avx_vmovsd1418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm4, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x10, 0xE1", "vmovsd xmm4, xmm3, xmm1");
}



#[test]
fn enc_avx_vmovsd1419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm0, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x10, 0xC4", "vmovsd xmm0, xmm4, xmm4");
}



#[test]
fn enc_avx_vmovsd1420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm15, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x03, 0x10, 0xFB", "vmovsd xmm15, xmm15, xmm11");
}



#[test]
fn enc_avx_vmovsd1421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm0, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x10, 0xC3", "vmovsd xmm0, xmm11, xmm11");
}



#[test]
fn enc_avx_vmovsd1422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm2, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x10, 0xD3", "vmovsd xmm2, xmm4, xmm3");
}



#[test]
fn enc_avx_vmovsd1423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x60, 0x10", "vmovsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd1424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x08", "vmovsd xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovsd1425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x0C, 0x42", "vmovsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x10, 0x38", "vmovsd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovsd1427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x1C, 0x42", "vmovsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x10, 0xCC", "vmovsd xmm1, xmm3, xmm4");
}



#[test]
fn enc_avx_vmovsd1429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x10, 0xDA", "vmovsd xmm11, xmm11, xmm2");
}



#[test]
fn enc_avx_vmovsd1430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm3, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x10, 0xD9", "vmovsd xmm3, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovsd1431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x10, 0xE1", "vmovsd xmm12, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovsd1432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm0, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x10, 0xC1", "vmovsd xmm0, xmm3, xmm1");
}



#[test]
fn enc_avx_vmovsd1433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x60, 0x10", "vmovsd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovsd1434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x38", "vmovsd QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovsd1435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x04, 0x42", "vmovsd QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovsd1436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x58, 0x10", "vmovsd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovss1437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x20", "vmovss DWORD [rax], xmm4");
}



#[test]
fn enc_avx_vmovss1438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x1C, 0x42", "vmovss DWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_avx_vmovss1439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x58, 0x10", "vmovss DWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovss1440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x04, 0x42", "vmovss DWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovss1441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x24, 0x42", "vmovss DWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovss1442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x08", "vmovss xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vmovss1443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x14, 0x42", "vmovss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovss1444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x18", "vmovss xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vmovss1445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0x78, 0x10", "vmovss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovss1446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x10, 0xE0", "vmovss xmm12, xmm1, xmm0");
}



#[test]
fn enc_avx_vmovss1447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x10, 0xCB", "vmovss xmm1, xmm1, xmm3");
}



#[test]
fn enc_avx_vmovss1448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x10, 0xD9", "vmovss xmm3, xmm4, xmm1");
}



#[test]
fn enc_avx_vmovss1449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x10, 0xCB", "vmovss xmm1, xmm4, xmm3");
}



#[test]
fn enc_avx_vmovss1450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x10, 0xCB", "vmovss xmm1, xmm4, xmm11");
}



#[test]
fn enc_avx_vmovss1451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x10, 0xCF", "vmovss xmm1, xmm2, xmm15");
}



#[test]
fn enc_avx_vmovss1452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm0, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x10, 0xC7", "vmovss xmm0, xmm3, xmm15");
}



#[test]
fn enc_avx_vmovss1453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0xE2", "vmovss xmm4, xmm0, xmm2");
}



#[test]
fn enc_avx_vmovss1454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x10, 0xD8", "vmovss xmm3, xmm1, xmm0");
}



#[test]
fn enc_avx_vmovss1455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x10, 0xC3", "vmovss xmm0, xmm1, xmm3");
}



#[test]
fn enc_avx_vmovupd1456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x10, 0xC4", "vmovupd xmm0, xmm12");
}



#[test]
fn enc_avx_vmovupd1457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xD4", "vmovupd xmm2, xmm4");
}



#[test]
fn enc_avx_vmovupd1458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x10, 0xE2", "vmovupd xmm12, xmm2");
}



#[test]
fn enc_avx_vmovupd1459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x11, 0x20", "vmovupd OWORD [rax], xmm4");
}



#[test]
fn enc_avx_vmovupd1460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xCB", "vmovupd xmm1, xmm3");
}



#[test]
fn enc_avx_vmovupd1461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm12, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x10, 0xE4", "vmovupd ymm12, ymm12");
}



#[test]
fn enc_avx_vmovupd1462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd YWORD [rax], ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x11, 0x00", "vmovupd YWORD [rax], ymm0");
}



#[test]
fn enc_avx_vmovupd1463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd YWORD [rdx], ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x11, 0x0A", "vmovupd YWORD [rdx], ymm1");
}



#[test]
fn enc_avx_vmovupd1464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm12, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x10, 0xE0", "vmovupd ymm12, ymm0");
}



#[test]
fn enc_avx_vmovups1465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x10, 0xDB", "vmovups xmm11, xmm11");
}



#[test]
fn enc_avx_vmovups1466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x10, 0xD4", "vmovups xmm2, xmm12");
}



#[test]
fn enc_avx_vmovups1467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x10, 0xE4", "vmovups xmm4, xmm4");
}



#[test]
fn enc_avx_vmovups1468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x10, 0xCA", "vmovups xmm1, xmm2");
}



#[test]
fn enc_avx_vmovups1469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x11, 0x18", "vmovups OWORD [rax], xmm3");
}



#[test]
fn enc_avx_vmovups1470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm11, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x10, 0xDA", "vmovups ymm11, ymm2");
}



#[test]
fn enc_avx_vmovups1471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups YWORD [rax], ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x11, 0x18", "vmovups YWORD [rax], ymm11");
}



#[test]
fn enc_avx_vmovups1472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm2, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x10, 0xD3", "vmovups ymm2, ymm3");
}



#[test]
fn enc_avx_vmovups1473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm11, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x10, 0xD8", "vmovups ymm11, ymm0");
}



#[test]
fn enc_avx_vmulsd1474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm0, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x59, 0xC2", "vmulsd xmm0, xmm15, xmm2");
}



#[test]
fn enc_avx_vmulsd1475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x59, 0xFC", "vmulsd xmm15, xmm3, xmm4");
}



#[test]
fn enc_avx_vmulsd1476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm0, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x59, 0xC7", "vmulsd xmm0, xmm11, xmm15");
}



#[test]
fn enc_avx_vmulsd1477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0x59, 0xDC", "vmulsd xmm3, xmm15, xmm12");
}



#[test]
fn enc_avx_vmulsd1478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0x59, 0xDB", "vmulsd xmm3, xmm0, xmm11");
}



#[test]
fn enc_avx_vmulsd1479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x59, 0x18", "vmulsd xmm3, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd1480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm1, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x59, 0x08", "vmulsd xmm1, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd1481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x59, 0x24, 0x42", "vmulsd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd1482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm4, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x59, 0x60, 0x10", "vmulsd xmm4, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulsd1483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm4, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x59, 0x20", "vmulsd xmm4, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmulss1484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm12, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x59, 0xE4", "vmulss xmm12, xmm11, xmm4");
}



#[test]
fn enc_avx_vmulss1485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm2, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0x59, 0xD3", "vmulss xmm2, xmm11, xmm11");
}



#[test]
fn enc_avx_vmulss1486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm1, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x59, 0xCF", "vmulss xmm1, xmm3, xmm15");
}



#[test]
fn enc_avx_vmulss1487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm1, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x59, 0xCA", "vmulss xmm1, xmm2, xmm2");
}



#[test]
fn enc_avx_vmulss1488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm2, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x59, 0xD7", "vmulss xmm2, xmm4, xmm15");
}



#[test]
fn enc_avx_vmulss1489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm2, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x59, 0x50, 0x10", "vmulss xmm2, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulss1490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x59, 0x24, 0x42", "vmulss xmm4, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulss1491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm3, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x59, 0x1C, 0x42", "vmulss xmm3, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulss1492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x59, 0x08", "vmulss xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vmulss1493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm12, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x59, 0x20", "vmulss xmm12, xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm12, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x59, 0x44, 0xE4, 0x11", "vpclmulhqhqdq xmm12, xmm4, xmm12");
}



#[test]
fn enc_avx_vpclmulhqhqdq1495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm12, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x21, 0x44, 0xE4, 0x11", "vpclmulhqhqdq xmm12, xmm11, xmm12");
}



#[test]
fn enc_avx_vpclmulhqhqdq1496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm4, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0x22, 0x11", "vpclmulhqhqdq xmm4, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x61, 0x44, 0xDB, 0x11", "vpclmulhqhqdq xmm3, xmm3, xmm11");
}



#[test]
fn enc_avx_vpclmulhqhqdq1498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm11, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x44, 0xDA, 0x11", "vpclmulhqhqdq xmm11, xmm3, xmm2");
}



#[test]
fn enc_avx_vpclmulhqlqdq1499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm0, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0x04, 0x42, 0x01", "vpclmulhqlqdq xmm0, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmulhqlqdq1500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm11, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x59, 0x44, 0xDF, 0x01", "vpclmulhqlqdq xmm11, xmm4, xmm15");
}



#[test]
fn enc_avx_vpclmulhqlqdq1501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm2, xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0x14, 0x42, 0x01", "vpclmulhqlqdq xmm2, xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmulhqlqdq1502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm11, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x44, 0xDB, 0x01", "vpclmulhqlqdq xmm11, xmm1, xmm3");
}



#[test]
fn enc_avx_vpclmulhqlqdq1503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm3, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x59, 0x44, 0xDC, 0x01", "vpclmulhqlqdq xmm3, xmm4, xmm12");
}



#[test]
fn enc_avx_vpclmullqhqdq1504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm11, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x44, 0x1A, 0x10", "vpclmullqhqdq xmm11, xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmullqhqdq1505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm15, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x69, 0x44, 0xFC, 0x10", "vpclmullqhqdq xmm15, xmm2, xmm12");
}



#[test]
fn enc_avx_vpclmullqhqdq1506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0xC9, 0x10", "vpclmullqhqdq xmm1, xmm11, xmm1");
}



#[test]
fn enc_avx_vpclmullqhqdq1507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm1, xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x44, 0x08, 0x10", "vpclmullqhqdq xmm1, xmm4, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmullqhqdq1508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0xC8, 0x10", "vpclmullqhqdq xmm1, xmm11, xmm0");
}



#[test]
fn enc_avx_vpclmullqlqdq1509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm12, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0xE0, 0x00", "vpclmullqlqdq xmm12, xmm11, xmm0");
}



#[test]
fn enc_avx_vpclmullqlqdq1510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm11, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x44, 0xDA, 0x00", "vpclmullqlqdq xmm11, xmm0, xmm2");
}



#[test]
fn enc_avx_vpclmullqlqdq1511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm3, xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0x1C, 0x42, 0x00", "vpclmullqlqdq xmm3, xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmullqlqdq1512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm3, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0xD9, 0x00", "vpclmullqlqdq xmm3, xmm12, xmm1");
}



#[test]
fn enc_avx_vpclmullqlqdq1513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm0, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x44, 0xC2, 0x00", "vpclmullqlqdq xmm0, xmm3, xmm2");
}



#[test]
fn enc_avx_vpclmulqdq1514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm15, xmm11, xmm0, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0xF8, 0x38", "vpclmulqdq xmm15, xmm11, xmm0, 56");
}



#[test]
fn enc_avx_vpclmulqdq1515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm11, xmm4, OWORD [rax * 2 + rdx], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x44, 0x1C, 0x42, 0x60", "vpclmulqdq xmm11, xmm4, OWORD [rax * 2 + rdx], 96");
}



#[test]
fn enc_avx_vpclmulqdq1516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm2, xmm11, xmm1, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0xD1, 0x13", "vpclmulqdq xmm2, xmm11, xmm1, 19");
}



#[test]
fn enc_avx_vpclmulqdq1517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm11, xmm3, xmm15, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x61, 0x44, 0xDF, 0x6A", "vpclmulqdq xmm11, xmm3, xmm15, 106");
}



#[test]
fn enc_avx_vpclmulqdq1518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm12, xmm11, xmm3, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0xE3, 0x6E", "vpclmulqdq xmm12, xmm11, xmm3, 110");
}



#[test]
fn enc_avx_vperm2f1281519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm12, ymm0, ymm3, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x06, 0xE3, 0x56", "vperm2f128 ymm12, ymm0, ymm3, 86");
}



#[test]
fn enc_avx_vperm2f1281520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm11, ymm11, ymm12, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x25, 0x06, 0xDC, 0x75", "vperm2f128 ymm11, ymm11, ymm12, 117");
}



#[test]
fn enc_avx_vperm2f1281521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm15, ymm11, ymm2, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x25, 0x06, 0xFA, 0x65", "vperm2f128 ymm15, ymm11, ymm2, 101");
}



#[test]
fn enc_avx_vperm2f1281522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm12, ymm4, ymm3, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x5D, 0x06, 0xE3, 0x5F", "vperm2f128 ymm12, ymm4, ymm3, 95");
}



#[test]
fn enc_avx_vperm2f1281523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm3, ymm1, YWORD [rax * 2 + rdx], 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x75, 0x06, 0x1C, 0x42, 0x24", "vperm2f128 ymm3, ymm1, YWORD [rax * 2 + rdx], 36");
}



#[test]
fn enc_avx_vpextrb1524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rdx, xmm15, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xFA, 0x4A", "vpextrb rdx, xmm15, 74");
}



#[test]
fn enc_avx_vpextrb1525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rdx, xmm15, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xFA, 0x2B", "vpextrb rdx, xmm15, 43");
}



#[test]
fn enc_avx_vpextrb1526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rcx, xmm12, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xE1, 0x7E", "vpextrb rcx, xmm12, 126");
}



#[test]
fn enc_avx_vpextrb1527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rcx, xmm1, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC9, 0x54", "vpextrb rcx, xmm1, 84");
}



#[test]
fn enc_avx_vpextrb1528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rdx, xmm0, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC2, 0x39", "vpextrb rdx, xmm0, 57");
}



#[test]
fn enc_avx_vpextrb1529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb ecx, xmm1, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC9, 0x6C", "vpextrb ecx, xmm1, 108");
}



#[test]
fn enc_avx_vpextrb1530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb eax, xmm11, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xD8, 0x7E", "vpextrb eax, xmm11, 126");
}



#[test]
fn enc_avx_vpextrb1531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb edx, xmm0, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC2, 0x3C", "vpextrb edx, xmm0, 60");
}



#[test]
fn enc_avx_vpextrb1532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb eax, xmm11, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xD8, 0x54", "vpextrb eax, xmm11, 84");
}



#[test]
fn enc_avx_vpextrb1533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb eax, xmm1, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC8, 0x5D", "vpextrb eax, xmm1, 93");
}



#[test]
fn enc_avx_vpextrb1534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax + 16], xmm1, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x48, 0x10, 0x4D", "vpextrb BYTE [rax + 16], xmm1, 77");
}



#[test]
fn enc_avx_vpextrb1535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax * 2 + rdx], xmm1, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x0C, 0x42, 0x0F", "vpextrb BYTE [rax * 2 + rdx], xmm1, 15");
}



#[test]
fn enc_avx_vpextrb1536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm0, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x00, 0x32", "vpextrb BYTE [rax], xmm0, 50");
}



#[test]
fn enc_avx_vpextrb1537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax + 16], xmm4, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x60, 0x10, 0x62", "vpextrb BYTE [rax + 16], xmm4, 98");
}



#[test]
fn enc_avx_vpextrb1538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax * 2 + rdx], xmm4, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x24, 0x42, 0x72", "vpextrb BYTE [rax * 2 + rdx], xmm4, 114");
}



#[test]
fn enc_avx_vpextrd1539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rax, xmm12, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xE0, 0x2E", "vpextrd rax, xmm12, 46");
}



#[test]
fn enc_avx_vpextrd1540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rdx, xmm0, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xC2, 0x6A", "vpextrd rdx, xmm0, 106");
}



#[test]
fn enc_avx_vpextrd1541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rax, xmm12, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xE0, 0x5D", "vpextrd rax, xmm12, 93");
}



#[test]
fn enc_avx_vpextrd1542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rax, xmm11, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xD8, 0x47", "vpextrd rax, xmm11, 71");
}



#[test]
fn enc_avx_vpextrd1543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rcx, xmm12, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xE1, 0x31", "vpextrd rcx, xmm12, 49");
}



#[test]
fn enc_avx_vpextrd1544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm3, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0x18, 0x46", "vpextrd DWORD [rax], xmm3, 70");
}



#[test]
fn enc_avx_vpextrd1545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm2, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0x10, 0x60", "vpextrd DWORD [rax], xmm2, 96");
}



#[test]
fn enc_avx_vpextrd1546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd eax, xmm0, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xC0, 0x2F", "vpextrd eax, xmm0, 47");
}



#[test]
fn enc_avx_vpextrd1547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm2, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0x10, 0x26", "vpextrd DWORD [rax], xmm2, 38");
}



#[test]
fn enc_avx_vpextrd1548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm15, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0x38, 0x5C", "vpextrd DWORD [rax], xmm15, 92");
}



#[test]
fn enc_avx_vpextrq1549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm0, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x1C", "vpextrq [rax], xmm0, 28");
}



#[test]
fn enc_avx_vpextrq1550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm2, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x10, 0x28", "vpextrq [rax], xmm2, 40");
}



#[test]
fn enc_avx_vpextrq1551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm2, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x10, 0x1A", "vpextrq [rax], xmm2, 26");
}



#[test]
fn enc_avx_vpextrq1552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm0, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x70", "vpextrq [rax], xmm0, 112");
}



#[test]
fn enc_avx_vpextrq1553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm2, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x10, 0x19", "vpextrq [rax], xmm2, 25");
}



#[test]
fn enc_avx_vpextrw1554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm15, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC7, 0x79", "vpextrw rax, xmm15, 121");
}



#[test]
fn enc_avx_vpextrw1555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm0, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x58", "vpextrw rcx, xmm0, 88");
}



#[test]
fn enc_avx_vpextrw1556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm0, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x27", "vpextrw rcx, xmm0, 39");
}



#[test]
fn enc_avx_vpextrw1557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm2, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCA, 0x36", "vpextrw rcx, xmm2, 54");
}



#[test]
fn enc_avx_vpextrw1558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm12, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xCC, 0x30", "vpextrw rcx, xmm12, 48");
}



#[test]
fn enc_avx_vpextrw1559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm3, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x5F", "vpextrw ecx, xmm3, 95");
}



#[test]
fn enc_avx_vpextrw1560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm15, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC7, 0x13", "vpextrw eax, xmm15, 19");
}



#[test]
fn enc_avx_vpextrw1561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm11, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xCB, 0x56", "vpextrw ecx, xmm11, 86");
}



#[test]
fn enc_avx_vpextrw1562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm2, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCA, 0x6C", "vpextrw ecx, xmm2, 108");
}



#[test]
fn enc_avx_vpextrw1563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm4, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCC, 0x39", "vpextrw ecx, xmm4, 57");
}



#[test]
fn enc_avx_vpextrw1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm1, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC1, 0x50", "vpextrw rax, xmm1, 80");
}



#[test]
fn enc_avx_vpextrw1565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm0, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x78", "vpextrw rcx, xmm0, 120");
}



#[test]
fn enc_avx_vpextrw1566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rdx, xmm0, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD0, 0x61", "vpextrw rdx, xmm0, 97");
}



#[test]
fn enc_avx_vpextrw1567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm12, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC4, 0x11", "vpextrw rax, xmm12, 17");
}



#[test]
fn enc_avx_vpextrw1568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm3, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x62", "vpextrw rcx, xmm3, 98");
}



#[test]
fn enc_avx_vpextrw1569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm0, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC0, 0x06", "vpextrw eax, xmm0, 6");
}



#[test]
fn enc_avx_vpextrw1570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm12, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC4, 0x70", "vpextrw eax, xmm12, 112");
}



#[test]
fn enc_avx_vpextrw1571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm1, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC9, 0x49", "vpextrw ecx, xmm1, 73");
}



#[test]
fn enc_avx_vpextrw1572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm4, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC4, 0x28", "vpextrw eax, xmm4, 40");
}



#[test]
fn enc_avx_vpextrw1573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm3, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x49", "vpextrw ecx, xmm3, 73");
}



#[test]
fn enc_avx_vpextrw1574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm11, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x1C, 0x42, 0x73", "vpextrw WORD [rax * 2 + rdx], xmm11, 115");
}



#[test]
fn enc_avx_vpextrw1575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm15, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x3C, 0x42, 0x05", "vpextrw WORD [rax * 2 + rdx], xmm15, 5");
}



#[test]
fn enc_avx_vpextrw1576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm4, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x24, 0x42, 0x05", "vpextrw WORD [rax * 2 + rdx], xmm4, 5");
}



#[test]
fn enc_avx_vpextrw1577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax + 16], xmm11, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x58, 0x10, 0x0E", "vpextrw WORD [rax + 16], xmm11, 14");
}



#[test]
fn enc_avx_vpextrw1578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm12, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x24, 0x42, 0x68", "vpextrw WORD [rax * 2 + rdx], xmm12, 104");
}



#[test]
fn enc_avx_vphminposuw1579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x41, 0x3C, 0x42", "vphminposuw xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vphminposuw1580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xE2", "vphminposuw xmm4, xmm2");
}



#[test]
fn enc_avx_vphminposuw1581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0x41, 0xE3", "vphminposuw xmm4, xmm11");
}



#[test]
fn enc_avx_vphminposuw1582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xC2", "vphminposuw xmm0, xmm2");
}



#[test]
fn enc_avx_vphminposuw1583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0x02", "vphminposuw xmm0, OWORD [rdx]");
}



#[test]
fn enc_avx_vpinsrb1584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm11, xmm4, al, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x20, 0xD8, 0x70", "vpinsrb xmm11, xmm4, al, 112");
}



#[test]
fn enc_avx_vpinsrb1585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm11, xmm1, al, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x20, 0xD8, 0x0D", "vpinsrb xmm11, xmm1, al, 13");
}



#[test]
fn enc_avx_vpinsrb1586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm12, al, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xD0, 0x28", "vpinsrb xmm2, xmm12, al, 40");
}



#[test]
fn enc_avx_vpinsrb1587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm4, BYTE [rax], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x20, 0x10, 0x08", "vpinsrb xmm2, xmm4, BYTE [rax], 8");
}



#[test]
fn enc_avx_vpinsrb1588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm15, xmm15, al, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x20, 0xF8, 0x75", "vpinsrb xmm15, xmm15, al, 117");
}



#[test]
fn enc_avx_vpinsrb1589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm12, xmm0, ecx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x20, 0xE1, 0x60", "vpinsrb xmm12, xmm0, ecx, 96");
}



#[test]
fn enc_avx_vpinsrb1590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm12, eax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xD0, 0x4E", "vpinsrb xmm2, xmm12, eax, 78");
}



#[test]
fn enc_avx_vpinsrb1591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm3, xmm0, ecx, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x20, 0xD9, 0x4C", "vpinsrb xmm3, xmm0, ecx, 76");
}



#[test]
fn enc_avx_vpinsrb1592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm12, xmm11, edx, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x20, 0xE2, 0x05", "vpinsrb xmm12, xmm11, edx, 5");
}



#[test]
fn enc_avx_vpinsrb1593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm15, xmm12, eax, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x20, 0xF8, 0x4D", "vpinsrb xmm15, xmm12, eax, 77");
}



#[test]
fn enc_avx_vpinsrd1594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm3, xmm1, eax, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x22, 0xD8, 0x64", "vpinsrd xmm3, xmm1, eax, 100");
}



#[test]
fn enc_avx_vpinsrd1595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm4, xmm4, eax, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x22, 0xE0, 0x69", "vpinsrd xmm4, xmm4, eax, 105");
}



#[test]
fn enc_avx_vpinsrd1596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm15, xmm2, DWORD [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x22, 0x38, 0x63", "vpinsrd xmm15, xmm2, DWORD [rax], 99");
}



#[test]
fn enc_avx_vpinsrd1597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm0, xmm15, eax, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x22, 0xC0, 0x5E", "vpinsrd xmm0, xmm15, eax, 94");
}



#[test]
fn enc_avx_vpinsrd1598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm4, xmm12, eax, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x22, 0xE0, 0x6C", "vpinsrd xmm4, xmm12, eax, 108");
}



#[test]
fn enc_avx_vpinsrq1599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm2, xmm11, rax, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xA1, 0x22, 0xD0, 0x7C", "vpinsrq xmm2, xmm11, rax, 124");
}



#[test]
fn enc_avx_vpinsrq1600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm4, xmm0, [rax], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x22, 0x20, 0x4A", "vpinsrq xmm4, xmm0, [rax], 74");
}



#[test]
fn enc_avx_vpinsrq1601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm1, xmm2, [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x22, 0x08, 0x70", "vpinsrq xmm1, xmm2, [rax], 112");
}



#[test]
fn enc_avx_vpinsrq1602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm15, xmm3, [rax], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x22, 0x38, 0x4D", "vpinsrq xmm15, xmm3, [rax], 77");
}



#[test]
fn enc_avx_vpinsrq1603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm2, xmm11, [rax], 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xA1, 0x22, 0x10, 0x74", "vpinsrq xmm2, xmm11, [rax], 116");
}



#[test]
fn enc_avx_vpinsrw1604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm11, xmm15, WORD [rax], 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0xC4, 0x18, 0x12", "vpinsrw xmm11, xmm15, WORD [rax], 18");
}



#[test]
fn enc_avx_vpinsrw1605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm11, xmm0, ax, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xC4, 0xD8, 0x56", "vpinsrw xmm11, xmm0, ax, 86");
}



#[test]
fn enc_avx_vpinsrw1606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm11, xmm11, ax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC4, 0xD8, 0x4E", "vpinsrw xmm11, xmm11, ax, 78");
}



#[test]
fn enc_avx_vpinsrw1607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm0, xmm4, ax, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC4, 0xC0, 0x24", "vpinsrw xmm0, xmm4, ax, 36");
}



#[test]
fn enc_avx_vpinsrw1608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm12, xmm3, WORD [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0xC4, 0x20, 0x60", "vpinsrw xmm12, xmm3, WORD [rax], 96");
}



#[test]
fn enc_avx_vpinsrw1609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm15, xmm0, eax, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xC4, 0xF8, 0x3C", "vpinsrw xmm15, xmm0, eax, 60");
}



#[test]
fn enc_avx_vpinsrw1610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm1, xmm15, ecx, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC4, 0xC9, 0x67", "vpinsrw xmm1, xmm15, ecx, 103");
}



#[test]
fn enc_avx_vpinsrw1611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm3, xmm1, ecx, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0xC4, 0xD9, 0x53", "vpinsrw xmm3, xmm1, ecx, 83");
}



#[test]
fn enc_avx_vpinsrw1612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm11, xmm2, edx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC4, 0xDA, 0x55", "vpinsrw xmm11, xmm2, edx, 85");
}



#[test]
fn enc_avx_vpinsrw1613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm0, xmm0, edx, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC4, 0xC2, 0x0B", "vpinsrw xmm0, xmm0, edx, 11");
}



#[test]
fn enc_avx_vpmovsxbd1614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x24, 0x42", "vpmovsxbd xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbd1615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x48, 0x10", "vpmovsxbd xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbd1616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x18", "vpmovsxbd xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbd1617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x21, 0x1C, 0x42", "vpmovsxbd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbd1618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x14, 0x42", "vpmovsxbd xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw1619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x1C, 0x42", "vpmovsxbw xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw1620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x1C, 0x42", "vpmovsxbw xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw1621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x58, 0x10", "vpmovsxbw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbw1622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x38", "vpmovsxbw xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw1623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x24, 0x42", "vpmovsxbw xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq1624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x40, 0x10", "vpmovsxdq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxdq1625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x14, 0x42", "vpmovsxdq xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq1626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x00", "vpmovsxdq xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq1627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x48, 0x10", "vpmovsxdq xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxdq1628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x50, 0x10", "vpmovsxdq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x04, 0x42", "vpmovsxwd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd1630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x48, 0x10", "vpmovsxwd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x50, 0x10", "vpmovsxwd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x58, 0x10", "vpmovsxwd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x18", "vpmovsxwd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq1634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x24, 0x42", "vpmovsxwq xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwq1635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x20", "vpmovsxwq xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq1636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x14, 0x42", "vpmovsxwq xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x14, 0x42", "vpmovzxbd xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x58, 0x10", "vpmovzxbd xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbd1639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x18", "vpmovzxbd xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbd1640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x78, 0x10", "vpmovzxbd xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbd1641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x18", "vpmovzxbd xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw1642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x30, 0x3C, 0x42", "vpmovzxbw xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw1643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x00", "vpmovzxbw xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw1644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x0C, 0x42", "vpmovzxbw xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw1645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x30, 0x24, 0x42", "vpmovzxbw xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw1646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x1C, 0x42", "vpmovzxbw xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq1647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x18", "vpmovzxdq xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x14, 0x42", "vpmovzxdq xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq1649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x58, 0x10", "vpmovzxdq xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxdq1650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x35, 0x38", "vpmovzxdq xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x50, 0x10", "vpmovzxdq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwd1652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x58, 0x10", "vpmovzxwd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwd1653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x14, 0x42", "vpmovzxwd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwd1654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x38", "vpmovzxwd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwd1655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x3C, 0x42", "vpmovzxwd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwd1656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x58, 0x10", "vpmovzxwd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwq1657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x34, 0x24, 0x42", "vpmovzxwq xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq1658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x34, 0x3C, 0x42", "vpmovzxwq xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq1659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x34, 0x1C, 0x42", "vpmovzxwq xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq1660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x24, 0x42", "vpmovzxwq xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq1661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x14, 0x42", "vpmovzxwq xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm0, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x53, 0xC4", "vrcpss xmm0, xmm12, xmm12");
}



#[test]
fn enc_avx_vrcpss1663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm3, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x53, 0xDC", "vrcpss xmm3, xmm11, xmm4");
}



#[test]
fn enc_avx_vrcpss1664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x53, 0xE2", "vrcpss xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vrcpss1665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm3, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x53, 0xD9", "vrcpss xmm3, xmm4, xmm1");
}



#[test]
fn enc_avx_vrcpss1666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm15, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x53, 0xF9", "vrcpss xmm15, xmm2, xmm1");
}



#[test]
fn enc_avx_vrcpss1667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm3, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x53, 0x1C, 0x42", "vrcpss xmm3, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm2, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x53, 0x14, 0x42", "vrcpss xmm2, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm15, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x53, 0x78, 0x10", "vrcpss xmm15, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrcpss1670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm1, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x53, 0x48, 0x10", "vrcpss xmm1, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrcpss1671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x53, 0x1C, 0x42", "vrcpss xmm11, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vroundsd1672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm12, xmm2, xmm3, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x0B, 0xE3, 0x23", "vroundsd xmm12, xmm2, xmm3, 35");
}



#[test]
fn enc_avx_vroundsd1673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm4, xmm12, xmm12, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x19, 0x0B, 0xE4, 0x07", "vroundsd xmm4, xmm12, xmm12, 7");
}



#[test]
fn enc_avx_vroundsd1674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm1, xmm11, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x71, 0x0B, 0xFB, 0x5F", "vroundsd xmm15, xmm1, xmm11, 95");
}



#[test]
fn enc_avx_vroundsd1675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm3, xmm4, xmm3, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x0B, 0xDB, 0x04", "vroundsd xmm3, xmm4, xmm3, 4");
}



#[test]
fn enc_avx_vroundsd1676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm3, xmm15, xmm4, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x0B, 0xDC, 0x6A", "vroundsd xmm3, xmm15, xmm4, 106");
}



#[test]
fn enc_avx_vroundsd1677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm12, xmm11, QWORD [rax * 2 + rdx], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x0B, 0x24, 0x42, 0x59", "vroundsd xmm12, xmm11, QWORD [rax * 2 + rdx], 89");
}



#[test]
fn enc_avx_vroundsd1678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm4, xmm12, QWORD [rax + 16], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x0B, 0x60, 0x10, 0x7D", "vroundsd xmm4, xmm12, QWORD [rax + 16], 125");
}



#[test]
fn enc_avx_vroundsd1679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm0, QWORD [rax * 2 + rdx], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x0B, 0x3C, 0x42, 0x2C", "vroundsd xmm15, xmm0, QWORD [rax * 2 + rdx], 44");
}



#[test]
fn enc_avx_vroundsd1680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm12, xmm12, QWORD [rax], 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0B, 0x20, 0x15", "vroundsd xmm12, xmm12, QWORD [rax], 21");
}



#[test]
fn enc_avx_vroundsd1681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm11, xmm1, QWORD [rax * 2 + rdx], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x0B, 0x1C, 0x42, 0x49", "vroundsd xmm11, xmm1, QWORD [rax * 2 + rdx], 73");
}



#[test]
fn enc_avx_vroundss1682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm12, xmm0, xmm12, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0x0A, 0xE4, 0x6F", "vroundss xmm12, xmm0, xmm12, 111");
}



#[test]
fn enc_avx_vroundss1683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm12, xmm1, xmm0, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x0A, 0xE0, 0x68", "vroundss xmm12, xmm1, xmm0, 104");
}



#[test]
fn enc_avx_vroundss1684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm12, xmm11, xmm2, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x0A, 0xE2, 0x2B", "vroundss xmm12, xmm11, xmm2, 43");
}



#[test]
fn enc_avx_vroundss1685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm0, xmm11, xmm15, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x21, 0x0A, 0xC7, 0x4A", "vroundss xmm0, xmm11, xmm15, 74");
}



#[test]
fn enc_avx_vroundss1686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm0, xmm4, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x0A, 0xDC, 0x62", "vroundss xmm3, xmm0, xmm4, 98");
}



#[test]
fn enc_avx_vroundss1687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm12, xmm4, DWORD [rax + 16], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x0A, 0x60, 0x10, 0x49", "vroundss xmm12, xmm4, DWORD [rax + 16], 73");
}



#[test]
fn enc_avx_vroundss1688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm3, DWORD [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x0A, 0x18, 0x3F", "vroundss xmm3, xmm3, DWORD [rax], 63");
}



#[test]
fn enc_avx_vroundss1689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm15, xmm3, DWORD [rax * 2 + rdx], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x0A, 0x3C, 0x42, 0x7A", "vroundss xmm15, xmm3, DWORD [rax * 2 + rdx], 122");
}



#[test]
fn enc_avx_vroundss1690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm11, DWORD [rax], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x0A, 0x18, 0x4E", "vroundss xmm3, xmm11, DWORD [rax], 78");
}



#[test]
fn enc_avx_vroundss1691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm15, xmm4, DWORD [rax + 16], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x0A, 0x78, 0x10, 0x42", "vroundss xmm15, xmm4, DWORD [rax + 16], 66");
}



#[test]
fn enc_avx_vrsqrtss1692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm0, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x52, 0xC3", "vrsqrtss xmm0, xmm2, xmm3");
}



#[test]
fn enc_avx_vrsqrtss1693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x52, 0xC1", "vrsqrtss xmm0, xmm0, xmm1");
}



#[test]
fn enc_avx_vrsqrtss1694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0x52, 0xDB", "vrsqrtss xmm11, xmm15, xmm11");
}



#[test]
fn enc_avx_vrsqrtss1695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm2, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x52, 0xD7", "vrsqrtss xmm2, xmm1, xmm15");
}



#[test]
fn enc_avx_vrsqrtss1696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm2, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x52, 0xD0", "vrsqrtss xmm2, xmm1, xmm0");
}



#[test]
fn enc_avx_vrsqrtss1697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm2, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x52, 0x14, 0x42", "vrsqrtss xmm2, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrsqrtss1698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x52, 0x18", "vrsqrtss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss1699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm0, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x52, 0x04, 0x42", "vrsqrtss xmm0, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrsqrtss1700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm15, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x52, 0x78, 0x10", "vrsqrtss xmm15, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrsqrtss1701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm0, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x52, 0x04, 0x42", "vrsqrtss xmm0, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd1702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm2, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x51, 0xD4", "vsqrtsd xmm2, xmm2, xmm4");
}



#[test]
fn enc_avx_vsqrtsd1703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm3, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x51, 0xD8", "vsqrtsd xmm3, xmm4, xmm0");
}



#[test]
fn enc_avx_vsqrtsd1704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm11, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0x51, 0xDF", "vsqrtsd xmm11, xmm12, xmm15");
}



#[test]
fn enc_avx_vsqrtsd1705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm4, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x51, 0xE4", "vsqrtsd xmm4, xmm1, xmm4");
}



#[test]
fn enc_avx_vsqrtsd1706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm15, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x51, 0xF9", "vsqrtsd xmm15, xmm0, xmm1");
}



#[test]
fn enc_avx_vsqrtsd1707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x51, 0x60, 0x10", "vsqrtsd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd1708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm11, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x51, 0x1C, 0x42", "vsqrtsd xmm11, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd1709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x51, 0x04, 0x42", "vsqrtsd xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd1710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x51, 0x48, 0x10", "vsqrtsd xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd1711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm0, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x51, 0x00", "vsqrtsd xmm0, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vsqrtss1712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm2, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x51, 0xD7", "vsqrtss xmm2, xmm2, xmm15");
}



#[test]
fn enc_avx_vsqrtss1713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm2, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x51, 0xD0", "vsqrtss xmm2, xmm4, xmm0");
}



#[test]
fn enc_avx_vsqrtss1714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm2, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x51, 0xD7", "vsqrtss xmm2, xmm1, xmm15");
}



#[test]
fn enc_avx_vsqrtss1715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm15, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x51, 0xFC", "vsqrtss xmm15, xmm12, xmm4");
}



#[test]
fn enc_avx_vsqrtss1716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm4, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x51, 0xE3", "vsqrtss xmm4, xmm3, xmm11");
}



#[test]
fn enc_avx_vsqrtss1717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm11, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x51, 0x1C, 0x42", "vsqrtss xmm11, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss1718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm0, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x51, 0x04, 0x42", "vsqrtss xmm0, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss1719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm4, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x51, 0x24, 0x42", "vsqrtss xmm4, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss1720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm1, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x51, 0x48, 0x10", "vsqrtss xmm1, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtss1721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x51, 0x18", "vsqrtss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vstmxcsr1722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x18", "vstmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vstmxcsr1723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x1C, 0x42", "vstmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vstmxcsr1724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x58, 0x10", "vstmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd1725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm15, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0x5C, 0xFC", "vsubsd xmm15, xmm2, xmm12");
}



#[test]
fn enc_avx_vsubsd1726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5C, 0xD3", "vsubsd xmm2, xmm12, xmm3");
}



#[test]
fn enc_avx_vsubsd1727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5C, 0xD3", "vsubsd xmm2, xmm1, xmm11");
}



#[test]
fn enc_avx_vsubsd1728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5C, 0xE2", "vsubsd xmm4, xmm0, xmm2");
}



#[test]
fn enc_avx_vsubsd1729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5C, 0xFC", "vsubsd xmm15, xmm3, xmm4");
}



#[test]
fn enc_avx_vsubsd1730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5C, 0x00", "vsubsd xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5C, 0x58, 0x10", "vsubsd xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd1732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5C, 0x24, 0x42", "vsubsd xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubsd1733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm1, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5C, 0x08", "vsubsd xmm1, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5C, 0x58, 0x10", "vsubsd xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm11, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5C, 0xDA", "vsubss xmm11, xmm15, xmm2");
}



#[test]
fn enc_avx_vsubss1736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x5C, 0xDB", "vsubss xmm3, xmm3, xmm11");
}



#[test]
fn enc_avx_vsubss1737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm0, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5C, 0xC4", "vsubss xmm0, xmm4, xmm4");
}



#[test]
fn enc_avx_vsubss1738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm2, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x5C, 0xD0", "vsubss xmm2, xmm1, xmm0");
}



#[test]
fn enc_avx_vsubss1739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm3, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x5C, 0xDF", "vsubss xmm3, xmm2, xmm15");
}



#[test]
fn enc_avx_vsubss1740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5C, 0x18", "vsubss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vsubss1741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm15, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5C, 0x3C, 0x42", "vsubss xmm15, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubss1742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm0, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x5C, 0x40, 0x10", "vsubss xmm0, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm11, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x5C, 0x58, 0x10", "vsubss xmm11, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5C, 0x38", "vsubss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vucomisd1745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2E, 0xFC", "vucomisd xmm15, xmm12");
}



#[test]
fn enc_avx_vucomisd1746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x2E, 0xC7", "vucomisd xmm0, xmm15");
}



#[test]
fn enc_avx_vucomisd1747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x2E, 0xC3", "vucomisd xmm0, xmm11");
}



#[test]
fn enc_avx_vucomisd1748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2E, 0xE3", "vucomisd xmm12, xmm11");
}



#[test]
fn enc_avx_vucomisd1749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x2E, 0xCB", "vucomisd xmm1, xmm11");
}



#[test]
fn enc_avx_vucomisd1750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x38", "vucomisd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vucomisd1751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0x14, 0x42", "vucomisd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomisd1752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x3C, 0x42", "vucomisd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomisd1753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x78, 0x10", "vucomisd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomisd1754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x60, 0x10", "vucomisd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomiss1755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0xE4", "vucomiss xmm12, xmm4");
}



#[test]
fn enc_avx_vucomiss1756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0xDB", "vucomiss xmm11, xmm3");
}



#[test]
fn enc_avx_vucomiss1757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2E, 0xE4", "vucomiss xmm4, xmm12");
}



#[test]
fn enc_avx_vucomiss1758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xD2", "vucomiss xmm2, xmm2");
}



#[test]
fn enc_avx_vucomiss1759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x0C, 0x42", "vucomiss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x10", "vucomiss xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vucomiss1761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x50, 0x10", "vucomiss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomiss1762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x60, 0x10", "vucomiss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomiss1763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0x20", "vucomiss xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vzeroall1764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vzeroall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x77", "vzeroall");
}



#[test]
fn enc_avx_vzeroupper1765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vzeroupper
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x77", "vzeroupper");
}


