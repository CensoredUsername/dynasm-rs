
#[test]
fn enc_avx_vaddsd1004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm4, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x58, 0xE3", "vaddsd xmm4, xmm3, xmm11");
}



#[test]
fn enc_avx_vaddsd1005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm15, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x58, 0xFB", "vaddsd xmm15, xmm4, xmm3");
}



#[test]
fn enc_avx_vaddsd1006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm11, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x58, 0xDA", "vaddsd xmm11, xmm11, xmm2");
}



#[test]
fn enc_avx_vaddsd1007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x58, 0xDF", "vaddsd xmm3, xmm11, xmm15");
}



#[test]
fn enc_avx_vaddsd1008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm4, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x58, 0xE4", "vaddsd xmm4, xmm1, xmm4");
}



#[test]
fn enc_avx_vaddsd1009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x58, 0x78, 0x10", "vaddsd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd1010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm1, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x58, 0x08", "vaddsd xmm1, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vaddsd1011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm1, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x58, 0x08", "vaddsd xmm1, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vaddsd1012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x58, 0x60, 0x10", "vaddsd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd1013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x58, 0x60, 0x10", "vaddsd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddss1014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm11, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x58, 0xDF", "vaddss xmm11, xmm12, xmm15");
}



#[test]
fn enc_avx_vaddss1015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x58, 0xCC", "vaddss xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vaddss1016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm11, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x58, 0xD9", "vaddss xmm11, xmm11, xmm1");
}



#[test]
fn enc_avx_vaddss1017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x58, 0xC8", "vaddss xmm1, xmm3, xmm0");
}



#[test]
fn enc_avx_vaddss1018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm0, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x58, 0xC2", "vaddss xmm0, xmm3, xmm2");
}



#[test]
fn enc_avx_vaddss1019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm0, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x58, 0x00", "vaddss xmm0, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss1020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm4, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x58, 0x60, 0x10", "vaddss xmm4, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddss1021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm3, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x58, 0x1C, 0x42", "vaddss xmm3, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddss1022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm11, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x58, 0x1C, 0x42", "vaddss xmm11, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddss1023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm3, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x58, 0x18", "vaddss xmm3, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vaesdec1024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xDE, 0xC8", "vaesdec xmm1, xmm11, xmm0");
}



#[test]
fn enc_avx_vaesdec1025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm2, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xDE, 0x12", "vaesdec xmm2, xmm4, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdec1026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm2, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xDE, 0xD4", "vaesdec xmm2, xmm4, xmm4");
}



#[test]
fn enc_avx_vaesdec1027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDE, 0xC3", "vaesdec xmm0, xmm1, xmm3");
}



#[test]
fn enc_avx_vaesdec1028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm4, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDE, 0x22", "vaesdec xmm4, xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdeclast1029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xDF, 0xDB", "vaesdeclast xmm3, xmm1, xmm11");
}



#[test]
fn enc_avx_vaesdeclast1030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm12, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xDF, 0x22", "vaesdeclast xmm12, xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdeclast1031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm2, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xDF, 0xD1", "vaesdeclast xmm2, xmm3, xmm1");
}



#[test]
fn enc_avx_vaesdeclast1032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm4, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDF, 0xE1", "vaesdeclast xmm4, xmm0, xmm1");
}



#[test]
fn enc_avx_vaesdeclast1033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm0, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDF, 0x04, 0x42", "vaesdeclast xmm0, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesenc1034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm3, xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xDC, 0x1C, 0x42", "vaesenc xmm3, xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesenc1035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm11, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xDC, 0xDC", "vaesenc xmm11, xmm15, xmm4");
}



#[test]
fn enc_avx_vaesenc1036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm11, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0xDC, 0xDB", "vaesenc xmm11, xmm2, xmm11");
}



#[test]
fn enc_avx_vaesenc1037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm12, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xDC, 0x22", "vaesenc xmm12, xmm4, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesenc1038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm15, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xDC, 0xFF", "vaesenc xmm15, xmm3, xmm15");
}



#[test]
fn enc_avx_vaesenclast1039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm0, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDD, 0x04, 0x42", "vaesenclast xmm0, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesenclast1040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm11, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xDD, 0xDB", "vaesenclast xmm11, xmm2, xmm3");
}



#[test]
fn enc_avx_vaesenclast1041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm4, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xDD, 0xE0", "vaesenclast xmm4, xmm4, xmm0");
}



#[test]
fn enc_avx_vaesenclast1042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm0, xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xDD, 0x04, 0x42", "vaesenclast xmm0, xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesenclast1043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm11, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xDD, 0xDA", "vaesenclast xmm11, xmm3, xmm2");
}



#[test]
fn enc_avx_vaesimc1044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xDB, 0x24, 0x42", "vaesimc xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesimc1045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xDB, 0xFC", "vaesimc xmm15, xmm12");
}



#[test]
fn enc_avx_vaesimc1046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xD2", "vaesimc xmm2, xmm2");
}



#[test]
fn enc_avx_vaesimc1047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xDB, 0xE7", "vaesimc xmm12, xmm15");
}



#[test]
fn enc_avx_vaesimc1048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xDB, 0xC0", "vaesimc xmm0, xmm0");
}



#[test]
fn enc_avx_vaeskeygenassist1049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm0, xmm0, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0xC0, 0x26", "vaeskeygenassist xmm0, xmm0, 38");
}



#[test]
fn enc_avx_vaeskeygenassist1050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm0, xmm3, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0xC3, 0x6B", "vaeskeygenassist xmm0, xmm3, 107");
}



#[test]
fn enc_avx_vaeskeygenassist1051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm11, xmm11, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0xDF, 0xDB, 0x31", "vaeskeygenassist xmm11, xmm11, 49");
}



#[test]
fn enc_avx_vaeskeygenassist1052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm0, xmm3, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0xC3, 0x29", "vaeskeygenassist xmm0, xmm3, 41");
}



#[test]
fn enc_avx_vaeskeygenassist1053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm4, xmm11, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x79, 0xDF, 0xE3, 0x7A", "vaeskeygenassist xmm4, xmm11, 122");
}



#[test]
fn enc_avx_vbroadcastf1281054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x1C, 0x42", "vbroadcastf128 ymm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastf1281055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm12, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x1A, 0x60, 0x10", "vbroadcastf128 ymm12, OWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastf1281056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm4, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x60, 0x10", "vbroadcastf128 ymm4, OWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastf1281057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x1A, 0x3C, 0x42", "vbroadcastf128 ymm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastf1281058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x1A, 0x24, 0x42", "vbroadcastf128 ymm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x10", "vbroadcastsd ymm2, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x18", "vbroadcastsd ymm3, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0x1C, 0x42", "vbroadcastsd ymm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0x18", "vbroadcastsd ymm11, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0xF8", "vbroadcastsd ymm15, xmm0");
}



#[test]
fn enc_avx_vbroadcastsd1064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xD9", "vbroadcastsd ymm3, xmm1");
}



#[test]
fn enc_avx_vbroadcastsd1065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x7D, 0x19, 0xE4", "vbroadcastsd ymm4, xmm12");
}



#[test]
fn enc_avx_vbroadcastsd1066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0xFA", "vbroadcastsd ymm15, xmm2");
}



#[test]
fn enc_avx_vbroadcastsd1067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x7D, 0x19, 0xD7", "vbroadcastsd ymm2, xmm15");
}



#[test]
fn enc_avx_vcmpeq_ossd1068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm4, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xE2, 0x10", "vcmpeq_ossd xmm4, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpeq_ossd1069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm12, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xE3, 0x10", "vcmpeq_ossd xmm12, xmm0, xmm11");
}



#[test]
fn enc_avx_vcmpeq_ossd1070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm11, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xDA, 0x10", "vcmpeq_ossd xmm11, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpeq_ossd1071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm1, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xCA, 0x10", "vcmpeq_ossd xmm1, xmm2, xmm2");
}



#[test]
fn enc_avx_vcmpeq_ossd1072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm12, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xE0, 0x10", "vcmpeq_ossd xmm12, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpeq_ossd1073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x20, 0x10", "vcmpeq_ossd xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpeq_ossd1074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x60, 0x10, 0x10", "vcmpeq_ossd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ossd1075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm0, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x40, 0x10, 0x10", "vcmpeq_ossd xmm0, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ossd1076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x58, 0x10, 0x10", "vcmpeq_ossd xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ossd1077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm1, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x0C, 0x42, 0x10", "vcmpeq_ossd xmm1, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_ossd1078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm12, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xE3, 0x10", "vcmpeq_ossd xmm12, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpeq_ossd1079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm12, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xE0, 0x10", "vcmpeq_ossd xmm12, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmpeq_ossd1080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm3, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xDC, 0x10", "vcmpeq_ossd xmm3, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpeq_ossd1081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xF8, 0x10", "vcmpeq_ossd xmm15, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpeq_ossd1082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm4, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xE4, 0x10", "vcmpeq_ossd xmm4, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpeq_ossd1083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm12, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x24, 0x42, 0x10", "vcmpeq_ossd xmm12, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_ossd1084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm2, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x50, 0x10, 0x10", "vcmpeq_ossd xmm2, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ossd1085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm1, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x0C, 0x42, 0x10", "vcmpeq_ossd xmm1, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_ossd1086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x60, 0x10, 0x10", "vcmpeq_ossd xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ossd1087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ossd xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x1C, 0x42, 0x10", "vcmpeq_ossd xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_osss1088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm3, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xD9, 0x10", "vcmpeq_osss xmm3, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpeq_osss1089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm4, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0xC2, 0xE4, 0x10", "vcmpeq_osss xmm4, xmm2, xmm12");
}



#[test]
fn enc_avx_vcmpeq_osss1090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm4, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xE2, 0x10", "vcmpeq_osss xmm4, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpeq_osss1091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5A, 0xC2, 0xDC, 0x10", "vcmpeq_osss xmm11, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpeq_osss1092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm4, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xE4, 0x10", "vcmpeq_osss xmm4, xmm11, xmm4");
}



#[test]
fn enc_avx_vcmpeq_osss1093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x24, 0x42, 0x10", "vcmpeq_osss xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_osss1094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm3, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x1C, 0x42, 0x10", "vcmpeq_osss xmm3, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_osss1095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm1, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x48, 0x10, 0x10", "vcmpeq_osss xmm1, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_osss1096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm3, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x58, 0x10, 0x10", "vcmpeq_osss xmm3, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_osss1097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm3, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x1C, 0x42, 0x10", "vcmpeq_osss xmm3, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_osss1098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm15, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0xC2, 0xFB, 0x10", "vcmpeq_osss xmm15, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpeq_osss1099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm1, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0xC2, 0xCF, 0x10", "vcmpeq_osss xmm1, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpeq_osss1100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm2, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xD4, 0x10", "vcmpeq_osss xmm2, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpeq_osss1101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm3, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xD9, 0x10", "vcmpeq_osss xmm3, xmm1, xmm1");
}



#[test]
fn enc_avx_vcmpeq_osss1102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm0, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xC3, 0x10", "vcmpeq_osss xmm0, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpeq_osss1103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm12, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x60, 0x10, 0x10", "vcmpeq_osss xmm12, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_osss1104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x1C, 0x42, 0x10", "vcmpeq_osss xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_osss1105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x60, 0x10, 0x10", "vcmpeq_osss xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_osss1106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x58, 0x10, 0x10", "vcmpeq_osss xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_osss1107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_osss xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x14, 0x42, 0x10", "vcmpeq_osss xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_uqpd1108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd ymm0, ymm3, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0x00, 0x08", "vcmpeq_uqpd ymm0, ymm3, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpeq_uqpd1109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd ymm3, ymm12, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0xD8, 0x08", "vcmpeq_uqpd ymm3, ymm12, ymm0");
}



#[test]
fn enc_avx_vcmpeq_uqpd1110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd ymm4, ymm15, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x85, 0xC2, 0x24, 0x42, 0x08", "vcmpeq_uqpd ymm4, ymm15, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_uqpd1111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd ymm1, ymm15, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x05, 0xC2, 0xCC, 0x08", "vcmpeq_uqpd ymm1, ymm15, ymm12");
}



#[test]
fn enc_avx_vcmpeq_uqpd1112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd ymm0, ymm12, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0xC2, 0x08", "vcmpeq_uqpd ymm0, ymm12, ymm2");
}



#[test]
fn enc_avx_vcmpeq_uqpd1113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd xmm3, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0x1A, 0x08", "vcmpeq_uqpd xmm3, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmpeq_uqpd1114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd xmm2, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xD3, 0x08", "vcmpeq_uqpd xmm2, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmpeq_uqpd1115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd xmm11, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC2, 0xD8, 0x08", "vcmpeq_uqpd xmm11, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpeq_uqpd1116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd xmm4, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0xE2, 0x08", "vcmpeq_uqpd xmm4, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpeq_uqpd1117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqpd xmm2, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x71, 0xC2, 0xD4, 0x08", "vcmpeq_uqpd xmm2, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmpeq_uqsd1118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm4, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xE2, 0x08", "vcmpeq_uqsd xmm4, xmm3, xmm2");
}



#[test]
fn enc_avx_vcmpeq_uqsd1119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm15, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xFB, 0x08", "vcmpeq_uqsd xmm15, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpeq_uqsd1120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm4, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xE3, 0x08", "vcmpeq_uqsd xmm4, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpeq_uqsd1121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC1, 0x08", "vcmpeq_uqsd xmm0, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpeq_uqsd1122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm0, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xC4, 0x08", "vcmpeq_uqsd xmm0, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpeq_uqsd1123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x0C, 0x42, 0x08", "vcmpeq_uqsd xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_uqsd1124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm0, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x40, 0x10, 0x08", "vcmpeq_uqsd xmm0, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_uqsd1125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm1, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x0C, 0x42, 0x08", "vcmpeq_uqsd xmm1, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_uqsd1126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm0, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x00, 0x08", "vcmpeq_uqsd xmm0, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpeq_uqsd1127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqsd xmm3, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x1C, 0x42, 0x08", "vcmpeq_uqsd xmm3, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_uqss1128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm11, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xDC, 0x08", "vcmpeq_uqss xmm11, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpeq_uqss1129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm1, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0xC2, 0xCF, 0x08", "vcmpeq_uqss xmm1, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpeq_uqss1130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm1, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xCB, 0x08", "vcmpeq_uqss xmm1, xmm12, xmm3");
}



#[test]
fn enc_avx_vcmpeq_uqss1131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm12, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0xC2, 0xE7, 0x08", "vcmpeq_uqss xmm12, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpeq_uqss1132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm15, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5A, 0xC2, 0xFC, 0x08", "vcmpeq_uqss xmm15, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpeq_uqss1133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm11, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x18, 0x08", "vcmpeq_uqss xmm11, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpeq_uqss1134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm2, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x50, 0x10, 0x08", "vcmpeq_uqss xmm2, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_uqss1135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x58, 0x10, 0x08", "vcmpeq_uqss xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_uqss1136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x58, 0x10, 0x08", "vcmpeq_uqss xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_uqss1137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_uqss xmm0, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x40, 0x10, 0x08", "vcmpeq_uqss xmm0, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ussd1138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm15, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xFC, 0x18", "vcmpeq_ussd xmm15, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpeq_ussd1139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm4, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xE3, 0x18", "vcmpeq_ussd xmm4, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpeq_ussd1140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0xC2, 0xE3, 0x18", "vcmpeq_ussd xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpeq_ussd1141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm15, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xFA, 0x18", "vcmpeq_ussd xmm15, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpeq_ussd1142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm15, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xFA, 0x18", "vcmpeq_ussd xmm15, xmm3, xmm2");
}



#[test]
fn enc_avx_vcmpeq_ussd1143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x60, 0x10, 0x18", "vcmpeq_ussd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_ussd1144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x0C, 0x42, 0x18", "vcmpeq_ussd xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_ussd1145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm3, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x1C, 0x42, 0x18", "vcmpeq_ussd xmm3, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_ussd1146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x24, 0x42, 0x18", "vcmpeq_ussd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_ussd1147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_ussd xmm15, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x38, 0x18", "vcmpeq_ussd xmm15, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpeq_usss1148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm3, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xDB, 0x18", "vcmpeq_usss xmm3, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmpeq_usss1149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm15, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0xC2, 0xFB, 0x18", "vcmpeq_usss xmm15, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmpeq_usss1150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm2, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xD3, 0x18", "vcmpeq_usss xmm2, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpeq_usss1151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0xE2, 0x18", "vcmpeq_usss xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vcmpeq_usss1152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm0, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xC4, 0x18", "vcmpeq_usss xmm0, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpeq_usss1153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x18, 0x18", "vcmpeq_usss xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpeq_usss1154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm15, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x3C, 0x42, 0x18", "vcmpeq_usss xmm15, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_usss1155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm3, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x58, 0x10, 0x18", "vcmpeq_usss xmm3, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeq_usss1156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm4, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x24, 0x42, 0x18", "vcmpeq_usss xmm4, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeq_usss1157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeq_usss xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x0C, 0x42, 0x18", "vcmpeq_usss xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeqsd1158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm3, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xDC, 0x00", "vcmpeqsd xmm3, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpeqsd1159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xDB, 0x00", "vcmpeqsd xmm3, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpeqsd1160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm4, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xE3, 0x00", "vcmpeqsd xmm4, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpeqsd1161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm0, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xC7, 0x00", "vcmpeqsd xmm0, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpeqsd1162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm4, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xE3, 0x00", "vcmpeqsd xmm4, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpeqsd1163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm1, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x48, 0x10, 0x00", "vcmpeqsd xmm1, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeqsd1164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x58, 0x10, 0x00", "vcmpeqsd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeqsd1165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm12, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x60, 0x10, 0x00", "vcmpeqsd xmm12, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeqsd1166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm4, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x24, 0x42, 0x00", "vcmpeqsd xmm4, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpeqsd1167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqsd xmm2, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x50, 0x10, 0x00", "vcmpeqsd xmm2, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeqss1168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm15, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0xF9, 0x00", "vcmpeqss xmm15, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpeqss1169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm3, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xDA, 0x00", "vcmpeqss xmm3, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpeqss1170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm4, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0xC2, 0xE4, 0x00", "vcmpeqss xmm4, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpeqss1171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm1, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xCB, 0x00", "vcmpeqss xmm1, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpeqss1172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm15, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0xC2, 0xFC, 0x00", "vcmpeqss xmm15, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpeqss1173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm2, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x50, 0x10, 0x00", "vcmpeqss xmm2, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeqss1174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm4, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x60, 0x10, 0x00", "vcmpeqss xmm4, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpeqss1175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x10, 0x00", "vcmpeqss xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpeqss1176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpeqss xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x1C, 0x42, 0x00", "vcmpeqss xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm1, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xCC, 0x0B", "vcmpfalse_oqsd xmm1, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xFC, 0x0B", "vcmpfalse_oqsd xmm15, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm1, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xCB, 0x0B", "vcmpfalse_oqsd xmm1, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm4, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xE7, 0x0B", "vcmpfalse_oqsd xmm4, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm12, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xE3, 0x0B", "vcmpfalse_oqsd xmm12, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm3, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x18, 0x0B", "vcmpfalse_oqsd xmm3, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x40, 0x10, 0x0B", "vcmpfalse_oqsd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x24, 0x42, 0x0B", "vcmpfalse_oqsd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x38, 0x0B", "vcmpfalse_oqsd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_oqsd1186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqsd xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x18, 0x0B", "vcmpfalse_oqsd xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_oqss1187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm11, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xDC, 0x0B", "vcmpfalse_oqss xmm11, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpfalse_oqss1188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm3, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xDC, 0x0B", "vcmpfalse_oqss xmm3, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpfalse_oqss1189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm4, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xE3, 0x0B", "vcmpfalse_oqss xmm4, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmpfalse_oqss1190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm0, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC0, 0x0B", "vcmpfalse_oqss xmm0, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpfalse_oqss1191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm0, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xC1, 0x0B", "vcmpfalse_oqss xmm0, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmpfalse_oqss1192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x04, 0x42, 0x0B", "vcmpfalse_oqss xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_oqss1193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm4, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x24, 0x42, 0x0B", "vcmpfalse_oqss xmm4, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_oqss1194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm3, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x18, 0x0B", "vcmpfalse_oqss xmm3, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_oqss1195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm15, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x3C, 0x42, 0x0B", "vcmpfalse_oqss xmm15, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_oqss1196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_oqss xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x60, 0x10, 0x0B", "vcmpfalse_oqss xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalse_ossd1197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xDB, 0x1B", "vcmpfalse_ossd xmm3, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpfalse_ossd1198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm12, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x03, 0xC2, 0xE4, 0x1B", "vcmpfalse_ossd xmm12, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpfalse_ossd1199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm1, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xCB, 0x1B", "vcmpfalse_ossd xmm1, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpfalse_ossd1200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xDF, 0x1B", "vcmpfalse_ossd xmm11, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpfalse_ossd1201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm1, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xCF, 0x1B", "vcmpfalse_ossd xmm1, xmm12, xmm15");
}



#[test]
fn enc_avx_vcmpfalse_ossd1202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm12, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x20, 0x1B", "vcmpfalse_ossd xmm12, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_ossd1203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm12, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x60, 0x10, 0x1B", "vcmpfalse_ossd xmm12, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalse_ossd1204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x38, 0x1B", "vcmpfalse_ossd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_ossd1205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x18, 0x1B", "vcmpfalse_ossd xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_ossd1206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_ossd xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x14, 0x42, 0x1B", "vcmpfalse_ossd xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_osss1207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm3, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xDA, 0x1B", "vcmpfalse_osss xmm3, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpfalse_osss1208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm3, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xDB, 0x1B", "vcmpfalse_osss xmm3, xmm4, xmm11");
}



#[test]
fn enc_avx_vcmpfalse_osss1209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm15, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0xF9, 0x1B", "vcmpfalse_osss xmm15, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpfalse_osss1210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm2, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xD4, 0x1B", "vcmpfalse_osss xmm2, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpfalse_osss1211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC1, 0x1B", "vcmpfalse_osss xmm0, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpfalse_osss1212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x60, 0x10, 0x1B", "vcmpfalse_osss xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalse_osss1213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm1, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x0C, 0x42, 0x1B", "vcmpfalse_osss xmm1, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalse_osss1214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x38, 0x1B", "vcmpfalse_osss xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalse_osss1215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm11, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x58, 0x10, 0x1B", "vcmpfalse_osss xmm11, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalse_osss1216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalse_osss xmm2, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x50, 0x10, 0x1B", "vcmpfalse_osss xmm2, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalsepd1217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd ymm0, ymm11, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0x00, 0x0B", "vcmpfalsepd ymm0, ymm11, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalsepd1218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd ymm0, ymm12, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0xC0, 0x0B", "vcmpfalsepd ymm0, ymm12, ymm0");
}



#[test]
fn enc_avx_vcmpfalsepd1219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd ymm2, ymm0, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0x10, 0x0B", "vcmpfalsepd ymm2, ymm0, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalsepd1220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd ymm12, ymm1, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x75, 0xC2, 0x20, 0x0B", "vcmpfalsepd ymm12, ymm1, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalsepd1221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd ymm1, ymm11, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0xCB, 0x0B", "vcmpfalsepd ymm1, ymm11, ymm3");
}



#[test]
fn enc_avx_vcmpfalsepd1222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd xmm15, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x71, 0xC2, 0xFB, 0x0B", "vcmpfalsepd xmm15, xmm1, xmm11");
}



#[test]
fn enc_avx_vcmpfalsepd1223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x69, 0xC2, 0xE3, 0x0B", "vcmpfalsepd xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpfalsepd1224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd xmm3, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0xC2, 0xDC, 0x0B", "vcmpfalsepd xmm3, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpfalsepd1225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd xmm4, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xE1, 0x0B", "vcmpfalsepd xmm4, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpfalsepd1226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsepd xmm4, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0xE0, 0x0B", "vcmpfalsepd xmm4, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpfalsesd1227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xE2, 0x0B", "vcmpfalsesd xmm4, xmm0, xmm2");
}



#[test]
fn enc_avx_vcmpfalsesd1228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm11, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xDC, 0x0B", "vcmpfalsesd xmm11, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmpfalsesd1229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm4, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xE3, 0x0B", "vcmpfalsesd xmm4, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpfalsesd1230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xC9, 0x0B", "vcmpfalsesd xmm1, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpfalsesd1231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm12, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xE2, 0x0B", "vcmpfalsesd xmm12, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpfalsesd1232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm11, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x58, 0x10, 0x0B", "vcmpfalsesd xmm11, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalsesd1233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x04, 0x42, 0x0B", "vcmpfalsesd xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalsesd1234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm0, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x00, 0x0B", "vcmpfalsesd xmm0, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalsesd1235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm12, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x60, 0x10, 0x0B", "vcmpfalsesd xmm12, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalsesd1236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsesd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x1C, 0x42, 0x0B", "vcmpfalsesd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalsess1237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xC9, 0x0B", "vcmpfalsess xmm1, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpfalsess1238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm12, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xE3, 0x0B", "vcmpfalsess xmm12, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmpfalsess1239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm0, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xC3, 0x0B", "vcmpfalsess xmm0, xmm11, xmm11");
}



#[test]
fn enc_avx_vcmpfalsess1240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm1, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xC9, 0x0B", "vcmpfalsess xmm1, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmpfalsess1241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm2, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xD4, 0x0B", "vcmpfalsess xmm2, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpfalsess1242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x24, 0x42, 0x0B", "vcmpfalsess xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpfalsess1243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm15, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x78, 0x10, 0x0B", "vcmpfalsess xmm15, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalsess1244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm12, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x60, 0x10, 0x0B", "vcmpfalsess xmm12, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpfalsess1245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x10, 0x0B", "vcmpfalsess xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpfalsess1246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpfalsess xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x04, 0x42, 0x0B", "vcmpfalsess xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqpd1247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd xmm0, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0xC3, 0x1D", "vcmpge_oqpd xmm0, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpge_oqpd1248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd xmm3, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC2, 0x1C, 0x42, 0x1D", "vcmpge_oqpd xmm3, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqpd1249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd xmm4, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x21, 0xC2, 0xE4, 0x1D", "vcmpge_oqpd xmm4, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpge_oqpd1250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd xmm4, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x61, 0xC2, 0xE7, 0x1D", "vcmpge_oqpd xmm4, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmpge_oqpd1251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0xDC, 0x1D", "vcmpge_oqpd xmm3, xmm4, xmm4");
}



#[test]
fn enc_avx_vcmpge_oqpd1252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd ymm12, ymm4, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0xE4, 0x1D", "vcmpge_oqpd ymm12, ymm4, ymm4");
}



#[test]
fn enc_avx_vcmpge_oqpd1253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd ymm15, ymm4, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0x3C, 0x42, 0x1D", "vcmpge_oqpd ymm15, ymm4, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqpd1254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd ymm1, ymm3, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x65, 0xC2, 0xCF, 0x1D", "vcmpge_oqpd ymm1, ymm3, ymm15");
}



#[test]
fn enc_avx_vcmpge_oqpd1255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd ymm2, ymm4, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDD, 0xC2, 0x10, 0x1D", "vcmpge_oqpd ymm2, ymm4, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpge_oqpd1256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqpd ymm4, ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xE1, 0x1D", "vcmpge_oqpd ymm4, ymm2, ymm1");
}



#[test]
fn enc_avx_vcmpge_oqsd1257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm1, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xC8, 0x1D", "vcmpge_oqsd xmm1, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpge_oqsd1258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm4, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xE4, 0x1D", "vcmpge_oqsd xmm4, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmpge_oqsd1259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm12, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xE2, 0x1D", "vcmpge_oqsd xmm12, xmm2, xmm2");
}



#[test]
fn enc_avx_vcmpge_oqsd1260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm3, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xD8, 0x1D", "vcmpge_oqsd xmm3, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpge_oqsd1261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm12, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0xC2, 0xE4, 0x1D", "vcmpge_oqsd xmm12, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmpge_oqsd1262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm3, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x58, 0x10, 0x1D", "vcmpge_oqsd xmm3, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_oqsd1263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm3, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x1C, 0x42, 0x1D", "vcmpge_oqsd xmm3, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqsd1264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x14, 0x42, 0x1D", "vcmpge_oqsd xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqsd1265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm15, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x3C, 0x42, 0x1D", "vcmpge_oqsd xmm15, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqsd1266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqsd xmm3, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x58, 0x10, 0x1D", "vcmpge_oqsd xmm3, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_oqss1267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0xC2, 0xFC, 0x1D", "vcmpge_oqss xmm15, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmpge_oqss1268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm2, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0xC2, 0xD4, 0x1D", "vcmpge_oqss xmm2, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmpge_oqss1269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xC4, 0x1D", "vcmpge_oqss xmm0, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmpge_oqss1270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm12, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xE1, 0x1D", "vcmpge_oqss xmm12, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmpge_oqss1271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm1, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xCB, 0x1D", "vcmpge_oqss xmm1, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpge_oqss1272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm12, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x24, 0x42, 0x1D", "vcmpge_oqss xmm12, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_oqss1273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm2, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x50, 0x10, 0x1D", "vcmpge_oqss xmm2, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_oqss1274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm1, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x48, 0x10, 0x1D", "vcmpge_oqss xmm1, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_oqss1275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x40, 0x10, 0x1D", "vcmpge_oqss xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_oqss1276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_oqss xmm11, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x1C, 0x42, 0x1D", "vcmpge_oqss xmm11, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_ospd1277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd ymm2, ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0xD2, 0x0D", "vcmpge_ospd ymm2, ymm3, ymm2");
}



#[test]
fn enc_avx_vcmpge_ospd1278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd ymm1, ymm2, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xC8, 0x0D", "vcmpge_ospd ymm1, ymm2, ymm0");
}



#[test]
fn enc_avx_vcmpge_ospd1279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd ymm3, ymm3, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x65, 0xC2, 0xDB, 0x0D", "vcmpge_ospd ymm3, ymm3, ymm11");
}



#[test]
fn enc_avx_vcmpge_ospd1280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd ymm4, ymm12, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0xE1, 0x0D", "vcmpge_ospd ymm4, ymm12, ymm1");
}



#[test]
fn enc_avx_vcmpge_ospd1281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd ymm12, ymm4, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0xE1, 0x0D", "vcmpge_ospd ymm12, ymm4, ymm1");
}



#[test]
fn enc_avx_vcmpge_ospd1282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x59, 0xC2, 0xDF, 0x0D", "vcmpge_ospd xmm3, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmpge_ospd1283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd xmm0, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0xC3, 0x0D", "vcmpge_ospd xmm0, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmpge_ospd1284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd xmm12, xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC2, 0x22, 0x0D", "vcmpge_ospd xmm12, xmm2, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmpge_ospd1285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd xmm4, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xE7, 0x0D", "vcmpge_ospd xmm4, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpge_ospd1286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ospd xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0xE1, 0x0D", "vcmpge_ospd xmm12, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmpge_ossd1287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm11, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xDB, 0x0D", "vcmpge_ossd xmm11, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpge_ossd1288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xE0, 0x0D", "vcmpge_ossd xmm4, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpge_ossd1289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm1, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0xC2, 0xCB, 0x0D", "vcmpge_ossd xmm1, xmm0, xmm11");
}



#[test]
fn enc_avx_vcmpge_ossd1290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm4, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xE4, 0x0D", "vcmpge_ossd xmm4, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpge_ossd1291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm2, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xD0, 0x0D", "vcmpge_ossd xmm2, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpge_ossd1292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x60, 0x10, 0x0D", "vcmpge_ossd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_ossd1293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm0, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x04, 0x42, 0x0D", "vcmpge_ossd xmm0, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpge_ossd1294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm0, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x40, 0x10, 0x0D", "vcmpge_ossd xmm0, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_ossd1295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm0, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x00, 0x0D", "vcmpge_ossd xmm0, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpge_ossd1296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_ossd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x08, 0x0D", "vcmpge_ossd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpge_osss1297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm15, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0xC2, 0xFF, 0x0D", "vcmpge_osss xmm15, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpge_osss1298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm1, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xCC, 0x0D", "vcmpge_osss xmm1, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpge_osss1299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm12, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xE7, 0x0D", "vcmpge_osss xmm12, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpge_osss1300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm12, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0xC2, 0xE4, 0x0D", "vcmpge_osss xmm12, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpge_osss1301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm15, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xFA, 0x0D", "vcmpge_osss xmm15, xmm3, xmm2");
}



#[test]
fn enc_avx_vcmpge_osss1302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm0, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x00, 0x0D", "vcmpge_osss xmm0, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpge_osss1303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x10, 0x0D", "vcmpge_osss xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpge_osss1304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm2, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x50, 0x10, 0x0D", "vcmpge_osss xmm2, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpge_osss1305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm11, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x18, 0x0D", "vcmpge_osss xmm11, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpge_osss1306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpge_osss xmm0, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x00, 0x0D", "vcmpge_osss xmm0, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgepd1307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd ymm15, ymm3, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x65, 0xC2, 0x38, 0x0D", "vcmpgepd ymm15, ymm3, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpgepd1308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd ymm12, ymm15, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x05, 0xC2, 0xE1, 0x0D", "vcmpgepd ymm12, ymm15, ymm1");
}



#[test]
fn enc_avx_vcmpgepd1309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd ymm15, ymm11, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x25, 0xC2, 0xF9, 0x0D", "vcmpgepd ymm15, ymm11, ymm1");
}



#[test]
fn enc_avx_vcmpgepd1310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd ymm2, ymm1, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF5, 0xC2, 0x12, 0x0D", "vcmpgepd ymm2, ymm1, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmpgepd1311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd ymm2, ymm4, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5D, 0xC2, 0xD3, 0x0D", "vcmpgepd ymm2, ymm4, ymm11");
}



#[test]
fn enc_avx_vcmpgepd1312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd xmm15, xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC2, 0x38, 0x0D", "vcmpgepd xmm15, xmm1, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpgepd1313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd xmm1, xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0x0C, 0x42, 0x0D", "vcmpgepd xmm1, xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgepd1314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd xmm12, xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC2, 0x20, 0x0D", "vcmpgepd xmm12, xmm11, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpgepd1315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd xmm2, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x69, 0xC2, 0xD4, 0x0D", "vcmpgepd xmm2, xmm2, xmm12");
}



#[test]
fn enc_avx_vcmpgepd1316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgepd xmm0, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0xC2, 0x0D", "vcmpgepd xmm0, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpgesd1317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm4, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xE0, 0x0D", "vcmpgesd xmm4, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpgesd1318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm1, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0xC2, 0xCF, 0x0D", "vcmpgesd xmm1, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpgesd1319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xC1, 0x0D", "vcmpgesd xmm0, xmm11, xmm1");
}



#[test]
fn enc_avx_vcmpgesd1320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm12, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0xC2, 0xE4, 0x0D", "vcmpgesd xmm12, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmpgesd1321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm0, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0xC2, 0xC4, 0x0D", "vcmpgesd xmm0, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmpgesd1322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x1C, 0x42, 0x0D", "vcmpgesd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgesd1323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x18, 0x0D", "vcmpgesd xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgesd1324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm0, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x00, 0x0D", "vcmpgesd xmm0, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgesd1325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x08, 0x0D", "vcmpgesd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgesd1326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgesd xmm2, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x14, 0x42, 0x0D", "vcmpgesd xmm2, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgess1327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm2, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xD0, 0x0D", "vcmpgess xmm2, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpgess1328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm3, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xDC, 0x0D", "vcmpgess xmm3, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpgess1329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm0, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xC0, 0x0D", "vcmpgess xmm0, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmpgess1330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm2, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0xC2, 0xD3, 0x0D", "vcmpgess xmm2, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpgess1331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm11, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xDA, 0x0D", "vcmpgess xmm11, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpgess1332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x58, 0x10, 0x0D", "vcmpgess xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgess1333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm1, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x48, 0x10, 0x0D", "vcmpgess xmm1, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgess1334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x40, 0x10, 0x0D", "vcmpgess xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgess1335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm11, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0x58, 0x10, 0x0D", "vcmpgess xmm11, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgess1336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgess xmm2, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x10, 0x0D", "vcmpgess xmm2, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgt_oqsd1337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm2, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0xD2, 0x1E", "vcmpgt_oqsd xmm2, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpgt_oqsd1338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xDB, 0x1E", "vcmpgt_oqsd xmm3, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpgt_oqsd1339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xDF, 0x1E", "vcmpgt_oqsd xmm3, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpgt_oqsd1340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm1, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xCC, 0x1E", "vcmpgt_oqsd xmm1, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpgt_oqsd1341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm2, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xD7, 0x1E", "vcmpgt_oqsd xmm2, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpgt_oqsd1342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x04, 0x42, 0x1E", "vcmpgt_oqsd xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_oqsd1343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x10, 0x1E", "vcmpgt_oqsd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgt_oqsd1344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x1C, 0x42, 0x1E", "vcmpgt_oqsd xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_oqsd1345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm4, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x60, 0x10, 0x1E", "vcmpgt_oqsd xmm4, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_oqsd1346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqsd xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x18, 0x1E", "vcmpgt_oqsd xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgt_oqss1347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xFC, 0x1E", "vcmpgt_oqss xmm15, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpgt_oqss1348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xC9, 0x1E", "vcmpgt_oqss xmm1, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpgt_oqss1349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm3, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xDC, 0x1E", "vcmpgt_oqss xmm3, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpgt_oqss1350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm0, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xC1, 0x1E", "vcmpgt_oqss xmm0, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmpgt_oqss1351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm15, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xFC, 0x1E", "vcmpgt_oqss xmm15, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpgt_oqss1352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm2, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x50, 0x10, 0x1E", "vcmpgt_oqss xmm2, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_oqss1353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x04, 0x42, 0x1E", "vcmpgt_oqss xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_oqss1354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm1, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x0C, 0x42, 0x1E", "vcmpgt_oqss xmm1, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_oqss1355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm1, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x48, 0x10, 0x1E", "vcmpgt_oqss xmm1, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_oqss1356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_oqss xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x24, 0x42, 0x1E", "vcmpgt_oqss xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_ospd1357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd xmm3, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x71, 0xC2, 0xDF, 0x0E", "vcmpgt_ospd xmm3, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpgt_ospd1358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd xmm0, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0xC3, 0x0E", "vcmpgt_ospd xmm0, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpgt_ospd1359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd xmm3, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xDF, 0x0E", "vcmpgt_ospd xmm3, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpgt_ospd1360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd xmm11, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC2, 0xD8, 0x0E", "vcmpgt_ospd xmm11, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpgt_ospd1361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd xmm12, xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0xC2, 0x20, 0x0E", "vcmpgt_ospd xmm12, xmm3, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpgt_ospd1362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd ymm12, ymm12, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1D, 0xC2, 0xE4, 0x0E", "vcmpgt_ospd ymm12, ymm12, ymm12");
}



#[test]
fn enc_avx_vcmpgt_ospd1363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd ymm2, ymm0, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xD0, 0x0E", "vcmpgt_ospd ymm2, ymm0, ymm0");
}



#[test]
fn enc_avx_vcmpgt_ospd1364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd ymm11, ymm4, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0x1A, 0x0E", "vcmpgt_ospd ymm11, ymm4, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmpgt_ospd1365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd ymm11, ymm12, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1D, 0xC2, 0xD9, 0x0E", "vcmpgt_ospd ymm11, ymm12, ymm1");
}



#[test]
fn enc_avx_vcmpgt_ospd1366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ospd ymm3, ymm0, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xDB, 0x0E", "vcmpgt_ospd ymm3, ymm0, ymm3");
}



#[test]
fn enc_avx_vcmpgt_ossd1367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm2, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xD4, 0x0E", "vcmpgt_ossd xmm2, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpgt_ossd1368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xDC, 0x0E", "vcmpgt_ossd xmm3, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpgt_ossd1369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xDF, 0x0E", "vcmpgt_ossd xmm3, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpgt_ossd1370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm4, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xE3, 0x0E", "vcmpgt_ossd xmm4, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpgt_ossd1371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm0, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC2, 0x0E", "vcmpgt_ossd xmm0, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpgt_ossd1372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x60, 0x10, 0x0E", "vcmpgt_ossd xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_ossd1373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm3, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x58, 0x10, 0x0E", "vcmpgt_ossd xmm3, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_ossd1374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x1C, 0x42, 0x0E", "vcmpgt_ossd xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_ossd1375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x3C, 0x42, 0x0E", "vcmpgt_ossd xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_ossd1376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_ossd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x18, 0x0E", "vcmpgt_ossd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgt_osss1377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm3, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xD9, 0x0E", "vcmpgt_osss xmm3, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpgt_osss1378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm4, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xE4, 0x0E", "vcmpgt_osss xmm4, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpgt_osss1379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm15, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xF9, 0x0E", "vcmpgt_osss xmm15, xmm2, xmm1");
}



#[test]
fn enc_avx_vcmpgt_osss1380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm12, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0xE1, 0x0E", "vcmpgt_osss xmm12, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpgt_osss1381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC0, 0x0E", "vcmpgt_osss xmm0, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpgt_osss1382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm0, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x00, 0x0E", "vcmpgt_osss xmm0, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgt_osss1383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm2, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x50, 0x10, 0x0E", "vcmpgt_osss xmm2, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_osss1384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x48, 0x10, 0x0E", "vcmpgt_osss xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgt_osss1385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x04, 0x42, 0x0E", "vcmpgt_osss xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgt_osss1386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgt_osss xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x38, 0x0E", "vcmpgt_osss xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgtsd1387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm1, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xCC, 0x0E", "vcmpgtsd xmm1, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpgtsd1388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm11, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xD8, 0x0E", "vcmpgtsd xmm11, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpgtsd1389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm4, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xE0, 0x0E", "vcmpgtsd xmm4, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpgtsd1390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm15, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xFB, 0x0E", "vcmpgtsd xmm15, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpgtsd1391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm12, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0xE0, 0x0E", "vcmpgtsd xmm12, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmpgtsd1392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x18, 0x0E", "vcmpgtsd xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgtsd1393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x00, 0x0E", "vcmpgtsd xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgtsd1394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x10, 0x0E", "vcmpgtsd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgtsd1395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm3, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x18, 0x0E", "vcmpgtsd xmm3, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpgtsd1396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtsd xmm0, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x04, 0x42, 0x0E", "vcmpgtsd xmm0, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgtss1397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm12, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xE0, 0x0E", "vcmpgtss xmm12, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpgtss1398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm3, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0xC2, 0xDF, 0x0E", "vcmpgtss xmm3, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpgtss1399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm1, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xCB, 0x0E", "vcmpgtss xmm1, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmpgtss1400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm11, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0xD8, 0x0E", "vcmpgtss xmm11, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpgtss1401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm3, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xD8, 0x0E", "vcmpgtss xmm3, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmpgtss1402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x14, 0x42, 0x0E", "vcmpgtss xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgtss1403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm1, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x48, 0x10, 0x0E", "vcmpgtss xmm1, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgtss1404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x48, 0x10, 0x0E", "vcmpgtss xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpgtss1405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x24, 0x42, 0x0E", "vcmpgtss xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpgtss1406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpgtss xmm3, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x58, 0x10, 0x0E", "vcmpgtss xmm3, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_oqpd1407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0xC4, 0x12", "vcmple_oqpd xmm0, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmple_oqpd1408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd xmm12, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC2, 0xE3, 0x12", "vcmple_oqpd xmm12, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmple_oqpd1409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd xmm2, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0xD4, 0x12", "vcmple_oqpd xmm2, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmple_oqpd1410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd xmm0, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0xC3, 0x12", "vcmple_oqpd xmm0, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmple_oqpd1411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0xC9, 0x12", "vcmple_oqpd xmm1, xmm11, xmm1");
}



#[test]
fn enc_avx_vcmple_oqpd1412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd ymm3, ymm12, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0xDC, 0x12", "vcmple_oqpd ymm3, ymm12, ymm4");
}



#[test]
fn enc_avx_vcmple_oqpd1413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd ymm1, ymm3, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0xC8, 0x12", "vcmple_oqpd ymm1, ymm3, ymm0");
}



#[test]
fn enc_avx_vcmple_oqpd1414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd ymm4, ymm1, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF5, 0xC2, 0x24, 0x42, 0x12", "vcmple_oqpd ymm4, ymm1, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_oqpd1415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd ymm3, ymm3, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0xDB, 0x12", "vcmple_oqpd ymm3, ymm3, ymm3");
}



#[test]
fn enc_avx_vcmple_oqpd1416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqpd ymm1, ymm0, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0xC2, 0xCF, 0x12", "vcmple_oqpd ymm1, ymm0, ymm15");
}



#[test]
fn enc_avx_vcmple_oqsd1417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm12, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0xC2, 0xE7, 0x12", "vcmple_oqsd xmm12, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmple_oqsd1418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm2, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xD4, 0x12", "vcmple_oqsd xmm2, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmple_oqsd1419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm15, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xFC, 0x12", "vcmple_oqsd xmm15, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmple_oqsd1420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm4, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xE2, 0x12", "vcmple_oqsd xmm4, xmm3, xmm2");
}



#[test]
fn enc_avx_vcmple_oqsd1421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm12, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xE4, 0x12", "vcmple_oqsd xmm12, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmple_oqsd1422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x78, 0x10, 0x12", "vcmple_oqsd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_oqsd1423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x18, 0x12", "vcmple_oqsd xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmple_oqsd1424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x58, 0x10, 0x12", "vcmple_oqsd xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_oqsd1425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm0, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x40, 0x10, 0x12", "vcmple_oqsd xmm0, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_oqsd1426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqsd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x40, 0x10, 0x12", "vcmple_oqsd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_oqss1427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm1, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xCA, 0x12", "vcmple_oqss xmm1, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmple_oqss1428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xCC, 0x12", "vcmple_oqss xmm1, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmple_oqss1429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm15, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xFB, 0x12", "vcmple_oqss xmm15, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmple_oqss1430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm0, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC4, 0x12", "vcmple_oqss xmm0, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmple_oqss1431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm12, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0xC2, 0xE7, 0x12", "vcmple_oqss xmm12, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmple_oqss1432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x04, 0x42, 0x12", "vcmple_oqss xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_oqss1433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm4, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x20, 0x12", "vcmple_oqss xmm4, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmple_oqss1434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm2, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x50, 0x10, 0x12", "vcmple_oqss xmm2, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_oqss1435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_oqss xmm12, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0x60, 0x10, 0x12", "vcmple_oqss xmm12, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_ospd1436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd ymm1, ymm12, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0x0C, 0x42, 0x02", "vcmple_ospd ymm1, ymm12, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_ospd1437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd ymm12, ymm12, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1D, 0xC2, 0xE4, 0x02", "vcmple_ospd ymm12, ymm12, ymm4");
}



#[test]
fn enc_avx_vcmple_ospd1438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd ymm4, ymm0, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0x24, 0x42, 0x02", "vcmple_ospd ymm4, ymm0, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_ospd1439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd ymm3, ymm4, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDD, 0xC2, 0xDC, 0x02", "vcmple_ospd ymm3, ymm4, ymm4");
}



#[test]
fn enc_avx_vcmple_ospd1440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd ymm11, ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6D, 0xC2, 0xD9, 0x02", "vcmple_ospd ymm11, ymm2, ymm1");
}



#[test]
fn enc_avx_vcmple_ospd1441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0xDC, 0x02", "vcmple_ospd xmm3, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmple_ospd1442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd xmm4, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0xE4, 0x02", "vcmple_ospd xmm4, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmple_ospd1443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd xmm0, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xC4, 0x02", "vcmple_ospd xmm0, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmple_ospd1444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd xmm3, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0xD9, 0x02", "vcmple_ospd xmm3, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmple_ospd1445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ospd xmm0, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xC7, 0x02", "vcmple_ospd xmm0, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmple_ossd1446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm12, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xE1, 0x02", "vcmple_ossd xmm12, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmple_ossd1447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm12, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xE0, 0x02", "vcmple_ossd xmm12, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmple_ossd1448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm0, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xC4, 0x02", "vcmple_ossd xmm0, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmple_ossd1449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm0, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xC3, 0x02", "vcmple_ossd xmm0, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmple_ossd1450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm11, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xDB, 0x02", "vcmple_ossd xmm11, xmm0, xmm11");
}



#[test]
fn enc_avx_vcmple_ossd1451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm2, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x50, 0x10, 0x02", "vcmple_ossd xmm2, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_ossd1452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x60, 0x10, 0x02", "vcmple_ossd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmple_ossd1453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm3, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x1C, 0x42, 0x02", "vcmple_ossd xmm3, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_ossd1454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm2, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x14, 0x42, 0x02", "vcmple_ossd xmm2, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_ossd1455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_ossd xmm3, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x1C, 0x42, 0x02", "vcmple_ossd xmm3, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_osss1456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm11, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xDC, 0x02", "vcmple_osss xmm11, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmple_osss1457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm12, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0xE4, 0x02", "vcmple_osss xmm12, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmple_osss1458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm0, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xC1, 0x02", "vcmple_osss xmm0, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmple_osss1459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm2, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xD1, 0x02", "vcmple_osss xmm2, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmple_osss1460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm3, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xDB, 0x02", "vcmple_osss xmm3, xmm11, xmm11");
}



#[test]
fn enc_avx_vcmple_osss1461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm12, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x24, 0x42, 0x02", "vcmple_osss xmm12, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_osss1462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x3C, 0x42, 0x02", "vcmple_osss xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_osss1463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm15, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x38, 0x02", "vcmple_osss xmm15, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmple_osss1464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x1C, 0x42, 0x02", "vcmple_osss xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmple_osss1465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmple_osss xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x48, 0x10, 0x02", "vcmple_osss xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplepd1466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd xmm3, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0x1C, 0x42, 0x02", "vcmplepd xmm3, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplepd1467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd xmm11, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0xD8, 0x02", "vcmplepd xmm11, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmplepd1468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd xmm2, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0xC2, 0x12, 0x02", "vcmplepd xmm2, xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmplepd1469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd xmm1, xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0x0C, 0x42, 0x02", "vcmplepd xmm1, xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplepd1470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd xmm4, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0xE0, 0x02", "vcmplepd xmm4, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmplepd1471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd ymm15, ymm4, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0x3C, 0x42, 0x02", "vcmplepd ymm15, ymm4, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplepd1472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd ymm12, ymm12, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1D, 0xC2, 0x22, 0x02", "vcmplepd ymm12, ymm12, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmplepd1473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd ymm11, ymm3, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x65, 0xC2, 0xDB, 0x02", "vcmplepd ymm11, ymm3, ymm3");
}



#[test]
fn enc_avx_vcmplepd1474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd ymm4, ymm11, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0x20, 0x02", "vcmplepd ymm4, ymm11, YWORD [rax]");
}



#[test]
fn enc_avx_vcmplepd1475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplepd ymm11, ymm11, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x25, 0xC2, 0xD9, 0x02", "vcmplepd ymm11, ymm11, ymm1");
}



#[test]
fn enc_avx_vcmplesd1476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm1, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0xCB, 0x02", "vcmplesd xmm1, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmplesd1477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xCC, 0x02", "vcmplesd xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmplesd1478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xC3, 0x02", "vcmplesd xmm0, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmplesd1479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm3, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xD9, 0x02", "vcmplesd xmm3, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmplesd1480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm2, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xD0, 0x02", "vcmplesd xmm2, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmplesd1481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x48, 0x10, 0x02", "vcmplesd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplesd1482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm15, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x78, 0x10, 0x02", "vcmplesd xmm15, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplesd1483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x10, 0x02", "vcmplesd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplesd1484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm12, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x60, 0x10, 0x02", "vcmplesd xmm12, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplesd1485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplesd xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x14, 0x42, 0x02", "vcmplesd xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpless1486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm15, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0xF9, 0x02", "vcmpless xmm15, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpless1487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm15, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xFC, 0x02", "vcmpless xmm15, xmm4, xmm4");
}



#[test]
fn enc_avx_vcmpless1488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm2, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xD7, 0x02", "vcmpless xmm2, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpless1489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm4, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0xC2, 0xE3, 0x02", "vcmpless xmm4, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmpless1490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC1, 0x02", "vcmpless xmm0, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpless1491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x40, 0x10, 0x02", "vcmpless xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpless1492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm2, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x14, 0x42, 0x02", "vcmpless xmm2, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpless1493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x58, 0x10, 0x02", "vcmpless xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpless1494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm1, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x08, 0x02", "vcmpless xmm1, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpless1495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpless xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x0C, 0x42, 0x02", "vcmpless xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_oqpd1496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd xmm15, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC2, 0xFB, 0x11", "vcmplt_oqpd xmm15, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmplt_oqpd1497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x59, 0xC2, 0xE7, 0x11", "vcmplt_oqpd xmm12, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmplt_oqpd1498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd xmm11, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x01, 0xC2, 0xDF, 0x11", "vcmplt_oqpd xmm11, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmplt_oqpd1499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd xmm0, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x69, 0xC2, 0xC3, 0x11", "vcmplt_oqpd xmm0, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmplt_oqpd1500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd xmm0, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xC2, 0x11", "vcmplt_oqpd xmm0, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmplt_oqpd1501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd ymm12, ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6D, 0xC2, 0xE1, 0x11", "vcmplt_oqpd ymm12, ymm2, ymm1");
}



#[test]
fn enc_avx_vcmplt_oqpd1502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd ymm12, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xC2, 0xE4, 0x11", "vcmplt_oqpd ymm12, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmplt_oqpd1503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd ymm15, ymm2, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6D, 0xC2, 0xFC, 0x11", "vcmplt_oqpd ymm15, ymm2, ymm4");
}



#[test]
fn enc_avx_vcmplt_oqpd1504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd ymm12, ymm11, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x25, 0xC2, 0xE7, 0x11", "vcmplt_oqpd ymm12, ymm11, ymm15");
}



#[test]
fn enc_avx_vcmplt_oqpd1505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqpd ymm4, ymm11, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0x20, 0x11", "vcmplt_oqpd ymm4, ymm11, YWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_oqsd1506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xDF, 0x11", "vcmplt_oqsd xmm3, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmplt_oqsd1507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0xC2, 0xDB, 0x11", "vcmplt_oqsd xmm3, xmm1, xmm11");
}



#[test]
fn enc_avx_vcmplt_oqsd1508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm15, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xFB, 0x11", "vcmplt_oqsd xmm15, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmplt_oqsd1509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm1, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xCA, 0x11", "vcmplt_oqsd xmm1, xmm3, xmm2");
}



#[test]
fn enc_avx_vcmplt_oqsd1510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xE2, 0x11", "vcmplt_oqsd xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vcmplt_oqsd1511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm15, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x3C, 0x42, 0x11", "vcmplt_oqsd xmm15, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_oqsd1512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm1, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x48, 0x10, 0x11", "vcmplt_oqsd xmm1, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplt_oqsd1513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm11, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x1C, 0x42, 0x11", "vcmplt_oqsd xmm11, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_oqsd1514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm15, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x38, 0x11", "vcmplt_oqsd xmm15, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_oqsd1515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqsd xmm2, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x14, 0x42, 0x11", "vcmplt_oqsd xmm2, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_oqss1516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm1, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xCA, 0x11", "vcmplt_oqss xmm1, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmplt_oqss1517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC0, 0x11", "vcmplt_oqss xmm0, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmplt_oqss1518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm15, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0xF9, 0x11", "vcmplt_oqss xmm15, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmplt_oqss1519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm1, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC8, 0x11", "vcmplt_oqss xmm1, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmplt_oqss1520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm4, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0xC2, 0xE3, 0x11", "vcmplt_oqss xmm4, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmplt_oqss1521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm15, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x38, 0x11", "vcmplt_oqss xmm15, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_oqss1522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x60, 0x10, 0x11", "vcmplt_oqss xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplt_oqss1523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x60, 0x10, 0x11", "vcmplt_oqss xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplt_oqss1524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x18, 0x11", "vcmplt_oqss xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_oqss1525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_oqss xmm12, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x24, 0x42, 0x11", "vcmplt_oqss xmm12, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_ospd1526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd xmm0, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0x02, 0x01", "vcmplt_ospd xmm0, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmplt_ospd1527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd xmm0, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0xC2, 0xC3, 0x01", "vcmplt_ospd xmm0, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmplt_ospd1528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd xmm1, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0xC2, 0xCB, 0x01", "vcmplt_ospd xmm1, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmplt_ospd1529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd xmm2, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x71, 0xC2, 0xD4, 0x01", "vcmplt_ospd xmm2, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmplt_ospd1530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd xmm1, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xC8, 0x01", "vcmplt_ospd xmm1, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmplt_ospd1531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd ymm15, ymm0, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xC2, 0x3A, 0x01", "vcmplt_ospd ymm15, ymm0, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmplt_ospd1532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd ymm0, ymm3, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0xC3, 0x01", "vcmplt_ospd ymm0, ymm3, ymm3");
}



#[test]
fn enc_avx_vcmplt_ospd1533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd ymm3, ymm11, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0x1A, 0x01", "vcmplt_ospd ymm3, ymm11, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmplt_ospd1534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd ymm15, ymm2, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6D, 0xC2, 0xFA, 0x01", "vcmplt_ospd ymm15, ymm2, ymm2");
}



#[test]
fn enc_avx_vcmplt_ospd1535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ospd ymm2, ymm11, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0xD1, 0x01", "vcmplt_ospd ymm2, ymm11, ymm1");
}



#[test]
fn enc_avx_vcmplt_ossd1536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm2, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xD3, 0x01", "vcmplt_ossd xmm2, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmplt_ossd1537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm0, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xC4, 0x01", "vcmplt_ossd xmm0, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmplt_ossd1538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0xC2, 0xE3, 0x01", "vcmplt_ossd xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmplt_ossd1539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm15, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xF8, 0x01", "vcmplt_ossd xmm15, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmplt_ossd1540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm3, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xD8, 0x01", "vcmplt_ossd xmm3, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmplt_ossd1541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x10, 0x01", "vcmplt_ossd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_ossd1542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x1C, 0x42, 0x01", "vcmplt_ossd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_ossd1543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x1C, 0x42, 0x01", "vcmplt_ossd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_ossd1544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x20, 0x01", "vcmplt_ossd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_ossd1545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_ossd xmm1, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x0C, 0x42, 0x01", "vcmplt_ossd xmm1, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmplt_osss1546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm15, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xFB, 0x01", "vcmplt_osss xmm15, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmplt_osss1547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm12, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xE0, 0x01", "vcmplt_osss xmm12, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmplt_osss1548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm11, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xD8, 0x01", "vcmplt_osss xmm11, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmplt_osss1549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xDF, 0x01", "vcmplt_osss xmm3, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmplt_osss1550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC1, 0x01", "vcmplt_osss xmm0, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmplt_osss1551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x18, 0x01", "vcmplt_osss xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_osss1552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x20, 0x01", "vcmplt_osss xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_osss1553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm12, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x60, 0x10, 0x01", "vcmplt_osss xmm12, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmplt_osss1554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm3, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x18, 0x01", "vcmplt_osss xmm3, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmplt_osss1555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmplt_osss xmm1, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x08, 0x01", "vcmplt_osss xmm1, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpltpd1556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd xmm1, xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0xC2, 0x0C, 0x42, 0x01", "vcmpltpd xmm1, xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpltpd1557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd xmm12, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0xC2, 0xE4, 0x01", "vcmpltpd xmm12, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpltpd1558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd xmm15, xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC2, 0x38, 0x01", "vcmpltpd xmm15, xmm2, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpltpd1559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd xmm4, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0xC2, 0xE0, 0x01", "vcmpltpd xmm4, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpltpd1560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd xmm3, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xDC, 0x01", "vcmpltpd xmm3, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpltpd1561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd ymm15, ymm4, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0xF9, 0x01", "vcmpltpd ymm15, ymm4, ymm1");
}



#[test]
fn enc_avx_vcmpltpd1562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd ymm15, ymm2, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6D, 0xC2, 0xFB, 0x01", "vcmpltpd ymm15, ymm2, ymm11");
}



#[test]
fn enc_avx_vcmpltpd1563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd ymm15, ymm2, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6D, 0xC2, 0x3C, 0x42, 0x01", "vcmpltpd ymm15, ymm2, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpltpd1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd ymm4, ymm0, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xE3, 0x01", "vcmpltpd ymm4, ymm0, ymm3");
}



#[test]
fn enc_avx_vcmpltpd1565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltpd ymm11, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xC2, 0xDC, 0x01", "vcmpltpd ymm11, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmpltsd1566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm4, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0xE4, 0x01", "vcmpltsd xmm4, xmm4, xmm4");
}



#[test]
fn enc_avx_vcmpltsd1567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm11, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0xC2, 0xDF, 0x01", "vcmpltsd xmm11, xmm12, xmm15");
}



#[test]
fn enc_avx_vcmpltsd1568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm3, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xD9, 0x01", "vcmpltsd xmm3, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpltsd1569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm1, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xCB, 0x01", "vcmpltsd xmm1, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpltsd1570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm2, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xD3, 0x01", "vcmpltsd xmm2, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpltsd1571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm15, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x38, 0x01", "vcmpltsd xmm15, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpltsd1572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x48, 0x10, 0x01", "vcmpltsd xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpltsd1573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x24, 0x42, 0x01", "vcmpltsd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpltsd1574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x1C, 0x42, 0x01", "vcmpltsd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpltsd1575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltsd xmm3, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x18, 0x01", "vcmpltsd xmm3, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpltss1576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0xC2, 0xDB, 0x01", "vcmpltss xmm3, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpltss1577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm2, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xD4, 0x01", "vcmpltss xmm2, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpltss1578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm1, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xCB, 0x01", "vcmpltss xmm1, xmm12, xmm3");
}



#[test]
fn enc_avx_vcmpltss1579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm11, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0xDB, 0x01", "vcmpltss xmm11, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmpltss1580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm15, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0xC2, 0xFB, 0x01", "vcmpltss xmm15, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpltss1581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm2, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x14, 0x42, 0x01", "vcmpltss xmm2, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpltss1582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0x24, 0x42, 0x01", "vcmpltss xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpltss1583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm1, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x08, 0x01", "vcmpltss xmm1, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpltss1584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm2, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x10, 0x01", "vcmpltss xmm2, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpltss1585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpltss xmm12, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x60, 0x10, 0x01", "vcmpltss xmm12, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_oqsd1586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm15, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x03, 0xC2, 0xFB, 0x0C", "vcmpneq_oqsd xmm15, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmpneq_oqsd1587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm15, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xFB, 0x0C", "vcmpneq_oqsd xmm15, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpneq_oqsd1588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm1, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xCB, 0x0C", "vcmpneq_oqsd xmm1, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmpneq_oqsd1589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm15, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0xF8, 0x0C", "vcmpneq_oqsd xmm15, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmpneq_oqsd1590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm12, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xE3, 0x0C", "vcmpneq_oqsd xmm12, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmpneq_oqsd1591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm1, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x48, 0x10, 0x0C", "vcmpneq_oqsd xmm1, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_oqsd1592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm15, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x38, 0x0C", "vcmpneq_oqsd xmm15, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_oqsd1593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm0, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x04, 0x42, 0x0C", "vcmpneq_oqsd xmm0, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_oqsd1594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm1, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x08, 0x0C", "vcmpneq_oqsd xmm1, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_oqsd1595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqsd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x10, 0x0C", "vcmpneq_oqsd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_oqss1596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm2, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xD1, 0x0C", "vcmpneq_oqss xmm2, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpneq_oqss1597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm4, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xE1, 0x0C", "vcmpneq_oqss xmm4, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmpneq_oqss1598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xDF, 0x0C", "vcmpneq_oqss xmm3, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpneq_oqss1599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm12, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0xC2, 0xE4, 0x0C", "vcmpneq_oqss xmm12, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpneq_oqss1600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm1, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xC9, 0x0C", "vcmpneq_oqss xmm1, xmm1, xmm1");
}



#[test]
fn enc_avx_vcmpneq_oqss1601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x24, 0x42, 0x0C", "vcmpneq_oqss xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_oqss1602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm15, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x38, 0x0C", "vcmpneq_oqss xmm15, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_oqss1603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm3, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x58, 0x10, 0x0C", "vcmpneq_oqss xmm3, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_oqss1604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x60, 0x10, 0x0C", "vcmpneq_oqss xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_oqss1605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_oqss xmm3, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x58, 0x10, 0x0C", "vcmpneq_oqss xmm3, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_ospd1606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd ymm2, ymm3, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x65, 0xC2, 0xD7, 0x1C", "vcmpneq_ospd ymm2, ymm3, ymm15");
}



#[test]
fn enc_avx_vcmpneq_ospd1607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd ymm12, ymm11, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x25, 0xC2, 0xE3, 0x1C", "vcmpneq_ospd ymm12, ymm11, ymm3");
}



#[test]
fn enc_avx_vcmpneq_ospd1608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd ymm3, ymm2, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xDC, 0x1C", "vcmpneq_ospd ymm3, ymm2, ymm4");
}



#[test]
fn enc_avx_vcmpneq_ospd1609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd ymm11, ymm3, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x65, 0xC2, 0xDB, 0x1C", "vcmpneq_ospd ymm11, ymm3, ymm11");
}



#[test]
fn enc_avx_vcmpneq_ospd1610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd ymm15, ymm2, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6D, 0xC2, 0xFB, 0x1C", "vcmpneq_ospd ymm15, ymm2, ymm11");
}



#[test]
fn enc_avx_vcmpneq_ospd1611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd xmm15, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x19, 0xC2, 0xFC, 0x1C", "vcmpneq_ospd xmm15, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpneq_ospd1612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd xmm2, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x71, 0xC2, 0xD7, 0x1C", "vcmpneq_ospd xmm2, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpneq_ospd1613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd xmm15, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0xFA, 0x1C", "vcmpneq_ospd xmm15, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpneq_ospd1614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd xmm1, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC2, 0xC8, 0x1C", "vcmpneq_ospd xmm1, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpneq_ospd1615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ospd xmm12, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC2, 0xE4, 0x1C", "vcmpneq_ospd xmm12, xmm11, xmm4");
}



#[test]
fn enc_avx_vcmpneq_ossd1616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm4, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xE0, 0x1C", "vcmpneq_ossd xmm4, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpneq_ossd1617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm4, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xE4, 0x1C", "vcmpneq_ossd xmm4, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpneq_ossd1618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm4, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xE1, 0x1C", "vcmpneq_ossd xmm4, xmm1, xmm1");
}



#[test]
fn enc_avx_vcmpneq_ossd1619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm2, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xD4, 0x1C", "vcmpneq_ossd xmm2, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpneq_ossd1620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm1, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xCC, 0x1C", "vcmpneq_ossd xmm1, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpneq_ossd1621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm4, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x60, 0x10, 0x1C", "vcmpneq_ossd xmm4, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_ossd1622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x40, 0x10, 0x1C", "vcmpneq_ossd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_ossd1623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x24, 0x42, 0x1C", "vcmpneq_ossd xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_ossd1624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm2, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x14, 0x42, 0x1C", "vcmpneq_ossd xmm2, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_ossd1625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ossd xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x58, 0x10, 0x1C", "vcmpneq_ossd xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_osss1626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm2, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xD4, 0x1C", "vcmpneq_osss xmm2, xmm11, xmm4");
}



#[test]
fn enc_avx_vcmpneq_osss1627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm4, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0xC2, 0xE4, 0x1C", "vcmpneq_osss xmm4, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpneq_osss1628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm0, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xC7, 0x1C", "vcmpneq_osss xmm0, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpneq_osss1629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm11, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0xC2, 0xDF, 0x1C", "vcmpneq_osss xmm11, xmm12, xmm15");
}



#[test]
fn enc_avx_vcmpneq_osss1630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm3, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xDB, 0x1C", "vcmpneq_osss xmm3, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpneq_osss1631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x20, 0x1C", "vcmpneq_osss xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_osss1632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm3, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x1C, 0x42, 0x1C", "vcmpneq_osss xmm3, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_osss1633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm0, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x40, 0x10, 0x1C", "vcmpneq_osss xmm0, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_osss1634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x18, 0x1C", "vcmpneq_osss xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_osss1635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_osss xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x1C, 0x42, 0x1C", "vcmpneq_osss xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_uqpd1636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd xmm3, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0xC2, 0x1A, 0x04", "vcmpneq_uqpd xmm3, xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmpneq_uqpd1637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd xmm11, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC2, 0xDC, 0x04", "vcmpneq_uqpd xmm11, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmpneq_uqpd1638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd xmm2, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0xD3, 0x04", "vcmpneq_uqpd xmm2, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpneq_uqpd1639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd xmm12, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0xC2, 0xE2, 0x04", "vcmpneq_uqpd xmm12, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpneq_uqpd1640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd xmm4, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0xE1, 0x04", "vcmpneq_uqpd xmm4, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmpneq_uqpd1641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd ymm1, ymm1, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x75, 0xC2, 0xCC, 0x04", "vcmpneq_uqpd ymm1, ymm1, ymm12");
}



#[test]
fn enc_avx_vcmpneq_uqpd1642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd ymm4, ymm2, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xE4, 0x04", "vcmpneq_uqpd ymm4, ymm2, ymm4");
}



#[test]
fn enc_avx_vcmpneq_uqpd1643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd ymm2, ymm11, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA5, 0xC2, 0xD0, 0x04", "vcmpneq_uqpd ymm2, ymm11, ymm0");
}



#[test]
fn enc_avx_vcmpneq_uqpd1644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd ymm4, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xE4, 0x04", "vcmpneq_uqpd ymm4, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmpneq_uqpd1645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqpd ymm4, ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xE1, 0x04", "vcmpneq_uqpd ymm4, ymm2, ymm1");
}



#[test]
fn enc_avx_vcmpneq_uqsd1646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm12, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xE0, 0x04", "vcmpneq_uqsd xmm12, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpneq_uqsd1647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm2, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xD7, 0x04", "vcmpneq_uqsd xmm2, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpneq_uqsd1648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm15, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0xC2, 0xFB, 0x04", "vcmpneq_uqsd xmm15, xmm4, xmm11");
}



#[test]
fn enc_avx_vcmpneq_uqsd1649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm15, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6B, 0xC2, 0xFF, 0x04", "vcmpneq_uqsd xmm15, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmpneq_uqsd1650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm3, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xD9, 0x04", "vcmpneq_uqsd xmm3, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpneq_uqsd1651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm11, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x58, 0x10, 0x04", "vcmpneq_uqsd xmm11, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqsd1652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x60, 0x10, 0x04", "vcmpneq_uqsd xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqsd1653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm4, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x24, 0x42, 0x04", "vcmpneq_uqsd xmm4, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_uqsd1654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm3, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x1C, 0x42, 0x04", "vcmpneq_uqsd xmm3, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_uqsd1655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqsd xmm3, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x58, 0x10, 0x04", "vcmpneq_uqsd xmm3, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqss1656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xC8, 0x04", "vcmpneq_uqss xmm1, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpneq_uqss1657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC1, 0x04", "vcmpneq_uqss xmm0, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpneq_uqss1658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm15, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0xC2, 0xFB, 0x04", "vcmpneq_uqss xmm15, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpneq_uqss1659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm4, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xE4, 0x04", "vcmpneq_uqss xmm4, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmpneq_uqss1660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm15, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0xF8, 0x04", "vcmpneq_uqss xmm15, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpneq_uqss1661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x60, 0x10, 0x04", "vcmpneq_uqss xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqss1662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm1, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x48, 0x10, 0x04", "vcmpneq_uqss xmm1, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqss1663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm15, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x78, 0x10, 0x04", "vcmpneq_uqss xmm15, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqss1664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm3, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x58, 0x10, 0x04", "vcmpneq_uqss xmm3, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_uqss1665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_uqss xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x1C, 0x42, 0x04", "vcmpneq_uqss xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_ussd1666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xC4, 0x14", "vcmpneq_ussd xmm0, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmpneq_ussd1667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xDA, 0x14", "vcmpneq_ussd xmm11, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpneq_ussd1668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xDB, 0x14", "vcmpneq_ussd xmm3, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpneq_ussd1669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm2, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0xC2, 0xD7, 0x14", "vcmpneq_ussd xmm2, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpneq_ussd1670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm11, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xDC, 0x14", "vcmpneq_ussd xmm11, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmpneq_ussd1671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm12, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x24, 0x42, 0x14", "vcmpneq_ussd xmm12, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_ussd1672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm3, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x1C, 0x42, 0x14", "vcmpneq_ussd xmm3, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_ussd1673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm12, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x60, 0x10, 0x14", "vcmpneq_ussd xmm12, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_ussd1674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm2, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x14, 0x42, 0x14", "vcmpneq_ussd xmm2, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_ussd1675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_ussd xmm2, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x14, 0x42, 0x14", "vcmpneq_ussd xmm2, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneq_usss1676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm3, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xD8, 0x14", "vcmpneq_usss xmm3, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpneq_usss1677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm12, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0xC2, 0xE7, 0x14", "vcmpneq_usss xmm12, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmpneq_usss1678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xC4, 0x14", "vcmpneq_usss xmm0, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpneq_usss1679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm1, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xCB, 0x14", "vcmpneq_usss xmm1, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpneq_usss1680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm1, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0xC2, 0xCB, 0x14", "vcmpneq_usss xmm1, xmm1, xmm11");
}



#[test]
fn enc_avx_vcmpneq_usss1681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x18, 0x14", "vcmpneq_usss xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_usss1682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm4, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x20, 0x14", "vcmpneq_usss xmm4, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_usss1683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm12, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x60, 0x10, 0x14", "vcmpneq_usss xmm12, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneq_usss1684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm3, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x18, 0x14", "vcmpneq_usss xmm3, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneq_usss1685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneq_usss xmm0, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x00, 0x14", "vcmpneq_usss xmm0, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneqsd1686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm11, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0xC2, 0xDB, 0x04", "vcmpneqsd xmm11, xmm4, xmm11");
}



#[test]
fn enc_avx_vcmpneqsd1687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm0, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC0, 0x04", "vcmpneqsd xmm0, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpneqsd1688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm2, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xD4, 0x04", "vcmpneqsd xmm2, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpneqsd1689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm2, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xD3, 0x04", "vcmpneqsd xmm2, xmm4, xmm11");
}



#[test]
fn enc_avx_vcmpneqsd1690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm3, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xDC, 0x04", "vcmpneqsd xmm3, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpneqsd1691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x48, 0x10, 0x04", "vcmpneqsd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneqsd1692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm1, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x08, 0x04", "vcmpneqsd xmm1, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneqsd1693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x1C, 0x42, 0x04", "vcmpneqsd xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneqsd1694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm15, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x38, 0x04", "vcmpneqsd xmm15, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpneqsd1695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqsd xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x04, 0x42, 0x04", "vcmpneqsd xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneqss1696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm0, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xC2, 0x04", "vcmpneqss xmm0, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpneqss1697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xDF, 0x04", "vcmpneqss xmm3, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmpneqss1698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xC3, 0x04", "vcmpneqss xmm0, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpneqss1699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm1, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0xC2, 0xCF, 0x04", "vcmpneqss xmm1, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmpneqss1700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm11, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xDF, 0x04", "vcmpneqss xmm11, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpneqss1701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm4, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x60, 0x10, 0x04", "vcmpneqss xmm4, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneqss1702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm2, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x14, 0x42, 0x04", "vcmpneqss xmm2, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpneqss1703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x48, 0x10, 0x04", "vcmpneqss xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneqss1704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x48, 0x10, 0x04", "vcmpneqss xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpneqss1705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpneqss xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x08, 0x04", "vcmpneqss xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_uqpd1706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd xmm1, xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0x08, 0x19", "vcmpnge_uqpd xmm1, xmm12, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_uqpd1707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd xmm11, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0x1C, 0x42, 0x19", "vcmpnge_uqpd xmm11, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqpd1708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd xmm11, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0xC2, 0xDA, 0x19", "vcmpnge_uqpd xmm11, xmm3, xmm2");
}



#[test]
fn enc_avx_vcmpnge_uqpd1709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd xmm4, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0x24, 0x42, 0x19", "vcmpnge_uqpd xmm4, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqpd1710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x69, 0xC2, 0xE3, 0x19", "vcmpnge_uqpd xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpnge_uqpd1711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd ymm0, ymm12, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9D, 0xC2, 0x00, 0x19", "vcmpnge_uqpd ymm0, ymm12, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_uqpd1712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd ymm1, ymm2, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0x0C, 0x42, 0x19", "vcmpnge_uqpd ymm1, ymm2, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqpd1713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd ymm11, ymm15, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x05, 0xC2, 0xDB, 0x19", "vcmpnge_uqpd ymm11, ymm15, ymm3");
}



#[test]
fn enc_avx_vcmpnge_uqpd1714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd ymm12, ymm4, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0xE3, 0x19", "vcmpnge_uqpd ymm12, ymm4, ymm3");
}



#[test]
fn enc_avx_vcmpnge_uqpd1715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqpd ymm3, ymm1, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x75, 0xC2, 0xDB, 0x19", "vcmpnge_uqpd ymm3, ymm1, ymm11");
}



#[test]
fn enc_avx_vcmpnge_uqsd1716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm12, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0xC2, 0xE4, 0x19", "vcmpnge_uqsd xmm12, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpnge_uqsd1717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm11, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0xD8, 0x19", "vcmpnge_uqsd xmm11, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmpnge_uqsd1718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC1, 0x19", "vcmpnge_uqsd xmm0, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpnge_uqsd1719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm11, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xDB, 0x19", "vcmpnge_uqsd xmm11, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpnge_uqsd1720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm1, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xCC, 0x19", "vcmpnge_uqsd xmm1, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpnge_uqsd1721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm2, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x14, 0x42, 0x19", "vcmpnge_uqsd xmm2, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqsd1722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm12, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x24, 0x42, 0x19", "vcmpnge_uqsd xmm12, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqsd1723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x1C, 0x42, 0x19", "vcmpnge_uqsd xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqsd1724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm12, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x60, 0x10, 0x19", "vcmpnge_uqsd xmm12, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_uqsd1725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqsd xmm2, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x50, 0x10, 0x19", "vcmpnge_uqsd xmm2, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_uqss1726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm1, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC8, 0x19", "vcmpnge_uqss xmm1, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpnge_uqss1727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm0, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xC0, 0x19", "vcmpnge_uqss xmm0, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmpnge_uqss1728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0xC2, 0xE3, 0x19", "vcmpnge_uqss xmm12, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpnge_uqss1729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm12, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0xC2, 0xE4, 0x19", "vcmpnge_uqss xmm12, xmm2, xmm12");
}



#[test]
fn enc_avx_vcmpnge_uqss1730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm4, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xE3, 0x19", "vcmpnge_uqss xmm4, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpnge_uqss1731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm1, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x08, 0x19", "vcmpnge_uqss xmm1, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_uqss1732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x24, 0x42, 0x19", "vcmpnge_uqss xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uqss1733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x60, 0x10, 0x19", "vcmpnge_uqss xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_uqss1734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm0, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x00, 0x19", "vcmpnge_uqss xmm0, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_uqss1735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uqss xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x58, 0x10, 0x19", "vcmpnge_uqss xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_uspd1736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd ymm1, ymm15, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x05, 0xC2, 0xCC, 0x09", "vcmpnge_uspd ymm1, ymm15, ymm12");
}



#[test]
fn enc_avx_vcmpnge_uspd1737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd ymm0, ymm2, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xC2, 0x09", "vcmpnge_uspd ymm0, ymm2, ymm2");
}



#[test]
fn enc_avx_vcmpnge_uspd1738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd ymm3, ymm1, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x75, 0xC2, 0xDC, 0x09", "vcmpnge_uspd ymm3, ymm1, ymm12");
}



#[test]
fn enc_avx_vcmpnge_uspd1739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd ymm4, ymm11, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x25, 0xC2, 0xE7, 0x09", "vcmpnge_uspd ymm4, ymm11, ymm15");
}



#[test]
fn enc_avx_vcmpnge_uspd1740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd ymm12, ymm1, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x75, 0xC2, 0xE3, 0x09", "vcmpnge_uspd ymm12, ymm1, ymm11");
}



#[test]
fn enc_avx_vcmpnge_uspd1741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd xmm15, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x01, 0xC2, 0xFC, 0x09", "vcmpnge_uspd xmm15, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpnge_uspd1742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd xmm1, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xCC, 0x09", "vcmpnge_uspd xmm1, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpnge_uspd1743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd xmm11, xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0xC2, 0x18, 0x09", "vcmpnge_uspd xmm11, xmm15, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_uspd1744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd xmm2, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC2, 0x14, 0x42, 0x09", "vcmpnge_uspd xmm2, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_uspd1745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_uspd xmm1, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC2, 0xC8, 0x09", "vcmpnge_uspd xmm1, xmm0, xmm0");
}



#[test]
fn enc_avx_vcmpnge_ussd1746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xFC, 0x09", "vcmpnge_ussd xmm15, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpnge_ussd1747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xCC, 0x09", "vcmpnge_ussd xmm1, xmm2, xmm12");
}



#[test]
fn enc_avx_vcmpnge_ussd1748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm3, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0xC2, 0xDF, 0x09", "vcmpnge_ussd xmm3, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpnge_ussd1749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xDF, 0x09", "vcmpnge_ussd xmm11, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpnge_ussd1750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0xC2, 0xDC, 0x09", "vcmpnge_ussd xmm11, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpnge_ussd1751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm4, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x20, 0x09", "vcmpnge_ussd xmm4, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_ussd1752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm3, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x1C, 0x42, 0x09", "vcmpnge_ussd xmm3, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_ussd1753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x08, 0x09", "vcmpnge_ussd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_ussd1754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm4, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x20, 0x09", "vcmpnge_ussd xmm4, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnge_ussd1755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_ussd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x48, 0x10, 0x09", "vcmpnge_ussd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_usss1756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm15, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0xC2, 0xFB, 0x09", "vcmpnge_usss xmm15, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpnge_usss1757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm3, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xD8, 0x09", "vcmpnge_usss xmm3, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpnge_usss1758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC4, 0x09", "vcmpnge_usss xmm0, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmpnge_usss1759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm4, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0xC2, 0xE4, 0x09", "vcmpnge_usss xmm4, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmpnge_usss1760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm0, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xC3, 0x09", "vcmpnge_usss xmm0, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpnge_usss1761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x58, 0x10, 0x09", "vcmpnge_usss xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_usss1762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm12, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x60, 0x10, 0x09", "vcmpnge_usss xmm12, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_usss1763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x1C, 0x42, 0x09", "vcmpnge_usss xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnge_usss1764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x40, 0x10, 0x09", "vcmpnge_usss xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnge_usss1765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnge_usss xmm15, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x78, 0x10, 0x09", "vcmpnge_usss xmm15, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngesd1766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm4, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xE4, 0x09", "vcmpngesd xmm4, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpngesd1767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm0, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xC3, 0x09", "vcmpngesd xmm0, xmm11, xmm11");
}



#[test]
fn enc_avx_vcmpngesd1768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm1, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xCA, 0x09", "vcmpngesd xmm1, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpngesd1769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm11, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xDC, 0x09", "vcmpngesd xmm11, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpngesd1770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm3, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xDC, 0x09", "vcmpngesd xmm3, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpngesd1771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm15, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x3C, 0x42, 0x09", "vcmpngesd xmm15, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngesd1772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm4, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x60, 0x10, 0x09", "vcmpngesd xmm4, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngesd1773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x10, 0x09", "vcmpngesd xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngesd1774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x10, 0x09", "vcmpngesd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngesd1775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngesd xmm11, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x58, 0x10, 0x09", "vcmpngesd xmm11, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngess1776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm4, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xE4, 0x09", "vcmpngess xmm4, xmm11, xmm4");
}



#[test]
fn enc_avx_vcmpngess1777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm15, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xFF, 0x09", "vcmpngess xmm15, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpngess1778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm0, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xC0, 0x09", "vcmpngess xmm0, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpngess1779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm12, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xE2, 0x09", "vcmpngess xmm12, xmm2, xmm2");
}



#[test]
fn enc_avx_vcmpngess1780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm0, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC2, 0x09", "vcmpngess xmm0, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpngess1781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x24, 0x42, 0x09", "vcmpngess xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngess1782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm2, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x50, 0x10, 0x09", "vcmpngess xmm2, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngess1783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x20, 0x09", "vcmpngess xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngess1784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm2, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x14, 0x42, 0x09", "vcmpngess xmm2, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngess1785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngess xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x18, 0x09", "vcmpngess xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngt_uqsd1786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm12, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x63, 0xC2, 0xE3, 0x1A", "vcmpngt_uqsd xmm12, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpngt_uqsd1787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm0, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xC0, 0x1A", "vcmpngt_uqsd xmm0, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmpngt_uqsd1788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm0, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xC3, 0x1A", "vcmpngt_uqsd xmm0, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmpngt_uqsd1789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xCC, 0x1A", "vcmpngt_uqsd xmm1, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpngt_uqsd1790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm11, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xD9, 0x1A", "vcmpngt_uqsd xmm11, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpngt_uqsd1791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x0C, 0x42, 0x1A", "vcmpngt_uqsd xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_uqsd1792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x1C, 0x42, 0x1A", "vcmpngt_uqsd xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_uqsd1793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm0, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x00, 0x1A", "vcmpngt_uqsd xmm0, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngt_uqsd1794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x1C, 0x42, 0x1A", "vcmpngt_uqsd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_uqsd1795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqsd xmm12, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x24, 0x42, 0x1A", "vcmpngt_uqsd xmm12, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_uqss1796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm15, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xF8, 0x1A", "vcmpngt_uqss xmm15, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpngt_uqss1797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm12, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0xE0, 0x1A", "vcmpngt_uqss xmm12, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmpngt_uqss1798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm2, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xD3, 0x1A", "vcmpngt_uqss xmm2, xmm4, xmm11");
}



#[test]
fn enc_avx_vcmpngt_uqss1799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm1, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0xC2, 0xCF, 0x1A", "vcmpngt_uqss xmm1, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpngt_uqss1800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm4, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xE3, 0x1A", "vcmpngt_uqss xmm4, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpngt_uqss1801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm11, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x1C, 0x42, 0x1A", "vcmpngt_uqss xmm11, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_uqss1802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x40, 0x10, 0x1A", "vcmpngt_uqss xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngt_uqss1803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm1, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x48, 0x10, 0x1A", "vcmpngt_uqss xmm1, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngt_uqss1804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm3, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x58, 0x10, 0x1A", "vcmpngt_uqss xmm3, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngt_uqss1805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_uqss xmm4, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x24, 0x42, 0x1A", "vcmpngt_uqss xmm4, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_ussd1806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xD3, 0x0A", "vcmpngt_ussd xmm2, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpngt_ussd1807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm15, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xFA, 0x0A", "vcmpngt_ussd xmm15, xmm2, xmm2");
}



#[test]
fn enc_avx_vcmpngt_ussd1808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm12, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xE3, 0x0A", "vcmpngt_ussd xmm12, xmm12, xmm3");
}



#[test]
fn enc_avx_vcmpngt_ussd1809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm2, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xD7, 0x0A", "vcmpngt_ussd xmm2, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmpngt_ussd1810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm15, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xFB, 0x0A", "vcmpngt_ussd xmm15, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmpngt_ussd1811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm11, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x18, 0x0A", "vcmpngt_ussd xmm11, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngt_ussd1812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm2, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x50, 0x10, 0x0A", "vcmpngt_ussd xmm2, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngt_ussd1813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x1C, 0x42, 0x0A", "vcmpngt_ussd xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_ussd1814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x40, 0x10, 0x0A", "vcmpngt_ussd xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngt_ussd1815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_ussd xmm15, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x38, 0x0A", "vcmpngt_ussd xmm15, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngt_usss1816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm3, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xDC, 0x0A", "vcmpngt_usss xmm3, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpngt_usss1817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm0, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0xC2, 0xC3, 0x0A", "vcmpngt_usss xmm0, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpngt_usss1818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm15, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0xC2, 0xFF, 0x0A", "vcmpngt_usss xmm15, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpngt_usss1819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm11, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0xC2, 0xDC, 0x0A", "vcmpngt_usss xmm11, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmpngt_usss1820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm15, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0xC2, 0xFC, 0x0A", "vcmpngt_usss xmm15, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpngt_usss1821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x1C, 0x42, 0x0A", "vcmpngt_usss xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_usss1822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x3C, 0x42, 0x0A", "vcmpngt_usss xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_usss1823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm4, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x24, 0x42, 0x0A", "vcmpngt_usss xmm4, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngt_usss1824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm2, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x10, 0x0A", "vcmpngt_usss xmm2, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngt_usss1825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngt_usss xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x18, 0x0A", "vcmpngt_usss xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngtpd1826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd ymm1, ymm0, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0xC2, 0xCB, 0x0A", "vcmpngtpd ymm1, ymm0, ymm11");
}



#[test]
fn enc_avx_vcmpngtpd1827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd ymm11, ymm4, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5D, 0xC2, 0xDB, 0x0A", "vcmpngtpd ymm11, ymm4, ymm11");
}



#[test]
fn enc_avx_vcmpngtpd1828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd ymm12, ymm12, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1D, 0xC2, 0xE4, 0x0A", "vcmpngtpd ymm12, ymm12, ymm12");
}



#[test]
fn enc_avx_vcmpngtpd1829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd ymm12, ymm15, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x05, 0xC2, 0xE4, 0x0A", "vcmpngtpd ymm12, ymm15, ymm4");
}



#[test]
fn enc_avx_vcmpngtpd1830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd ymm1, ymm4, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5D, 0xC2, 0xCC, 0x0A", "vcmpngtpd ymm1, ymm4, ymm12");
}



#[test]
fn enc_avx_vcmpngtpd1831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd xmm3, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0xD9, 0x0A", "vcmpngtpd xmm3, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpngtpd1832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd xmm11, xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC2, 0x1C, 0x42, 0x0A", "vcmpngtpd xmm11, xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngtpd1833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd xmm4, xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0x22, 0x0A", "vcmpngtpd xmm4, xmm11, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmpngtpd1834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtpd xmm15, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC2, 0xFB, 0x0A", "vcmpngtpd xmm15, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmpngtsd1835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm2, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xD7, 0x0A", "vcmpngtsd xmm2, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmpngtsd1836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm2, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0xC2, 0xD4, 0x0A", "vcmpngtsd xmm2, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmpngtsd1837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm0, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC4, 0x0A", "vcmpngtsd xmm0, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpngtsd1838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm2, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xD1, 0x0A", "vcmpngtsd xmm2, xmm1, xmm1");
}



#[test]
fn enc_avx_vcmpngtsd1839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm3, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xDB, 0x0A", "vcmpngtsd xmm3, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpngtsd1840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm1, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x48, 0x10, 0x0A", "vcmpngtsd xmm1, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngtsd1841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x1C, 0x42, 0x0A", "vcmpngtsd xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngtsd1842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x08, 0x0A", "vcmpngtsd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngtsd1843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm1, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x08, 0x0A", "vcmpngtsd xmm1, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpngtsd1844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtsd xmm4, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x60, 0x10, 0x0A", "vcmpngtsd xmm4, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngtss1845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm4, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xE7, 0x0A", "vcmpngtss xmm4, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmpngtss1846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm11, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0xDC, 0x0A", "vcmpngtss xmm11, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpngtss1847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm12, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0xE3, 0x0A", "vcmpngtss xmm12, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpngtss1848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm15, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0xF8, 0x0A", "vcmpngtss xmm15, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpngtss1849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm12, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xE1, 0x0A", "vcmpngtss xmm12, xmm11, xmm1");
}



#[test]
fn enc_avx_vcmpngtss1850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm2, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x14, 0x42, 0x0A", "vcmpngtss xmm2, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngtss1851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm2, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x50, 0x10, 0x0A", "vcmpngtss xmm2, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpngtss1852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm0, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x04, 0x42, 0x0A", "vcmpngtss xmm0, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngtss1853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0x1C, 0x42, 0x0A", "vcmpngtss xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpngtss1854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpngtss xmm15, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x3C, 0x42, 0x0A", "vcmpngtss xmm15, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_uqsd1855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm11, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xDC, 0x16", "vcmpnle_uqsd xmm11, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpnle_uqsd1856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm0, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xC7, 0x16", "vcmpnle_uqsd xmm0, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpnle_uqsd1857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm11, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x63, 0xC2, 0xDC, 0x16", "vcmpnle_uqsd xmm11, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpnle_uqsd1858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm15, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x63, 0xC2, 0xFC, 0x16", "vcmpnle_uqsd xmm15, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpnle_uqsd1859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xC3, 0x16", "vcmpnle_uqsd xmm0, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpnle_uqsd1860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm12, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x24, 0x42, 0x16", "vcmpnle_uqsd xmm12, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_uqsd1861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x10, 0x16", "vcmpnle_uqsd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnle_uqsd1862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm3, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x58, 0x10, 0x16", "vcmpnle_uqsd xmm3, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_uqsd1863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm15, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x38, 0x16", "vcmpnle_uqsd xmm15, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnle_uqsd1864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqsd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x38, 0x16", "vcmpnle_uqsd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnle_uqss1865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm1, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xC9, 0x16", "vcmpnle_uqss xmm1, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmpnle_uqss1866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm4, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0xC2, 0xE7, 0x16", "vcmpnle_uqss xmm4, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmpnle_uqss1867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xDF, 0x16", "vcmpnle_uqss xmm3, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmpnle_uqss1868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm15, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0xF8, 0x16", "vcmpnle_uqss xmm15, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpnle_uqss1869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm15, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xFB, 0x16", "vcmpnle_uqss xmm15, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpnle_uqss1870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm1, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x08, 0x16", "vcmpnle_uqss xmm1, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnle_uqss1871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x04, 0x42, 0x16", "vcmpnle_uqss xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_uqss1872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x60, 0x10, 0x16", "vcmpnle_uqss xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_uqss1873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm11, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x58, 0x10, 0x16", "vcmpnle_uqss xmm11, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_uqss1874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uqss xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x18, 0x16", "vcmpnle_uqss xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnle_uspd1875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd ymm2, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xD4, 0x06", "vcmpnle_uspd ymm2, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmpnle_uspd1876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd ymm1, ymm0, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xC8, 0x06", "vcmpnle_uspd ymm1, ymm0, ymm0");
}



#[test]
fn enc_avx_vcmpnle_uspd1877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd ymm15, ymm1, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x75, 0xC2, 0xF8, 0x06", "vcmpnle_uspd ymm15, ymm1, ymm0");
}



#[test]
fn enc_avx_vcmpnle_uspd1878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd ymm1, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xCC, 0x06", "vcmpnle_uspd ymm1, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmpnle_uspd1879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd ymm1, ymm0, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0x0C, 0x42, 0x06", "vcmpnle_uspd ymm1, ymm0, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_uspd1880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd xmm4, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x59, 0xC2, 0xE7, 0x06", "vcmpnle_uspd xmm4, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmpnle_uspd1881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd xmm2, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0xD0, 0x06", "vcmpnle_uspd xmm2, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmpnle_uspd1882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd xmm1, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xCC, 0x06", "vcmpnle_uspd xmm1, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpnle_uspd1883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd xmm2, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0xC2, 0xD1, 0x06", "vcmpnle_uspd xmm2, xmm2, xmm1");
}



#[test]
fn enc_avx_vcmpnle_uspd1884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_uspd xmm15, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x71, 0xC2, 0xFC, 0x06", "vcmpnle_uspd xmm15, xmm1, xmm12");
}



#[test]
fn enc_avx_vcmpnle_ussd1885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm12, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xE2, 0x06", "vcmpnle_ussd xmm12, xmm1, xmm2");
}



#[test]
fn enc_avx_vcmpnle_ussd1886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xC4, 0x06", "vcmpnle_ussd xmm0, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmpnle_ussd1887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm1, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xCB, 0x06", "vcmpnle_ussd xmm1, xmm3, xmm11");
}



#[test]
fn enc_avx_vcmpnle_ussd1888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm2, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xD2, 0x06", "vcmpnle_ussd xmm2, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpnle_ussd1889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm11, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xDB, 0x06", "vcmpnle_ussd xmm11, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpnle_ussd1890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm4, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x60, 0x10, 0x06", "vcmpnle_ussd xmm4, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_ussd1891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x40, 0x10, 0x06", "vcmpnle_ussd xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_ussd1892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x10, 0x06", "vcmpnle_ussd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnle_ussd1893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_ussd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x1C, 0x42, 0x06", "vcmpnle_ussd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_usss1894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm12, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xE3, 0x06", "vcmpnle_usss xmm12, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmpnle_usss1895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm2, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xD4, 0x06", "vcmpnle_usss xmm2, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpnle_usss1896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm2, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xD3, 0x06", "vcmpnle_usss xmm2, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpnle_usss1897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm15, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xF8, 0x06", "vcmpnle_usss xmm15, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmpnle_usss1898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm15, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xF8, 0x06", "vcmpnle_usss xmm15, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpnle_usss1899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x40, 0x10, 0x06", "vcmpnle_usss xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_usss1900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x40, 0x10, 0x06", "vcmpnle_usss xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnle_usss1901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm4, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x24, 0x42, 0x06", "vcmpnle_usss xmm4, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_usss1902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm1, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x0C, 0x42, 0x06", "vcmpnle_usss xmm1, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnle_usss1903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnle_usss xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x3C, 0x42, 0x06", "vcmpnle_usss xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlepd1904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd ymm2, ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF5, 0xC2, 0xD2, 0x06", "vcmpnlepd ymm2, ymm1, ymm2");
}



#[test]
fn enc_avx_vcmpnlepd1905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd ymm4, ymm3, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x65, 0xC2, 0xE3, 0x06", "vcmpnlepd ymm4, ymm3, ymm11");
}



#[test]
fn enc_avx_vcmpnlepd1906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd ymm2, ymm4, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDD, 0xC2, 0x12, 0x06", "vcmpnlepd ymm2, ymm4, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmpnlepd1907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd ymm1, ymm15, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x85, 0xC2, 0xCA, 0x06", "vcmpnlepd ymm1, ymm15, ymm2");
}



#[test]
fn enc_avx_vcmpnlepd1908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd ymm1, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xCC, 0x06", "vcmpnlepd ymm1, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmpnlepd1909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd xmm3, xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0x18, 0x06", "vcmpnlepd xmm3, xmm3, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlepd1910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd xmm12, xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC2, 0x20, 0x06", "vcmpnlepd xmm12, xmm11, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlepd1911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd xmm12, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0xC2, 0xE4, 0x06", "vcmpnlepd xmm12, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpnlepd1912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlepd xmm15, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0xC2, 0xF9, 0x06", "vcmpnlepd xmm15, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpnlesd1913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xDB, 0x06", "vcmpnlesd xmm3, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpnlesd1914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm4, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xE1, 0x06", "vcmpnlesd xmm4, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpnlesd1915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm12, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xE4, 0x06", "vcmpnlesd xmm12, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpnlesd1916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm0, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0xC2, 0xC3, 0x06", "vcmpnlesd xmm0, xmm4, xmm11");
}



#[test]
fn enc_avx_vcmpnlesd1917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm1, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xC9, 0x06", "vcmpnlesd xmm1, xmm2, xmm1");
}



#[test]
fn enc_avx_vcmpnlesd1918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm3, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x1C, 0x42, 0x06", "vcmpnlesd xmm3, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlesd1919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm4, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x24, 0x42, 0x06", "vcmpnlesd xmm4, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlesd1920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x48, 0x10, 0x06", "vcmpnlesd xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlesd1921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x24, 0x42, 0x06", "vcmpnlesd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlesd1922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlesd xmm12, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x20, 0x06", "vcmpnlesd xmm12, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnless1923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm4, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xE4, 0x06", "vcmpnless xmm4, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpnless1924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm4, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xE2, 0x06", "vcmpnless xmm4, xmm1, xmm2");
}



#[test]
fn enc_avx_vcmpnless1925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm2, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xD4, 0x06", "vcmpnless xmm2, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpnless1926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm4, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xE4, 0x06", "vcmpnless xmm4, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmpnless1927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm1, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xCC, 0x06", "vcmpnless xmm1, xmm11, xmm4");
}



#[test]
fn enc_avx_vcmpnless1928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm12, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x20, 0x06", "vcmpnless xmm12, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnless1929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x1C, 0x42, 0x06", "vcmpnless xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnless1930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm15, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x78, 0x10, 0x06", "vcmpnless xmm15, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnless1931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm1, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x0C, 0x42, 0x06", "vcmpnless xmm1, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnless1932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnless xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x14, 0x42, 0x06", "vcmpnless xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm3, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xDC, 0x15", "vcmpnlt_uqsd xmm3, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm1, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xCB, 0x15", "vcmpnlt_uqsd xmm1, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x23, 0xC2, 0xFB, 0x15", "vcmpnlt_uqsd xmm15, xmm11, xmm11");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm12, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xE0, 0x15", "vcmpnlt_uqsd xmm12, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm15, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0xFC, 0x15", "vcmpnlt_uqsd xmm15, xmm11, xmm4");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm0, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x00, 0x15", "vcmpnlt_uqsd xmm0, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x14, 0x42, 0x15", "vcmpnlt_uqsd xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x38, 0x15", "vcmpnlt_uqsd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x78, 0x10, 0x15", "vcmpnlt_uqsd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_uqsd1942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqsd xmm15, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x38, 0x15", "vcmpnlt_uqsd xmm15, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlt_uqss1943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0xC2, 0xCC, 0x15", "vcmpnlt_uqss xmm1, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpnlt_uqss1944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm2, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xD0, 0x15", "vcmpnlt_uqss xmm2, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpnlt_uqss1945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm4, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xE7, 0x15", "vcmpnlt_uqss xmm4, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpnlt_uqss1946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm15, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0xFB, 0x15", "vcmpnlt_uqss xmm15, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpnlt_uqss1947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x1C, 0x42, 0x15", "vcmpnlt_uqss xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_uqss1948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x60, 0x10, 0x15", "vcmpnlt_uqss xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_uqss1949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x24, 0x42, 0x15", "vcmpnlt_uqss xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_uqss1950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uqss xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x04, 0x42, 0x15", "vcmpnlt_uqss xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_uspd1951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd ymm4, ymm15, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x85, 0xC2, 0xE0, 0x05", "vcmpnlt_uspd ymm4, ymm15, ymm0");
}



#[test]
fn enc_avx_vcmpnlt_uspd1952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd ymm12, ymm15, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x05, 0xC2, 0xE7, 0x05", "vcmpnlt_uspd ymm12, ymm15, ymm15");
}



#[test]
fn enc_avx_vcmpnlt_uspd1953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd ymm1, ymm2, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xC8, 0x05", "vcmpnlt_uspd ymm1, ymm2, ymm0");
}



#[test]
fn enc_avx_vcmpnlt_uspd1954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd ymm4, ymm12, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1D, 0xC2, 0xE3, 0x05", "vcmpnlt_uspd ymm4, ymm12, ymm11");
}



#[test]
fn enc_avx_vcmpnlt_uspd1955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd ymm1, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0xCC, 0x05", "vcmpnlt_uspd ymm1, ymm0, ymm4");
}



#[test]
fn enc_avx_vcmpnlt_uspd1956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd xmm0, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x71, 0xC2, 0xC3, 0x05", "vcmpnlt_uspd xmm0, xmm1, xmm11");
}



#[test]
fn enc_avx_vcmpnlt_uspd1957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd xmm12, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC2, 0xE1, 0x05", "vcmpnlt_uspd xmm12, xmm11, xmm1");
}



#[test]
fn enc_avx_vcmpnlt_uspd1958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd xmm2, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0xD3, 0x05", "vcmpnlt_uspd xmm2, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpnlt_uspd1959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd xmm2, xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0x10, 0x05", "vcmpnlt_uspd xmm2, xmm3, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlt_uspd1960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_uspd xmm1, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x61, 0xC2, 0xCF, 0x05", "vcmpnlt_uspd xmm1, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmpnlt_ussd1961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm12, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xE1, 0x05", "vcmpnlt_ussd xmm12, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmpnlt_ussd1962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm2, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xD0, 0x05", "vcmpnlt_ussd xmm2, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpnlt_ussd1963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm11, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0xC2, 0xDF, 0x05", "vcmpnlt_ussd xmm11, xmm12, xmm15");
}



#[test]
fn enc_avx_vcmpnlt_ussd1964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm0, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xC2, 0x05", "vcmpnlt_ussd xmm0, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpnlt_ussd1965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm15, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0xC2, 0xFB, 0x05", "vcmpnlt_ussd xmm15, xmm1, xmm11");
}



#[test]
fn enc_avx_vcmpnlt_ussd1966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x40, 0x10, 0x05", "vcmpnlt_ussd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_ussd1967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm15, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x3C, 0x42, 0x05", "vcmpnlt_ussd xmm15, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_ussd1968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x48, 0x10, 0x05", "vcmpnlt_ussd xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_ussd1969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x38, 0x05", "vcmpnlt_ussd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnlt_ussd1970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_ussd xmm11, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x58, 0x10, 0x05", "vcmpnlt_ussd xmm11, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_usss1971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm12, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0xE1, 0x05", "vcmpnlt_usss xmm12, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpnlt_usss1972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm12, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xE3, 0x05", "vcmpnlt_usss xmm12, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmpnlt_usss1973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm1, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xCA, 0x05", "vcmpnlt_usss xmm1, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpnlt_usss1974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm12, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0xE3, 0x05", "vcmpnlt_usss xmm12, xmm11, xmm3");
}



#[test]
fn enc_avx_vcmpnlt_usss1975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm2, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xD3, 0x05", "vcmpnlt_usss xmm2, xmm15, xmm3");
}



#[test]
fn enc_avx_vcmpnlt_usss1976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x40, 0x10, 0x05", "vcmpnlt_usss xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_usss1977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm1, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x48, 0x10, 0x05", "vcmpnlt_usss xmm1, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_usss1978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x48, 0x10, 0x05", "vcmpnlt_usss xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnlt_usss1979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x04, 0x42, 0x05", "vcmpnlt_usss xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnlt_usss1980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnlt_usss xmm1, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x08, 0x05", "vcmpnlt_usss xmm1, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltpd1981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd ymm4, ymm0, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xC2, 0x24, 0x42, 0x05", "vcmpnltpd ymm4, ymm0, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnltpd1982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd ymm1, ymm4, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDD, 0xC2, 0x08, 0x05", "vcmpnltpd ymm1, ymm4, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltpd1983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd ymm1, ymm0, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0xC2, 0xCC, 0x05", "vcmpnltpd ymm1, ymm0, ymm12");
}



#[test]
fn enc_avx_vcmpnltpd1984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd ymm12, ymm12, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1D, 0xC2, 0x20, 0x05", "vcmpnltpd ymm12, ymm12, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltpd1985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd ymm1, ymm15, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x05, 0xC2, 0xCC, 0x05", "vcmpnltpd ymm1, ymm15, ymm12");
}



#[test]
fn enc_avx_vcmpnltpd1986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd xmm4, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xE4, 0x05", "vcmpnltpd xmm4, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpnltpd1987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd xmm12, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC2, 0xE2, 0x05", "vcmpnltpd xmm12, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpnltpd1988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC2, 0xE2, 0x05", "vcmpnltpd xmm4, xmm0, xmm2");
}



#[test]
fn enc_avx_vcmpnltpd1989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd xmm2, xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC2, 0x12, 0x05", "vcmpnltpd xmm2, xmm0, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmpnltpd1990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltpd xmm12, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0xC2, 0xE4, 0x05", "vcmpnltpd xmm12, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmpnltsd1991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm3, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xDB, 0x05", "vcmpnltsd xmm3, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpnltsd1992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm0, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xC4, 0x05", "vcmpnltsd xmm0, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpnltsd1993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm1, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0xCA, 0x05", "vcmpnltsd xmm1, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpnltsd1994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm11, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xDA, 0x05", "vcmpnltsd xmm11, xmm0, xmm2");
}



#[test]
fn enc_avx_vcmpnltsd1995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm4, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xE0, 0x05", "vcmpnltsd xmm4, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpnltsd1996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm15, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0x3C, 0x42, 0x05", "vcmpnltsd xmm15, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnltsd1997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm2, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x10, 0x05", "vcmpnltsd xmm2, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltsd1998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm15, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x38, 0x05", "vcmpnltsd xmm15, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltsd1999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm2, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x50, 0x10, 0x05", "vcmpnltsd xmm2, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnltsd2000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltsd xmm12, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x20, 0x05", "vcmpnltsd xmm12, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltss2001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xC4, 0x05", "vcmpnltss xmm0, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpnltss2002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm1, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xCB, 0x05", "vcmpnltss xmm1, xmm11, xmm11");
}



#[test]
fn enc_avx_vcmpnltss2003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm15, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xFC, 0x05", "vcmpnltss xmm15, xmm4, xmm4");
}



#[test]
fn enc_avx_vcmpnltss2004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm4, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xE0, 0x05", "vcmpnltss xmm4, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmpnltss2005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm15, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xFB, 0x05", "vcmpnltss xmm15, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmpnltss2006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm2, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x14, 0x42, 0x05", "vcmpnltss xmm2, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpnltss2007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x60, 0x10, 0x05", "vcmpnltss xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnltss2008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x10, 0x05", "vcmpnltss xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpnltss2009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm2, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x50, 0x10, 0x05", "vcmpnltss xmm2, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpnltss2010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpnltss xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x40, 0x10, 0x05", "vcmpnltss xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpord_qsd2011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xE0, 0x07", "vcmpord_qsd xmm4, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpord_qsd2012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm4, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xE4, 0x07", "vcmpord_qsd xmm4, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmpord_qsd2013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm0, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC2, 0x07", "vcmpord_qsd xmm0, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpord_qsd2014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xCC, 0x07", "vcmpord_qsd xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpord_qsd2015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0xC3, 0x07", "vcmpord_qsd xmm0, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmpord_qsd2016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x24, 0x42, 0x07", "vcmpord_qsd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_qsd2017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm2, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x50, 0x10, 0x07", "vcmpord_qsd xmm2, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpord_qsd2018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm12, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x24, 0x42, 0x07", "vcmpord_qsd xmm12, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_qsd2019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm15, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x3C, 0x42, 0x07", "vcmpord_qsd xmm15, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_qsd2020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qsd xmm11, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x18, 0x07", "vcmpord_qsd xmm11, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_qss2021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm3, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0xC2, 0xDF, 0x07", "vcmpord_qss xmm3, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpord_qss2022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm15, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xFA, 0x07", "vcmpord_qss xmm15, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpord_qss2023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm15, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0xC2, 0xFF, 0x07", "vcmpord_qss xmm15, xmm12, xmm15");
}



#[test]
fn enc_avx_vcmpord_qss2024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm0, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC3, 0x07", "vcmpord_qss xmm0, xmm0, xmm3");
}



#[test]
fn enc_avx_vcmpord_qss2025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm1, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xCC, 0x07", "vcmpord_qss xmm1, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpord_qss2026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x1C, 0x42, 0x07", "vcmpord_qss xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_qss2027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x18, 0x07", "vcmpord_qss xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_qss2028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm15, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x3C, 0x42, 0x07", "vcmpord_qss xmm15, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_qss2029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x38, 0x07", "vcmpord_qss xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_qss2030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_qss xmm11, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x18, 0x07", "vcmpord_qss xmm11, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_spd2031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd ymm2, ymm11, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x25, 0xC2, 0xD4, 0x17", "vcmpord_spd ymm2, ymm11, ymm12");
}



#[test]
fn enc_avx_vcmpord_spd2032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd ymm3, ymm11, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x25, 0xC2, 0xDC, 0x17", "vcmpord_spd ymm3, ymm11, ymm12");
}



#[test]
fn enc_avx_vcmpord_spd2033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd ymm15, ymm0, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0xC2, 0xFB, 0x17", "vcmpord_spd ymm15, ymm0, ymm11");
}



#[test]
fn enc_avx_vcmpord_spd2034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd ymm4, ymm1, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF5, 0xC2, 0x22, 0x17", "vcmpord_spd ymm4, ymm1, YWORD [rdx]");
}



#[test]
fn enc_avx_vcmpord_spd2035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd ymm11, ymm11, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x25, 0xC2, 0xDF, 0x17", "vcmpord_spd ymm11, ymm11, ymm15");
}



#[test]
fn enc_avx_vcmpord_spd2036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd xmm1, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0xC8, 0x17", "vcmpord_spd xmm1, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmpord_spd2037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd xmm12, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0x22, 0x17", "vcmpord_spd xmm12, xmm4, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmpord_spd2038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd xmm0, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x69, 0xC2, 0xC7, 0x17", "vcmpord_spd xmm0, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmpord_spd2039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd xmm3, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xDF, 0x17", "vcmpord_spd xmm3, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpord_spd2040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_spd xmm4, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD9, 0xC2, 0x24, 0x42, 0x17", "vcmpord_spd xmm4, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_ssd2041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm12, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x63, 0xC2, 0xE4, 0x17", "vcmpord_ssd xmm12, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpord_ssd2042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm15, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xF8, 0x17", "vcmpord_ssd xmm15, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpord_ssd2043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm3, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xDA, 0x17", "vcmpord_ssd xmm3, xmm11, xmm2");
}



#[test]
fn enc_avx_vcmpord_ssd2044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm0, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0xC0, 0x17", "vcmpord_ssd xmm0, xmm11, xmm0");
}



#[test]
fn enc_avx_vcmpord_ssd2045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm15, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xF8, 0x17", "vcmpord_ssd xmm15, xmm15, xmm0");
}



#[test]
fn enc_avx_vcmpord_ssd2046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x20, 0x17", "vcmpord_ssd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_ssd2047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm15, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x3C, 0x42, 0x17", "vcmpord_ssd xmm15, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_ssd2048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x10, 0x17", "vcmpord_ssd xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_ssd2049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm15, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0x3C, 0x42, 0x17", "vcmpord_ssd xmm15, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_ssd2050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_ssd xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x1C, 0x42, 0x17", "vcmpord_ssd xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_sss2051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xD9, 0x17", "vcmpord_sss xmm11, xmm2, xmm1");
}



#[test]
fn enc_avx_vcmpord_sss2052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm4, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xE0, 0x17", "vcmpord_sss xmm4, xmm4, xmm0");
}



#[test]
fn enc_avx_vcmpord_sss2053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0xC1, 0x17", "vcmpord_sss xmm0, xmm0, xmm1");
}



#[test]
fn enc_avx_vcmpord_sss2054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm2, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xD1, 0x17", "vcmpord_sss xmm2, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpord_sss2055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0xDA, 0x17", "vcmpord_sss xmm11, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpord_sss2056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm12, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x60, 0x10, 0x17", "vcmpord_sss xmm12, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpord_sss2057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x1C, 0x42, 0x17", "vcmpord_sss xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpord_sss2058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x20, 0x17", "vcmpord_sss xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_sss2059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm2, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x10, 0x17", "vcmpord_sss xmm2, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpord_sss2060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpord_sss xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0x48, 0x10, 0x17", "vcmpord_sss xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpordsd2061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0xCC, 0x07", "vcmpordsd xmm1, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmpordsd2062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm4, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0xC2, 0xE7, 0x07", "vcmpordsd xmm4, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpordsd2063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm12, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xE4, 0x07", "vcmpordsd xmm12, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpordsd2064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm11, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xDC, 0x07", "vcmpordsd xmm11, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmpordsd2065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm1, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0xC2, 0xCB, 0x07", "vcmpordsd xmm1, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmpordsd2066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x24, 0x42, 0x07", "vcmpordsd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpordsd2067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm3, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x1C, 0x42, 0x07", "vcmpordsd xmm3, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpordsd2068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm4, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x24, 0x42, 0x07", "vcmpordsd xmm4, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpordsd2069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm1, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x08, 0x07", "vcmpordsd xmm1, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpordsd2070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordsd xmm11, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0xC2, 0x1C, 0x42, 0x07", "vcmpordsd xmm11, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpordss2071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm1, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xC8, 0x07", "vcmpordss xmm1, xmm1, xmm0");
}



#[test]
fn enc_avx_vcmpordss2072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0xC2, 0xDF, 0x07", "vcmpordss xmm11, xmm0, xmm15");
}



#[test]
fn enc_avx_vcmpordss2073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm0, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0xC2, 0xC7, 0x07", "vcmpordss xmm0, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmpordss2074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm2, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xD0, 0x07", "vcmpordss xmm2, xmm2, xmm0");
}



#[test]
fn enc_avx_vcmpordss2075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm3, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0xC2, 0xDF, 0x07", "vcmpordss xmm3, xmm15, xmm15");
}



#[test]
fn enc_avx_vcmpordss2076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm0, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x04, 0x42, 0x07", "vcmpordss xmm0, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpordss2077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm12, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x60, 0x10, 0x07", "vcmpordss xmm12, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpordss2078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm0, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x40, 0x10, 0x07", "vcmpordss xmm0, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpordss2079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpordss xmm15, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x38, 0x07", "vcmpordss xmm15, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpsd2080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm1, xmm12, xmm1, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xC9, 0x4F", "vcmpsd xmm1, xmm12, xmm1, 79");
}



#[test]
fn enc_avx_vcmpsd2081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm12, xmm1, xmm3, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xE3, 0x53", "vcmpsd xmm12, xmm1, xmm3, 83");
}



#[test]
fn enc_avx_vcmpsd2082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm12, xmm3, xmm0, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xE0, 0x24", "vcmpsd xmm12, xmm3, xmm0, 36");
}



#[test]
fn enc_avx_vcmpsd2083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm12, xmm2, xmm0, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0xE0, 0x28", "vcmpsd xmm12, xmm2, xmm0, 40");
}



#[test]
fn enc_avx_vcmpsd2084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm12, xmm0, xmm0, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xE0, 0x5C", "vcmpsd xmm12, xmm0, xmm0, 92");
}



#[test]
fn enc_avx_vcmpsd2085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm4, xmm3, QWORD [rax + 16], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x60, 0x10, 0x76", "vcmpsd xmm4, xmm3, QWORD [rax + 16], 118");
}



#[test]
fn enc_avx_vcmpsd2086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm12, xmm0, QWORD [rax * 2 + rdx], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0x24, 0x42, 0x57", "vcmpsd xmm12, xmm0, QWORD [rax * 2 + rdx], 87");
}



#[test]
fn enc_avx_vcmpsd2087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm3, xmm11, QWORD [rax + 16], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x58, 0x10, 0x0C", "vcmpsd xmm3, xmm11, QWORD [rax + 16], 12");
}



#[test]
fn enc_avx_vcmpsd2088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm0, xmm2, QWORD [rax + 16], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x40, 0x10, 0x68", "vcmpsd xmm0, xmm2, QWORD [rax + 16], 104");
}



#[test]
fn enc_avx_vcmpsd2089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpsd xmm3, xmm1, QWORD [rax * 2 + rdx], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x1C, 0x42, 0x1B", "vcmpsd xmm3, xmm1, QWORD [rax * 2 + rdx], 27");
}



#[test]
fn enc_avx_vcmpss2090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm11, xmm11, xmm15, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xDF, 0x14", "vcmpss xmm11, xmm11, xmm15, 20");
}



#[test]
fn enc_avx_vcmpss2091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm1, xmm15, xmm12, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0xC2, 0xCC, 0x2D", "vcmpss xmm1, xmm15, xmm12, 45");
}



#[test]
fn enc_avx_vcmpss2092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm11, xmm0, xmm11, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0xC2, 0xDB, 0x62", "vcmpss xmm11, xmm0, xmm11, 98");
}



#[test]
fn enc_avx_vcmpss2093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm2, xmm4, xmm2, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xD2, 0x05", "vcmpss xmm2, xmm4, xmm2, 5");
}



#[test]
fn enc_avx_vcmpss2094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm3, xmm0, xmm11, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0xC2, 0xDB, 0x45", "vcmpss xmm3, xmm0, xmm11, 69");
}



#[test]
fn enc_avx_vcmpss2095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm4, xmm3, QWORD [rax + 16], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0x60, 0x10, 0x34", "vcmpss xmm4, xmm3, QWORD [rax + 16], 52");
}



#[test]
fn enc_avx_vcmpss2096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm4, xmm1, QWORD [rax * 2 + rdx], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x24, 0x42, 0x1D", "vcmpss xmm4, xmm1, QWORD [rax * 2 + rdx], 29");
}



#[test]
fn enc_avx_vcmpss2097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm3, xmm4, QWORD [rax * 2 + rdx], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0x1C, 0x42, 0x25", "vcmpss xmm3, xmm4, QWORD [rax * 2 + rdx], 37");
}



#[test]
fn enc_avx_vcmpss2098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm2, xmm2, QWORD [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x10, 0x39", "vcmpss xmm2, xmm2, QWORD [rax], 57");
}



#[test]
fn enc_avx_vcmpss2099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpss xmm11, xmm3, QWORD [rax * 2 + rdx], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0x1C, 0x42, 0x47", "vcmpss xmm11, xmm3, QWORD [rax * 2 + rdx], 71");
}



#[test]
fn enc_avx_vcmptrue_uqpd2100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd xmm0, xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC2, 0x00, 0x0F", "vcmptrue_uqpd xmm0, xmm15, OWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqpd2101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd xmm1, xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC2, 0x0A, 0x0F", "vcmptrue_uqpd xmm1, xmm3, OWORD [rdx]");
}



#[test]
fn enc_avx_vcmptrue_uqpd2102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd xmm0, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC2, 0xC3, 0x0F", "vcmptrue_uqpd xmm0, xmm0, xmm11");
}



#[test]
fn enc_avx_vcmptrue_uqpd2103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd xmm0, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x61, 0xC2, 0xC7, 0x0F", "vcmptrue_uqpd xmm0, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmptrue_uqpd2104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd xmm15, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x19, 0xC2, 0xFC, 0x0F", "vcmptrue_uqpd xmm15, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmptrue_uqpd2105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd ymm0, ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0xC2, 0x0F", "vcmptrue_uqpd ymm0, ymm3, ymm2");
}



#[test]
fn enc_avx_vcmptrue_uqpd2106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd ymm11, ymm4, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5D, 0xC2, 0xDB, 0x0F", "vcmptrue_uqpd ymm11, ymm4, ymm3");
}



#[test]
fn enc_avx_vcmptrue_uqpd2107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd ymm4, ymm3, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE5, 0xC2, 0x24, 0x42, 0x0F", "vcmptrue_uqpd ymm4, ymm3, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_uqpd2108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd ymm11, ymm0, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xC2, 0xD8, 0x0F", "vcmptrue_uqpd ymm11, ymm0, ymm0");
}



#[test]
fn enc_avx_vcmptrue_uqpd2109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqpd ymm15, ymm1, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x75, 0xC2, 0xFC, 0x0F", "vcmptrue_uqpd ymm15, ymm1, ymm12");
}



#[test]
fn enc_avx_vcmptrue_uqsd2110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xCC, 0x0F", "vcmptrue_uqsd xmm1, xmm2, xmm12");
}



#[test]
fn enc_avx_vcmptrue_uqsd2111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm11, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xDB, 0x0F", "vcmptrue_uqsd xmm11, xmm1, xmm3");
}



#[test]
fn enc_avx_vcmptrue_uqsd2112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm1, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0xCB, 0x0F", "vcmptrue_uqsd xmm1, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmptrue_uqsd2113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm0, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0xC2, 0xC4, 0x0F", "vcmptrue_uqsd xmm0, xmm2, xmm12");
}



#[test]
fn enc_avx_vcmptrue_uqsd2114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm4, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0xE4, 0x0F", "vcmptrue_uqsd xmm4, xmm12, xmm4");
}



#[test]
fn enc_avx_vcmptrue_uqsd2115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm2, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x10, 0x0F", "vcmptrue_uqsd xmm2, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqsd2116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm2, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x10, 0x0F", "vcmptrue_uqsd xmm2, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqsd2117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x58, 0x10, 0x0F", "vcmptrue_uqsd xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptrue_uqsd2118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm2, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x50, 0x10, 0x0F", "vcmptrue_uqsd xmm2, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptrue_uqsd2119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqsd xmm4, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0x20, 0x0F", "vcmptrue_uqsd xmm4, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqss2120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0xCC, 0x0F", "vcmptrue_uqss xmm1, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmptrue_uqss2121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm11, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0xC2, 0xDF, 0x0F", "vcmptrue_uqss xmm11, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmptrue_uqss2122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0xC2, 0xFC, 0x0F", "vcmptrue_uqss xmm15, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmptrue_uqss2123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm4, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0xC2, 0xE1, 0x0F", "vcmptrue_uqss xmm4, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmptrue_uqss2124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0xC4, 0x0F", "vcmptrue_uqss xmm0, xmm1, xmm4");
}



#[test]
fn enc_avx_vcmptrue_uqss2125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x00, 0x0F", "vcmptrue_uqss xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqss2126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x10, 0x0F", "vcmptrue_uqss xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqss2127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm15, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0x38, 0x0F", "vcmptrue_uqss xmm15, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqss2128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x20, 0x0F", "vcmptrue_uqss xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uqss2129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uqss xmm11, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x58, 0x10, 0x0F", "vcmptrue_uqss xmm11, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptrue_uspd2130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd ymm2, ymm4, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDD, 0xC2, 0x14, 0x42, 0x1F", "vcmptrue_uspd ymm2, ymm4, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_uspd2131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd ymm2, ymm3, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x65, 0xC2, 0xD3, 0x1F", "vcmptrue_uspd ymm2, ymm3, ymm11");
}



#[test]
fn enc_avx_vcmptrue_uspd2132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd ymm12, ymm3, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x65, 0xC2, 0x20, 0x1F", "vcmptrue_uspd ymm12, ymm3, YWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_uspd2133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd ymm0, ymm15, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x05, 0xC2, 0xC3, 0x1F", "vcmptrue_uspd ymm0, ymm15, ymm11");
}



#[test]
fn enc_avx_vcmptrue_uspd2134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd ymm11, ymm2, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6D, 0xC2, 0xDF, 0x1F", "vcmptrue_uspd ymm11, ymm2, ymm15");
}



#[test]
fn enc_avx_vcmptrue_uspd2135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd xmm3, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC2, 0xD9, 0x1F", "vcmptrue_uspd xmm3, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmptrue_uspd2136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd xmm15, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0xC2, 0xFC, 0x1F", "vcmptrue_uspd xmm15, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmptrue_uspd2137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd xmm2, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x01, 0xC2, 0xD4, 0x1F", "vcmptrue_uspd xmm2, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmptrue_uspd2138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd xmm3, xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0x1C, 0x42, 0x1F", "vcmptrue_uspd xmm3, xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_uspd2139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_uspd xmm12, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0xC2, 0xE1, 0x1F", "vcmptrue_uspd xmm12, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmptrue_ussd2140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm15, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0xC2, 0xFC, 0x1F", "vcmptrue_ussd xmm15, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmptrue_ussd2141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm11, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0xDC, 0x1F", "vcmptrue_ussd xmm11, xmm4, xmm4");
}



#[test]
fn enc_avx_vcmptrue_ussd2142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm2, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0xC2, 0xD7, 0x1F", "vcmptrue_ussd xmm2, xmm1, xmm15");
}



#[test]
fn enc_avx_vcmptrue_ussd2143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0xC2, 0xE7, 0x1F", "vcmptrue_ussd xmm12, xmm4, xmm15");
}



#[test]
fn enc_avx_vcmptrue_ussd2144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm11, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xDC, 0x1F", "vcmptrue_ussd xmm11, xmm3, xmm4");
}



#[test]
fn enc_avx_vcmptrue_ussd2145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm12, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0x20, 0x1F", "vcmptrue_ussd xmm12, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_ussd2146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm3, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x18, 0x1F", "vcmptrue_ussd xmm3, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_ussd2147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x20, 0x1F", "vcmptrue_ussd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_ussd2148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x60, 0x10, 0x1F", "vcmptrue_ussd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptrue_ussd2149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_ussd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x18, 0x1F", "vcmptrue_ussd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptrue_usss2150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm12, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0xC2, 0xE3, 0x1F", "vcmptrue_usss xmm12, xmm15, xmm11");
}



#[test]
fn enc_avx_vcmptrue_usss2151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm3, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xDB, 0x1F", "vcmptrue_usss xmm3, xmm11, xmm11");
}



#[test]
fn enc_avx_vcmptrue_usss2152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm0, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0xC2, 0xC4, 0x1F", "vcmptrue_usss xmm0, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmptrue_usss2153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm11, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xDC, 0x1F", "vcmptrue_usss xmm11, xmm4, xmm4");
}



#[test]
fn enc_avx_vcmptrue_usss2154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm1, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xCB, 0x1F", "vcmptrue_usss xmm1, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmptrue_usss2155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x24, 0x42, 0x1F", "vcmptrue_usss xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_usss2156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0x24, 0x42, 0x1F", "vcmptrue_usss xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_usss2157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm12, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x24, 0x42, 0x1F", "vcmptrue_usss xmm12, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_usss2158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm15, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x3C, 0x42, 0x1F", "vcmptrue_usss xmm15, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptrue_usss2159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptrue_usss xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x78, 0x10, 0x1F", "vcmptrue_usss xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptruesd2160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm2, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0xD4, 0x0F", "vcmptruesd xmm2, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmptruesd2161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm2, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0xC2, 0xD4, 0x0F", "vcmptruesd xmm2, xmm11, xmm12");
}



#[test]
fn enc_avx_vcmptruesd2162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm12, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xE3, 0x0F", "vcmptruesd xmm12, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmptruesd2163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm12, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0xC2, 0xE1, 0x0F", "vcmptruesd xmm12, xmm1, xmm1");
}



#[test]
fn enc_avx_vcmptruesd2164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm12, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0xC2, 0xE4, 0x0F", "vcmptruesd xmm12, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmptruesd2165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm15, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0x78, 0x10, 0x0F", "vcmptruesd xmm15, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptruesd2166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm1, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x0C, 0x42, 0x0F", "vcmptruesd xmm1, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptruesd2167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm3, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x18, 0x0F", "vcmptruesd xmm3, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptruesd2168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x24, 0x42, 0x0F", "vcmptruesd xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmptruesd2169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruesd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x10, 0x0F", "vcmptruesd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptruess2170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0xC2, 0xFC, 0x0F", "vcmptruess xmm15, xmm0, xmm12");
}



#[test]
fn enc_avx_vcmptruess2171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm0, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xC0, 0x0F", "vcmptruess xmm0, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmptruess2172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xDB, 0x0F", "vcmptruess xmm3, xmm12, xmm11");
}



#[test]
fn enc_avx_vcmptruess2173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm0, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xC2, 0x0F", "vcmptruess xmm0, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmptruess2174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0xDC, 0x0F", "vcmptruess xmm3, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmptruess2175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm15, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x78, 0x10, 0x0F", "vcmptruess xmm15, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptruess2176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm12, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0xC2, 0x20, 0x0F", "vcmptruess xmm12, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptruess2177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x40, 0x10, 0x0F", "vcmptruess xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmptruess2178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm15, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x38, 0x0F", "vcmptruess xmm15, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcmptruess2179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmptruess xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x04, 0x42, 0x0F", "vcmptruess xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_qsd2180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm12, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0xC2, 0xE4, 0x03", "vcmpunord_qsd xmm12, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpunord_qsd2181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm0, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xC1, 0x03", "vcmpunord_qsd xmm0, xmm2, xmm1");
}



#[test]
fn enc_avx_vcmpunord_qsd2182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm15, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xF8, 0x03", "vcmpunord_qsd xmm15, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpunord_qsd2183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm15, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0xFB, 0x03", "vcmpunord_qsd xmm15, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmpunord_qsd2184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xCC, 0x03", "vcmpunord_qsd xmm1, xmm3, xmm12");
}



#[test]
fn enc_avx_vcmpunord_qsd2185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x20, 0x03", "vcmpunord_qsd xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_qsd2186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm1, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0xC2, 0x48, 0x10, 0x03", "vcmpunord_qsd xmm1, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunord_qsd2187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm11, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0xC2, 0x18, 0x03", "vcmpunord_qsd xmm11, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_qsd2188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x48, 0x10, 0x03", "vcmpunord_qsd xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunord_qsd2189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qsd xmm4, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x60, 0x10, 0x03", "vcmpunord_qsd xmm4, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunord_qss2190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm3, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xDA, 0x03", "vcmpunord_qss xmm3, xmm12, xmm2");
}



#[test]
fn enc_avx_vcmpunord_qss2191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5A, 0xC2, 0xDC, 0x03", "vcmpunord_qss xmm11, xmm4, xmm12");
}



#[test]
fn enc_avx_vcmpunord_qss2192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm4, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xE1, 0x03", "vcmpunord_qss xmm4, xmm3, xmm1");
}



#[test]
fn enc_avx_vcmpunord_qss2193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm15, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0xC2, 0xFF, 0x03", "vcmpunord_qss xmm15, xmm2, xmm15");
}



#[test]
fn enc_avx_vcmpunord_qss2194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0xC1, 0x03", "vcmpunord_qss xmm0, xmm12, xmm1");
}



#[test]
fn enc_avx_vcmpunord_qss2195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm2, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x14, 0x42, 0x03", "vcmpunord_qss xmm2, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_qss2196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0xC2, 0x18, 0x03", "vcmpunord_qss xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_qss2197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x04, 0x42, 0x03", "vcmpunord_qss xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_qss2198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x24, 0x42, 0x03", "vcmpunord_qss xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_qss2199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_qss xmm1, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x08, 0x03", "vcmpunord_qss xmm1, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_spd2200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd ymm12, ymm12, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1D, 0xC2, 0xE3, 0x13", "vcmpunord_spd ymm12, ymm12, ymm11");
}



#[test]
fn enc_avx_vcmpunord_spd2201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd ymm4, ymm15, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x85, 0xC2, 0xE0, 0x13", "vcmpunord_spd ymm4, ymm15, ymm0");
}



#[test]
fn enc_avx_vcmpunord_spd2202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd ymm11, ymm1, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x75, 0xC2, 0x18, 0x13", "vcmpunord_spd ymm11, ymm1, YWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_spd2203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd ymm3, ymm2, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xED, 0xC2, 0xDB, 0x13", "vcmpunord_spd ymm3, ymm2, ymm3");
}



#[test]
fn enc_avx_vcmpunord_spd2204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd ymm15, ymm12, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1D, 0xC2, 0xFB, 0x13", "vcmpunord_spd ymm15, ymm12, ymm11");
}



#[test]
fn enc_avx_vcmpunord_spd2205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd xmm11, xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC2, 0x18, 0x13", "vcmpunord_spd xmm11, xmm2, OWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_spd2206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd xmm12, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0xC2, 0xE1, 0x13", "vcmpunord_spd xmm12, xmm15, xmm1");
}



#[test]
fn enc_avx_vcmpunord_spd2207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0xE1, 0x13", "vcmpunord_spd xmm12, xmm4, xmm1");
}



#[test]
fn enc_avx_vcmpunord_spd2208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd xmm15, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC2, 0xFB, 0x13", "vcmpunord_spd xmm15, xmm4, xmm3");
}



#[test]
fn enc_avx_vcmpunord_spd2209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_spd xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC2, 0xC1, 0x13", "vcmpunord_spd xmm0, xmm11, xmm1");
}



#[test]
fn enc_avx_vcmpunord_ssd2210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm3, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0xC2, 0xDF, 0x13", "vcmpunord_ssd xmm3, xmm3, xmm15");
}



#[test]
fn enc_avx_vcmpunord_ssd2211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm15, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0xC2, 0xFC, 0x13", "vcmpunord_ssd xmm15, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpunord_ssd2212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm15, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0xC2, 0xF8, 0x13", "vcmpunord_ssd xmm15, xmm12, xmm0");
}



#[test]
fn enc_avx_vcmpunord_ssd2213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm3, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0xC2, 0xDC, 0x13", "vcmpunord_ssd xmm3, xmm15, xmm12");
}



#[test]
fn enc_avx_vcmpunord_ssd2214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm4, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0xE4, 0x13", "vcmpunord_ssd xmm4, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpunord_ssd2215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm3, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x18, 0x13", "vcmpunord_ssd xmm3, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_ssd2216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0xC2, 0x04, 0x42, 0x13", "vcmpunord_ssd xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_ssd2217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0xC2, 0x24, 0x42, 0x13", "vcmpunord_ssd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_ssd2218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm3, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x1C, 0x42, 0x13", "vcmpunord_ssd xmm3, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_ssd2219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_ssd xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0xC2, 0x04, 0x42, 0x13", "vcmpunord_ssd xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_sss2220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm12, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0xE2, 0x13", "vcmpunord_sss xmm12, xmm1, xmm2");
}



#[test]
fn enc_avx_vcmpunord_sss2221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm2, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0xC2, 0xD1, 0x13", "vcmpunord_sss xmm2, xmm11, xmm1");
}



#[test]
fn enc_avx_vcmpunord_sss2222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm11, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0xDC, 0x13", "vcmpunord_sss xmm11, xmm2, xmm4");
}



#[test]
fn enc_avx_vcmpunord_sss2223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm0, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0xC2, 0xC7, 0x13", "vcmpunord_sss xmm0, xmm11, xmm15");
}



#[test]
fn enc_avx_vcmpunord_sss2224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm11, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0xC2, 0xDA, 0x13", "vcmpunord_sss xmm11, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpunord_sss2225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x0C, 0x42, 0x13", "vcmpunord_sss xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunord_sss2226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm15, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0xC2, 0x78, 0x10, 0x13", "vcmpunord_sss xmm15, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunord_sss2227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm4, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0xC2, 0x60, 0x10, 0x13", "vcmpunord_sss xmm4, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunord_sss2228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm15, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0xC2, 0x38, 0x13", "vcmpunord_sss xmm15, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunord_sss2229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunord_sss xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0x20, 0x13", "vcmpunord_sss xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunordsd2230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm0, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0xC2, 0xC3, 0x03", "vcmpunordsd xmm0, xmm1, xmm11");
}



#[test]
fn enc_avx_vcmpunordsd2231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm11, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0xDA, 0x03", "vcmpunordsd xmm11, xmm15, xmm2");
}



#[test]
fn enc_avx_vcmpunordsd2232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm12, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0xC2, 0xE0, 0x03", "vcmpunordsd xmm12, xmm3, xmm0");
}



#[test]
fn enc_avx_vcmpunordsd2233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm11, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0xC2, 0xDA, 0x03", "vcmpunordsd xmm11, xmm4, xmm2");
}



#[test]
fn enc_avx_vcmpunordsd2234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm1, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0xC2, 0xCB, 0x03", "vcmpunordsd xmm1, xmm2, xmm3");
}



#[test]
fn enc_avx_vcmpunordsd2235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm15, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0xC2, 0x3C, 0x42, 0x03", "vcmpunordsd xmm15, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunordsd2236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm0, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0xC2, 0x40, 0x10, 0x03", "vcmpunordsd xmm0, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunordsd2237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0xC2, 0x40, 0x10, 0x03", "vcmpunordsd xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunordsd2238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordsd xmm3, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0xC2, 0x1C, 0x42, 0x03", "vcmpunordsd xmm3, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunordss2239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm12, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0xC2, 0xE4, 0x03", "vcmpunordss xmm12, xmm15, xmm4");
}



#[test]
fn enc_avx_vcmpunordss2240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0xC2, 0xD3, 0x03", "vcmpunordss xmm2, xmm3, xmm3");
}



#[test]
fn enc_avx_vcmpunordss2241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm1, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0xC2, 0xCC, 0x03", "vcmpunordss xmm1, xmm12, xmm12");
}



#[test]
fn enc_avx_vcmpunordss2242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm11, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xC2, 0xDC, 0x03", "vcmpunordss xmm11, xmm0, xmm4");
}



#[test]
fn enc_avx_vcmpunordss2243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm0, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0xC2, 0xC3, 0x03", "vcmpunordss xmm0, xmm2, xmm11");
}



#[test]
fn enc_avx_vcmpunordss2244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xC2, 0x48, 0x10, 0x03", "vcmpunordss xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunordss2245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0xC2, 0x1C, 0x42, 0x03", "vcmpunordss xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcmpunordss2246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm0, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0xC2, 0x00, 0x03", "vcmpunordss xmm0, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcmpunordss2247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0xC2, 0x60, 0x10, 0x03", "vcmpunordss xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcmpunordss2248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcmpunordss xmm12, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0xC2, 0x24, 0x42, 0x03", "vcmpunordss xmm12, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomisd2249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xDC", "vcomisd xmm11, xmm4");
}



#[test]
fn enc_avx_vcomisd2250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xE1", "vcomisd xmm4, xmm1");
}



#[test]
fn enc_avx_vcomisd2251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x2F, 0xCC", "vcomisd xmm1, xmm12");
}



#[test]
fn enc_avx_vcomisd2252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xD4", "vcomisd xmm2, xmm4");
}



#[test]
fn enc_avx_vcomisd2253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xFA", "vcomisd xmm15, xmm2");
}



#[test]
fn enc_avx_vcomisd2254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x1C, 0x42", "vcomisd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomisd2255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x18", "vcomisd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcomisd2256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x58, 0x10", "vcomisd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomisd2257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x60, 0x10", "vcomisd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomiss2258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0xE0", "vcomiss xmm12, xmm0");
}



#[test]
fn enc_avx_vcomiss2259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0xE2", "vcomiss xmm12, xmm2");
}



#[test]
fn enc_avx_vcomiss2260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x2F, 0xE3", "vcomiss xmm12, xmm11");
}



#[test]
fn enc_avx_vcomiss2261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2F, 0xCB", "vcomiss xmm1, xmm11");
}



#[test]
fn enc_avx_vcomiss2262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2F, 0xD4", "vcomiss xmm2, xmm12");
}



#[test]
fn enc_avx_vcomiss2263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x10", "vcomiss xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vcomiss2264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x3C, 0x42", "vcomiss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss2265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x60, 0x10", "vcomiss xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomiss2266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x24, 0x42", "vcomiss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss2267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x58, 0x10", "vcomiss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd2268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x1C, 0x42", "vcvtdq2pd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd2269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x60, 0x10", "vcvtdq2pd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd2270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x10", "vcvtdq2pd xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtdq2pd2271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x14, 0x42", "vcvtdq2pd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd2272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x58, 0x10", "vcvtdq2pd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps2273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x38", "vcvtph2ps xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtph2ps2274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x04, 0x42", "vcvtph2ps xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtph2ps2275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x00", "vcvtph2ps xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtph2ps2276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x18", "vcvtph2ps xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd2277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x48, 0x10", "vcvtps2pd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd2278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x60, 0x10", "vcvtps2pd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd2279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x20", "vcvtps2pd xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd2280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x0C, 0x42", "vcvtps2pd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtps2ph2281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax], xmm11, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x18, 0x63", "vcvtps2ph QWORD [rax], xmm11, 99");
}



#[test]
fn enc_avx_vcvtps2ph2282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm12, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x24, 0x42, 0x4A", "vcvtps2ph QWORD [rax * 2 + rdx], xmm12, 74");
}



#[test]
fn enc_avx_vcvtps2ph2283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax], xmm15, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x38, 0x79", "vcvtps2ph QWORD [rax], xmm15, 121");
}



#[test]
fn enc_avx_vcvtps2ph2284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax], xmm11, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x18, 0x56", "vcvtps2ph QWORD [rax], xmm11, 86");
}



#[test]
fn enc_avx_vcvtps2ph2285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax + 16], xmm4, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x60, 0x10, 0x2F", "vcvtps2ph QWORD [rax + 16], xmm4, 47");
}



#[test]
fn enc_avx_vcvtsd2si2286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xD7", "vcvtsd2si rdx, xmm15");
}



#[test]
fn enc_avx_vcvtsd2si2287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xCB", "vcvtsd2si rcx, xmm11");
}



#[test]
fn enc_avx_vcvtsd2si2288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC9", "vcvtsd2si rcx, xmm1");
}



#[test]
fn enc_avx_vcvtsd2si2289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xC7", "vcvtsd2si rax, xmm15");
}



#[test]
fn enc_avx_vcvtsd2si2290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC3", "vcvtsd2si rax, xmm3");
}



#[test]
fn enc_avx_vcvtsd2si2291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x08", "vcvtsd2si rcx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2si2292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x0C, 0x42", "vcvtsd2si rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2si2293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x10", "vcvtsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2si2294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x14, 0x42", "vcvtsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2ss2295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5A, 0xFA", "vcvtsd2ss xmm15, xmm3, xmm2");
}



#[test]
fn enc_avx_vcvtsd2ss2296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm4, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5A, 0xE4", "vcvtsd2ss xmm4, xmm11, xmm4");
}



#[test]
fn enc_avx_vcvtsd2ss2297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm2, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5A, 0xD7", "vcvtsd2ss xmm2, xmm1, xmm15");
}



#[test]
fn enc_avx_vcvtsd2ss2298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm1, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5A, 0xCF", "vcvtsd2ss xmm1, xmm1, xmm15");
}



#[test]
fn enc_avx_vcvtsd2ss2299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm12, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5A, 0xE2", "vcvtsd2ss xmm12, xmm12, xmm2");
}



#[test]
fn enc_avx_vcvtsd2ss2300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm0, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5A, 0x04, 0x42", "vcvtsd2ss xmm0, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2ss2301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5A, 0x78, 0x10", "vcvtsd2ss xmm15, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss2302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm0, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5A, 0x40, 0x10", "vcvtsd2ss xmm0, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss2303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5A, 0x38", "vcvtsd2ss xmm15, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2ss2304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x5A, 0x78, 0x10", "vcvtsd2ss xmm15, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsi2sd2305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm4, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2A, 0x24, 0x42", "vcvtsi2sd xmm4, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd2306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm15, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0x9B, 0x2A, 0x38", "vcvtsi2sd xmm15, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2sd2307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm11, xmm3, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xE3, 0x2A, 0xD9", "vcvtsi2sd xmm11, xmm3, rcx");
}



#[test]
fn enc_avx_vcvtsi2sd2308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm0, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2A, 0x00", "vcvtsi2sd xmm0, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2sd2309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0x9B, 0x2A, 0x00", "vcvtsi2sd xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2ss2310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm1, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xA2, 0x2A, 0x0C, 0x42", "vcvtsi2ss xmm1, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss2311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm11, xmm2, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xEA, 0x2A, 0xD9", "vcvtsi2ss xmm11, xmm2, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss2312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm4, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xA2, 0x2A, 0x20", "vcvtsi2ss xmm4, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2ss2313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm0, xmm1, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF2, 0x2A, 0xC1", "vcvtsi2ss xmm0, xmm1, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss2314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xE2, 0x2A, 0x1C, 0x42", "vcvtsi2ss xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd2315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm12, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5A, 0xE3", "vcvtss2sd xmm12, xmm0, xmm3");
}



#[test]
fn enc_avx_vcvtss2sd2316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm15, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5A, 0xF8", "vcvtss2sd xmm15, xmm2, xmm0");
}



#[test]
fn enc_avx_vcvtss2sd2317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm11, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5A, 0xDB", "vcvtss2sd xmm11, xmm3, xmm3");
}



#[test]
fn enc_avx_vcvtss2sd2318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm2, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5A, 0xD0", "vcvtss2sd xmm2, xmm12, xmm0");
}



#[test]
fn enc_avx_vcvtss2sd2319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm1, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x5A, 0xCF", "vcvtss2sd xmm1, xmm4, xmm15");
}



#[test]
fn enc_avx_vcvtss2sd2320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm12, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x5A, 0x60, 0x10", "vcvtss2sd xmm12, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2sd2321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm0, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5A, 0x00", "vcvtss2sd xmm0, xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2sd2322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm15, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5A, 0x3C, 0x42", "vcvtss2sd xmm15, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd2323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm15, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5A, 0x3C, 0x42", "vcvtss2sd xmm15, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd2324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm4, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5A, 0x20", "vcvtss2sd xmm4, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2si2325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2D, 0xD4", "vcvtss2si rdx, xmm12");
}



#[test]
fn enc_avx_vcvtss2si2326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xD3", "vcvtss2si rdx, xmm3");
}



#[test]
fn enc_avx_vcvtss2si2327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xDA", "vcvtss2si rbx, xmm2");
}



#[test]
fn enc_avx_vcvtss2si2328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xD2", "vcvtss2si rdx, xmm2");
}



#[test]
fn enc_avx_vcvtss2si2329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2D, 0xCC", "vcvtss2si rcx, xmm12");
}



#[test]
fn enc_avx_vcvtss2si2330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x0C, 0x42", "vcvtss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si2331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x40, 0x10", "vcvtss2si rax, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2si2332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x50, 0x10", "vcvtss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2si2333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x00", "vcvtss2si rax, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttsd2si2334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xD2", "vcvttsd2si rdx, xmm2");
}



#[test]
fn enc_avx_vcvttsd2si2335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xC2", "vcvttsd2si rax, xmm2");
}



#[test]
fn enc_avx_vcvttsd2si2336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xD0", "vcvttsd2si rdx, xmm0");
}



#[test]
fn enc_avx_vcvttsd2si2337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2C, 0xD7", "vcvttsd2si rdx, xmm15");
}



#[test]
fn enc_avx_vcvttsd2si2338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2C, 0xC4", "vcvttsd2si rax, xmm12");
}



#[test]
fn enc_avx_vcvttsd2si2339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x04, 0x42", "vcvttsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttsd2si2340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x48, 0x10", "vcvttsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si2341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x14, 0x42", "vcvttsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttsd2si2342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x18", "vcvttsd2si rbx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si2343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xD4", "vcvttss2si rdx, xmm4");
}



#[test]
fn enc_avx_vcvttss2si2344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xD3", "vcvttss2si rdx, xmm11");
}



#[test]
fn enc_avx_vcvttss2si2345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xDF", "vcvttss2si rbx, xmm15");
}



#[test]
fn enc_avx_vcvttss2si2346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xCF", "vcvttss2si rcx, xmm15");
}



#[test]
fn enc_avx_vcvttss2si2347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xC4", "vcvttss2si rax, xmm4");
}



#[test]
fn enc_avx_vcvttss2si2348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x18", "vcvttss2si rbx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si2349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x08", "vcvttss2si rcx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si2350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x50, 0x10", "vcvttss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttss2si2351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x10", "vcvttss2si rdx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si2352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x0C, 0x42", "vcvttss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd2353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5E, 0xC2", "vdivsd xmm0, xmm2, xmm2");
}



#[test]
fn enc_avx_vdivsd2354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x5E, 0xC4", "vdivsd xmm0, xmm11, xmm12");
}



#[test]
fn enc_avx_vdivsd2355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm1, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5E, 0xC8", "vdivsd xmm1, xmm4, xmm0");
}



#[test]
fn enc_avx_vdivsd2356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x23, 0x5E, 0xFB", "vdivsd xmm15, xmm11, xmm11");
}



#[test]
fn enc_avx_vdivsd2357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm1, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5E, 0xCC", "vdivsd xmm1, xmm12, xmm4");
}



#[test]
fn enc_avx_vdivsd2358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5E, 0x58, 0x10", "vdivsd xmm11, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd2359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm1, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5E, 0x48, 0x10", "vdivsd xmm1, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd2360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm15, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x5E, 0x78, 0x10", "vdivsd xmm15, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd2361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x5E, 0x1C, 0x42", "vdivsd xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd2362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm12, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5E, 0x24, 0x42", "vdivsd xmm12, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss2363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm15, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0x5E, 0xFC", "vdivss xmm15, xmm11, xmm12");
}



#[test]
fn enc_avx_vdivss2364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm1, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5E, 0xCA", "vdivss xmm1, xmm12, xmm2");
}



#[test]
fn enc_avx_vdivss2365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm2, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5E, 0xD1", "vdivss xmm2, xmm4, xmm1");
}



#[test]
fn enc_avx_vdivss2366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm15, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5A, 0x5E, 0xFC", "vdivss xmm15, xmm4, xmm12");
}



#[test]
fn enc_avx_vdivss2367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm2, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5E, 0xD0", "vdivss xmm2, xmm3, xmm0");
}



#[test]
fn enc_avx_vdivss2368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm15, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5E, 0x3C, 0x42", "vdivss xmm15, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss2369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm12, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5E, 0x60, 0x10", "vdivss xmm12, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivss2370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm1, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5E, 0x48, 0x10", "vdivss xmm1, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivss2371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm4, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5E, 0x24, 0x42", "vdivss xmm4, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdppd2372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm1, xmm11, xmm1, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x41, 0xC9, 0x72", "vdppd xmm1, xmm11, xmm1, 114");
}



#[test]
fn enc_avx_vdppd2373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm4, xmm1, OWORD [rax], 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x41, 0x20, 0x0B", "vdppd xmm4, xmm1, OWORD [rax], 11");
}



#[test]
fn enc_avx_vdppd2374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm11, xmm4, OWORD [rax * 2 + rdx], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x41, 0x1C, 0x42, 0x0A", "vdppd xmm11, xmm4, OWORD [rax * 2 + rdx], 10");
}



#[test]
fn enc_avx_vdppd2375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm11, xmm11, xmm2, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x41, 0xDA, 0x7D", "vdppd xmm11, xmm11, xmm2, 125");
}



#[test]
fn enc_avx_vdppd2376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm15, xmm2, xmm12, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x69, 0x41, 0xFC, 0x7D", "vdppd xmm15, xmm2, xmm12, 125");
}



#[test]
fn enc_avx_vextractf1282377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm2, ymm0, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xC2, 0x63", "vextractf128 xmm2, ymm0, 99");
}



#[test]
fn enc_avx_vextractf1282378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm3, ymm4, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xE3, 0x3B", "vextractf128 xmm3, ymm4, 59");
}



#[test]
fn enc_avx_vextractf1282379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm3, ymm12, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x19, 0xE3, 0x2D", "vextractf128 xmm3, ymm12, 45");
}



#[test]
fn enc_avx_vextractf1282380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm3, ymm3, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xDB, 0x64", "vextractf128 xmm3, ymm3, 100");
}



#[test]
fn enc_avx_vextractf1282381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm3, ymm11, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x19, 0xDB, 0x2C", "vextractf128 xmm3, ymm11, 44");
}



#[test]
fn enc_avx_vextractps2382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm0, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0x00, 0x69", "vextractps DWORD [rax], xmm0, 105");
}



#[test]
fn enc_avx_vextractps2383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm15, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0x38, 0x57", "vextractps DWORD [rax], xmm15, 87");
}



#[test]
fn enc_avx_vextractps2384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps eax, xmm1, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xC8, 0x68", "vextractps eax, xmm1, 104");
}



#[test]
fn enc_avx_vextractps2385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm15, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0x38, 0x1E", "vextractps DWORD [rax], xmm15, 30");
}



#[test]
fn enc_avx_vextractps2386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps eax, xmm1, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xC8, 0x33", "vextractps eax, xmm1, 51");
}



#[test]
fn enc_avx_vinsertf1282387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm2, ymm1, OWORD [rax * 2 + rdx], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x75, 0x18, 0x14, 0x42, 0x11", "vinsertf128 ymm2, ymm1, OWORD [rax * 2 + rdx], 17");
}



#[test]
fn enc_avx_vinsertf1282388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm4, ymm12, OWORD [rdx], 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x1D, 0x18, 0x22, 0x74", "vinsertf128 ymm4, ymm12, OWORD [rdx], 116");
}



#[test]
fn enc_avx_vinsertf1282389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm2, ymm3, xmm11, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x65, 0x18, 0xD3, 0x5F", "vinsertf128 ymm2, ymm3, xmm11, 95");
}



#[test]
fn enc_avx_vinsertf1282390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm11, ymm11, OWORD [rax * 2 + rdx], 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x25, 0x18, 0x1C, 0x42, 0x28", "vinsertf128 ymm11, ymm11, OWORD [rax * 2 + rdx], 40");
}



#[test]
fn enc_avx_vinsertf1282391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm4, ymm4, xmm4, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x5D, 0x18, 0xE4, 0x0B", "vinsertf128 ymm4, ymm4, xmm4, 11");
}



#[test]
fn enc_avx_vinsertps2392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm12, xmm2, xmm2, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x21, 0xE2, 0x2A", "vinsertps xmm12, xmm2, xmm2, 42");
}



#[test]
fn enc_avx_vinsertps2393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm2, xmm4, xmm2, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x21, 0xD2, 0x58", "vinsertps xmm2, xmm4, xmm2, 88");
}



#[test]
fn enc_avx_vinsertps2394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm3, xmm3, xmm11, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x61, 0x21, 0xDB, 0x35", "vinsertps xmm3, xmm3, xmm11, 53");
}



#[test]
fn enc_avx_vinsertps2395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm3, xmm3, xmm2, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x21, 0xDA, 0x32", "vinsertps xmm3, xmm3, xmm2, 50");
}



#[test]
fn enc_avx_vinsertps2396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm11, xmm2, xmm2, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x21, 0xDA, 0x18", "vinsertps xmm11, xmm2, xmm2, 24");
}



#[test]
fn enc_avx_vinsertps2397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm4, xmm4, DWORD [rax], 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x21, 0x20, 0x16", "vinsertps xmm4, xmm4, DWORD [rax], 22");
}



#[test]
fn enc_avx_vinsertps2398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm1, xmm1, DWORD [rax * 2 + rdx], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x21, 0x0C, 0x42, 0x46", "vinsertps xmm1, xmm1, DWORD [rax * 2 + rdx], 70");
}



#[test]
fn enc_avx_vinsertps2399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm11, xmm2, DWORD [rax + 16], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x21, 0x58, 0x10, 0x5E", "vinsertps xmm11, xmm2, DWORD [rax + 16], 94");
}



#[test]
fn enc_avx_vinsertps2400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm2, xmm3, DWORD [rax + 16], 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x21, 0x50, 0x10, 0x62", "vinsertps xmm2, xmm3, DWORD [rax + 16], 98");
}



#[test]
fn enc_avx_vinsertps2401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm15, xmm11, DWORD [rax + 16], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x21, 0x78, 0x10, 0x25", "vinsertps xmm15, xmm11, DWORD [rax + 16], 37");
}



#[test]
fn enc_avx_vldmxcsr2402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x10", "vldmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vldmxcsr2403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x14, 0x42", "vldmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldmxcsr2404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x50, 0x10", "vldmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu2405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm12, YWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x60, 0x10", "vldqqu ymm12, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu2406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm4, YWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x60, 0x10", "vldqqu ymm4, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu2407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm1, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x08", "vldqqu ymm1, YWORD [rax]");
}



#[test]
fn enc_avx_vmaskmovdqu2408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xF7, 0xD8", "vmaskmovdqu xmm11, xmm0");
}



#[test]
fn enc_avx_vmaskmovdqu2409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xF7, 0xE3", "vmaskmovdqu xmm12, xmm3");
}



#[test]
fn enc_avx_vmaskmovdqu2410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xF7, 0xDB", "vmaskmovdqu xmm3, xmm11");
}



#[test]
fn enc_avx_vmaskmovdqu2411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xDB", "vmaskmovdqu xmm3, xmm3");
}



#[test]
fn enc_avx_vmaskmovdqu2412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xC2", "vmaskmovdqu xmm0, xmm2");
}



#[test]
fn enc_avx_vmaxsd2413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0x5F, 0xDF", "vmaxsd xmm11, xmm0, xmm15");
}



#[test]
fn enc_avx_vmaxsd2414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm1, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x5F, 0xCB", "vmaxsd xmm1, xmm11, xmm11");
}



#[test]
fn enc_avx_vmaxsd2415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm1, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5F, 0xCB", "vmaxsd xmm1, xmm0, xmm3");
}



#[test]
fn enc_avx_vmaxsd2416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm15, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5F, 0xF9", "vmaxsd xmm15, xmm2, xmm1");
}



#[test]
fn enc_avx_vmaxsd2417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x5F, 0xDB", "vmaxsd xmm3, xmm12, xmm11");
}



#[test]
fn enc_avx_vmaxsd2418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm0, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5F, 0x00", "vmaxsd xmm0, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd2419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5F, 0x20", "vmaxsd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd2420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5F, 0x60, 0x10", "vmaxsd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxsd2421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm15, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5F, 0x78, 0x10", "vmaxsd xmm15, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxsd2422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5F, 0x58, 0x10", "vmaxsd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss2423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm1, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5F, 0xCA", "vmaxss xmm1, xmm11, xmm2");
}



#[test]
fn enc_avx_vmaxss2424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5F, 0xC1", "vmaxss xmm0, xmm0, xmm1");
}



#[test]
fn enc_avx_vmaxss2425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm1, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x5F, 0xCC", "vmaxss xmm1, xmm0, xmm12");
}



#[test]
fn enc_avx_vmaxss2426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm4, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5F, 0xE0", "vmaxss xmm4, xmm3, xmm0");
}



#[test]
fn enc_avx_vmaxss2427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm15, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0x5F, 0xFF", "vmaxss xmm15, xmm11, xmm15");
}



#[test]
fn enc_avx_vmaxss2428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm11, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5F, 0x18", "vmaxss xmm11, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vmaxss2429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm1, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x5F, 0x48, 0x10", "vmaxss xmm1, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss2430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm12, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5F, 0x60, 0x10", "vmaxss xmm12, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss2431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm12, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5F, 0x60, 0x10", "vmaxss xmm12, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss2432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm4, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5F, 0x60, 0x10", "vmaxss xmm4, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd2433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm1, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5D, 0xCB", "vminsd xmm1, xmm11, xmm3");
}



#[test]
fn enc_avx_vminsd2434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm15, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x23, 0x5D, 0xFF", "vminsd xmm15, xmm11, xmm15");
}



#[test]
fn enc_avx_vminsd2435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm4, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5D, 0xE3", "vminsd xmm4, xmm2, xmm3");
}



#[test]
fn enc_avx_vminsd2436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm2, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5D, 0xD2", "vminsd xmm2, xmm4, xmm2");
}



#[test]
fn enc_avx_vminsd2437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm4, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5D, 0xE2", "vminsd xmm4, xmm15, xmm2");
}



#[test]
fn enc_avx_vminsd2438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5D, 0x60, 0x10", "vminsd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd2439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5D, 0x48, 0x10", "vminsd xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd2440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5D, 0x40, 0x10", "vminsd xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd2441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm3, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5D, 0x1C, 0x42", "vminsd xmm3, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd2442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm15, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5D, 0x38", "vminsd xmm15, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vminss2443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm12, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5D, 0xE0", "vminss xmm12, xmm0, xmm0");
}



#[test]
fn enc_avx_vminss2444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5D, 0xDB", "vminss xmm11, xmm0, xmm3");
}



#[test]
fn enc_avx_vminss2445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x6A, 0x5D, 0xDC", "vminss xmm11, xmm2, xmm12");
}



#[test]
fn enc_avx_vminss2446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm0, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x5D, 0xC7", "vminss xmm0, xmm3, xmm15");
}



#[test]
fn enc_avx_vminss2447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm12, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0x5D, 0xE7", "vminss xmm12, xmm0, xmm15");
}



#[test]
fn enc_avx_vminss2448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm3, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x5D, 0x1C, 0x42", "vminss xmm3, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminss2449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x5D, 0x3C, 0x42", "vminss xmm15, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminss2450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5D, 0x3C, 0x42", "vminss xmm15, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminss2451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x5D, 0x58, 0x10", "vminss xmm11, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss2452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm3, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5D, 0x1C, 0x42", "vminss xmm3, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovapd2453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x28, 0xC4", "vmovapd xmm0, xmm12");
}



#[test]
fn enc_avx_vmovapd2454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xD4", "vmovapd xmm2, xmm4");
}



#[test]
fn enc_avx_vmovapd2455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xD0", "vmovapd xmm2, xmm0");
}



#[test]
fn enc_avx_vmovapd2456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x28, 0xFC", "vmovapd xmm15, xmm12");
}



#[test]
fn enc_avx_vmovapd2457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd YWORD [rdx], ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x29, 0x3A", "vmovapd YWORD [rdx], ymm15");
}



#[test]
fn enc_avx_vmovapd2458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm1, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x28, 0xCB", "vmovapd ymm1, ymm11");
}



#[test]
fn enc_avx_vmovapd2459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm12, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x28, 0xE3", "vmovapd ymm12, ymm11");
}



#[test]
fn enc_avx_vmovapd2460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm11, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x28, 0xDF", "vmovapd ymm11, ymm15");
}



#[test]
fn enc_avx_vmovaps2461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x28, 0xD2", "vmovaps xmm2, xmm2");
}



#[test]
fn enc_avx_vmovaps2462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x28, 0xCB", "vmovaps xmm1, xmm3");
}



#[test]
fn enc_avx_vmovaps2463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x28, 0xCC", "vmovaps xmm1, xmm12");
}



#[test]
fn enc_avx_vmovaps2464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x28, 0xE4", "vmovaps xmm4, xmm12");
}



#[test]
fn enc_avx_vmovaps2465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x28, 0xDC", "vmovaps xmm11, xmm4");
}



#[test]
fn enc_avx_vmovaps2466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm0, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7C, 0x28, 0xC3", "vmovaps ymm0, ymm11");
}



#[test]
fn enc_avx_vmovaps2467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm4, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x28, 0xE3", "vmovaps ymm4, ymm3");
}



#[test]
fn enc_avx_vmovaps2468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm11, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7C, 0x28, 0xDB", "vmovaps ymm11, ymm11");
}



#[test]
fn enc_avx_vmovaps2469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x28, 0xDA", "vmovaps ymm3, ymm2");
}



#[test]
fn enc_avx_vmovaps2470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm1, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7C, 0x28, 0xCC", "vmovaps ymm1, ymm12");
}



#[test]
fn enc_avx_vmovd2471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xC0", "vmovd eax, xmm0");
}



#[test]
fn enc_avx_vmovd2472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0x18", "vmovd DWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovd2473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0xF8", "vmovd eax, xmm15");
}



#[test]
fn enc_avx_vmovd2474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xE0", "vmovd eax, xmm4");
}



#[test]
fn enc_avx_vmovd2475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0x08", "vmovd DWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovd2476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0x10", "vmovd xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vmovd2477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0x18", "vmovd xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vmovd2478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6E, 0x20", "vmovd xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vmovd2479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0x00", "vmovd xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vmovd2480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0x20", "vmovd xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vmovddup2481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x0C, 0x42", "vmovddup xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup2482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x00", "vmovddup xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmovddup2483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x50, 0x10", "vmovddup xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovddup2484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x60, 0x10", "vmovddup xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovddup2485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x18", "vmovddup xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmovdqa2486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6F, 0xDA", "vmovdqa xmm11, xmm2");
}



#[test]
fn enc_avx_vmovdqa2487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x6F, 0xD4", "vmovdqa xmm2, xmm12");
}



#[test]
fn enc_avx_vmovdqa2488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6F, 0xE3", "vmovdqa xmm4, xmm3");
}



#[test]
fn enc_avx_vmovdqa2489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6F, 0xC1", "vmovdqa xmm0, xmm1");
}



#[test]
fn enc_avx_vmovdqa2490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x6F, 0xDF", "vmovdqa xmm3, xmm15");
}



#[test]
fn enc_avx_vmovdqa2491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm15, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xFC", "vmovdqa ymm15, ymm4");
}



#[test]
fn enc_avx_vmovdqa2492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm0, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xC3", "vmovdqa ymm0, ymm3");
}



#[test]
fn enc_avx_vmovdqa2493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm4, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xE2", "vmovdqa ymm4, ymm2");
}



#[test]
fn enc_avx_vmovdqa2494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm12, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xE4", "vmovdqa ymm12, ymm4");
}



#[test]
fn enc_avx_vmovdqa2495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa YWORD [rdx], ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x7F, 0x3A", "vmovdqa YWORD [rdx], ymm15");
}



#[test]
fn enc_avx_vmovdqu2496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xFA", "vmovdqu xmm15, xmm2");
}



#[test]
fn enc_avx_vmovdqu2497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x6F, 0xD4", "vmovdqu xmm2, xmm4");
}



#[test]
fn enc_avx_vmovdqu2498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xFC", "vmovdqu xmm15, xmm4");
}



#[test]
fn enc_avx_vmovdqu2499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xD9", "vmovdqu xmm11, xmm1");
}



#[test]
fn enc_avx_vmovdqu2500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x6F, 0xDA", "vmovdqu xmm11, xmm2");
}



#[test]
fn enc_avx_vmovdqu2501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu YWORD [rdx], ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x02", "vmovdqu YWORD [rdx], ymm0");
}



#[test]
fn enc_avx_vmovdqu2502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm2, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xD7", "vmovdqu ymm2, ymm15");
}



#[test]
fn enc_avx_vmovdqu2503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm12, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xE4", "vmovdqu ymm12, ymm4");
}



#[test]
fn enc_avx_vmovdqu2504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm1, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xCB", "vmovdqu ymm1, ymm3");
}



#[test]
fn enc_avx_vmovdqu2505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm12, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7E, 0x6F, 0xE7", "vmovdqu ymm12, ymm15");
}



#[test]
fn enc_avx_vmovhlps2506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm0, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x58, 0x12, 0xC4", "vmovhlps xmm0, xmm4, xmm12");
}



#[test]
fn enc_avx_vmovhlps2507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm4, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x12, 0xE3", "vmovhlps xmm4, xmm3, xmm3");
}



#[test]
fn enc_avx_vmovhlps2508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x12, 0xE2", "vmovhlps xmm4, xmm0, xmm2");
}



#[test]
fn enc_avx_vmovhlps2509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm0, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x60, 0x12, 0xC3", "vmovhlps xmm0, xmm3, xmm11");
}



#[test]
fn enc_avx_vmovhlps2510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm4, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x98, 0x12, 0xE4", "vmovhlps xmm4, xmm12, xmm4");
}



#[test]
fn enc_avx_vmovhpd2511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x18", "vmovhpd QWORD [rax], xmm3");
}



#[test]
fn enc_avx_vmovhpd2512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x1C, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_avx_vmovhpd2513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x48, 0x10", "vmovhpd QWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovhpd2514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x60, 0x10", "vmovhpd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovhpd2515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x17, 0x78, 0x10", "vmovhpd QWORD [rax + 16], xmm15");
}



#[test]
fn enc_avx_vmovhpd2516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0x16, 0x10", "vmovhpd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhpd2517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm1, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0x16, 0x48, 0x10", "vmovhpd xmm1, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhpd2518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0x16, 0x1C, 0x42", "vmovhpd xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd2519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm11, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0x16, 0x18", "vmovhpd xmm11, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhpd2520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0x16, 0x58, 0x10", "vmovhpd xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps2521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x04, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovhps2522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x1C, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovhps2523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x08", "vmovhps QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovhps2524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x24, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_avx_vmovhps2525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x24, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovhps2526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x16, 0x20", "vmovhps xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps2527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm3, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD8, 0x16, 0x58, 0x10", "vmovhps xmm3, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps2528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x98, 0x16, 0x18", "vmovhps xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps2529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm2, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x16, 0x10", "vmovhps xmm2, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps2530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm2, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x16, 0x14, 0x42", "vmovhps xmm2, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlhps2531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm3, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE8, 0x16, 0xDB", "vmovlhps xmm3, xmm2, xmm3");
}



#[test]
fn enc_avx_vmovlhps2532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE0, 0x16, 0xC4", "vmovlhps xmm0, xmm3, xmm4");
}



#[test]
fn enc_avx_vmovlhps2533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm0, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x16, 0xC4", "vmovlhps xmm0, xmm0, xmm12");
}



#[test]
fn enc_avx_vmovlhps2534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm0, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x68, 0x16, 0xC3", "vmovlhps xmm0, xmm2, xmm11");
}



#[test]
fn enc_avx_vmovlhps2535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm1, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x98, 0x16, 0xC9", "vmovlhps xmm1, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovlpd2536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0x12, 0x48, 0x10", "vmovlpd xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd2537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0x12, 0x58, 0x10", "vmovlpd xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd2538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x01, 0x12, 0x18", "vmovlpd xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd2539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm4, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0x12, 0x60, 0x10", "vmovlpd xmm4, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlpd2540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0x12, 0x04, 0x42", "vmovlpd xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlpd2541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x58, 0x10", "vmovlpd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovlpd2542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x08", "vmovlpd QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovlpd2543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x60, 0x10", "vmovlpd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovlpd2544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x13, 0x58, 0x10", "vmovlpd QWORD [rax + 16], xmm11");
}



#[test]
fn enc_avx_vmovlpd2545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x14, 0x42", "vmovlpd QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_avx_vmovlps2546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x18", "vmovlps QWORD [rax], xmm11");
}



#[test]
fn enc_avx_vmovlps2547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x60, 0x10", "vmovlps QWORD [rax + 16], xmm12");
}



#[test]
fn enc_avx_vmovlps2548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax + 16], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x40, 0x10", "vmovlps QWORD [rax + 16], xmm0");
}



#[test]
fn enc_avx_vmovlps2549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x1C, 0x42", "vmovlps QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_avx_vmovlps2550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x04, 0x42", "vmovlps QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovlps2551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x12, 0x48, 0x10", "vmovlps xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlps2552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm4, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x80, 0x12, 0x24, 0x42", "vmovlps xmm4, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlps2553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm1, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x12, 0x08", "vmovlps xmm1, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps2554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA0, 0x12, 0x10", "vmovlps xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps2555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm3, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x12, 0x58, 0x10", "vmovlps xmm3, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovntqq2556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax], ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x10", "vmovntqq YWORD [rax], ymm2");
}



#[test]
fn enc_avx_vmovntqq2557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax * 2 + rdx], ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x0C, 0x42", "vmovntqq YWORD [rax * 2 + rdx], ymm1");
}



#[test]
fn enc_avx_vmovntqq2558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax + 16], ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x60, 0x10", "vmovntqq YWORD [rax + 16], ymm4");
}



#[test]
fn enc_avx_vmovntqq2559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x18", "vmovntqq YWORD [rax], ymm3");
}



#[test]
fn enc_avx_vmovq2560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xD8", "vmovq xmm3, rax");
}



#[test]
fn enc_avx_vmovq2561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xD0", "vmovq xmm2, rax");
}



#[test]
fn enc_avx_vmovq2562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xC0", "vmovq xmm0, rax");
}



#[test]
fn enc_avx_vmovq2563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xE0", "vmovq xmm4, rax");
}



#[test]
fn enc_avx_vmovq2564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xD8", "vmovq xmm11, xmm0");
}



#[test]
fn enc_avx_vmovq2565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xDA", "vmovq xmm3, xmm2");
}



#[test]
fn enc_avx_vmovq2566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xE7", "vmovq xmm4, xmm15");
}



#[test]
fn enc_avx_vmovq2567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xCB", "vmovq xmm1, xmm3");
}



#[test]
fn enc_avx_vmovq2568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xE1", "vmovq xmm12, xmm1");
}



#[test]
fn enc_avx_vmovq2569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0x38", "vmovq xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovq2570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x1C, 0x42", "vmovq xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovq2571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x0C, 0x42", "vmovq xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovq2572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x10", "vmovq xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmovq2573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x10", "vmovq [rax], xmm2");
}



#[test]
fn enc_avx_vmovq2574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xC8", "vmovq rax, xmm1");
}



#[test]
fn enc_avx_vmovq2575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xF9, 0x7E, 0xF8", "vmovq rax, xmm15");
}



#[test]
fn enc_avx_vmovq2576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x18", "vmovq [rax], xmm3");
}



#[test]
fn enc_avx_vmovq2577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x18", "vmovq [rax], xmm11");
}



#[test]
fn enc_avx_vmovq2578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0x7E, 0xFB", "vmovq xmm15, xmm11");
}



#[test]
fn enc_avx_vmovq2579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xCC", "vmovq xmm1, xmm12");
}



#[test]
fn enc_avx_vmovq2580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xC9", "vmovq xmm1, xmm1");
}



#[test]
fn enc_avx_vmovq2581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xD3", "vmovq xmm2, xmm3");
}



#[test]
fn enc_avx_vmovq2582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xC3", "vmovq xmm0, xmm3");
}



#[test]
fn enc_avx_vmovq2583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x14, 0x42", "vmovq QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_avx_vmovq2584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x08", "vmovq QWORD [rax], xmm1");
}



#[test]
fn enc_avx_vmovq2585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x20", "vmovq QWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovq2586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x38", "vmovq QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovq2587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x18", "vmovq QWORD [rax], xmm3");
}



#[test]
fn enc_avx_vmovqqa2588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm12, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x6F, 0xE4", "vmovqqa ymm12, ymm12");
}



#[test]
fn enc_avx_vmovqqa2589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm4, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xE2", "vmovqqa ymm4, ymm2");
}



#[test]
fn enc_avx_vmovqqa2590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm15, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xFA", "vmovqqa ymm15, ymm2");
}



#[test]
fn enc_avx_vmovqqa2591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm0, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xC3", "vmovqqa ymm0, ymm3");
}



#[test]
fn enc_avx_vmovqqa2592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm2, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0x14, 0x42", "vmovqqa ymm2, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovqqa2593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm0, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xC0", "vmovqqa ymm0, ymm0");
}



#[test]
fn enc_avx_vmovqqa2594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm4, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xE7", "vmovqqa ymm4, ymm15");
}



#[test]
fn enc_avx_vmovqqa2595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa YWORD [rax * 2 + rdx], ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x7F, 0x24, 0x42", "vmovqqa YWORD [rax * 2 + rdx], ymm12");
}



#[test]
fn enc_avx_vmovqqa2596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm15, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x6F, 0xFB", "vmovqqa ymm15, ymm11");
}



#[test]
fn enc_avx_vmovqqu2597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm15, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xF9", "vmovqqu ymm15, ymm1");
}



#[test]
fn enc_avx_vmovqqu2598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xCA", "vmovqqu ymm1, ymm2");
}



#[test]
fn enc_avx_vmovqqu2599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm3, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xDF", "vmovqqu ymm3, ymm15");
}



#[test]
fn enc_avx_vmovqqu2600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm3, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xDB", "vmovqqu ymm3, ymm3");
}



#[test]
fn enc_avx_vmovqqu2601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm0, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xC3", "vmovqqu ymm0, ymm3");
}



#[test]
fn enc_avx_vmovqqu2602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm2, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xD4", "vmovqqu ymm2, ymm12");
}



#[test]
fn enc_avx_vmovqqu2603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm15, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xF9", "vmovqqu ymm15, ymm1");
}



#[test]
fn enc_avx_vmovqqu2604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm2, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xD4", "vmovqqu ymm2, ymm4");
}



#[test]
fn enc_avx_vmovqqu2605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm12, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xE1", "vmovqqu ymm12, ymm1");
}



#[test]
fn enc_avx_vmovqqu2606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm2, YWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0x12", "vmovqqu ymm2, YWORD [rdx]");
}



#[test]
fn enc_avx_vmovsd2607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x58, 0x10", "vmovsd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovsd2608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x24, 0x42", "vmovsd QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_avx_vmovsd2609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x38", "vmovsd QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovsd2610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x3C, 0x42", "vmovsd QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovsd2611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x58, 0x10", "vmovsd QWORD [rax + 16], xmm11");
}



#[test]
fn enc_avx_vmovsd2612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x10, 0xE2", "vmovsd xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vmovsd2613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm3, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x10, 0xDB", "vmovsd xmm3, xmm4, xmm3");
}



#[test]
fn enc_avx_vmovsd2614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x10, 0xDB", "vmovsd xmm11, xmm12, xmm3");
}



#[test]
fn enc_avx_vmovsd2615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0x10, 0xDF", "vmovsd xmm11, xmm1, xmm15");
}



#[test]
fn enc_avx_vmovsd2616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x10, 0xE1", "vmovsd xmm12, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovsd2617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x14, 0x42", "vmovsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd2618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x20", "vmovsd xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmovsd2619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x10, 0x58, 0x10", "vmovsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd2620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x58, 0x10", "vmovsd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd2621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x48, 0x10", "vmovsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd2622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm1, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0x10, 0xCB", "vmovsd xmm1, xmm15, xmm11");
}



#[test]
fn enc_avx_vmovsd2623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x10, 0xD9", "vmovsd xmm11, xmm0, xmm1");
}



#[test]
fn enc_avx_vmovsd2624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x10, 0xD3", "vmovsd xmm2, xmm3, xmm3");
}



#[test]
fn enc_avx_vmovsd2625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x10, 0xDB", "vmovsd xmm11, xmm4, xmm3");
}



#[test]
fn enc_avx_vmovsd2626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x23, 0x10, 0xE3", "vmovsd xmm12, xmm11, xmm11");
}



#[test]
fn enc_avx_vmovss2627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0xE2", "vmovss xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vmovss2628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x10, 0xE0", "vmovss xmm12, xmm15, xmm0");
}



#[test]
fn enc_avx_vmovss2629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x10, 0xC8", "vmovss xmm1, xmm3, xmm0");
}



#[test]
fn enc_avx_vmovss2630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0xE4", "vmovss xmm12, xmm0, xmm4");
}



#[test]
fn enc_avx_vmovss2631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x10, 0xDA", "vmovss xmm3, xmm3, xmm2");
}



#[test]
fn enc_avx_vmovss2632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm2, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x10, 0xD4", "vmovss xmm2, xmm1, xmm12");
}



#[test]
fn enc_avx_vmovss2633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm4, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x10, 0xE3", "vmovss xmm4, xmm4, xmm3");
}



#[test]
fn enc_avx_vmovss2634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm15, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x10, 0xFB", "vmovss xmm15, xmm11, xmm3");
}



#[test]
fn enc_avx_vmovss2635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm15, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0xFC", "vmovss xmm15, xmm0, xmm4");
}



#[test]
fn enc_avx_vmovss2636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x10, 0xE0", "vmovss xmm12, xmm4, xmm0");
}



#[test]
fn enc_avx_vmovss2637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x0C, 0x42", "vmovss DWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_avx_vmovss2638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x50, 0x10", "vmovss DWORD [rax + 16], xmm2");
}



#[test]
fn enc_avx_vmovss2639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x11, 0x20", "vmovss DWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovss2640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x58, 0x10", "vmovss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovss2641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0x3C, 0x42", "vmovss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovss2642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x20", "vmovss xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vmovss2643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0x20", "vmovss xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vmovss2644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x0C, 0x42", "vmovss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovupd2645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x10, 0xE4", "vmovupd xmm12, xmm4");
}



#[test]
fn enc_avx_vmovupd2646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xE3", "vmovupd xmm4, xmm3");
}



#[test]
fn enc_avx_vmovupd2647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x10, 0xE7", "vmovupd xmm4, xmm15");
}



#[test]
fn enc_avx_vmovupd2648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x10, 0xF9", "vmovupd xmm15, xmm1");
}



#[test]
fn enc_avx_vmovupd2649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x11, 0x00", "vmovupd OWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovupd2650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm3, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xDB", "vmovupd ymm3, ymm3");
}



#[test]
fn enc_avx_vmovupd2651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm3, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xDC", "vmovupd ymm3, ymm4");
}



#[test]
fn enc_avx_vmovupd2652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd YWORD [rdx], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x11, 0x1A", "vmovupd YWORD [rdx], ymm3");
}



#[test]
fn enc_avx_vmovupd2653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm2, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x10, 0xD3", "vmovupd ymm2, ymm11");
}



#[test]
fn enc_avx_vmovupd2654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm2, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x10, 0xD4", "vmovupd ymm2, ymm12");
}



#[test]
fn enc_avx_vmovups2655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x10, 0xDB", "vmovups xmm11, xmm11");
}



#[test]
fn enc_avx_vmovups2656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x10, 0xDC", "vmovups xmm3, xmm4");
}



#[test]
fn enc_avx_vmovups2657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups OWORD [rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x11, 0x1A", "vmovups OWORD [rdx], xmm3");
}



#[test]
fn enc_avx_vmovups2658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x10, 0xDC", "vmovups xmm3, xmm12");
}



#[test]
fn enc_avx_vmovups2659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x11, 0x20", "vmovups OWORD [rax], xmm4");
}



#[test]
fn enc_avx_vmovups2660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm4, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7C, 0x10, 0xE7", "vmovups ymm4, ymm15");
}



#[test]
fn enc_avx_vmovups2661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups YWORD [rdx], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x11, 0x1A", "vmovups YWORD [rdx], ymm3");
}



#[test]
fn enc_avx_vmovups2662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups YWORD [rax], ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x11, 0x20", "vmovups YWORD [rax], ymm12");
}



#[test]
fn enc_avx_vmovups2663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x10, 0xDA", "vmovups ymm3, ymm2");
}



#[test]
fn enc_avx_vmulsd2664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm11, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x23, 0x59, 0xDF", "vmulsd xmm11, xmm11, xmm15");
}



#[test]
fn enc_avx_vmulsd2665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x59, 0xDB", "vmulsd xmm3, xmm3, xmm11");
}



#[test]
fn enc_avx_vmulsd2666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm0, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x59, 0xC3", "vmulsd xmm0, xmm3, xmm11");
}



#[test]
fn enc_avx_vmulsd2667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm11, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x59, 0xD9", "vmulsd xmm11, xmm0, xmm1");
}



#[test]
fn enc_avx_vmulsd2668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x59, 0xE2", "vmulsd xmm12, xmm4, xmm2");
}



#[test]
fn enc_avx_vmulsd2669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x59, 0x20", "vmulsd xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd2670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x59, 0x60, 0x10", "vmulsd xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulsd2671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm15, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x59, 0x3C, 0x42", "vmulsd xmm15, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd2672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x59, 0x1C, 0x42", "vmulsd xmm3, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd2673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm12, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x59, 0x20", "vmulsd xmm12, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmulss2674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x59, 0xE0", "vmulss xmm4, xmm11, xmm0");
}



#[test]
fn enc_avx_vmulss2675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm11, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x59, 0xD8", "vmulss xmm11, xmm11, xmm0");
}



#[test]
fn enc_avx_vmulss2676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x59, 0xDC", "vmulss xmm3, xmm4, xmm4");
}



#[test]
fn enc_avx_vmulss2677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x62, 0x59, 0xE4", "vmulss xmm4, xmm3, xmm12");
}



#[test]
fn enc_avx_vmulss2678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm12, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x59, 0xE3", "vmulss xmm12, xmm12, xmm11");
}



#[test]
fn enc_avx_vmulss2679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm2, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x59, 0x50, 0x10", "vmulss xmm2, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulss2680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm1, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x59, 0x0C, 0x42", "vmulss xmm1, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulss2681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm1, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x59, 0x48, 0x10", "vmulss xmm1, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulss2682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm2, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x59, 0x10", "vmulss xmm2, xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vmulss2683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x59, 0x60, 0x10", "vmulss xmm4, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpclmulhqhqdq2684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm1, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xCC, 0x11", "vpclmulhqhqdq xmm1, xmm0, xmm4");
}



#[test]
fn enc_avx_vpclmulhqhqdq2685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm15, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x59, 0x44, 0xFF, 0x11", "vpclmulhqhqdq xmm15, xmm4, xmm15");
}



#[test]
fn enc_avx_vpclmulhqhqdq2686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm1, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x44, 0xC9, 0x11", "vpclmulhqhqdq xmm1, xmm2, xmm1");
}



#[test]
fn enc_avx_vpclmulhqhqdq2687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm12, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x61, 0x44, 0xE3, 0x11", "vpclmulhqhqdq xmm12, xmm3, xmm11");
}



#[test]
fn enc_avx_vpclmulhqlqdq2688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm0, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xC2, 0x01", "vpclmulhqlqdq xmm0, xmm0, xmm2");
}



#[test]
fn enc_avx_vpclmulhqlqdq2689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm11, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x44, 0xD9, 0x01", "vpclmulhqlqdq xmm11, xmm11, xmm1");
}



#[test]
fn enc_avx_vpclmulhqlqdq2690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm12, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x19, 0x44, 0xE4, 0x01", "vpclmulhqlqdq xmm12, xmm12, xmm12");
}



#[test]
fn enc_avx_vpclmulhqlqdq2691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm11, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x44, 0xD9, 0x01", "vpclmulhqlqdq xmm11, xmm3, xmm1");
}



#[test]
fn enc_avx_vpclmulhqlqdq2692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm15, xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x44, 0x3C, 0x42, 0x01", "vpclmulhqlqdq xmm15, xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmullqhqdq2693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm2, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x44, 0xD3, 0x10", "vpclmullqhqdq xmm2, xmm11, xmm3");
}



#[test]
fn enc_avx_vpclmullqhqdq2694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm1, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xCB, 0x10", "vpclmullqhqdq xmm1, xmm0, xmm3");
}



#[test]
fn enc_avx_vpclmullqhqdq2695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm0, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x21, 0x44, 0xC3, 0x10", "vpclmullqhqdq xmm0, xmm11, xmm11");
}



#[test]
fn enc_avx_vpclmullqhqdq2696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm11, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x19, 0x44, 0xDC, 0x10", "vpclmullqhqdq xmm11, xmm12, xmm12");
}



#[test]
fn enc_avx_vpclmullqhqdq2697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm12, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x44, 0xE3, 0x10", "vpclmullqhqdq xmm12, xmm12, xmm3");
}



#[test]
fn enc_avx_vpclmullqlqdq2698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm2, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xD3, 0x00", "vpclmullqlqdq xmm2, xmm0, xmm3");
}



#[test]
fn enc_avx_vpclmullqlqdq2699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm11, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x59, 0x44, 0xDB, 0x00", "vpclmullqlqdq xmm11, xmm4, xmm11");
}



#[test]
fn enc_avx_vpclmullqlqdq2700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm4, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x71, 0x44, 0xE3, 0x00", "vpclmullqlqdq xmm4, xmm1, xmm11");
}



#[test]
fn enc_avx_vpclmullqlqdq2701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm15, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x44, 0xF9, 0x00", "vpclmullqlqdq xmm15, xmm3, xmm1");
}



#[test]
fn enc_avx_vpclmullqlqdq2702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm1, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xCA, 0x00", "vpclmullqlqdq xmm1, xmm0, xmm2");
}



#[test]
fn enc_avx_vpclmulqdq2703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm1, xmm1, OWORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x44, 0x08, 0x42", "vpclmulqdq xmm1, xmm1, OWORD [rax], 66");
}



#[test]
fn enc_avx_vpclmulqdq2704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm3, xmm3, xmm4, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x44, 0xDC, 0x4F", "vpclmulqdq xmm3, xmm3, xmm4, 79");
}



#[test]
fn enc_avx_vpclmulqdq2705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm12, xmm4, OWORD [rax * 2 + rdx], 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x44, 0x24, 0x42, 0x0F", "vpclmulqdq xmm12, xmm4, OWORD [rax * 2 + rdx], 15");
}



#[test]
fn enc_avx_vpclmulqdq2706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm4, xmm3, xmm1, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x44, 0xE1, 0x4B", "vpclmulqdq xmm4, xmm3, xmm1, 75");
}



#[test]
fn enc_avx_vpclmulqdq2707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm4, xmm15, xmm11, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x01, 0x44, 0xE3, 0x25", "vpclmulqdq xmm4, xmm15, xmm11, 37");
}



#[test]
fn enc_avx_vpcmpestri2708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestri xmm4, OWORD [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x61, 0x20, 0x7B", "vpcmpestri xmm4, OWORD [rax], 123");
}



#[test]
fn enc_avx_vpcmpestri2709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestri xmm1, xmm0, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x61, 0xC8, 0x15", "vpcmpestri xmm1, xmm0, 21");
}



#[test]
fn enc_avx_vpcmpestri2710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestri xmm15, OWORD [rdx], 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x61, 0x3A, 0x07", "vpcmpestri xmm15, OWORD [rdx], 7");
}



#[test]
fn enc_avx_vpcmpestri2711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestri xmm2, xmm0, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x61, 0xD0, 0x5D", "vpcmpestri xmm2, xmm0, 93");
}



#[test]
fn enc_avx_vpcmpestri2712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestri xmm4, xmm4, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x61, 0xE4, 0x44", "vpcmpestri xmm4, xmm4, 68");
}



#[test]
fn enc_avx_vpcmpestrm2713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestrm xmm3, xmm3, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x60, 0xDB, 0x7D", "vpcmpestrm xmm3, xmm3, 125");
}



#[test]
fn enc_avx_vpcmpestrm2714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestrm xmm11, xmm11, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0x60, 0xDB, 0x64", "vpcmpestrm xmm11, xmm11, 100");
}



#[test]
fn enc_avx_vpcmpestrm2715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestrm xmm0, xmm0, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x60, 0xC0, 0x79", "vpcmpestrm xmm0, xmm0, 121");
}



#[test]
fn enc_avx_vpcmpestrm2716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestrm xmm3, xmm4, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x60, 0xDC, 0x70", "vpcmpestrm xmm3, xmm4, 112");
}



#[test]
fn enc_avx_vpcmpestrm2717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpestrm xmm0, xmm2, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x60, 0xC2, 0x35", "vpcmpestrm xmm0, xmm2, 53");
}



#[test]
fn enc_avx_vpcmpistri2718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistri xmm0, xmm0, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x63, 0xC0, 0x02", "vpcmpistri xmm0, xmm0, 2");
}



#[test]
fn enc_avx_vpcmpistri2719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistri xmm1, xmm1, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x63, 0xC9, 0x17", "vpcmpistri xmm1, xmm1, 23");
}



#[test]
fn enc_avx_vpcmpistri2720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistri xmm15, xmm4, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x63, 0xFC, 0x5F", "vpcmpistri xmm15, xmm4, 95");
}



#[test]
fn enc_avx_vpcmpistri2721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistri xmm4, xmm3, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x63, 0xE3, 0x63", "vpcmpistri xmm4, xmm3, 99");
}



#[test]
fn enc_avx_vpcmpistri2722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistri xmm15, OWORD [rax * 2 + rdx], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x63, 0x3C, 0x42, 0x06", "vpcmpistri xmm15, OWORD [rax * 2 + rdx], 6");
}



#[test]
fn enc_avx_vpcmpistrm2723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistrm xmm11, xmm12, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0x62, 0xDC, 0x53", "vpcmpistrm xmm11, xmm12, 83");
}



#[test]
fn enc_avx_vpcmpistrm2724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistrm xmm11, xmm12, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0x62, 0xDC, 0x6C", "vpcmpistrm xmm11, xmm12, 108");
}



#[test]
fn enc_avx_vpcmpistrm2725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistrm xmm2, xmm4, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x62, 0xD4, 0x33", "vpcmpistrm xmm2, xmm4, 51");
}



#[test]
fn enc_avx_vpcmpistrm2726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistrm xmm0, xmm3, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x62, 0xC3, 0x07", "vpcmpistrm xmm0, xmm3, 7");
}



#[test]
fn enc_avx_vpcmpistrm2727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcmpistrm xmm15, OWORD [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x62, 0x38, 0x7B", "vpcmpistrm xmm15, OWORD [rax], 123");
}



#[test]
fn enc_avx_vperm2f1282728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm12, ymm2, ymm0, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x6D, 0x06, 0xE0, 0x36", "vperm2f128 ymm12, ymm2, ymm0, 54");
}



#[test]
fn enc_avx_vperm2f1282729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm4, ymm4, ymm2, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x5D, 0x06, 0xE2, 0x60", "vperm2f128 ymm4, ymm4, ymm2, 96");
}



#[test]
fn enc_avx_vperm2f1282730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm3, ymm2, YWORD [rax * 2 + rdx], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x6D, 0x06, 0x1C, 0x42, 0x5A", "vperm2f128 ymm3, ymm2, YWORD [rax * 2 + rdx], 90");
}



#[test]
fn enc_avx_vperm2f1282731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm11, ymm1, ymm11, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x75, 0x06, 0xDB, 0x75", "vperm2f128 ymm11, ymm1, ymm11, 117");
}



#[test]
fn enc_avx_vperm2f1282732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm0, ymm0, ymm2, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x06, 0xC2, 0x61", "vperm2f128 ymm0, ymm0, ymm2, 97");
}



#[test]
fn enc_avx_vpextrb2733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rax, xmm12, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xE0, 0x33", "vpextrb rax, xmm12, 51");
}



#[test]
fn enc_avx_vpextrb2734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rcx, xmm11, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xD9, 0x17", "vpextrb rcx, xmm11, 23");
}



#[test]
fn enc_avx_vpextrb2735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rax, xmm12, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xE0, 0x42", "vpextrb rax, xmm12, 66");
}



#[test]
fn enc_avx_vpextrb2736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rdx, xmm11, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xDA, 0x54", "vpextrb rdx, xmm11, 84");
}



#[test]
fn enc_avx_vpextrb2737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rax, xmm3, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xD8, 0x06", "vpextrb rax, xmm3, 6");
}



#[test]
fn enc_avx_vpextrb2738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb edx, xmm12, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xE2, 0x60", "vpextrb edx, xmm12, 96");
}



#[test]
fn enc_avx_vpextrb2739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb edx, xmm11, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xDA, 0x5F", "vpextrb edx, xmm11, 95");
}



#[test]
fn enc_avx_vpextrb2740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb ecx, xmm11, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xD9, 0x05", "vpextrb ecx, xmm11, 5");
}



#[test]
fn enc_avx_vpextrb2741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb eax, xmm15, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xF8, 0x42", "vpextrb eax, xmm15, 66");
}



#[test]
fn enc_avx_vpextrb2742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb edx, xmm0, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC2, 0x31", "vpextrb edx, xmm0, 49");
}



#[test]
fn enc_avx_vpextrb2743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm0, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x00, 0x37", "vpextrb BYTE [rax], xmm0, 55");
}



#[test]
fn enc_avx_vpextrb2744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax * 2 + rdx], xmm1, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x0C, 0x42, 0x79", "vpextrb BYTE [rax * 2 + rdx], xmm1, 121");
}



#[test]
fn enc_avx_vpextrb2745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax + 16], xmm15, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0x78, 0x10, 0x4D", "vpextrb BYTE [rax + 16], xmm15, 77");
}



#[test]
fn enc_avx_vpextrb2746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm2, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x10, 0x5C", "vpextrb BYTE [rax], xmm2, 92");
}



#[test]
fn enc_avx_vpextrb2747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm11, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0x18, 0x7A", "vpextrb BYTE [rax], xmm11, 122");
}



#[test]
fn enc_avx_vpextrd2748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rcx, xmm11, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xD9, 0x2A", "vpextrd rcx, xmm11, 42");
}



#[test]
fn enc_avx_vpextrd2749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rdx, xmm1, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xCA, 0x1C", "vpextrd rdx, xmm1, 28");
}



#[test]
fn enc_avx_vpextrd2750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rcx, xmm15, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xF9, 0x67", "vpextrd rcx, xmm15, 103");
}



#[test]
fn enc_avx_vpextrd2751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rax, xmm3, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD8, 0x20", "vpextrd rax, xmm3, 32");
}



#[test]
fn enc_avx_vpextrd2752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rax, xmm2, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD0, 0x57", "vpextrd rax, xmm2, 87");
}



#[test]
fn enc_avx_vpextrd2753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm1, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0x08, 0x2E", "vpextrd DWORD [rax], xmm1, 46");
}



#[test]
fn enc_avx_vpextrd2754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm2, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0x10, 0x67", "vpextrd DWORD [rax], xmm2, 103");
}



#[test]
fn enc_avx_vpextrd2755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm15, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0x38, 0x42", "vpextrd DWORD [rax], xmm15, 66");
}



#[test]
fn enc_avx_vpextrd2756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd eax, xmm2, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD0, 0x34", "vpextrd eax, xmm2, 52");
}



#[test]
fn enc_avx_vpextrd2757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd eax, xmm3, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD8, 0x75", "vpextrd eax, xmm3, 117");
}



#[test]
fn enc_avx_vpextrq2758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq rax, xmm0, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0xC0, 0x6D", "vpextrq rax, xmm0, 109");
}



#[test]
fn enc_avx_vpextrq2759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq rax, xmm1, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0xC8, 0x76", "vpextrq rax, xmm1, 118");
}



#[test]
fn enc_avx_vpextrq2760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm0, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x12", "vpextrq [rax], xmm0, 18");
}



#[test]
fn enc_avx_vpextrq2761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm4, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x20, 0x77", "vpextrq [rax], xmm4, 119");
}



#[test]
fn enc_avx_vpextrq2762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm12, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x16, 0x20, 0x15", "vpextrq [rax], xmm12, 21");
}



#[test]
fn enc_avx_vpextrw2763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm0, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x6D", "vpextrw rcx, xmm0, 109");
}



#[test]
fn enc_avx_vpextrw2764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rdx, xmm4, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD4, 0x50", "vpextrw rdx, xmm4, 80");
}



#[test]
fn enc_avx_vpextrw2765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm11, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC3, 0x3B", "vpextrw rax, xmm11, 59");
}



#[test]
fn enc_avx_vpextrw2766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm4, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCC, 0x39", "vpextrw rcx, xmm4, 57");
}



#[test]
fn enc_avx_vpextrw2767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm15, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC7, 0x3D", "vpextrw rax, xmm15, 61");
}



#[test]
fn enc_avx_vpextrw2768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm11, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x15", "vpextrw edx, xmm11, 21");
}



#[test]
fn enc_avx_vpextrw2769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm12, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD4, 0x39", "vpextrw edx, xmm12, 57");
}



#[test]
fn enc_avx_vpextrw2770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm2, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCA, 0x54", "vpextrw ecx, xmm2, 84");
}



#[test]
fn enc_avx_vpextrw2771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm3, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x65", "vpextrw ecx, xmm3, 101");
}



#[test]
fn enc_avx_vpextrw2772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm2, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCA, 0x3F", "vpextrw ecx, xmm2, 63");
}



#[test]
fn enc_avx_vpextrw2773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm3, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x6B", "vpextrw rcx, xmm3, 107");
}



#[test]
fn enc_avx_vpextrw2774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm15, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xCF, 0x4E", "vpextrw rcx, xmm15, 78");
}



#[test]
fn enc_avx_vpextrw2775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm3, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC3, 0x55", "vpextrw rax, xmm3, 85");
}



#[test]
fn enc_avx_vpextrw2776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rdx, xmm11, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x53", "vpextrw rdx, xmm11, 83");
}



#[test]
fn enc_avx_vpextrw2777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm3, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x10", "vpextrw rcx, xmm3, 16");
}



#[test]
fn enc_avx_vpextrw2778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm4, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC4, 0x3C", "vpextrw eax, xmm4, 60");
}



#[test]
fn enc_avx_vpextrw2779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm0, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC0, 0x4A", "vpextrw eax, xmm0, 74");
}



#[test]
fn enc_avx_vpextrw2780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm15, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD7, 0x75", "vpextrw edx, xmm15, 117");
}



#[test]
fn enc_avx_vpextrw2781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm15, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD7, 0x51", "vpextrw edx, xmm15, 81");
}



#[test]
fn enc_avx_vpextrw2782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw ecx, xmm0, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x5D", "vpextrw ecx, xmm0, 93");
}



#[test]
fn enc_avx_vpextrw2783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm12, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x24, 0x42, 0x28", "vpextrw WORD [rax * 2 + rdx], xmm12, 40");
}



#[test]
fn enc_avx_vpextrw2784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm15, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x3C, 0x42, 0x23", "vpextrw WORD [rax * 2 + rdx], xmm15, 35");
}



#[test]
fn enc_avx_vpextrw2785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax + 16], xmm4, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x60, 0x10, 0x26", "vpextrw WORD [rax + 16], xmm4, 38");
}



#[test]
fn enc_avx_vpextrw2786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax], xmm2, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x10, 0x1D", "vpextrw WORD [rax], xmm2, 29");
}



#[test]
fn enc_avx_vpextrw2787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm3, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x1C, 0x42, 0x7E", "vpextrw WORD [rax * 2 + rdx], xmm3, 126");
}



#[test]
fn enc_avx_vphminposuw2788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0x02", "vphminposuw xmm0, OWORD [rdx]");
}



#[test]
fn enc_avx_vphminposuw2789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0x0A", "vphminposuw xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vphminposuw2790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xC1", "vphminposuw xmm0, xmm1");
}



#[test]
fn enc_avx_vphminposuw2791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x41, 0xD9", "vphminposuw xmm11, xmm1");
}



#[test]
fn enc_avx_vphminposuw2792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xE0", "vphminposuw xmm4, xmm0");
}



#[test]
fn enc_avx_vpinsrb2793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm4, al, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x20, 0xD0, 0x11", "vpinsrb xmm2, xmm4, al, 17");
}



#[test]
fn enc_avx_vpinsrb2794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm0, xmm12, al, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xC0, 0x29", "vpinsrb xmm0, xmm12, al, 41");
}



#[test]
fn enc_avx_vpinsrb2795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm1, BYTE [rax], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x20, 0x10, 0x5F", "vpinsrb xmm2, xmm1, BYTE [rax], 95");
}



#[test]
fn enc_avx_vpinsrb2796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm11, xmm12, BYTE [rax], 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x20, 0x18, 0x3B", "vpinsrb xmm11, xmm12, BYTE [rax], 59");
}



#[test]
fn enc_avx_vpinsrb2797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm11, xmm0, BYTE [rax], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x20, 0x18, 0x76", "vpinsrb xmm11, xmm0, BYTE [rax], 118");
}



#[test]
fn enc_avx_vpinsrb2798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm0, xmm11, edx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x20, 0xC2, 0x51", "vpinsrb xmm0, xmm11, edx, 81");
}



#[test]
fn enc_avx_vpinsrb2799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm3, xmm0, ecx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x20, 0xD9, 0x4D", "vpinsrb xmm3, xmm0, ecx, 77");
}



#[test]
fn enc_avx_vpinsrb2800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm12, xmm12, eax, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x20, 0xE0, 0x02", "vpinsrb xmm12, xmm12, eax, 2");
}



#[test]
fn enc_avx_vpinsrb2801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm15, edx, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x20, 0xD2, 0x35", "vpinsrb xmm2, xmm15, edx, 53");
}



#[test]
fn enc_avx_vpinsrb2802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm0, xmm0, ecx, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x20, 0xC1, 0x39", "vpinsrb xmm0, xmm0, ecx, 57");
}



#[test]
fn enc_avx_vpinsrd2803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm2, xmm11, DWORD [rax], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x22, 0x10, 0x79", "vpinsrd xmm2, xmm11, DWORD [rax], 121");
}



#[test]
fn enc_avx_vpinsrd2804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm12, xmm15, eax, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x22, 0xE0, 0x6C", "vpinsrd xmm12, xmm15, eax, 108");
}



#[test]
fn enc_avx_vpinsrd2805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm15, xmm4, eax, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x22, 0xF8, 0x25", "vpinsrd xmm15, xmm4, eax, 37");
}



#[test]
fn enc_avx_vpinsrd2806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm0, xmm0, eax, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x22, 0xC0, 0x54", "vpinsrd xmm0, xmm0, eax, 84");
}



#[test]
fn enc_avx_vpinsrd2807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm1, xmm11, DWORD [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x22, 0x08, 0x11", "vpinsrd xmm1, xmm11, DWORD [rax], 17");
}



#[test]
fn enc_avx_vpinsrq2808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm11, xmm11, [rax], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xA1, 0x22, 0x18, 0x7C", "vpinsrq xmm11, xmm11, [rax], 124");
}



#[test]
fn enc_avx_vpinsrq2809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm3, xmm1, rax, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x22, 0xD8, 0x4B", "vpinsrq xmm3, xmm1, rax, 75");
}



#[test]
fn enc_avx_vpinsrq2810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm3, xmm3, [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x22, 0x18, 0x05", "vpinsrq xmm3, xmm3, [rax], 5");
}



#[test]
fn enc_avx_vpinsrq2811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm0, xmm3, rax, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x22, 0xC0, 0x7E", "vpinsrq xmm0, xmm3, rax, 126");
}



#[test]
fn enc_avx_vpinsrq2812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm2, xmm12, rax, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x99, 0x22, 0xD0, 0x6B", "vpinsrq xmm2, xmm12, rax, 107");
}



#[test]
fn enc_avx_vpinsrw2813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm3, xmm12, ax, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC4, 0xD8, 0x48", "vpinsrw xmm3, xmm12, ax, 72");
}



#[test]
fn enc_avx_vpinsrw2814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm2, xmm11, WORD [rax], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC4, 0x10, 0x2E", "vpinsrw xmm2, xmm11, WORD [rax], 46");
}



#[test]
fn enc_avx_vpinsrw2815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm15, xmm1, WORD [rax], 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC4, 0x38, 0x24", "vpinsrw xmm15, xmm1, WORD [rax], 36");
}



#[test]
fn enc_avx_vpinsrw2816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm3, xmm0, ax, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC4, 0xD8, 0x76", "vpinsrw xmm3, xmm0, ax, 118");
}



#[test]
fn enc_avx_vpinsrw2817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm15, xmm11, WORD [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC4, 0x38, 0x51", "vpinsrw xmm15, xmm11, WORD [rax], 81");
}



#[test]
fn enc_avx_vpinsrw2818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm12, xmm11, eax, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC4, 0xE0, 0x02", "vpinsrw xmm12, xmm11, eax, 2");
}



#[test]
fn enc_avx_vpinsrw2819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm3, xmm0, ecx, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC4, 0xD9, 0x48", "vpinsrw xmm3, xmm0, ecx, 72");
}



#[test]
fn enc_avx_vpinsrw2820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm12, xmm1, eax, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC4, 0xE0, 0x7A", "vpinsrw xmm12, xmm1, eax, 122");
}



#[test]
fn enc_avx_vpinsrw2821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm12, xmm12, ecx, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0xC4, 0xE1, 0x2A", "vpinsrw xmm12, xmm12, ecx, 42");
}



#[test]
fn enc_avx_vpinsrw2822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm1, xmm11, edx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC4, 0xCA, 0x29", "vpinsrw xmm1, xmm11, edx, 41");
}



#[test]
fn enc_avx_vpmovsxbd2823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x21, 0x20", "vpmovsxbd xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbd2824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x04, 0x42", "vpmovsxbd xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbd2825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x48, 0x10", "vpmovsxbd xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbd2826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x60, 0x10", "vpmovsxbd xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbw2827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x60, 0x10", "vpmovsxbw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbw2828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x0C, 0x42", "vpmovsxbw xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw2829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x18", "vpmovsxbw xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw2830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x20", "vpmovsxbw xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq2831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x04, 0x42", "vpmovsxdq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq2832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x60, 0x10", "vpmovsxdq xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxdq2833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x25, 0x24, 0x42", "vpmovsxdq xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq2834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x00", "vpmovsxdq xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq2835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x0C, 0x42", "vpmovsxdq xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd2836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x50, 0x10", "vpmovsxwd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd2837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x08", "vpmovsxwd xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwd2838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x3C, 0x42", "vpmovsxwd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd2839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x58, 0x10", "vpmovsxwd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq2840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x18", "vpmovsxwq xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq2841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x50, 0x10", "vpmovsxwq xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq2842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x20", "vpmovsxwq xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq2843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x60, 0x10", "vpmovsxwq xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq2844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x38", "vpmovsxwq xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbd2845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x0C, 0x42", "vpmovzxbd xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd2846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x48, 0x10", "vpmovzxbd xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbd2847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x24, 0x42", "vpmovzxbd xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd2848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x58, 0x10", "vpmovzxbd xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbw2849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x10", "vpmovzxbw xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw2850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x30, 0x24, 0x42", "vpmovzxbw xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw2851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x30, 0x60, 0x10", "vpmovzxbw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbw2852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x50, 0x10", "vpmovzxbw xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbw2853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x1C, 0x42", "vpmovzxbw xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq2854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x10", "vpmovzxdq xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq2855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x00", "vpmovzxdq xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq2856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x24, 0x42", "vpmovzxdq xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq2857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x35, 0x24, 0x42", "vpmovzxdq xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwd2858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x04, 0x42", "vpmovzxwd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwd2859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x18", "vpmovzxwd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwd2860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x24, 0x42", "vpmovzxwd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwd2861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x38", "vpmovzxwd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwq2862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x58, 0x10", "vpmovzxwq xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwq2863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x34, 0x1C, 0x42", "vpmovzxwq xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq2864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x0C, 0x42", "vpmovzxwq xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq2865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x1C, 0x42", "vpmovzxwq xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwq2866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x60, 0x10", "vpmovzxwq xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrcpss2867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x53, 0xD9", "vrcpss xmm11, xmm12, xmm1");
}



#[test]
fn enc_avx_vrcpss2868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm3, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0x53, 0xDC", "vrcpss xmm3, xmm11, xmm12");
}



#[test]
fn enc_avx_vrcpss2869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x53, 0xDC", "vrcpss xmm11, xmm3, xmm4");
}



#[test]
fn enc_avx_vrcpss2870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x53, 0xC9", "vrcpss xmm1, xmm0, xmm1");
}



#[test]
fn enc_avx_vrcpss2871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm0, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x53, 0xC3", "vrcpss xmm0, xmm0, xmm3");
}



#[test]
fn enc_avx_vrcpss2872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x53, 0x40, 0x10", "vrcpss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrcpss2873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm15, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x53, 0x38", "vrcpss xmm15, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss2874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x53, 0x18", "vrcpss xmm11, xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss2875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x53, 0x18", "vrcpss xmm11, xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss2876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x53, 0x58, 0x10", "vrcpss xmm11, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vroundsd2877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm2, xmm0, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x0B, 0xF8, 0x06", "vroundsd xmm15, xmm2, xmm0, 6");
}



#[test]
fn enc_avx_vroundsd2878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm1, xmm3, xmm3, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x0B, 0xCB, 0x6B", "vroundsd xmm1, xmm3, xmm3, 107");
}



#[test]
fn enc_avx_vroundsd2879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm0, xmm2, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x0B, 0xFA, 0x03", "vroundsd xmm15, xmm0, xmm2, 3");
}



#[test]
fn enc_avx_vroundsd2880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm0, xmm2, xmm2, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0B, 0xC2, 0x76", "vroundsd xmm0, xmm2, xmm2, 118");
}



#[test]
fn enc_avx_vroundsd2881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm0, xmm12, xmm12, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x19, 0x0B, 0xC4, 0x11", "vroundsd xmm0, xmm12, xmm12, 17");
}



#[test]
fn enc_avx_vroundsd2882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm2, xmm4, QWORD [rax * 2 + rdx], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x0B, 0x14, 0x42, 0x19", "vroundsd xmm2, xmm4, QWORD [rax * 2 + rdx], 25");
}



#[test]
fn enc_avx_vroundsd2883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm0, xmm2, QWORD [rax * 2 + rdx], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0B, 0x04, 0x42, 0x02", "vroundsd xmm0, xmm2, QWORD [rax * 2 + rdx], 2");
}



#[test]
fn enc_avx_vroundsd2884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm3, xmm4, QWORD [rax + 16], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x0B, 0x58, 0x10, 0x67", "vroundsd xmm3, xmm4, QWORD [rax + 16], 103");
}



#[test]
fn enc_avx_vroundsd2885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm12, QWORD [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0B, 0x38, 0x67", "vroundsd xmm15, xmm12, QWORD [rax], 103");
}



#[test]
fn enc_avx_vroundsd2886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm4, xmm2, QWORD [rax], 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0B, 0x20, 0x0E", "vroundsd xmm4, xmm2, QWORD [rax], 14");
}



#[test]
fn enc_avx_vroundss2887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm3, xmm2, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x0A, 0xDA, 0x53", "vroundss xmm3, xmm3, xmm2, 83");
}



#[test]
fn enc_avx_vroundss2888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm15, xmm1, xmm0, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x0A, 0xF8, 0x04", "vroundss xmm15, xmm1, xmm0, 4");
}



#[test]
fn enc_avx_vroundss2889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm0, xmm11, xmm11, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x21, 0x0A, 0xC3, 0x2F", "vroundss xmm0, xmm11, xmm11, 47");
}



#[test]
fn enc_avx_vroundss2890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm2, xmm0, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0A, 0xD8, 0x3F", "vroundss xmm3, xmm2, xmm0, 63");
}



#[test]
fn enc_avx_vroundss2891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm2, xmm3, xmm1, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x0A, 0xD1, 0x0C", "vroundss xmm2, xmm3, xmm1, 12");
}



#[test]
fn enc_avx_vroundss2892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm1, xmm11, DWORD [rax], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x0A, 0x08, 0x04", "vroundss xmm1, xmm11, DWORD [rax], 4");
}



#[test]
fn enc_avx_vroundss2893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm2, DWORD [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0A, 0x18, 0x48", "vroundss xmm3, xmm2, DWORD [rax], 72");
}



#[test]
fn enc_avx_vroundss2894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm12, xmm12, DWORD [rax], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x19, 0x0A, 0x20, 0x68", "vroundss xmm12, xmm12, DWORD [rax], 104");
}



#[test]
fn enc_avx_vroundss2895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm0, xmm15, DWORD [rax * 2 + rdx], 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x0A, 0x04, 0x42, 0x40", "vroundss xmm0, xmm15, DWORD [rax * 2 + rdx], 64");
}



#[test]
fn enc_avx_vroundss2896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm0, xmm12, DWORD [rax], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x0A, 0x00, 0x5C", "vroundss xmm0, xmm12, DWORD [rax], 92");
}



#[test]
fn enc_avx_vrsqrtss2897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm2, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x52, 0xD1", "vrsqrtss xmm2, xmm3, xmm1");
}



#[test]
fn enc_avx_vrsqrtss2898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm0, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x52, 0xC3", "vrsqrtss xmm0, xmm2, xmm3");
}



#[test]
fn enc_avx_vrsqrtss2899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x52, 0xD8", "vrsqrtss xmm11, xmm12, xmm0");
}



#[test]
fn enc_avx_vrsqrtss2900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x52, 0xDC", "vrsqrtss xmm3, xmm15, xmm4");
}



#[test]
fn enc_avx_vrsqrtss2901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x52, 0xDC", "vrsqrtss xmm11, xmm2, xmm4");
}



#[test]
fn enc_avx_vrsqrtss2902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm0, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x52, 0x00", "vrsqrtss xmm0, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss2903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x52, 0x18", "vrsqrtss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss2904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x52, 0x18", "vrsqrtss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss2905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm15, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x52, 0x3C, 0x42", "vrsqrtss xmm15, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrsqrtss2906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm12, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x52, 0x60, 0x10", "vrsqrtss xmm12, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd2907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm0, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x51, 0xC7", "vsqrtsd xmm0, xmm3, xmm15");
}



#[test]
fn enc_avx_vsqrtsd2908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm3, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x51, 0xDF", "vsqrtsd xmm3, xmm1, xmm15");
}



#[test]
fn enc_avx_vsqrtsd2909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm12, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x03, 0x51, 0xE7", "vsqrtsd xmm12, xmm15, xmm15");
}



#[test]
fn enc_avx_vsqrtsd2910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm1, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x51, 0xCF", "vsqrtsd xmm1, xmm12, xmm15");
}



#[test]
fn enc_avx_vsqrtsd2911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm4, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x51, 0xE0", "vsqrtsd xmm4, xmm11, xmm0");
}



#[test]
fn enc_avx_vsqrtsd2912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm12, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x51, 0x24, 0x42", "vsqrtsd xmm12, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd2913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x51, 0x1C, 0x42", "vsqrtsd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd2914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm12, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x51, 0x60, 0x10", "vsqrtsd xmm12, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd2915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x51, 0x48, 0x10", "vsqrtsd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd2916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x51, 0x04, 0x42", "vsqrtsd xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss2917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm11, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x51, 0xD8", "vsqrtss xmm11, xmm3, xmm0");
}



#[test]
fn enc_avx_vsqrtss2918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm1, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x51, 0xCA", "vsqrtss xmm1, xmm1, xmm2");
}



#[test]
fn enc_avx_vsqrtss2919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x51, 0xC9", "vsqrtss xmm1, xmm0, xmm1");
}



#[test]
fn enc_avx_vsqrtss2920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x51, 0xDB", "vsqrtss xmm3, xmm1, xmm11");
}



#[test]
fn enc_avx_vsqrtss2921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm12, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x51, 0xE4", "vsqrtss xmm12, xmm12, xmm12");
}



#[test]
fn enc_avx_vsqrtss2922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x51, 0x38", "vsqrtss xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vsqrtss2923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm3, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x51, 0x1C, 0x42", "vsqrtss xmm3, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss2924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm12, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x51, 0x24, 0x42", "vsqrtss xmm12, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss2925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm1, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x51, 0x0C, 0x42", "vsqrtss xmm1, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss2926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm0, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x51, 0x40, 0x10", "vsqrtss xmm0, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vstmxcsr2927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x1C, 0x42", "vstmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vstmxcsr2928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x18", "vstmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vstmxcsr2929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x58, 0x10", "vstmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd2930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5C, 0xD4", "vsubsd xmm2, xmm1, xmm12");
}



#[test]
fn enc_avx_vsubsd2931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0x5C, 0xDB", "vsubsd xmm11, xmm4, xmm11");
}



#[test]
fn enc_avx_vsubsd2932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x03, 0x5C, 0xDF", "vsubsd xmm11, xmm15, xmm15");
}



#[test]
fn enc_avx_vsubsd2933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm15, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0x5C, 0xFB", "vsubsd xmm15, xmm12, xmm11");
}



#[test]
fn enc_avx_vsubsd2934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x5C, 0xDA", "vsubsd xmm11, xmm12, xmm2");
}



#[test]
fn enc_avx_vsubsd2935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5C, 0x18", "vsubsd xmm11, xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd2936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5C, 0x10", "vsubsd xmm2, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd2937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5C, 0x14, 0x42", "vsubsd xmm2, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubsd2938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5C, 0x58, 0x10", "vsubsd xmm11, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd2939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5C, 0x78, 0x10", "vsubsd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss2940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm4, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x5C, 0xE7", "vsubss xmm4, xmm1, xmm15");
}



#[test]
fn enc_avx_vsubss2941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm11, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5C, 0xDB", "vsubss xmm11, xmm1, xmm3");
}



#[test]
fn enc_avx_vsubss2942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5C, 0xE2", "vsubss xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vsubss2943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm1, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5C, 0xCB", "vsubss xmm1, xmm2, xmm3");
}



#[test]
fn enc_avx_vsubss2944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5C, 0xC0", "vsubss xmm0, xmm0, xmm0");
}



#[test]
fn enc_avx_vsubss2945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm3, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5C, 0x18", "vsubss xmm3, xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vsubss2946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm0, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5C, 0x04, 0x42", "vsubss xmm0, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubss2947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm12, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x5C, 0x24, 0x42", "vsubss xmm12, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubss2948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm1, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5C, 0x48, 0x10", "vsubss xmm1, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss2949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm1, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5C, 0x08", "vsubss xmm1, xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vucomisd2950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0xC4", "vucomisd xmm0, xmm4");
}



#[test]
fn enc_avx_vucomisd2951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2E, 0xE4", "vucomisd xmm12, xmm12");
}



#[test]
fn enc_avx_vucomisd2952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0xDA", "vucomisd xmm11, xmm2");
}



#[test]
fn enc_avx_vucomisd2953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x2E, 0xDC", "vucomisd xmm3, xmm12");
}



#[test]
fn enc_avx_vucomisd2954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x2E, 0xDF", "vucomisd xmm11, xmm15");
}



#[test]
fn enc_avx_vucomisd2955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0x40, 0x10", "vucomisd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomisd2956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x60, 0x10", "vucomisd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vucomisd2957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x20", "vucomisd xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vucomisd2958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x18", "vucomisd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vucomiss2959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2E, 0xC7", "vucomiss xmm0, xmm15");
}



#[test]
fn enc_avx_vucomiss2960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0xE0", "vucomiss xmm12, xmm0");
}



#[test]
fn enc_avx_vucomiss2961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x2E, 0xE4", "vucomiss xmm12, xmm12");
}



#[test]
fn enc_avx_vucomiss2962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xD2", "vucomiss xmm2, xmm2");
}



#[test]
fn enc_avx_vucomiss2963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xE2", "vucomiss xmm4, xmm2");
}



#[test]
fn enc_avx_vucomiss2964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x24, 0x42", "vucomiss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss2965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x0C, 0x42", "vucomiss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss2966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x18", "vucomiss xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vucomiss2967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x00", "vucomiss xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vucomiss2968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0x18", "vucomiss xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vzeroall2969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vzeroall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x77", "vzeroall");
}



#[test]
fn enc_avx_vzeroupper2970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vzeroupper
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x77", "vzeroupper");
}


