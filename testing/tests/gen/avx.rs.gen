
#[test]
fn enc_avx_vaddsd979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x58, 0xC3", "vaddsd xmm0, xmm11, xmm3");
}



#[test]
fn enc_avx_vaddsd980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x58, 0xDB", "vaddsd xmm3, xmm1, xmm11");
}



#[test]
fn enc_avx_vaddsd981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm0, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0x58, 0xC4", "vaddsd xmm0, xmm0, xmm12");
}



#[test]
fn enc_avx_vaddsd982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm12, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0x58, 0xE3", "vaddsd xmm12, xmm0, xmm11");
}



#[test]
fn enc_avx_vaddsd983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm1, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x58, 0xCB", "vaddsd xmm1, xmm1, xmm3");
}



#[test]
fn enc_avx_vaddsd984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x58, 0x04, 0x42", "vaddsd xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddsd985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x58, 0x60, 0x10", "vaddsd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x58, 0x60, 0x10", "vaddsd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddsd987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm2, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x58, 0x14, 0x42", "vaddsd xmm2, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddsd988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddsd xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x58, 0x20", "vaddsd xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vaddss989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x58, 0xC9", "vaddss xmm1, xmm2, xmm1");
}



#[test]
fn enc_avx_vaddss990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm15, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x58, 0xFF", "vaddss xmm15, xmm12, xmm15");
}



#[test]
fn enc_avx_vaddss991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm3, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x22, 0x58, 0xDB", "vaddss xmm3, xmm11, xmm11");
}



#[test]
fn enc_avx_vaddss992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm2, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x58, 0xD3", "vaddss xmm2, xmm12, xmm11");
}



#[test]
fn enc_avx_vaddss993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm4, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x58, 0xE2", "vaddss xmm4, xmm4, xmm2");
}



#[test]
fn enc_avx_vaddss994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm1, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x58, 0x0C, 0x42", "vaddss xmm1, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddss995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm4, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x58, 0x24, 0x42", "vaddss xmm4, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaddss996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm11, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x58, 0x18", "vaddss xmm11, xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vaddss997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm3, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x58, 0x58, 0x10", "vaddss xmm3, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vaddss998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaddss xmm4, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x58, 0x60, 0x10", "vaddss xmm4, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vaesdec999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xDE, 0xDC", "vaesdec xmm3, xmm15, xmm4");
}



#[test]
fn enc_avx_vaesdec1000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm2, xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xDE, 0x12", "vaesdec xmm2, xmm15, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdec1001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm4, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xDE, 0xE7", "vaesdec xmm4, xmm3, xmm15");
}



#[test]
fn enc_avx_vaesdec1002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm15, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xDE, 0xFC", "vaesdec xmm15, xmm12, xmm4");
}



#[test]
fn enc_avx_vaesdec1003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdec xmm0, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDE, 0x02", "vaesdec xmm0, xmm1, OWORD [rdx]");
}



#[test]
fn enc_avx_vaesdeclast1004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm0, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xDF, 0xC4", "vaesdeclast xmm0, xmm1, xmm12");
}



#[test]
fn enc_avx_vaesdeclast1005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm2, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xDF, 0xD3", "vaesdeclast xmm2, xmm2, xmm11");
}



#[test]
fn enc_avx_vaesdeclast1006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm0, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xDF, 0xC1", "vaesdeclast xmm0, xmm15, xmm1");
}



#[test]
fn enc_avx_vaesdeclast1007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm3, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xDF, 0xDC", "vaesdeclast xmm3, xmm11, xmm4");
}



#[test]
fn enc_avx_vaesdeclast1008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesdeclast xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xDF, 0xCC", "vaesdeclast xmm1, xmm2, xmm12");
}



#[test]
fn enc_avx_vaesenc1009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm4, xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xDC, 0x24, 0x42", "vaesenc xmm4, xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vaesenc1010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm3, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xDC, 0xDA", "vaesenc xmm3, xmm2, xmm2");
}



#[test]
fn enc_avx_vaesenc1011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm4, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xDC, 0xE4", "vaesenc xmm4, xmm15, xmm12");
}



#[test]
fn enc_avx_vaesenc1012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xDC, 0xD3", "vaesenc xmm2, xmm12, xmm3");
}



#[test]
fn enc_avx_vaesenc1013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenc xmm4, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xDC, 0xE4", "vaesenc xmm4, xmm2, xmm4");
}



#[test]
fn enc_avx_vaesenclast1014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm4, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xDD, 0xE1", "vaesenclast xmm4, xmm1, xmm1");
}



#[test]
fn enc_avx_vaesenclast1015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm4, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0xDD, 0xE7", "vaesenclast xmm4, xmm11, xmm15");
}



#[test]
fn enc_avx_vaesenclast1016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm4, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xDD, 0xE3", "vaesenclast xmm4, xmm2, xmm11");
}



#[test]
fn enc_avx_vaesenclast1017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm2, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0xDD, 0xD4", "vaesenclast xmm2, xmm11, xmm12");
}



#[test]
fn enc_avx_vaesenclast1018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesenclast xmm11, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xDD, 0xDA", "vaesenclast xmm11, xmm1, xmm2");
}



#[test]
fn enc_avx_vaesimc1019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xDB, 0xD3", "vaesimc xmm2, xmm11");
}



#[test]
fn enc_avx_vaesimc1020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xDB, 0xFA", "vaesimc xmm15, xmm2");
}



#[test]
fn enc_avx_vaesimc1021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xDB, 0xFB", "vaesimc xmm15, xmm3");
}



#[test]
fn enc_avx_vaesimc1022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaesimc xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xDB, 0xC4", "vaesimc xmm0, xmm12");
}



#[test]
fn enc_avx_vaeskeygenassist1023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm3, xmm15, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x79, 0xDF, 0xDF, 0x24", "vaeskeygenassist xmm3, xmm15, 36");
}



#[test]
fn enc_avx_vaeskeygenassist1024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm2, xmm0, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0xD0, 0x05", "vaeskeygenassist xmm2, xmm0, 5");
}



#[test]
fn enc_avx_vaeskeygenassist1025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm11, OWORD [rax], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0xDF, 0x18, 0x33", "vaeskeygenassist xmm11, OWORD [rax], 51");
}



#[test]
fn enc_avx_vaeskeygenassist1026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm15, xmm12, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x79, 0xDF, 0xFC, 0x52", "vaeskeygenassist xmm15, xmm12, 82");
}



#[test]
fn enc_avx_vaeskeygenassist1027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vaeskeygenassist xmm0, OWORD [rax * 2 + rdx], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0xDF, 0x04, 0x42, 0x37", "vaeskeygenassist xmm0, OWORD [rax * 2 + rdx], 55");
}



#[test]
fn enc_avx_vbroadcastf1281028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm3, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x58, 0x10", "vbroadcastf128 ymm3, OWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastf1281029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x1A, 0x38", "vbroadcastf128 ymm15, OWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastf1281030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x14, 0x42", "vbroadcastf128 ymm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastf1281031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x0C, 0x42", "vbroadcastf128 ymm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastf1281032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastf128 ymm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x1A, 0x18", "vbroadcastf128 ymm3, OWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0x20", "vbroadcastsd ymm12, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x40, 0x10", "vbroadcastsd ymm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vbroadcastsd1035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x20", "vbroadcastsd ymm4, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0x24, 0x42", "vbroadcastsd ymm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vbroadcastsd1037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0x08", "vbroadcastsd ymm1, QWORD [rax]");
}



#[test]
fn enc_avx_vbroadcastsd1038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x7D, 0x19, 0xC7", "vbroadcastsd ymm0, xmm15");
}



#[test]
fn enc_avx_vbroadcastsd1039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x7D, 0x19, 0xDF", "vbroadcastsd ymm11, xmm15");
}



#[test]
fn enc_avx_vbroadcastsd1040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x19, 0xD0", "vbroadcastsd ymm2, xmm0");
}



#[test]
fn enc_avx_vbroadcastsd1041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcastsd ymm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x19, 0xD8", "vbroadcastsd ymm11, xmm0");
}



#[test]
fn enc_avx_vcomisd1042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xD4", "vcomisd xmm2, xmm4");
}



#[test]
fn enc_avx_vcomisd1043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xE0", "vcomisd xmm12, xmm0");
}



#[test]
fn enc_avx_vcomisd1044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xDC", "vcomisd xmm3, xmm4");
}



#[test]
fn enc_avx_vcomisd1045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0xFC", "vcomisd xmm15, xmm4");
}



#[test]
fn enc_avx_vcomisd1046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0xC1", "vcomisd xmm0, xmm1");
}



#[test]
fn enc_avx_vcomisd1047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x08", "vcomisd xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vcomisd1048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x38", "vcomisd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcomisd1049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x58, 0x10", "vcomisd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcomisd1050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2F, 0x3C, 0x42", "vcomisd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomisd1051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomisd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2F, 0x18", "vcomisd xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vcomiss1052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2F, 0xC7", "vcomiss xmm0, xmm15");
}



#[test]
fn enc_avx_vcomiss1053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0xDB", "vcomiss xmm3, xmm3");
}



#[test]
fn enc_avx_vcomiss1054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x2F, 0xFF", "vcomiss xmm15, xmm15");
}



#[test]
fn enc_avx_vcomiss1055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2F, 0xE7", "vcomiss xmm4, xmm15");
}



#[test]
fn enc_avx_vcomiss1056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0xC8", "vcomiss xmm1, xmm0");
}



#[test]
fn enc_avx_vcomiss1057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x24, 0x42", "vcomiss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcomiss1058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x20", "vcomiss xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vcomiss1059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2F, 0x38", "vcomiss xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vcomiss1060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcomiss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2F, 0x60, 0x10", "vcomiss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd1061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x1C, 0x42", "vcvtdq2pd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtdq2pd1062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0xE6, 0x10", "vcvtdq2pd xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtdq2pd1063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x18", "vcvtdq2pd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtdq2pd1064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x60, 0x10", "vcvtdq2pd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtdq2pd1065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtdq2pd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0xE6, 0x20", "vcvtdq2pd xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtph2ps1066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x58, 0x10", "vcvtph2ps xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x50, 0x10", "vcvtph2ps xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x58, 0x10", "vcvtph2ps xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x13, 0x78, 0x10", "vcvtph2ps xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtph2ps1070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtph2ps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x13, 0x00", "vcvtph2ps xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd1071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x58, 0x10", "vcvtps2pd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd1072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x5A, 0x20", "vcvtps2pd xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd1073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x58, 0x10", "vcvtps2pd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2pd1074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x38", "vcvtps2pd xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtps2pd1075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2pd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x5A, 0x78, 0x10", "vcvtps2pd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtps2ph1076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax], xmm11, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x18, 0x3A", "vcvtps2ph QWORD [rax], xmm11, 58");
}



#[test]
fn enc_avx_vcvtps2ph1077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm2, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x14, 0x42, 0x13", "vcvtps2ph QWORD [rax * 2 + rdx], xmm2, 19");
}



#[test]
fn enc_avx_vcvtps2ph1078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm15, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x3C, 0x42, 0x0D", "vcvtps2ph QWORD [rax * 2 + rdx], xmm15, 13");
}



#[test]
fn enc_avx_vcvtps2ph1079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax * 2 + rdx], xmm2, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x1D, 0x14, 0x42, 0x1F", "vcvtps2ph QWORD [rax * 2 + rdx], xmm2, 31");
}



#[test]
fn enc_avx_vcvtps2ph1080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtps2ph QWORD [rax], xmm15, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x1D, 0x38, 0x27", "vcvtps2ph QWORD [rax], xmm15, 39");
}



#[test]
fn enc_avx_vcvtsd2si1081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC4", "vcvtsd2si rax, xmm4");
}



#[test]
fn enc_avx_vcvtsd2si1082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rbx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xDB", "vcvtsd2si rbx, xmm11");
}



#[test]
fn enc_avx_vcvtsd2si1083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xCC", "vcvtsd2si rcx, xmm4");
}



#[test]
fn enc_avx_vcvtsd2si1084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2D, 0xCF", "vcvtsd2si rcx, xmm15");
}



#[test]
fn enc_avx_vcvtsd2si1085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0xC2", "vcvtsd2si rax, xmm2");
}



#[test]
fn enc_avx_vcvtsd2si1086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x00", "vcvtsd2si rax, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2si1087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x08", "vcvtsd2si rcx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2si1088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x10", "vcvtsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2si1089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2D, 0x48, 0x10", "vcvtsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss1090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm4, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5A, 0xE4", "vcvtsd2ss xmm4, xmm4, xmm4");
}



#[test]
fn enc_avx_vcvtsd2ss1091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5A, 0xFC", "vcvtsd2ss xmm15, xmm2, xmm4");
}



#[test]
fn enc_avx_vcvtsd2ss1092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm15, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1B, 0x5A, 0xFF", "vcvtsd2ss xmm15, xmm12, xmm15");
}



#[test]
fn enc_avx_vcvtsd2ss1093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm2, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5A, 0xD2", "vcvtsd2ss xmm2, xmm0, xmm2");
}



#[test]
fn enc_avx_vcvtsd2ss1094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x5A, 0xCC", "vcvtsd2ss xmm1, xmm3, xmm12");
}



#[test]
fn enc_avx_vcvtsd2ss1095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm0, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5A, 0x04, 0x42", "vcvtsd2ss xmm0, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsd2ss1096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5A, 0x10", "vcvtsd2ss xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsd2ss1097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x73, 0x5A, 0x58, 0x10", "vcvtsd2ss xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss1098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5A, 0x48, 0x10", "vcvtsd2ss xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtsd2ss1099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsd2ss xmm12, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5A, 0x24, 0x42", "vcvtsd2ss xmm12, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0x83, 0x2A, 0x0C, 0x42", "vcvtsi2sd xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm15, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0x83, 0x2A, 0x3C, 0x42", "vcvtsi2sd xmm15, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm15, xmm12, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0x9B, 0x2A, 0xF9", "vcvtsi2sd xmm15, xmm12, rcx");
}



#[test]
fn enc_avx_vcvtsi2sd1103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xEB, 0x2A, 0x24, 0x42", "vcvtsi2sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2sd1104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2sd xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2A, 0x14, 0x42", "vcvtsi2sd xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm3, xmm2, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xEA, 0x2A, 0xD9", "vcvtsi2ss xmm3, xmm2, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss1106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm15, xmm2, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xEA, 0x2A, 0xF9", "vcvtsi2ss xmm15, xmm2, rcx");
}



#[test]
fn enc_avx_vcvtsi2ss1107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm2, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2A, 0x10", "vcvtsi2ss xmm2, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtsi2ss1108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xE2, 0x2A, 0x04, 0x42", "vcvtsi2ss xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtsi2ss1109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtsi2ss xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xDA, 0x2A, 0x20", "vcvtsi2ss xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2sd1110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x5A, 0xC3", "vcvtss2sd xmm0, xmm12, xmm11");
}



#[test]
fn enc_avx_vcvtss2sd1111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm12, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x1A, 0x5A, 0xE4", "vcvtss2sd xmm12, xmm12, xmm12");
}



#[test]
fn enc_avx_vcvtss2sd1112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm2, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5A, 0xD2", "vcvtss2sd xmm2, xmm11, xmm2");
}



#[test]
fn enc_avx_vcvtss2sd1113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm2, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5A, 0xD2", "vcvtss2sd xmm2, xmm3, xmm2");
}



#[test]
fn enc_avx_vcvtss2sd1114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm3, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0x5A, 0xDF", "vcvtss2sd xmm3, xmm15, xmm15");
}



#[test]
fn enc_avx_vcvtss2sd1115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm15, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x5A, 0x3C, 0x42", "vcvtss2sd xmm15, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm3, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5A, 0x1C, 0x42", "vcvtss2sd xmm3, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm4, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5A, 0x20", "vcvtss2sd xmm4, xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2sd1118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm4, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5A, 0x24, 0x42", "vcvtss2sd xmm4, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2sd1119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2sd xmm11, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5A, 0x18", "vcvtss2sd xmm11, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2si1120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xD8", "vcvtss2si rbx, xmm0");
}



#[test]
fn enc_avx_vcvtss2si1121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2D, 0xDB", "vcvtss2si rbx, xmm11");
}



#[test]
fn enc_avx_vcvtss2si1122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xD1", "vcvtss2si rdx, xmm1");
}



#[test]
fn enc_avx_vcvtss2si1123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rbx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0xDC", "vcvtss2si rbx, xmm4");
}



#[test]
fn enc_avx_vcvtss2si1124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x40, 0x10", "vcvtss2si rax, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvtss2si1125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x0C, 0x42", "vcvtss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvtss2si1126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x00", "vcvtss2si rax, DWORD [rax]");
}



#[test]
fn enc_avx_vcvtss2si1127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvtss2si rcx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2D, 0x48, 0x10", "vcvtss2si rcx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si1128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rbx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xDB", "vcvttsd2si rbx, xmm3");
}



#[test]
fn enc_avx_vcvttsd2si1129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rbx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2C, 0xDF", "vcvttsd2si rbx, xmm15");
}



#[test]
fn enc_avx_vcvttsd2si1130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0xC1", "vcvttsd2si rax, xmm1");
}



#[test]
fn enc_avx_vcvttsd2si1131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2C, 0xD3", "vcvttsd2si rdx, xmm11");
}



#[test]
fn enc_avx_vcvttsd2si1132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFB, 0x2C, 0xC3", "vcvttsd2si rax, xmm11");
}



#[test]
fn enc_avx_vcvttsd2si1133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x48, 0x10", "vcvttsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si1134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x50, 0x10", "vcvttsd2si rdx, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttsd2si1135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x10", "vcvttsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_avx_vcvttsd2si1136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFB, 0x2C, 0x14, 0x42", "vcvttsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vcvttss2si1137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xDB", "vcvttss2si rbx, xmm11");
}



#[test]
fn enc_avx_vcvttss2si1138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xD4", "vcvttss2si rdx, xmm12");
}



#[test]
fn enc_avx_vcvttss2si1139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0xFA, 0x2C, 0xDF", "vcvttss2si rbx, xmm15");
}



#[test]
fn enc_avx_vcvttss2si1140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xD0", "vcvttss2si rdx, xmm0");
}



#[test]
fn enc_avx_vcvttss2si1141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0xD2", "vcvttss2si rdx, xmm2");
}



#[test]
fn enc_avx_vcvttss2si1142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x00", "vcvttss2si rax, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si1143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rbx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x18", "vcvttss2si rbx, DWORD [rax]");
}



#[test]
fn enc_avx_vcvttss2si1144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x50, 0x10", "vcvttss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vcvttss2si1145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vcvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xFA, 0x2C, 0x10", "vcvttss2si rdx, DWORD [rax]");
}



#[test]
fn enc_avx_vdivsd1146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5E, 0xD8", "vdivsd xmm11, xmm11, xmm0");
}



#[test]
fn enc_avx_vdivsd1147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x5E, 0xDC", "vdivsd xmm11, xmm0, xmm4");
}



#[test]
fn enc_avx_vdivsd1148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0x5E, 0xC3", "vdivsd xmm0, xmm15, xmm11");
}



#[test]
fn enc_avx_vdivsd1149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm3, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x73, 0x5E, 0xDC", "vdivsd xmm3, xmm1, xmm12");
}



#[test]
fn enc_avx_vdivsd1150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x5E, 0xC4", "vdivsd xmm0, xmm3, xmm12");
}



#[test]
fn enc_avx_vdivsd1151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm0, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5E, 0x40, 0x10", "vdivsd xmm0, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivsd1152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm4, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5E, 0x24, 0x42", "vdivsd xmm4, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd1153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x5E, 0x1C, 0x42", "vdivsd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivsd1154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5E, 0x18", "vdivsd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vdivsd1155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivsd xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5E, 0x14, 0x42", "vdivsd xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm3, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x5E, 0xDC", "vdivss xmm3, xmm1, xmm4");
}



#[test]
fn enc_avx_vdivss1157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm4, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6A, 0x5E, 0xE4", "vdivss xmm4, xmm2, xmm12");
}



#[test]
fn enc_avx_vdivss1158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm11, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x72, 0x5E, 0xDB", "vdivss xmm11, xmm1, xmm11");
}



#[test]
fn enc_avx_vdivss1159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm12, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5E, 0xE3", "vdivss xmm12, xmm2, xmm3");
}



#[test]
fn enc_avx_vdivss1160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm2, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x5E, 0xD2", "vdivss xmm2, xmm4, xmm2");
}



#[test]
fn enc_avx_vdivss1161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm1, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5E, 0x0C, 0x42", "vdivss xmm1, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm4, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5E, 0x24, 0x42", "vdivss xmm4, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm0, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5E, 0x40, 0x10", "vdivss xmm0, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vdivss1164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm3, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5E, 0x1C, 0x42", "vdivss xmm3, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vdivss1165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdivss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5E, 0x18", "vdivss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vdppd1166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm11, xmm1, xmm12, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x71, 0x41, 0xDC, 0x05", "vdppd xmm11, xmm1, xmm12, 5");
}



#[test]
fn enc_avx_vdppd1167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm3, xmm1, xmm15, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x71, 0x41, 0xDF, 0x37", "vdppd xmm3, xmm1, xmm15, 55");
}



#[test]
fn enc_avx_vdppd1168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm2, xmm12, xmm3, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x41, 0xD3, 0x48", "vdppd xmm2, xmm12, xmm3, 72");
}



#[test]
fn enc_avx_vdppd1169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm15, xmm1, xmm15, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x71, 0x41, 0xFF, 0x75", "vdppd xmm15, xmm1, xmm15, 117");
}



#[test]
fn enc_avx_vdppd1170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vdppd xmm2, xmm15, xmm3, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x41, 0xD3, 0x4D", "vdppd xmm2, xmm15, xmm3, 77");
}



#[test]
fn enc_avx_vextractf1281171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm3, ymm0, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xC3, 0x22", "vextractf128 xmm3, ymm0, 34");
}



#[test]
fn enc_avx_vextractf1281172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm15, ymm11, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x7D, 0x19, 0xDF, 0x63", "vextractf128 xmm15, ymm11, 99");
}



#[test]
fn enc_avx_vextractf1281173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 OWORD [rax * 2 + rdx], ymm2, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0x14, 0x42, 0x63", "vextractf128 OWORD [rax * 2 + rdx], ymm2, 99");
}



#[test]
fn enc_avx_vextractf1281174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm4, ymm1, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x19, 0xCC, 0x7C", "vextractf128 xmm4, ymm1, 124");
}



#[test]
fn enc_avx_vextractf1281175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractf128 xmm0, ymm12, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x19, 0xE0, 0x1A", "vextractf128 xmm0, ymm12, 26");
}



#[test]
fn enc_avx_vextractps1176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm12, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0x20, 0x25", "vextractps DWORD [rax], xmm12, 37");
}



#[test]
fn enc_avx_vextractps1177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm15, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0x38, 0x0D", "vextractps DWORD [rax], xmm15, 13");
}



#[test]
fn enc_avx_vextractps1178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm11, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x17, 0x18, 0x72", "vextractps DWORD [rax], xmm11, 114");
}



#[test]
fn enc_avx_vextractps1179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps DWORD [rax], xmm0, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0x00, 0x74", "vextractps DWORD [rax], xmm0, 116");
}



#[test]
fn enc_avx_vextractps1180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextractps eax, xmm3, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x17, 0xD8, 0x3A", "vextractps eax, xmm3, 58");
}



#[test]
fn enc_avx_vinsertf1281181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm15, ymm3, xmm15, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x65, 0x18, 0xFF, 0x26", "vinsertf128 ymm15, ymm3, xmm15, 38");
}



#[test]
fn enc_avx_vinsertf1281182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm12, ymm3, xmm3, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x65, 0x18, 0xE3, 0x41", "vinsertf128 ymm12, ymm3, xmm3, 65");
}



#[test]
fn enc_avx_vinsertf1281183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm1, ymm1, xmm3, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x75, 0x18, 0xCB, 0x29", "vinsertf128 ymm1, ymm1, xmm3, 41");
}



#[test]
fn enc_avx_vinsertf1281184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm3, ymm4, xmm4, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x5D, 0x18, 0xDC, 0x4F", "vinsertf128 ymm3, ymm4, xmm4, 79");
}



#[test]
fn enc_avx_vinsertf1281185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertf128 ymm1, ymm1, xmm11, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x75, 0x18, 0xCB, 0x28", "vinsertf128 ymm1, ymm1, xmm11, 40");
}



#[test]
fn enc_avx_vinsertps1186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm4, xmm11, xmm3, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x21, 0xE3, 0x7C", "vinsertps xmm4, xmm11, xmm3, 124");
}



#[test]
fn enc_avx_vinsertps1187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm12, xmm0, xmm3, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x21, 0xE3, 0x5D", "vinsertps xmm12, xmm0, xmm3, 93");
}



#[test]
fn enc_avx_vinsertps1188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm11, xmm3, xmm2, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x21, 0xDA, 0x46", "vinsertps xmm11, xmm3, xmm2, 70");
}



#[test]
fn enc_avx_vinsertps1189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm3, xmm0, xmm12, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x79, 0x21, 0xDC, 0x52", "vinsertps xmm3, xmm0, xmm12, 82");
}



#[test]
fn enc_avx_vinsertps1190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm15, xmm2, xmm11, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x69, 0x21, 0xFB, 0x44", "vinsertps xmm15, xmm2, xmm11, 68");
}



#[test]
fn enc_avx_vinsertps1191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm2, xmm15, DWORD [rax + 16], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x21, 0x50, 0x10, 0x1F", "vinsertps xmm2, xmm15, DWORD [rax + 16], 31");
}



#[test]
fn enc_avx_vinsertps1192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm12, xmm2, DWORD [rax], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x21, 0x20, 0x76", "vinsertps xmm12, xmm2, DWORD [rax], 118");
}



#[test]
fn enc_avx_vinsertps1193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm0, xmm11, DWORD [rax + 16], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x21, 0x40, 0x10, 0x6A", "vinsertps xmm0, xmm11, DWORD [rax + 16], 106");
}



#[test]
fn enc_avx_vinsertps1194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm15, xmm11, DWORD [rax * 2 + rdx], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x21, 0x3C, 0x42, 0x11", "vinsertps xmm15, xmm11, DWORD [rax * 2 + rdx], 17");
}



#[test]
fn enc_avx_vinsertps1195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinsertps xmm4, xmm12, DWORD [rax + 16], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x21, 0x60, 0x10, 0x61", "vinsertps xmm4, xmm12, DWORD [rax + 16], 97");
}



#[test]
fn enc_avx_vldmxcsr1196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x50, 0x10", "vldmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_avx_vldmxcsr1197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x10", "vldmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vldmxcsr1198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x14, 0x42", "vldmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm12, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7F, 0xF0, 0x24, 0x42", "vldqqu ymm12, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm1, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x0C, 0x42", "vldqqu ymm1, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vldqqu1201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm2, YWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x50, 0x10", "vldqqu ymm2, YWORD [rax + 16]");
}



#[test]
fn enc_avx_vldqqu1202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vldqqu ymm0, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFF, 0xF0, 0x00", "vldqqu ymm0, YWORD [rax]");
}



#[test]
fn enc_avx_vmaskmovdqu1203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xF7, 0xD4", "vmaskmovdqu xmm2, xmm4");
}



#[test]
fn enc_avx_vmaskmovdqu1204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0xF7, 0xFC", "vmaskmovdqu xmm15, xmm12");
}



#[test]
fn enc_avx_vmaskmovdqu1205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xF7, 0xCF", "vmaskmovdqu xmm1, xmm15");
}



#[test]
fn enc_avx_vmaskmovdqu1206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaskmovdqu xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xF7, 0xD7", "vmaskmovdqu xmm2, xmm15");
}



#[test]
fn enc_avx_vmaxsd1207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm0, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x5F, 0xC7", "vmaxsd xmm0, xmm12, xmm15");
}



#[test]
fn enc_avx_vmaxsd1208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm15, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5F, 0xFC", "vmaxsd xmm15, xmm4, xmm4");
}



#[test]
fn enc_avx_vmaxsd1209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm2, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x5F, 0xD3", "vmaxsd xmm2, xmm11, xmm11");
}



#[test]
fn enc_avx_vmaxsd1210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm4, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0x5F, 0xE3", "vmaxsd xmm4, xmm15, xmm11");
}



#[test]
fn enc_avx_vmaxsd1211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm1, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x03, 0x5F, 0xCF", "vmaxsd xmm1, xmm15, xmm15");
}



#[test]
fn enc_avx_vmaxsd1212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5F, 0x0C, 0x42", "vmaxsd xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxsd1213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm4, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5F, 0x20", "vmaxsd xmm4, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm0, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5F, 0x00", "vmaxsd xmm0, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5F, 0x18", "vmaxsd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmaxsd1216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxsd xmm0, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE3, 0x5F, 0x40, 0x10", "vmaxsd xmm0, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss1217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm12, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0x5F, 0xE3", "vmaxss xmm12, xmm0, xmm11");
}



#[test]
fn enc_avx_vmaxss1218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm12, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x72, 0x5F, 0xE7", "vmaxss xmm12, xmm1, xmm15");
}



#[test]
fn enc_avx_vmaxss1219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm11, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x02, 0x5F, 0xDF", "vmaxss xmm11, xmm15, xmm15");
}



#[test]
fn enc_avx_vmaxss1220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm15, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5F, 0xFB", "vmaxss xmm15, xmm2, xmm3");
}



#[test]
fn enc_avx_vmaxss1221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm4, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5F, 0xE3", "vmaxss xmm4, xmm12, xmm3");
}



#[test]
fn enc_avx_vmaxss1222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm2, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5F, 0x14, 0x42", "vmaxss xmm2, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm12, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x5F, 0x24, 0x42", "vmaxss xmm12, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm12, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5F, 0x24, 0x42", "vmaxss xmm12, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmaxss1225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm4, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5F, 0x60, 0x10", "vmaxss xmm4, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmaxss1226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmaxss xmm1, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5F, 0x48, 0x10", "vmaxss xmm1, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd1227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm1, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5D, 0xC8", "vminsd xmm1, xmm15, xmm0");
}



#[test]
fn enc_avx_vminsd1228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm12, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7B, 0x5D, 0xE7", "vminsd xmm12, xmm0, xmm15");
}



#[test]
fn enc_avx_vminsd1229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm12, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x5D, 0xE3", "vminsd xmm12, xmm11, xmm3");
}



#[test]
fn enc_avx_vminsd1230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm1, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x5D, 0xCC", "vminsd xmm1, xmm1, xmm4");
}



#[test]
fn enc_avx_vminsd1231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm2, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1B, 0x5D, 0xD7", "vminsd xmm2, xmm12, xmm15");
}



#[test]
fn enc_avx_vminsd1232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5D, 0x58, 0x10", "vminsd xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd1233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x5D, 0x04, 0x42", "vminsd xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminsd1234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x5D, 0x40, 0x10", "vminsd xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminsd1235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm4, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5D, 0x20", "vminsd xmm4, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vminsd1236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminsd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5D, 0x58, 0x10", "vminsd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss1237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm0, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x5D, 0xC0", "vminss xmm0, xmm12, xmm0");
}



#[test]
fn enc_avx_vminss1238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5D, 0xD9", "vminss xmm11, xmm15, xmm1");
}



#[test]
fn enc_avx_vminss1239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x5D, 0xDC", "vminss xmm11, xmm4, xmm4");
}



#[test]
fn enc_avx_vminss1240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm3, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x5D, 0xDA", "vminss xmm3, xmm3, xmm2");
}



#[test]
fn enc_avx_vminss1241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x5D, 0xDB", "vminss xmm3, xmm12, xmm11");
}



#[test]
fn enc_avx_vminss1242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x5D, 0x58, 0x10", "vminss xmm11, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss1243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x5D, 0x3C, 0x42", "vminss xmm15, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vminss1244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm11, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5D, 0x18", "vminss xmm11, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vminss1245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x5D, 0x78, 0x10", "vminss xmm15, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vminss1246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vminss xmm15, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x5D, 0x78, 0x10", "vminss xmm15, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovapd1247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x29, 0x20", "vmovapd OWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovapd1248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x28, 0xD8", "vmovapd xmm11, xmm0");
}



#[test]
fn enc_avx_vmovapd1249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd OWORD [rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x29, 0x22", "vmovapd OWORD [rdx], xmm4");
}



#[test]
fn enc_avx_vmovapd1250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x28, 0xC8", "vmovapd xmm1, xmm0");
}



#[test]
fn enc_avx_vmovapd1251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x29, 0x1C, 0x42", "vmovapd OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_avx_vmovapd1252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd YWORD [rax * 2 + rdx], ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x29, 0x24, 0x42", "vmovapd YWORD [rax * 2 + rdx], ymm4");
}



#[test]
fn enc_avx_vmovapd1253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm4, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x28, 0xE3", "vmovapd ymm4, ymm11");
}



#[test]
fn enc_avx_vmovapd1254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm4, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x28, 0xE7", "vmovapd ymm4, ymm15");
}



#[test]
fn enc_avx_vmovapd1255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x28, 0xD1", "vmovapd ymm2, ymm1");
}



#[test]
fn enc_avx_vmovapd1256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovapd ymm12, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x28, 0xE2", "vmovapd ymm12, ymm2");
}



#[test]
fn enc_avx_vmovaps1257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x28, 0xCC", "vmovaps xmm1, xmm12");
}



#[test]
fn enc_avx_vmovaps1258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x28, 0xD1", "vmovaps xmm2, xmm1");
}



#[test]
fn enc_avx_vmovaps1259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x28, 0xD8", "vmovaps xmm11, xmm0");
}



#[test]
fn enc_avx_vmovaps1260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x28, 0xE4", "vmovaps xmm12, xmm12");
}



#[test]
fn enc_avx_vmovaps1261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x28, 0xC4", "vmovaps xmm0, xmm12");
}



#[test]
fn enc_avx_vmovaps1262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm12, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x28, 0xE3", "vmovaps ymm12, ymm3");
}



#[test]
fn enc_avx_vmovaps1263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm11, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7C, 0x28, 0xDB", "vmovaps ymm11, ymm11");
}



#[test]
fn enc_avx_vmovaps1264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm1, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x28, 0xC9", "vmovaps ymm1, ymm1");
}



#[test]
fn enc_avx_vmovaps1265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps ymm2, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x28, 0xD4", "vmovaps ymm2, ymm4");
}



#[test]
fn enc_avx_vmovaps1266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovaps YWORD [rax * 2 + rdx], ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x29, 0x04, 0x42", "vmovaps YWORD [rax * 2 + rdx], ymm0");
}



#[test]
fn enc_avx_vmovd1267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xD8", "vmovd eax, xmm3");
}



#[test]
fn enc_avx_vmovd1268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xE0", "vmovd eax, xmm4");
}



#[test]
fn enc_avx_vmovd1269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd eax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7E, 0xD0", "vmovd eax, xmm2");
}



#[test]
fn enc_avx_vmovd1270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7E, 0x38", "vmovd DWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovd1271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm3, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0xD8", "vmovd xmm3, eax");
}



#[test]
fn enc_avx_vmovd1272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm2, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0xD0", "vmovd xmm2, eax");
}



#[test]
fn enc_avx_vmovd1273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0x10", "vmovd xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vmovd1274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6E, 0x18", "vmovd xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vmovddup1275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x24, 0x42", "vmovddup xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x1C, 0x42", "vmovddup xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x12, 0x1C, 0x42", "vmovddup xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x0C, 0x42", "vmovddup xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovddup1279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovddup xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x12, 0x60, 0x10", "vmovddup xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovdqa1280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x6F, 0xD9", "vmovdqa xmm3, xmm1");
}



#[test]
fn enc_avx_vmovdqa1281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x7F, 0x3C, 0x42", "vmovdqa OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovdqa1282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x6F, 0xE3", "vmovdqa xmm12, xmm3");
}



#[test]
fn enc_avx_vmovdqa1283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa OWORD [rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x7F, 0x0A", "vmovdqa OWORD [rdx], xmm1");
}



#[test]
fn enc_avx_vmovdqa1284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm15, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xFA", "vmovdqa ymm15, ymm2");
}



#[test]
fn enc_avx_vmovdqa1285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa ymm11, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xDA", "vmovdqa ymm11, ymm2");
}



#[test]
fn enc_avx_vmovdqa1286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa YWORD [rdx], ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x7F, 0x0A", "vmovdqa YWORD [rdx], ymm1");
}



#[test]
fn enc_avx_vmovdqa1287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa YWORD [rax * 2 + rdx], ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x7F, 0x04, 0x42", "vmovdqa YWORD [rax * 2 + rdx], ymm0");
}



#[test]
fn enc_avx_vmovdqa1288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqa YWORD [rdx], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x7F, 0x1A", "vmovdqa YWORD [rdx], ymm3");
}



#[test]
fn enc_avx_vmovdqu1289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7F, 0x14, 0x42", "vmovdqu OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_avx_vmovdqu1290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7F, 0x1C, 0x42", "vmovdqu OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovdqu1291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x6F, 0xD7", "vmovdqu xmm2, xmm15");
}



#[test]
fn enc_avx_vmovdqu1292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x6F, 0xE3", "vmovdqu xmm4, xmm3");
}



#[test]
fn enc_avx_vmovdqu1293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x6F, 0xE1", "vmovdqu xmm4, xmm1");
}



#[test]
fn enc_avx_vmovdqu1294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm15, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xFB", "vmovdqu ymm15, ymm3");
}



#[test]
fn enc_avx_vmovdqu1295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu YWORD [rax * 2 + rdx], ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x14, 0x42", "vmovdqu YWORD [rax * 2 + rdx], ymm2");
}



#[test]
fn enc_avx_vmovdqu1296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xDA", "vmovdqu ymm3, ymm2");
}



#[test]
fn enc_avx_vmovdqu1297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu YWORD [rax], ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x7F, 0x20", "vmovdqu YWORD [rax], ymm12");
}



#[test]
fn enc_avx_vmovdqu1298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovdqu ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xD1", "vmovdqu ymm2, ymm1");
}



#[test]
fn enc_avx_vmovhlps1299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm3, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x12, 0xDB", "vmovhlps xmm3, xmm0, xmm3");
}



#[test]
fn enc_avx_vmovhlps1300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x12, 0xF8", "vmovhlps xmm15, xmm0, xmm0");
}



#[test]
fn enc_avx_vmovhlps1301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm15, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x68, 0x12, 0xFB", "vmovhlps xmm15, xmm2, xmm3");
}



#[test]
fn enc_avx_vmovhlps1302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm4, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA0, 0x12, 0xE1", "vmovhlps xmm4, xmm11, xmm1");
}



#[test]
fn enc_avx_vmovhlps1303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhlps xmm2, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF0, 0x12, 0xD0", "vmovhlps xmm2, xmm1, xmm0");
}



#[test]
fn enc_avx_vmovhpd1304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0x16, 0x24, 0x42", "vmovhpd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm2, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0x16, 0x50, 0x10", "vmovhpd xmm2, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhpd1306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm12, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x16, 0x20", "vmovhpd xmm12, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhpd1307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm12, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0x16, 0x20", "vmovhpd xmm12, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhpd1308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd xmm2, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE9, 0x16, 0x14, 0x42", "vmovhpd xmm2, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhpd1309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x1C, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_avx_vmovhpd1310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x0C, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_avx_vmovhpd1311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x50, 0x10", "vmovhpd QWORD [rax + 16], xmm2");
}



#[test]
fn enc_avx_vmovhpd1312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x58, 0x10", "vmovhpd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovhpd1313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhpd QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x17, 0x24, 0x42", "vmovhpd QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovhps1314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x58, 0x10", "vmovhps QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovhps1315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x3C, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovhps1316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x38", "vmovhps QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovhps1317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x17, 0x24, 0x42", "vmovhps QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_avx_vmovhps1318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps QWORD [rax + 16], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x17, 0x40, 0x10", "vmovhps QWORD [rax + 16], xmm0");
}



#[test]
fn enc_avx_vmovhps1319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x80, 0x16, 0x0C, 0x42", "vmovhps xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovhps1320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm11, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x60, 0x16, 0x18", "vmovhps xmm11, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmovhps1321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x18, 0x16, 0x58, 0x10", "vmovhps xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm1, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x98, 0x16, 0x48, 0x10", "vmovhps xmm1, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovhps1323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovhps xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x16, 0x18", "vmovhps xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlhps1324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x60, 0x16, 0xCC", "vmovlhps xmm1, xmm3, xmm12");
}



#[test]
fn enc_avx_vmovlhps1325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm15, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x70, 0x16, 0xF9", "vmovlhps xmm15, xmm1, xmm1");
}



#[test]
fn enc_avx_vmovlhps1326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm0, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x80, 0x16, 0xC0", "vmovlhps xmm0, xmm15, xmm0");
}



#[test]
fn enc_avx_vmovlhps1327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x16, 0xE2", "vmovlhps xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vmovlhps1328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlhps xmm4, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE8, 0x16, 0xE4", "vmovlhps xmm4, xmm2, xmm4");
}



#[test]
fn enc_avx_vmovlpd1329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm12, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x12, 0x20", "vmovlpd xmm12, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm2, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0x12, 0x10", "vmovlpd xmm2, xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm3, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF1, 0x12, 0x1C, 0x42", "vmovlpd xmm3, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlpd1332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm11, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0x12, 0x18", "vmovlpd xmm11, xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd xmm4, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0x12, 0x20", "vmovlpd xmm4, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlpd1334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x00", "vmovlpd QWORD [rax], xmm0");
}



#[test]
fn enc_avx_vmovlpd1335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x13, 0x3C, 0x42", "vmovlpd QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovlpd1336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x48, 0x10", "vmovlpd QWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovlpd1337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x13, 0x58, 0x10", "vmovlpd QWORD [rax + 16], xmm11");
}



#[test]
fn enc_avx_vmovlpd1338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlpd QWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x13, 0x10", "vmovlpd QWORD [rax], xmm2");
}



#[test]
fn enc_avx_vmovlps1339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x80, 0x12, 0x10", "vmovlps xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps1340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm4, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x12, 0x60, 0x10", "vmovlps xmm4, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovlps1341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE8, 0x12, 0x08", "vmovlps xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps1342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm2, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xD8, 0x12, 0x10", "vmovlps xmm2, xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vmovlps1343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x60, 0x12, 0x24, 0x42", "vmovlps xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovlps1344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x13, 0x1C, 0x42", "vmovlps QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_avx_vmovlps1345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x14, 0x42", "vmovlps QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_avx_vmovlps1346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x60, 0x10", "vmovlps QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovlps1347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovlps QWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x13, 0x50, 0x10", "vmovlps QWORD [rax + 16], xmm2");
}



#[test]
fn enc_avx_vmovntqq1348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax + 16], ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0xE7, 0x78, 0x10", "vmovntqq YWORD [rax + 16], ymm15");
}



#[test]
fn enc_avx_vmovntqq1349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax * 2 + rdx], ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x1C, 0x42", "vmovntqq YWORD [rax * 2 + rdx], ymm3");
}



#[test]
fn enc_avx_vmovntqq1350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax], ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x00", "vmovntqq YWORD [rax], ymm0");
}



#[test]
fn enc_avx_vmovntqq1351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax + 16], ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x48, 0x10", "vmovntqq YWORD [rax + 16], ymm1");
}



#[test]
fn enc_avx_vmovntqq1352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovntqq YWORD [rax * 2 + rdx], ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0xE7, 0x14, 0x42", "vmovntqq YWORD [rax * 2 + rdx], ymm2");
}



#[test]
fn enc_avx_vmovq1353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x08", "vmovq xmm1, [rax]");
}



#[test]
fn enc_avx_vmovq1354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm11, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xF9, 0x6E, 0xD8", "vmovq xmm11, rax");
}



#[test]
fn enc_avx_vmovq1355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x6E, 0xE0", "vmovq xmm4, rax");
}



#[test]
fn enc_avx_vmovq1356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x10", "vmovq xmm2, [rax]");
}



#[test]
fn enc_avx_vmovq1357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x20", "vmovq xmm4, [rax]");
}



#[test]
fn enc_avx_vmovq1358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xE2", "vmovq xmm12, xmm2");
}



#[test]
fn enc_avx_vmovq1359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xE0", "vmovq xmm4, xmm0");
}



#[test]
fn enc_avx_vmovq1360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0xE0", "vmovq xmm12, xmm0");
}



#[test]
fn enc_avx_vmovq1361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xD7", "vmovq xmm2, xmm15");
}



#[test]
fn enc_avx_vmovq1362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xD9", "vmovq xmm3, xmm1");
}



#[test]
fn enc_avx_vmovq1363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x04, 0x42", "vmovq QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_avx_vmovq1364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x60, 0x10", "vmovq QWORD [rax + 16], xmm4");
}



#[test]
fn enc_avx_vmovq1365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x38", "vmovq QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovq1366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x50, 0x10", "vmovq QWORD [rax + 16], xmm2");
}



#[test]
fn enc_avx_vmovq1367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x20", "vmovq QWORD [rax], xmm12");
}



#[test]
fn enc_avx_vmovq1368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xD6, 0x08", "vmovq [rax], xmm1");
}



#[test]
fn enc_avx_vmovq1369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x61, 0xF9, 0x7E, 0xE0", "vmovq rax, xmm12");
}



#[test]
fn enc_avx_vmovq1370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xD0", "vmovq rax, xmm2");
}



#[test]
fn enc_avx_vmovq1371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE1, 0xF9, 0x7E, 0xC8", "vmovq rax, xmm1");
}



#[test]
fn enc_avx_vmovq1372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0xD6, 0x20", "vmovq [rax], xmm12");
}



#[test]
fn enc_avx_vmovq1373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xCA", "vmovq xmm1, xmm2");
}



#[test]
fn enc_avx_vmovq1374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xDC", "vmovq xmm3, xmm12");
}



#[test]
fn enc_avx_vmovq1375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0xDB", "vmovq xmm3, xmm3");
}



#[test]
fn enc_avx_vmovq1376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7A, 0x7E, 0xCB", "vmovq xmm1, xmm11");
}



#[test]
fn enc_avx_vmovq1377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0x7E, 0xE7", "vmovq xmm12, xmm15");
}



#[test]
fn enc_avx_vmovq1378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x00", "vmovq xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmovq1379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x48, 0x10", "vmovq xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x50, 0x10", "vmovq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x7E, 0x60, 0x10", "vmovq xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovq1382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovq xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x7E, 0x20", "vmovq xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vmovqqa1383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm3, YWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0x1C, 0x42", "vmovqqa ymm3, YWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovqqa1384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xCA", "vmovqqa ymm1, ymm2");
}



#[test]
fn enc_avx_vmovqqa1385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm2, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xD7", "vmovqqa ymm2, ymm15");
}



#[test]
fn enc_avx_vmovqqa1386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm3, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xDC", "vmovqqa ymm3, ymm12");
}



#[test]
fn enc_avx_vmovqqa1387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm11, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x6F, 0xDC", "vmovqqa ymm11, ymm4");
}



#[test]
fn enc_avx_vmovqqa1388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm3, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xDC", "vmovqqa ymm3, ymm4");
}



#[test]
fn enc_avx_vmovqqa1389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm3, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x6F, 0xD8", "vmovqqa ymm3, ymm0");
}



#[test]
fn enc_avx_vmovqqa1390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa YWORD [rax], ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7D, 0x7F, 0x18", "vmovqqa YWORD [rax], ymm11");
}



#[test]
fn enc_avx_vmovqqa1391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm4, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xE4", "vmovqqa ymm4, ymm12");
}



#[test]
fn enc_avx_vmovqqa1392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqa ymm1, ymm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7D, 0x6F, 0xCB", "vmovqqa ymm1, ymm11");
}



#[test]
fn enc_avx_vmovqqu1393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xCA", "vmovqqu ymm1, ymm2");
}



#[test]
fn enc_avx_vmovqqu1394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm15, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xF8", "vmovqqu ymm15, ymm0");
}



#[test]
fn enc_avx_vmovqqu1395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xC9", "vmovqqu ymm1, ymm1");
}



#[test]
fn enc_avx_vmovqqu1396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0x08", "vmovqqu ymm1, YWORD [rax]");
}



#[test]
fn enc_avx_vmovqqu1397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm1, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7E, 0x6F, 0xCF", "vmovqqu ymm1, ymm15");
}



#[test]
fn enc_avx_vmovqqu1398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu YWORD [rdx], ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x7F, 0x12", "vmovqqu YWORD [rdx], ymm2");
}



#[test]
fn enc_avx_vmovqqu1399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm15, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x6F, 0xF8", "vmovqqu ymm15, ymm0");
}



#[test]
fn enc_avx_vmovqqu1400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu YWORD [rax], ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7E, 0x7F, 0x20", "vmovqqu YWORD [rax], ymm12");
}



#[test]
fn enc_avx_vmovqqu1401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm11, ymm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7E, 0x6F, 0xDF", "vmovqqu ymm11, ymm15");
}



#[test]
fn enc_avx_vmovqqu1402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovqqu ymm3, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFE, 0x6F, 0xD8", "vmovqqu ymm3, ymm0");
}



#[test]
fn enc_avx_vmovsd1403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0x10, 0xE4", "vmovsd xmm12, xmm1, xmm12");
}



#[test]
fn enc_avx_vmovsd1404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm4, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x10, 0xE3", "vmovsd xmm4, xmm1, xmm3");
}



#[test]
fn enc_avx_vmovsd1405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x63, 0x10, 0xDC", "vmovsd xmm11, xmm3, xmm12");
}



#[test]
fn enc_avx_vmovsd1406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm15, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x10, 0xF8", "vmovsd xmm15, xmm4, xmm0");
}



#[test]
fn enc_avx_vmovsd1407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x63, 0x10, 0xE7", "vmovsd xmm12, xmm3, xmm15");
}



#[test]
fn enc_avx_vmovsd1408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x04, 0x42", "vmovsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x40, 0x10", "vmovsd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd1410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x50, 0x10", "vmovsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd1411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x10, 0x58, 0x10", "vmovsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovsd1412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x10, 0x14, 0x42", "vmovsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovsd1413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x38", "vmovsd QWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovsd1414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x58, 0x10", "vmovsd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_avx_vmovsd1415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7B, 0x11, 0x3C, 0x42", "vmovsd QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovsd1416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x11, 0x48, 0x10", "vmovsd QWORD [rax + 16], xmm1");
}



#[test]
fn enc_avx_vmovsd1417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm3, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x10, 0xDB", "vmovsd xmm3, xmm11, xmm11");
}



#[test]
fn enc_avx_vmovsd1418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x10, 0xE4", "vmovsd xmm12, xmm4, xmm4");
}



#[test]
fn enc_avx_vmovsd1419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm2, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5B, 0x10, 0xD4", "vmovsd xmm2, xmm4, xmm12");
}



#[test]
fn enc_avx_vmovsd1420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm1, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x10, 0xCB", "vmovsd xmm1, xmm4, xmm3");
}



#[test]
fn enc_avx_vmovsd1421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovsd xmm12, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x5B, 0x10, 0xE4", "vmovsd xmm12, xmm4, xmm12");
}



#[test]
fn enc_avx_vmovss1422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x10, 0xD8", "vmovss xmm3, xmm15, xmm0");
}



#[test]
fn enc_avx_vmovss1423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm11, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x10, 0xD9", "vmovss xmm11, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovss1424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm15, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x72, 0x10, 0xFC", "vmovss xmm15, xmm1, xmm12");
}



#[test]
fn enc_avx_vmovss1425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm2, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x10, 0xD1", "vmovss xmm2, xmm4, xmm1");
}



#[test]
fn enc_avx_vmovss1426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x10, 0xE3", "vmovss xmm12, xmm15, xmm3");
}



#[test]
fn enc_avx_vmovss1427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x18", "vmovss DWORD [rax], xmm3");
}



#[test]
fn enc_avx_vmovss1428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x11, 0x38", "vmovss DWORD [rax], xmm15");
}



#[test]
fn enc_avx_vmovss1429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x11, 0x20", "vmovss DWORD [rax], xmm4");
}



#[test]
fn enc_avx_vmovss1430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss DWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x11, 0x3C, 0x42", "vmovss DWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovss1431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x60, 0x10", "vmovss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovss1432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x0C, 0x42", "vmovss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovss1433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x10, 0x24, 0x42", "vmovss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmovss1434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x10, 0x58, 0x10", "vmovss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmovss1435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x10, 0xD2", "vmovss xmm2, xmm12, xmm2");
}



#[test]
fn enc_avx_vmovss1436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x10, 0xC9", "vmovss xmm1, xmm12, xmm1");
}



#[test]
fn enc_avx_vmovss1437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm1, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x10, 0xCF", "vmovss xmm1, xmm12, xmm15");
}



#[test]
fn enc_avx_vmovss1438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm2, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x10, 0xD4", "vmovss xmm2, xmm1, xmm4");
}



#[test]
fn enc_avx_vmovss1439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovss xmm2, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x1A, 0x10, 0xD3", "vmovss xmm2, xmm12, xmm11");
}



#[test]
fn enc_avx_vmovupd1440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xE3", "vmovupd xmm4, xmm3");
}



#[test]
fn enc_avx_vmovupd1441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x79, 0x10, 0xFB", "vmovupd xmm15, xmm11");
}



#[test]
fn enc_avx_vmovupd1442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x10, 0xDC", "vmovupd xmm11, xmm4");
}



#[test]
fn enc_avx_vmovupd1443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x10, 0xE2", "vmovupd xmm12, xmm2");
}



#[test]
fn enc_avx_vmovupd1444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x10, 0xC9", "vmovupd xmm1, xmm1");
}



#[test]
fn enc_avx_vmovupd1445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xCA", "vmovupd ymm1, ymm2");
}



#[test]
fn enc_avx_vmovupd1446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm11, ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7D, 0x10, 0xDC", "vmovupd ymm11, ymm12");
}



#[test]
fn enc_avx_vmovupd1447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm3, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xDA", "vmovupd ymm3, ymm2");
}



#[test]
fn enc_avx_vmovupd1448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovupd ymm3, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFD, 0x10, 0xD8", "vmovupd ymm3, ymm0");
}



#[test]
fn enc_avx_vmovups1449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x11, 0x3C, 0x42", "vmovups OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_avx_vmovups1450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups OWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x11, 0x24, 0x42", "vmovups OWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_avx_vmovups1451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x78, 0x10, 0xE4", "vmovups xmm12, xmm12");
}



#[test]
fn enc_avx_vmovups1452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x10, 0xC8", "vmovups xmm1, xmm0");
}



#[test]
fn enc_avx_vmovups1453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm1, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x10, 0xCA", "vmovups ymm1, ymm2");
}



#[test]
fn enc_avx_vmovups1454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm11, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x10, 0xDC", "vmovups ymm11, ymm4");
}



#[test]
fn enc_avx_vmovups1455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups ymm2, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x10, 0xD3", "vmovups ymm2, ymm3");
}



#[test]
fn enc_avx_vmovups1456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups YWORD [rax * 2 + rdx], ymm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7C, 0x11, 0x24, 0x42", "vmovups YWORD [rax * 2 + rdx], ymm12");
}



#[test]
fn enc_avx_vmovups1457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmovups YWORD [rax * 2 + rdx], ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x11, 0x0C, 0x42", "vmovups YWORD [rax * 2 + rdx], ymm1");
}



#[test]
fn enc_avx_vmulsd1458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm12, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x23, 0x59, 0xE0", "vmulsd xmm12, xmm11, xmm0");
}



#[test]
fn enc_avx_vmulsd1459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x6B, 0x59, 0xDF", "vmulsd xmm3, xmm2, xmm15");
}



#[test]
fn enc_avx_vmulsd1460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x59, 0xC9", "vmulsd xmm1, xmm15, xmm1");
}



#[test]
fn enc_avx_vmulsd1461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm0, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF3, 0x59, 0xC2", "vmulsd xmm0, xmm1, xmm2");
}



#[test]
fn enc_avx_vmulsd1462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm11, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x59, 0xDA", "vmulsd xmm11, xmm3, xmm2");
}



#[test]
fn enc_avx_vmulsd1463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm1, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x59, 0x08", "vmulsd xmm1, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd1464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1B, 0x59, 0x1C, 0x42", "vmulsd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulsd1465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x59, 0x10", "vmulsd xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd1466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm4, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEB, 0x59, 0x20", "vmulsd xmm4, xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vmulsd1467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulsd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x59, 0x18", "vmulsd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vmulss1468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm15, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x59, 0xFC", "vmulss xmm15, xmm0, xmm4");
}



#[test]
fn enc_avx_vmulss1469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm12, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x1A, 0x59, 0xE2", "vmulss xmm12, xmm12, xmm2");
}



#[test]
fn enc_avx_vmulss1470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm2, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x59, 0xD1", "vmulss xmm2, xmm3, xmm1");
}



#[test]
fn enc_avx_vmulss1471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm3, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x5A, 0x59, 0xDB", "vmulss xmm3, xmm4, xmm11");
}



#[test]
fn enc_avx_vmulss1472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x72, 0x59, 0xE7", "vmulss xmm4, xmm1, xmm15");
}



#[test]
fn enc_avx_vmulss1473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x59, 0x38", "vmulss xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vmulss1474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm12, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x02, 0x59, 0x60, 0x10", "vmulss xmm12, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulss1475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x59, 0x60, 0x10", "vmulss xmm4, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vmulss1476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm4, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x59, 0x24, 0x42", "vmulss xmm4, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vmulss1477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmulss xmm3, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x59, 0x1C, 0x42", "vmulss xmm3, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm3, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x69, 0x44, 0xDC, 0x11", "vpclmulhqhqdq xmm3, xmm2, xmm12");
}



#[test]
fn enc_avx_vpclmulhqhqdq1479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm12, xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x44, 0x22, 0x11", "vpclmulhqhqdq xmm12, xmm3, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm0, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0x04, 0x42, 0x11", "vpclmulhqhqdq xmm0, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpclmulhqhqdq1481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm0, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x44, 0xC2, 0x11", "vpclmulhqhqdq xmm0, xmm1, xmm2");
}



#[test]
fn enc_avx_vpclmulhqhqdq1482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqhqdq xmm2, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x19, 0x44, 0xD4, 0x11", "vpclmulhqhqdq xmm2, xmm12, xmm12");
}



#[test]
fn enc_avx_vpclmulhqlqdq1483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm2, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0xD4, 0x01", "vpclmulhqlqdq xmm2, xmm12, xmm4");
}



#[test]
fn enc_avx_vpclmulhqlqdq1484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm0, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x61, 0x44, 0xC4, 0x01", "vpclmulhqlqdq xmm0, xmm3, xmm12");
}



#[test]
fn enc_avx_vpclmulhqlqdq1485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm2, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x44, 0xD2, 0x01", "vpclmulhqlqdq xmm2, xmm4, xmm2");
}



#[test]
fn enc_avx_vpclmulhqlqdq1486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm0, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x59, 0x44, 0xC4, 0x01", "vpclmulhqlqdq xmm0, xmm4, xmm12");
}



#[test]
fn enc_avx_vpclmulhqlqdq1487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulhqlqdq xmm0, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x59, 0x44, 0xC7, 0x01", "vpclmulhqlqdq xmm0, xmm4, xmm15");
}



#[test]
fn enc_avx_vpclmullqhqdq1488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm11, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x44, 0xD9, 0x10", "vpclmullqhqdq xmm11, xmm0, xmm1");
}



#[test]
fn enc_avx_vpclmullqhqdq1489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm11, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x44, 0xDB, 0x10", "vpclmullqhqdq xmm11, xmm2, xmm3");
}



#[test]
fn enc_avx_vpclmullqhqdq1490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm3, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x21, 0x44, 0xDC, 0x10", "vpclmullqhqdq xmm3, xmm11, xmm12");
}



#[test]
fn enc_avx_vpclmullqhqdq1491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm2, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x44, 0xD3, 0x10", "vpclmullqhqdq xmm2, xmm0, xmm3");
}



#[test]
fn enc_avx_vpclmullqhqdq1492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqhqdq xmm1, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x44, 0xCC, 0x10", "vpclmullqhqdq xmm1, xmm4, xmm4");
}



#[test]
fn enc_avx_vpclmullqlqdq1493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm11, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x44, 0x1A, 0x00", "vpclmullqlqdq xmm11, xmm4, OWORD [rdx]");
}



#[test]
fn enc_avx_vpclmullqlqdq1494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm11, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x01, 0x44, 0xDC, 0x00", "vpclmullqlqdq xmm11, xmm15, xmm12");
}



#[test]
fn enc_avx_vpclmullqlqdq1495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm11, xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x44, 0x18, 0x00", "vpclmullqlqdq xmm11, xmm1, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmullqlqdq1496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm12, xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x44, 0x20, 0x00", "vpclmullqlqdq xmm12, xmm3, OWORD [rax]");
}



#[test]
fn enc_avx_vpclmullqlqdq1497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmullqlqdq xmm11, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x19, 0x44, 0xDB, 0x00", "vpclmullqlqdq xmm11, xmm12, xmm11");
}



#[test]
fn enc_avx_vpclmulqdq1498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm12, xmm4, OWORD [rdx], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x44, 0x22, 0x33", "vpclmulqdq xmm12, xmm4, OWORD [rdx], 51");
}



#[test]
fn enc_avx_vpclmulqdq1499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm2, xmm12, OWORD [rdx], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0x12, 0x2A", "vpclmulqdq xmm2, xmm12, OWORD [rdx], 42");
}



#[test]
fn enc_avx_vpclmulqdq1500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm2, xmm12, OWORD [rdx], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x44, 0x12, 0x0C", "vpclmulqdq xmm2, xmm12, OWORD [rdx], 12");
}



#[test]
fn enc_avx_vpclmulqdq1501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm3, xmm2, xmm12, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x69, 0x44, 0xDC, 0x19", "vpclmulqdq xmm3, xmm2, xmm12, 25");
}



#[test]
fn enc_avx_vpclmulqdq1502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpclmulqdq xmm1, xmm3, xmm15, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x61, 0x44, 0xCF, 0x05", "vpclmulqdq xmm1, xmm3, xmm15, 5");
}



#[test]
fn enc_avx_vperm2f1281503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm15, ymm15, ymm2, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x05, 0x06, 0xFA, 0x40", "vperm2f128 ymm15, ymm15, ymm2, 64");
}



#[test]
fn enc_avx_vperm2f1281504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm0, ymm3, YWORD [rax * 2 + rdx], 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x65, 0x06, 0x04, 0x42, 0x0E", "vperm2f128 ymm0, ymm3, YWORD [rax * 2 + rdx], 14");
}



#[test]
fn enc_avx_vperm2f1281505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm4, ymm0, ymm2, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x06, 0xE2, 0x53", "vperm2f128 ymm4, ymm0, ymm2, 83");
}



#[test]
fn enc_avx_vperm2f1281506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm12, ymm0, ymm1, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x06, 0xE1, 0x36", "vperm2f128 ymm12, ymm0, ymm1, 54");
}



#[test]
fn enc_avx_vperm2f1281507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2f128 ymm2, ymm11, ymm4, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x25, 0x06, 0xD4, 0x51", "vperm2f128 ymm2, ymm11, ymm4, 81");
}



#[test]
fn enc_avx_vpextrb1508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rcx, xmm3, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xD9, 0x43", "vpextrb rcx, xmm3, 67");
}



#[test]
fn enc_avx_vpextrb1509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rax, xmm15, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xF8, 0x2E", "vpextrb rax, xmm15, 46");
}



#[test]
fn enc_avx_vpextrb1510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rcx, xmm12, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xE1, 0x55", "vpextrb rcx, xmm12, 85");
}



#[test]
fn enc_avx_vpextrb1511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rdx, xmm2, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xD2, 0x17", "vpextrb rdx, xmm2, 23");
}



#[test]
fn enc_avx_vpextrb1512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb rcx, xmm1, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC9, 0x5F", "vpextrb rcx, xmm1, 95");
}



#[test]
fn enc_avx_vpextrb1513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb eax, xmm0, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC0, 0x24", "vpextrb eax, xmm0, 36");
}



#[test]
fn enc_avx_vpextrb1514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb edx, xmm0, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC2, 0x41", "vpextrb edx, xmm0, 65");
}



#[test]
fn enc_avx_vpextrb1515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb ecx, xmm3, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xD9, 0x73", "vpextrb ecx, xmm3, 115");
}



#[test]
fn enc_avx_vpextrb1516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb edx, xmm12, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0xE2, 0x75", "vpextrb edx, xmm12, 117");
}



#[test]
fn enc_avx_vpextrb1517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb eax, xmm0, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0xC0, 0x6C", "vpextrb eax, xmm0, 108");
}



#[test]
fn enc_avx_vpextrb1518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax * 2 + rdx], xmm3, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x1C, 0x42, 0x09", "vpextrb BYTE [rax * 2 + rdx], xmm3, 9");
}



#[test]
fn enc_avx_vpextrb1519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm4, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x20, 0x0F", "vpextrb BYTE [rax], xmm4, 15");
}



#[test]
fn enc_avx_vpextrb1520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax * 2 + rdx], xmm15, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x14, 0x3C, 0x42, 0x7C", "vpextrb BYTE [rax * 2 + rdx], xmm15, 124");
}



#[test]
fn enc_avx_vpextrb1521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm1, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x08, 0x7D", "vpextrb BYTE [rax], xmm1, 125");
}



#[test]
fn enc_avx_vpextrb1522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrb BYTE [rax], xmm0, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x14, 0x00, 0x41", "vpextrb BYTE [rax], xmm0, 65");
}



#[test]
fn enc_avx_vpextrd1523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rax, xmm0, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xC0, 0x1E", "vpextrd rax, xmm0, 30");
}



#[test]
fn enc_avx_vpextrd1524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rdx, xmm15, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xFA, 0x53", "vpextrd rdx, xmm15, 83");
}



#[test]
fn enc_avx_vpextrd1525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rdx, xmm15, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xFA, 0x0F", "vpextrd rdx, xmm15, 15");
}



#[test]
fn enc_avx_vpextrd1526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rdx, xmm2, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xD2, 0x6C", "vpextrd rdx, xmm2, 108");
}



#[test]
fn enc_avx_vpextrd1527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd rdx, xmm15, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xFA, 0x71", "vpextrd rdx, xmm15, 113");
}



#[test]
fn enc_avx_vpextrd1528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd eax, xmm4, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xE0, 0x5A", "vpextrd eax, xmm4, 90");
}



#[test]
fn enc_avx_vpextrd1529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm12, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0x20, 0x63", "vpextrd DWORD [rax], xmm12, 99");
}



#[test]
fn enc_avx_vpextrd1530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd eax, xmm0, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x16, 0xC0, 0x51", "vpextrd eax, xmm0, 81");
}



#[test]
fn enc_avx_vpextrd1531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd DWORD [rax], xmm11, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0x18, 0x3F", "vpextrd DWORD [rax], xmm11, 63");
}



#[test]
fn enc_avx_vpextrd1532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrd eax, xmm12, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x16, 0xE0, 0x61", "vpextrd eax, xmm12, 97");
}



#[test]
fn enc_avx_vpextrq1533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq rax, xmm12, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x16, 0xE0, 0x17", "vpextrq rax, xmm12, 23");
}



#[test]
fn enc_avx_vpextrq1534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm0, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x33", "vpextrq [rax], xmm0, 51");
}



#[test]
fn enc_avx_vpextrq1535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq rax, xmm0, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0xC0, 0x49", "vpextrq rax, xmm0, 73");
}



#[test]
fn enc_avx_vpextrq1536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq rax, xmm3, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0xD8, 0x2D", "vpextrq rax, xmm3, 45");
}



#[test]
fn enc_avx_vpextrq1537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrq [rax], xmm0, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x16, 0x00, 0x6F", "vpextrq [rax], xmm0, 111");
}



#[test]
fn enc_avx_vpextrw1538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm2, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC2, 0x0F", "vpextrw rax, xmm2, 15");
}



#[test]
fn enc_avx_vpextrw1539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm0, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC8, 0x45", "vpextrw rcx, xmm0, 69");
}



#[test]
fn enc_avx_vpextrw1540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rdx, xmm2, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD2, 0x6F", "vpextrw rdx, xmm2, 111");
}



#[test]
fn enc_avx_vpextrw1541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm2, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCA, 0x4B", "vpextrw rcx, xmm2, 75");
}



#[test]
fn enc_avx_vpextrw1542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm15, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC7, 0x2E", "vpextrw rax, xmm15, 46");
}



#[test]
fn enc_avx_vpextrw1543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm4, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD4, 0x20", "vpextrw edx, xmm4, 32");
}



#[test]
fn enc_avx_vpextrw1544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm4, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD4, 0x0D", "vpextrw edx, xmm4, 13");
}



#[test]
fn enc_avx_vpextrw1545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm1, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD1, 0x06", "vpextrw edx, xmm1, 6");
}



#[test]
fn enc_avx_vpextrw1546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm3, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC3, 0x53", "vpextrw eax, xmm3, 83");
}



#[test]
fn enc_avx_vpextrw1547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm4, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC4, 0x6C", "vpextrw eax, xmm4, 108");
}



#[test]
fn enc_avx_vpextrw1548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax], xmm0, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x00, 0x7B", "vpextrw WORD [rax], xmm0, 123");
}



#[test]
fn enc_avx_vpextrw1549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax + 16], xmm1, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x48, 0x10, 0x3B", "vpextrw WORD [rax + 16], xmm1, 59");
}



#[test]
fn enc_avx_vpextrw1550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax], xmm15, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x15, 0x38, 0x51", "vpextrw WORD [rax], xmm15, 81");
}



#[test]
fn enc_avx_vpextrw1551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax * 2 + rdx], xmm0, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x04, 0x42, 0x62", "vpextrw WORD [rax * 2 + rdx], xmm0, 98");
}



#[test]
fn enc_avx_vpextrw1552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw WORD [rax + 16], xmm1, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x15, 0x48, 0x10, 0x56", "vpextrw WORD [rax + 16], xmm1, 86");
}



#[test]
fn enc_avx_vpextrw1553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rax, xmm1, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC1, 0x3B", "vpextrw rax, xmm1, 59");
}



#[test]
fn enc_avx_vpextrw1554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rdx, xmm11, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD3, 0x3F", "vpextrw rdx, xmm11, 63");
}



#[test]
fn enc_avx_vpextrw1555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm4, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCC, 0x5A", "vpextrw rcx, xmm4, 90");
}



#[test]
fn enc_avx_vpextrw1556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rdx, xmm3, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xD3, 0x67", "vpextrw rdx, xmm3, 103");
}



#[test]
fn enc_avx_vpextrw1557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw rcx, xmm3, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xCB, 0x3E", "vpextrw rcx, xmm3, 62");
}



#[test]
fn enc_avx_vpextrw1558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm2, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0xC5, 0xC2, 0x18", "vpextrw eax, xmm2, 24");
}



#[test]
fn enc_avx_vpextrw1559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm15, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC7, 0x62", "vpextrw eax, xmm15, 98");
}



#[test]
fn enc_avx_vpextrw1560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm15, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC7, 0x02", "vpextrw eax, xmm15, 2");
}



#[test]
fn enc_avx_vpextrw1561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw eax, xmm12, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xC4, 0x63", "vpextrw eax, xmm12, 99");
}



#[test]
fn enc_avx_vpextrw1562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpextrw edx, xmm12, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0xC5, 0xD4, 0x4B", "vpextrw edx, xmm12, 75");
}



#[test]
fn enc_avx_vphminposuw1563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x41, 0xE2", "vphminposuw xmm12, xmm2");
}



#[test]
fn enc_avx_vphminposuw1564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x41, 0xDB", "vphminposuw xmm11, xmm3");
}



#[test]
fn enc_avx_vphminposuw1565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0x14, 0x42", "vphminposuw xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vphminposuw1566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphminposuw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x41, 0xD3", "vphminposuw xmm2, xmm3");
}



#[test]
fn enc_avx_vpinsrb1567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm0, xmm3, al, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x20, 0xC0, 0x34", "vpinsrb xmm0, xmm3, al, 52");
}



#[test]
fn enc_avx_vpinsrb1568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm15, xmm4, al, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x20, 0xF8, 0x38", "vpinsrb xmm15, xmm4, al, 56");
}



#[test]
fn enc_avx_vpinsrb1569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm0, xmm3, al, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x20, 0xC0, 0x7E", "vpinsrb xmm0, xmm3, al, 126");
}



#[test]
fn enc_avx_vpinsrb1570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm1, xmm1, al, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x20, 0xC8, 0x17", "vpinsrb xmm1, xmm1, al, 23");
}



#[test]
fn enc_avx_vpinsrb1571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm1, xmm4, BYTE [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x20, 0x08, 0x66", "vpinsrb xmm1, xmm4, BYTE [rax], 102");
}



#[test]
fn enc_avx_vpinsrb1572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm2, xmm12, edx, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xD2, 0x7A", "vpinsrb xmm2, xmm12, edx, 122");
}



#[test]
fn enc_avx_vpinsrb1573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm4, xmm12, edx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xE2, 0x54", "vpinsrb xmm4, xmm12, edx, 84");
}



#[test]
fn enc_avx_vpinsrb1574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm12, xmm1, eax, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x20, 0xE0, 0x75", "vpinsrb xmm12, xmm1, eax, 117");
}



#[test]
fn enc_avx_vpinsrb1575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm4, xmm12, eax, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x20, 0xE0, 0x33", "vpinsrb xmm4, xmm12, eax, 51");
}



#[test]
fn enc_avx_vpinsrb1576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrb xmm12, xmm3, ecx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x20, 0xE1, 0x1B", "vpinsrb xmm12, xmm3, ecx, 27");
}



#[test]
fn enc_avx_vpinsrd1577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm1, xmm12, eax, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x22, 0xC8, 0x73", "vpinsrd xmm1, xmm12, eax, 115");
}



#[test]
fn enc_avx_vpinsrd1578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm11, xmm4, eax, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x22, 0xD8, 0x38", "vpinsrd xmm11, xmm4, eax, 56");
}



#[test]
fn enc_avx_vpinsrd1579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm11, xmm4, DWORD [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x22, 0x18, 0x06", "vpinsrd xmm11, xmm4, DWORD [rax], 6");
}



#[test]
fn enc_avx_vpinsrd1580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm2, xmm2, DWORD [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x22, 0x10, 0x43", "vpinsrd xmm2, xmm2, DWORD [rax], 67");
}



#[test]
fn enc_avx_vpinsrd1581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrd xmm11, xmm11, DWORD [rax], 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x22, 0x18, 0x45", "vpinsrd xmm11, xmm11, DWORD [rax], 69");
}



#[test]
fn enc_avx_vpinsrq1582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm15, xmm0, [rax], 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x22, 0x38, 0x03", "vpinsrq xmm15, xmm0, [rax], 3");
}



#[test]
fn enc_avx_vpinsrq1583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm4, xmm0, [rax], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x22, 0x20, 0x2B", "vpinsrq xmm4, xmm0, [rax], 43");
}



#[test]
fn enc_avx_vpinsrq1584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm15, xmm0, [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x22, 0x38, 0x67", "vpinsrq xmm15, xmm0, [rax], 103");
}



#[test]
fn enc_avx_vpinsrq1585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm4, xmm1, rax, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x22, 0xE0, 0x5D", "vpinsrq xmm4, xmm1, rax, 93");
}



#[test]
fn enc_avx_vpinsrq1586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrq xmm2, xmm15, [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x22, 0x10, 0x2C", "vpinsrq xmm2, xmm15, [rax], 44");
}



#[test]
fn enc_avx_vpinsrw1587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm12, xmm2, WORD [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x69, 0xC4, 0x20, 0x25", "vpinsrw xmm12, xmm2, WORD [rax], 37");
}



#[test]
fn enc_avx_vpinsrw1588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm0, xmm12, ax, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x99, 0xC4, 0xC0, 0x74", "vpinsrw xmm0, xmm12, ax, 116");
}



#[test]
fn enc_avx_vpinsrw1589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm15, xmm4, WORD [rax], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x59, 0xC4, 0x38, 0x1D", "vpinsrw xmm15, xmm4, WORD [rax], 29");
}



#[test]
fn enc_avx_vpinsrw1590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm11, xmm12, ax, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x19, 0xC4, 0xD8, 0x66", "vpinsrw xmm11, xmm12, ax, 102");
}



#[test]
fn enc_avx_vpinsrw1591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm15, xmm11, WORD [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x21, 0xC4, 0x38, 0x1B", "vpinsrw xmm15, xmm11, WORD [rax], 27");
}



#[test]
fn enc_avx_vpinsrw1592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm1, xmm11, ecx, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA1, 0xC4, 0xC9, 0x58", "vpinsrw xmm1, xmm11, ecx, 88");
}



#[test]
fn enc_avx_vpinsrw1593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm12, xmm1, eax, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x71, 0xC4, 0xE0, 0x68", "vpinsrw xmm12, xmm1, eax, 104");
}



#[test]
fn enc_avx_vpinsrw1594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm2, xmm15, ecx, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x81, 0xC4, 0xD1, 0x72", "vpinsrw xmm2, xmm15, ecx, 114");
}



#[test]
fn enc_avx_vpinsrw1595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm4, xmm3, eax, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE1, 0xC4, 0xE0, 0x6B", "vpinsrw xmm4, xmm3, eax, 107");
}



#[test]
fn enc_avx_vpinsrw1596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpinsrw xmm11, xmm3, ecx, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x61, 0xC4, 0xD9, 0x1F", "vpinsrw xmm11, xmm3, ecx, 31");
}



#[test]
fn enc_avx_vpmovsxbd1597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x21, 0x60, 0x10", "vpmovsxbd xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbd1598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x21, 0x58, 0x10", "vpmovsxbd xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbd1599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x21, 0x24, 0x42", "vpmovsxbd xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbd1600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x21, 0x58, 0x10", "vpmovsxbd xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxbd1601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x21, 0x1C, 0x42", "vpmovsxbd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw1602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x18", "vpmovsxbw xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw1603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x14, 0x42", "vpmovsxbw xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxbw1604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x20", "vpmovsxbw xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw1605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x20, 0x38", "vpmovsxbw xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxbw1606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxbw xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x20, 0x50, 0x10", "vpmovsxbw xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxdq1607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x00", "vpmovsxdq xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq1608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x25, 0x38", "vpmovsxdq xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxdq1609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x25, 0x04, 0x42", "vpmovsxdq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq1610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x25, 0x1C, 0x42", "vpmovsxdq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxdq1611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxdq xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x25, 0x58, 0x10", "vpmovsxdq xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwd1612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x18", "vpmovsxwd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwd1613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x1C, 0x42", "vpmovsxwd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd1614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x23, 0x24, 0x42", "vpmovsxwd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwd1615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x23, 0x78, 0x10", "vpmovsxwd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq1616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x60, 0x10", "vpmovsxwq xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq1617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x24, 0x24, 0x42", "vpmovsxwq xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovsxwq1618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x58, 0x10", "vpmovsxwq xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovsxwq1619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x18", "vpmovsxwq xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovsxwq1620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovsxwq xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x24, 0x3C, 0x42", "vpmovsxwq xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x24, 0x42", "vpmovzxbd xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x20", "vpmovzxbd xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbd1623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x04, 0x42", "vpmovzxbd xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbd1624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x31, 0x58, 0x10", "vpmovzxbd xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbd1625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbd xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x31, 0x00", "vpmovzxbd xmm0, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw1626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x58, 0x10", "vpmovzxbw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbw1627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x30, 0x78, 0x10", "vpmovzxbw xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxbw1628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x14, 0x42", "vpmovzxbw xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxbw1629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x10", "vpmovzxbw xmm2, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxbw1630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxbw xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x30, 0x08", "vpmovzxbw xmm1, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x35, 0x1C, 0x42", "vpmovzxdq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxdq1632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x35, 0x18", "vpmovzxdq xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x35, 0x20", "vpmovzxdq xmm12, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxdq1634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxdq xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x35, 0x60, 0x10", "vpmovzxdq xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwd1635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x20", "vpmovzxwd xmm4, QWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwd1636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x40, 0x10", "vpmovzxwd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwd1637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x33, 0x24, 0x42", "vpmovzxwd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vpmovzxwd1638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x33, 0x78, 0x10", "vpmovzxwd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwq1639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x08", "vpmovzxwq xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwq1640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x48, 0x10", "vpmovzxwq xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vpmovzxwq1641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x34, 0x18", "vpmovzxwq xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vpmovzxwq1642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmovzxwq xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x34, 0x14, 0x42", "vpmovzxwq xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm1, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x53, 0xC8", "vrcpss xmm1, xmm1, xmm0");
}



#[test]
fn enc_avx_vrcpss1644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5A, 0x53, 0xE1", "vrcpss xmm12, xmm4, xmm1");
}



#[test]
fn enc_avx_vrcpss1645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x53, 0xDB", "vrcpss xmm11, xmm11, xmm3");
}



#[test]
fn enc_avx_vrcpss1646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm12, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0x53, 0xE4", "vrcpss xmm12, xmm11, xmm12");
}



#[test]
fn enc_avx_vrcpss1647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm2, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x53, 0xD0", "vrcpss xmm2, xmm3, xmm0");
}



#[test]
fn enc_avx_vrcpss1648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm3, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x53, 0x1C, 0x42", "vrcpss xmm3, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrcpss1649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm15, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x53, 0x78, 0x10", "vrcpss xmm15, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrcpss1650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x53, 0x18", "vrcpss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vrcpss1651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x53, 0x40, 0x10", "vrcpss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vrcpss1652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrcpss xmm1, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x53, 0x08", "vrcpss xmm1, xmm15, DWORD [rax]");
}



#[test]
fn enc_avx_vroundsd1653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm0, xmm11, xmm3, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x0B, 0xC3, 0x33", "vroundsd xmm0, xmm11, xmm3, 51");
}



#[test]
fn enc_avx_vroundsd1654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm2, xmm12, xmm2, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x0B, 0xD2, 0x5F", "vroundsd xmm2, xmm12, xmm2, 95");
}



#[test]
fn enc_avx_vroundsd1655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm12, xmm15, xmm3, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x01, 0x0B, 0xE3, 0x75", "vroundsd xmm12, xmm15, xmm3, 117");
}



#[test]
fn enc_avx_vroundsd1656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm12, xmm3, xmm3, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x0B, 0xE3, 0x77", "vroundsd xmm12, xmm3, xmm3, 119");
}



#[test]
fn enc_avx_vroundsd1657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm0, xmm11, xmm3, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x0B, 0xC3, 0x49", "vroundsd xmm0, xmm11, xmm3, 73");
}



#[test]
fn enc_avx_vroundsd1658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm4, QWORD [rax * 2 + rdx], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x0B, 0x3C, 0x42, 0x35", "vroundsd xmm15, xmm4, QWORD [rax * 2 + rdx], 53");
}



#[test]
fn enc_avx_vroundsd1659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm0, xmm0, QWORD [rax * 2 + rdx], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x0B, 0x04, 0x42, 0x63", "vroundsd xmm0, xmm0, QWORD [rax * 2 + rdx], 99");
}



#[test]
fn enc_avx_vroundsd1660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm11, xmm1, QWORD [rax * 2 + rdx], 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x0B, 0x1C, 0x42, 0x16", "vroundsd xmm11, xmm1, QWORD [rax * 2 + rdx], 22");
}



#[test]
fn enc_avx_vroundsd1661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm15, xmm1, QWORD [rax * 2 + rdx], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x0B, 0x3C, 0x42, 0x68", "vroundsd xmm15, xmm1, QWORD [rax * 2 + rdx], 104");
}



#[test]
fn enc_avx_vroundsd1662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundsd xmm1, xmm12, QWORD [rax * 2 + rdx], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x0B, 0x0C, 0x42, 0x47", "vroundsd xmm1, xmm12, QWORD [rax * 2 + rdx], 71");
}



#[test]
fn enc_avx_vroundss1663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm12, xmm11, xmm3, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x0A, 0xE3, 0x66", "vroundss xmm12, xmm11, xmm3, 102");
}



#[test]
fn enc_avx_vroundss1664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm1, xmm0, xmm12, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x79, 0x0A, 0xCC, 0x78", "vroundss xmm1, xmm0, xmm12, 120");
}



#[test]
fn enc_avx_vroundss1665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm0, xmm15, xmm4, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x0A, 0xC4, 0x32", "vroundss xmm0, xmm15, xmm4, 50");
}



#[test]
fn enc_avx_vroundss1666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm11, xmm11, xmm3, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x0A, 0xDB, 0x79", "vroundss xmm11, xmm11, xmm3, 121");
}



#[test]
fn enc_avx_vroundss1667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm0, xmm1, xmm4, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x0A, 0xC4, 0x14", "vroundss xmm0, xmm1, xmm4, 20");
}



#[test]
fn enc_avx_vroundss1668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm4, DWORD [rax * 2 + rdx], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x0A, 0x1C, 0x42, 0x65", "vroundss xmm3, xmm4, DWORD [rax * 2 + rdx], 101");
}



#[test]
fn enc_avx_vroundss1669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm2, DWORD [rax + 16], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0A, 0x58, 0x10, 0x34", "vroundss xmm3, xmm2, DWORD [rax + 16], 52");
}



#[test]
fn enc_avx_vroundss1670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm1, xmm1, DWORD [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x0A, 0x08, 0x6C", "vroundss xmm1, xmm1, DWORD [rax], 108");
}



#[test]
fn enc_avx_vroundss1671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm1, xmm2, DWORD [rax + 16], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x0A, 0x48, 0x10, 0x46", "vroundss xmm1, xmm2, DWORD [rax + 16], 70");
}



#[test]
fn enc_avx_vroundss1672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vroundss xmm3, xmm0, DWORD [rax + 16], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x0A, 0x58, 0x10, 0x2E", "vroundss xmm3, xmm0, DWORD [rax + 16], 46");
}



#[test]
fn enc_avx_vrsqrtss1673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x7A, 0x52, 0xDC", "vrsqrtss xmm11, xmm0, xmm12");
}



#[test]
fn enc_avx_vrsqrtss1674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm1, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x52, 0xCB", "vrsqrtss xmm1, xmm0, xmm3");
}



#[test]
fn enc_avx_vrsqrtss1675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm2, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x02, 0x52, 0xD4", "vrsqrtss xmm2, xmm15, xmm12");
}



#[test]
fn enc_avx_vrsqrtss1676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm12, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x52, 0xE2", "vrsqrtss xmm12, xmm0, xmm2");
}



#[test]
fn enc_avx_vrsqrtss1677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xE2, 0x52, 0xCC", "vrsqrtss xmm1, xmm3, xmm4");
}



#[test]
fn enc_avx_vrsqrtss1678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6A, 0x52, 0x18", "vrsqrtss xmm11, xmm2, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss1679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm11, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x52, 0x18", "vrsqrtss xmm11, xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss1680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm4, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x52, 0x24, 0x42", "vrsqrtss xmm4, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vrsqrtss1681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm1, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9A, 0x52, 0x08", "vrsqrtss xmm1, xmm12, DWORD [rax]");
}



#[test]
fn enc_avx_vrsqrtss1682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vrsqrtss xmm15, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x52, 0x38", "vrsqrtss xmm15, xmm3, DWORD [rax]");
}



#[test]
fn enc_avx_vsqrtsd1683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm15, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x03, 0x51, 0xFC", "vsqrtsd xmm15, xmm15, xmm4");
}



#[test]
fn enc_avx_vsqrtsd1684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm1, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x51, 0xCA", "vsqrtsd xmm1, xmm12, xmm2");
}



#[test]
fn enc_avx_vsqrtsd1685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm3, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x63, 0x51, 0xDF", "vsqrtsd xmm3, xmm3, xmm15");
}



#[test]
fn enc_avx_vsqrtsd1686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm1, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x51, 0xCC", "vsqrtsd xmm1, xmm15, xmm4");
}



#[test]
fn enc_avx_vsqrtsd1687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm15, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x73, 0x51, 0xFF", "vsqrtsd xmm15, xmm1, xmm15");
}



#[test]
fn enc_avx_vsqrtsd1688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x51, 0x20", "vsqrtsd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vsqrtsd1689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm1, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x83, 0x51, 0x08", "vsqrtsd xmm1, xmm15, QWORD [rax]");
}



#[test]
fn enc_avx_vsqrtsd1690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x6B, 0x51, 0x78, 0x10", "vsqrtsd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtsd1691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm11, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x51, 0x1C, 0x42", "vsqrtsd xmm11, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtsd1692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtsd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x51, 0x40, 0x10", "vsqrtsd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtss1693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm12, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x22, 0x51, 0xE4", "vsqrtss xmm12, xmm11, xmm4");
}



#[test]
fn enc_avx_vsqrtss1694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm0, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x51, 0xC0", "vsqrtss xmm0, xmm1, xmm0");
}



#[test]
fn enc_avx_vsqrtss1695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm11, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x62, 0x51, 0xDB", "vsqrtss xmm11, xmm3, xmm11");
}



#[test]
fn enc_avx_vsqrtss1696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x51, 0xC3", "vsqrtss xmm0, xmm11, xmm3");
}



#[test]
fn enc_avx_vsqrtss1697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm4, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF2, 0x51, 0xE3", "vsqrtss xmm4, xmm1, xmm3");
}



#[test]
fn enc_avx_vsqrtss1698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm4, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x51, 0x60, 0x10", "vsqrtss xmm4, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsqrtss1699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm4, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDA, 0x51, 0x20", "vsqrtss xmm4, xmm4, DWORD [rax]");
}



#[test]
fn enc_avx_vsqrtss1700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm15, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x51, 0x3C, 0x42", "vsqrtss xmm15, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsqrtss1701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsqrtss xmm1, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x82, 0x51, 0x0C, 0x42", "vsqrtss xmm1, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vstmxcsr1702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x1C, 0x42", "vstmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vstmxcsr1703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vstmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0xAE, 0x18", "vstmxcsr DWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x23, 0x5C, 0xDF", "vsubsd xmm3, xmm11, xmm15");
}



#[test]
fn enc_avx_vsubsd1705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x5B, 0x5C, 0xE2", "vsubsd xmm12, xmm4, xmm2");
}



#[test]
fn enc_avx_vsubsd1706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x7B, 0x5C, 0xD3", "vsubsd xmm2, xmm0, xmm11");
}



#[test]
fn enc_avx_vsubsd1707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm3, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5C, 0xD9", "vsubsd xmm3, xmm0, xmm1");
}



#[test]
fn enc_avx_vsubsd1708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x9B, 0x5C, 0xD3", "vsubsd xmm2, xmm12, xmm3");
}



#[test]
fn enc_avx_vsubsd1709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm1, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xDB, 0x5C, 0x48, 0x10", "vsubsd xmm1, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubsd1710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x63, 0x5C, 0x1C, 0x42", "vsubsd xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubsd1711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm1, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5C, 0x08", "vsubsd xmm1, xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFB, 0x5C, 0x18", "vsubsd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_avx_vsubsd1713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubsd xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA3, 0x5C, 0x04, 0x42", "vsubsd xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubss1714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm12, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5C, 0xE0", "vsubss xmm12, xmm3, xmm0");
}



#[test]
fn enc_avx_vsubss1715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm1, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFA, 0x5C, 0xCA", "vsubss xmm1, xmm0, xmm2");
}



#[test]
fn enc_avx_vsubss1716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm15, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x62, 0x5C, 0xF8", "vsubss xmm15, xmm3, xmm0");
}



#[test]
fn enc_avx_vsubss1717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm4, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5C, 0xE4", "vsubss xmm4, xmm11, xmm4");
}



#[test]
fn enc_avx_vsubss1718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm15, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x41, 0x22, 0x5C, 0xFF", "vsubss xmm15, xmm11, xmm15");
}



#[test]
fn enc_avx_vsubss1719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm2, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5C, 0x10", "vsubss xmm2, xmm11, DWORD [rax]");
}



#[test]
fn enc_avx_vsubss1720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm12, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x7A, 0x5C, 0x24, 0x42", "vsubss xmm12, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubss1721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xEA, 0x5C, 0x0C, 0x42", "vsubss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vsubss1722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm4, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xA2, 0x5C, 0x60, 0x10", "vsubss xmm4, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vsubss1723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vsubss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x72, 0x5C, 0x18", "vsubss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_avx_vucomisd1724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0xE2", "vucomisd xmm4, xmm2");
}



#[test]
fn enc_avx_vucomisd1725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x79, 0x2E, 0xCF", "vucomisd xmm1, xmm15");
}



#[test]
fn enc_avx_vucomisd1726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0xFA", "vucomisd xmm15, xmm2");
}



#[test]
fn enc_avx_vucomisd1727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0xE2", "vucomisd xmm12, xmm2");
}



#[test]
fn enc_avx_vucomisd1728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0xFC", "vucomisd xmm15, xmm4");
}



#[test]
fn enc_avx_vucomisd1729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x3C, 0x42", "vucomisd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomisd1730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x79, 0x2E, 0x18", "vucomisd xmm11, QWORD [rax]");
}



#[test]
fn enc_avx_vucomisd1731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0x18", "vucomisd xmm3, QWORD [rax]");
}



#[test]
fn enc_avx_vucomisd1732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomisd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF9, 0x2E, 0x04, 0x42", "vucomisd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0x78, 0x2E, 0xF8", "vucomiss xmm15, xmm0");
}



#[test]
fn enc_avx_vucomiss1734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xD8", "vucomiss xmm3, xmm0");
}



#[test]
fn enc_avx_vucomiss1735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0xD1", "vucomiss xmm2, xmm1");
}



#[test]
fn enc_avx_vucomiss1736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2E, 0xDB", "vucomiss xmm3, xmm11");
}



#[test]
fn enc_avx_vucomiss1737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC1, 0x78, 0x2E, 0xC7", "vucomiss xmm0, xmm15");
}



#[test]
fn enc_avx_vucomiss1738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x24, 0x42", "vucomiss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x14, 0x42", "vucomiss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x04, 0x42", "vucomiss xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx_vucomiss1741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vucomiss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x2E, 0x58, 0x10", "vucomiss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_avx_vzeroall1742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vzeroall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xFC, 0x77", "vzeroall");
}



#[test]
fn enc_avx_vzeroupper1743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vzeroupper
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC5, 0xF8, 0x77", "vzeroupper");
}


