
#[test]
fn enc_avx2_vbroadcasti1284740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcasti128 ymm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x5A, 0x1C, 0x42", "vbroadcasti128 ymm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vbroadcasti1284741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcasti128 ymm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x5A, 0x14, 0x42", "vbroadcasti128 ymm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vbroadcasti1284742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcasti128 ymm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x5A, 0x18", "vbroadcasti128 ymm3, OWORD [rax]");
}



#[test]
fn enc_avx2_vbroadcasti1284743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcasti128 ymm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x5A, 0x1C, 0x42", "vbroadcasti128 ymm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vbroadcasti1284744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vbroadcasti128 ymm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x5A, 0x10", "vbroadcasti128 ymm2, OWORD [rax]");
}



#[test]
fn enc_avx2_vextracti1284745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextracti128 xmm0, ymm12, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x39, 0xE0, 0x65", "vextracti128 xmm0, ymm12, 101");
}



#[test]
fn enc_avx2_vextracti1284746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextracti128 OWORD [rdx], ymm2, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x39, 0x12, 0x42", "vextracti128 OWORD [rdx], ymm2, 66");
}



#[test]
fn enc_avx2_vextracti1284747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextracti128 xmm15, ymm0, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x7D, 0x39, 0xC7, 0x03", "vextracti128 xmm15, ymm0, 3");
}



#[test]
fn enc_avx2_vextracti1284748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextracti128 xmm1, ymm2, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x39, 0xD1, 0x60", "vextracti128 xmm1, ymm2, 96");
}



#[test]
fn enc_avx2_vextracti1284749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vextracti128 OWORD [rax * 2 + rdx], ymm12, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x39, 0x24, 0x42, 0x7A", "vextracti128 OWORD [rax * 2 + rdx], ymm12, 122");
}



#[test]
fn enc_avx2_vinserti1284750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinserti128 ymm1, ymm4, xmm1, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x5D, 0x38, 0xC9, 0x20", "vinserti128 ymm1, ymm4, xmm1, 32");
}



#[test]
fn enc_avx2_vinserti1284751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinserti128 ymm15, ymm11, xmm0, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x25, 0x38, 0xF8, 0x2A", "vinserti128 ymm15, ymm11, xmm0, 42");
}



#[test]
fn enc_avx2_vinserti1284752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinserti128 ymm15, ymm1, xmm2, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x75, 0x38, 0xFA, 0x48", "vinserti128 ymm15, ymm1, xmm2, 72");
}



#[test]
fn enc_avx2_vinserti1284753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinserti128 ymm0, ymm11, OWORD [rdx], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x25, 0x38, 0x02, 0x7C", "vinserti128 ymm0, ymm11, OWORD [rdx], 124");
}



#[test]
fn enc_avx2_vinserti1284754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vinserti128 ymm12, ymm0, xmm3, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x7D, 0x38, 0xE3, 0x75", "vinserti128 ymm12, ymm0, xmm3, 117");
}



#[test]
fn enc_avx2_vpbroadcastq4755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x59, 0x08", "vpbroadcastq xmm1, QWORD [rax]");
}



#[test]
fn enc_avx2_vpbroadcastq4756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x59, 0x0C, 0x42", "vpbroadcastq xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vpbroadcastq4757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x59, 0x10", "vpbroadcastq xmm2, QWORD [rax]");
}



#[test]
fn enc_avx2_vpbroadcastq4758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x59, 0x50, 0x10", "vpbroadcastq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_avx2_vpbroadcastq4759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq ymm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x59, 0x1C, 0x42", "vpbroadcastq ymm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vpbroadcastq4760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq ymm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x59, 0x0C, 0x42", "vpbroadcastq ymm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vpbroadcastq4761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq ymm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x59, 0x20", "vpbroadcastq ymm4, QWORD [rax]");
}



#[test]
fn enc_avx2_vpbroadcastq4762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq ymm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x59, 0x1C, 0x42", "vpbroadcastq ymm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_avx2_vpbroadcastq4763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpbroadcastq ymm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x7D, 0x59, 0x40, 0x10", "vpbroadcastq ymm0, QWORD [rax + 16]");
}



#[test]
fn enc_avx2_vperm2i1284764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2i128 ymm2, ymm12, YWORD [rax * 2 + rdx], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x1D, 0x46, 0x14, 0x42, 0x52", "vperm2i128 ymm2, ymm12, YWORD [rax * 2 + rdx], 82");
}



#[test]
fn enc_avx2_vperm2i1284765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2i128 ymm15, ymm1, YWORD [rdx], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x75, 0x46, 0x3A, 0x52", "vperm2i128 ymm15, ymm1, YWORD [rdx], 82");
}



#[test]
fn enc_avx2_vperm2i1284766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2i128 ymm15, ymm12, ymm12, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x1D, 0x46, 0xFC, 0x4B", "vperm2i128 ymm15, ymm12, ymm12, 75");
}



#[test]
fn enc_avx2_vperm2i1284767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2i128 ymm1, ymm0, YWORD [rax * 2 + rdx], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x7D, 0x46, 0x0C, 0x42, 0x34", "vperm2i128 ymm1, ymm0, YWORD [rax * 2 + rdx], 52");
}



#[test]
fn enc_avx2_vperm2i1284768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vperm2i128 ymm15, ymm4, YWORD [rax], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x5D, 0x46, 0x38, 0x47", "vperm2i128 ymm15, ymm4, YWORD [rax], 71");
}



#[test]
fn enc_avx2_vpermd4769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermd ymm2, ymm1, ymm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x75, 0x36, 0xD3", "vpermd ymm2, ymm1, ymm3");
}



#[test]
fn enc_avx2_vpermd4770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermd ymm15, ymm12, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x1D, 0x36, 0xFA", "vpermd ymm15, ymm12, ymm2");
}



#[test]
fn enc_avx2_vpermd4771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermd ymm2, ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x6D, 0x36, 0xD1", "vpermd ymm2, ymm2, ymm1");
}



#[test]
fn enc_avx2_vpermd4772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermd ymm0, ymm2, YWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x6D, 0x36, 0x00", "vpermd ymm0, ymm2, YWORD [rax]");
}



#[test]
fn enc_avx2_vpermd4773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermd ymm3, ymm2, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x6D, 0x36, 0xD9", "vpermd ymm3, ymm2, ymm1");
}



#[test]
fn enc_avx2_vpermpd4774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermpd ymm15, YWORD [rdx], 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xFD, 0x01, 0x3A, 0x0F", "vpermpd ymm15, YWORD [rdx], 15");
}



#[test]
fn enc_avx2_vpermpd4775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermpd ymm1, YWORD [rax * 2 + rdx], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFD, 0x01, 0x0C, 0x42, 0x56", "vpermpd ymm1, YWORD [rax * 2 + rdx], 86");
}



#[test]
fn enc_avx2_vpermpd4776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermpd ymm12, ymm15, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xFD, 0x01, 0xE7, 0x46", "vpermpd ymm12, ymm15, 70");
}



#[test]
fn enc_avx2_vpermpd4777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermpd ymm4, ymm0, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFD, 0x01, 0xE0, 0x69", "vpermpd ymm4, ymm0, 105");
}



#[test]
fn enc_avx2_vpermpd4778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermpd ymm15, YWORD [rax], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xFD, 0x01, 0x38, 0x34", "vpermpd ymm15, YWORD [rax], 52");
}



#[test]
fn enc_avx2_vpermps4779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermps ymm12, ymm0, ymm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x16, 0xE4", "vpermps ymm12, ymm0, ymm4");
}



#[test]
fn enc_avx2_vpermps4780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermps ymm15, ymm0, ymm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x7D, 0x16, 0xF8", "vpermps ymm15, ymm0, ymm0");
}



#[test]
fn enc_avx2_vpermps4781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermps ymm12, ymm15, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x05, 0x16, 0xE1", "vpermps ymm12, ymm15, ymm1");
}



#[test]
fn enc_avx2_vpermps4782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermps ymm15, ymm15, ymm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x05, 0x16, 0xFA", "vpermps ymm15, ymm15, ymm2");
}



#[test]
fn enc_avx2_vpermps4783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermps ymm3, ymm15, ymm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x05, 0x16, 0xD9", "vpermps ymm3, ymm15, ymm1");
}



#[test]
fn enc_avx2_vpermq4784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermq ymm1, ymm2, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFD, 0x00, 0xCA, 0x07", "vpermq ymm1, ymm2, 7");
}



#[test]
fn enc_avx2_vpermq4785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermq ymm2, ymm2, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFD, 0x00, 0xD2, 0x23", "vpermq ymm2, ymm2, 35");
}



#[test]
fn enc_avx2_vpermq4786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermq ymm0, ymm11, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xFD, 0x00, 0xC3, 0x73", "vpermq ymm0, ymm11, 115");
}



#[test]
fn enc_avx2_vpermq4787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermq ymm15, YWORD [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xFD, 0x00, 0x38, 0x51", "vpermq ymm15, YWORD [rax], 81");
}



#[test]
fn enc_avx2_vpermq4788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpermq ymm2, ymm12, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xFD, 0x00, 0xD4, 0x1B", "vpermq ymm2, ymm12, 27");
}


