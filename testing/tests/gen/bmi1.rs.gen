
#[test]
fn enc_bmi1_andn5928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rbx, rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF2, 0x1C, 0x42", "andn rbx, rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_andn5929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rbx, rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF2, 0xD9", "andn rbx, rbx, rcx");
}



#[test]
fn enc_bmi1_andn5930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rbx, rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF2, 0x18", "andn rbx, rdx, QWORD [rax]");
}



#[test]
fn enc_bmi1_andn5931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rbx, rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF2, 0x1C, 0x42", "andn rbx, rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_andn5932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rax, rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF2, 0x00", "andn rax, rdx, QWORD [rax]");
}



#[test]
fn enc_bmi1_bextr5933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rbx, QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF7, 0x18", "bextr rbx, QWORD [rax], rcx");
}



#[test]
fn enc_bmi1_bextr5934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rcx, rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF7, 0xC9", "bextr rcx, rcx, rcx");
}



#[test]
fn enc_bmi1_bextr5935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rbx, rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF7, 0xD9", "bextr rbx, rcx, rax");
}



#[test]
fn enc_bmi1_bextr5936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rdx, QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF7, 0x10", "bextr rdx, QWORD [rax], rcx");
}



#[test]
fn enc_bmi1_blsi5937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF3, 0x18", "blsi rbx, QWORD [rax]");
}



#[test]
fn enc_bmi1_blsi5938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF3, 0x18", "blsi rcx, QWORD [rax]");
}



#[test]
fn enc_bmi1_blsi5939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF3, 0xD9", "blsi rcx, rcx");
}



#[test]
fn enc_bmi1_blsi5940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x1C, 0x42", "blsi rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsmsk5941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF3, 0x14, 0x42", "blsmsk rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsmsk5942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF3, 0x14, 0x42", "blsmsk rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsmsk5943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x14, 0x42", "blsmsk rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsmsk5944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0xD1", "blsmsk rax, rcx");
}



#[test]
fn enc_bmi1_blsr5945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF3, 0x0C, 0x42", "blsr rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsr5946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF3, 0x0C, 0x42", "blsr rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsr5947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF3, 0x0C, 0x42", "blsr rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsr5948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0xC9", "blsr rax, rcx");
}



#[test]
fn enc_bmi1_tzcnt5949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x10", "tzcnt rdx, QWORD [rax]");
}



#[test]
fn enc_bmi1_tzcnt5950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x00", "tzcnt rax, QWORD [rax]");
}



#[test]
fn enc_bmi1_tzcnt5951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xC9", "tzcnt rcx, rcx");
}



#[test]
fn enc_bmi1_tzcnt5952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xD9", "tzcnt rbx, rcx");
}



#[test]
fn enc_bmi1_tzcnt5953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x1C, 0x42", "tzcnt rbx, QWORD [rax * 2 + rdx]");
}


