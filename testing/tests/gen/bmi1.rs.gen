
#[test]
fn enc_bmi1_andn5802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rdx, rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF2, 0xD1", "andn rdx, rcx, rcx");
}



#[test]
fn enc_bmi1_andn5803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rbx, rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF2, 0xD9", "andn rbx, rcx, rcx");
}



#[test]
fn enc_bmi1_andn5804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rax, rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF2, 0xC1", "andn rax, rax, rcx");
}



#[test]
fn enc_bmi1_andn5805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andn rax, rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF2, 0x00", "andn rax, rbx, QWORD [rax]");
}



#[test]
fn enc_bmi1_bextr5806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rdx, QWORD [rax * 2 + rdx], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF7, 0x14, 0x42", "bextr rdx, QWORD [rax * 2 + rdx], rbx");
}



#[test]
fn enc_bmi1_bextr5807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rax, QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF7, 0x04, 0x42", "bextr rax, QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_bmi1_bextr5808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rbx, QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF7, 0x18", "bextr rbx, QWORD [rax], rdx");
}



#[test]
fn enc_bmi1_bextr5809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rdx, QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF7, 0x10", "bextr rdx, QWORD [rax], rcx");
}



#[test]
fn enc_bmi1_bextr5810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bextr rbx, rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF7, 0xD9", "bextr rbx, rcx, rax");
}



#[test]
fn enc_bmi1_blsi5811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x18", "blsi rax, QWORD [rax]");
}



#[test]
fn enc_bmi1_blsi5812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x1C, 0x42", "blsi rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsi5813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF3, 0xD9", "blsi rbx, rcx");
}



#[test]
fn enc_bmi1_blsi5814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsi rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF3, 0xD9", "blsi rcx, rcx");
}



#[test]
fn enc_bmi1_blsmsk5815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x14, 0x42", "blsmsk rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsmsk5816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF3, 0xD1", "blsmsk rbx, rcx");
}



#[test]
fn enc_bmi1_blsmsk5817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF3, 0x14, 0x42", "blsmsk rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsmsk5818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x10", "blsmsk rax, QWORD [rax]");
}



#[test]
fn enc_bmi1_blsmsk5819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsmsk rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF3, 0x14, 0x42", "blsmsk rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_blsr5820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF3, 0xC9", "blsr rdx, rcx");
}



#[test]
fn enc_bmi1_blsr5821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0xC9", "blsr rax, rcx");
}



#[test]
fn enc_bmi1_blsr5822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsr rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF3, 0x0C, 0x42", "blsr rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi1_tzcnt5823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xD9", "tzcnt rbx, rcx");
}



#[test]
fn enc_bmi1_tzcnt5824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0xC9", "tzcnt rcx, rcx");
}



#[test]
fn enc_bmi1_tzcnt5825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x10", "tzcnt rdx, QWORD [rax]");
}



#[test]
fn enc_bmi1_tzcnt5826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzcnt rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xBC, 0x04, 0x42", "tzcnt rax, QWORD [rax * 2 + rdx]");
}


