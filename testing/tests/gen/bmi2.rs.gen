
#[test]
fn enc_bmi2_bzhi5752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rdx, rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF5, 0xD1", "bzhi rdx, rcx, rax");
}



#[test]
fn enc_bmi2_bzhi5753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rcx, QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF5, 0x08", "bzhi rcx, QWORD [rax], rcx");
}



#[test]
fn enc_bmi2_bzhi5754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rcx, rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF5, 0xC9", "bzhi rcx, rcx, rdx");
}



#[test]
fn enc_bmi2_bzhi5755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rbx, rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF5, 0xD9", "bzhi rbx, rcx, rdx");
}



#[test]
fn enc_bmi2_bzhi5756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rbx, rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE0, 0xF5, 0xD9", "bzhi rbx, rcx, rbx");
}



#[test]
fn enc_bmi2_mulx5757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rcx, rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF6, 0xC9", "mulx rcx, rax, rcx");
}



#[test]
fn enc_bmi2_mulx5758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rax, rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF6, 0x04, 0x42", "mulx rax, rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_mulx5759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rax, rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF3, 0xF6, 0x04, 0x42", "mulx rax, rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_mulx5760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rax, rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF6, 0xC1", "mulx rax, rax, rcx");
}



#[test]
fn enc_bmi2_mulx5761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rcx, rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF6, 0x0C, 0x42", "mulx rcx, rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rcx, rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF5, 0xC9", "pdep rcx, rdx, rcx");
}



#[test]
fn enc_bmi2_pdep5763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rbx, rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF5, 0x1C, 0x42", "pdep rbx, rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rax, rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF3, 0xF5, 0x04, 0x42", "pdep rax, rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rdx, rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF5, 0xD1", "pdep rdx, rbx, rcx");
}



#[test]
fn enc_bmi2_pdep5766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rax, rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF5, 0xC1", "pdep rax, rdx, rcx");
}



#[test]
fn enc_bmi2_pext5767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rcx, rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF5, 0x08", "pext rcx, rcx, QWORD [rax]");
}



#[test]
fn enc_bmi2_pext5768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rax, rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF5, 0x00", "pext rax, rcx, QWORD [rax]");
}



#[test]
fn enc_bmi2_pext5769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rax, rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEA, 0xF5, 0x04, 0x42", "pext rax, rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pext5770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rcx, rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF5, 0xC9", "pext rcx, rcx, rcx");
}



#[test]
fn enc_bmi2_pext5771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rbx, rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF5, 0x1C, 0x42", "pext rbx, rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_rorx5772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rcx, QWORD [rax * 2 + rdx], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0x0C, 0x42, 0x1E", "rorx rcx, QWORD [rax * 2 + rdx], 30");
}



#[test]
fn enc_bmi2_rorx5773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rdx, rcx, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0xD1, 0x72", "rorx rdx, rcx, 114");
}



#[test]
fn enc_bmi2_rorx5774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rcx, rcx, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0xC9, 0x19", "rorx rcx, rcx, 25");
}



#[test]
fn enc_bmi2_rorx5775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rax, QWORD [rax], 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0x00, 0x77", "rorx rax, QWORD [rax], 119");
}



#[test]
fn enc_bmi2_rorx5776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rdx, QWORD [rax], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0x10, 0x1D", "rorx rdx, QWORD [rax], 29");
}



#[test]
fn enc_bmi2_sarx5777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rcx, QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF7, 0x08", "sarx rcx, QWORD [rax], rbx");
}



#[test]
fn enc_bmi2_sarx5778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rbx, rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF7, 0xD9", "sarx rbx, rcx, rbx");
}



#[test]
fn enc_bmi2_sarx5779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rax, QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF7, 0x00", "sarx rax, QWORD [rax], rcx");
}



#[test]
fn enc_bmi2_sarx5780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rdx, QWORD [rax * 2 + rdx], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF7, 0x14, 0x42", "sarx rdx, QWORD [rax * 2 + rdx], rbx");
}



#[test]
fn enc_bmi2_sarx5781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rcx, QWORD [rax * 2 + rdx], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF7, 0x0C, 0x42", "sarx rcx, QWORD [rax * 2 + rdx], rbx");
}



#[test]
fn enc_bmi2_shlx5782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rdx, QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xF7, 0x10", "shlx rdx, QWORD [rax], rdx");
}



#[test]
fn enc_bmi2_shlx5783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rax, rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xF7, 0xC1", "shlx rax, rcx, rbx");
}



#[test]
fn enc_bmi2_shlx5784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rdx, rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xF7, 0xD1", "shlx rdx, rcx, rax");
}



#[test]
fn enc_bmi2_shlx5785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rcx, QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xF7, 0x08", "shlx rcx, QWORD [rax], rbx");
}



#[test]
fn enc_bmi2_shlx5786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rdx, rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xF7, 0xD1", "shlx rdx, rcx, rdx");
}



#[test]
fn enc_bmi2_shrx5787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rdx, QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF7, 0x10", "shrx rdx, QWORD [rax], rdx");
}



#[test]
fn enc_bmi2_shrx5788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rdx, rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF3, 0xF7, 0xD1", "shrx rdx, rcx, rcx");
}



#[test]
fn enc_bmi2_shrx5789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rbx, QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF7, 0x1C, 0x42", "shrx rbx, QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_bmi2_shrx5790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rcx, QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF7, 0x08", "shrx rcx, QWORD [rax], rbx");
}



#[test]
fn enc_bmi2_shrx5791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rbx, QWORD [rax * 2 + rdx], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF7, 0x1C, 0x42", "shrx rbx, QWORD [rax * 2 + rdx], rbx");
}


