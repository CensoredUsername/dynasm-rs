
#[test]
fn enc_bmi2_bzhi5880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rcx, QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF5, 0x0C, 0x42", "bzhi rcx, QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_bmi2_bzhi5881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rbx, QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF0, 0xF5, 0x1C, 0x42", "bzhi rbx, QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_bmi2_bzhi5882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rax, rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF8, 0xF5, 0xC1", "bzhi rax, rcx, rax");
}



#[test]
fn enc_bmi2_bzhi5883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rdx, rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF5, 0xD1", "bzhi rdx, rcx, rdx");
}



#[test]
fn enc_bmi2_bzhi5884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bzhi rax, rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE8, 0xF5, 0xC1", "bzhi rax, rcx, rdx");
}



#[test]
fn enc_bmi2_mulx5885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rbx, rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF3, 0xF6, 0x18", "mulx rbx, rcx, QWORD [rax]");
}



#[test]
fn enc_bmi2_mulx5886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rbx, rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF6, 0x1C, 0x42", "mulx rbx, rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_mulx5887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rax, rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF3, 0xF6, 0x04, 0x42", "mulx rax, rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_mulx5888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rdx, rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF6, 0x10", "mulx rdx, rdx, QWORD [rax]");
}



#[test]
fn enc_bmi2_mulx5889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulx rcx, rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF6, 0x0C, 0x42", "mulx rcx, rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rbx, rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF5, 0xD9", "pdep rbx, rax, rcx");
}



#[test]
fn enc_bmi2_pdep5891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rax, rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF5, 0x04, 0x42", "pdep rax, rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rax, rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFB, 0xF5, 0x04, 0x42", "pdep rax, rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rbx, rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF5, 0x1C, 0x42", "pdep rbx, rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pdep5894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdep rdx, rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF5, 0x10", "pdep rdx, rbx, QWORD [rax]");
}



#[test]
fn enc_bmi2_pext5895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rcx, rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF5, 0x0C, 0x42", "pext rcx, rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_pext5896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rbx, rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF5, 0x18", "pext rbx, rbx, QWORD [rax]");
}



#[test]
fn enc_bmi2_pext5897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rax, rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEA, 0xF5, 0xC1", "pext rax, rdx, rcx");
}



#[test]
fn enc_bmi2_pext5898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pext rdx, rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF5, 0x14, 0x42", "pext rdx, rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_bmi2_rorx5899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rbx, QWORD [rax * 2 + rdx], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0x1C, 0x42, 0x29", "rorx rbx, QWORD [rax * 2 + rdx], 41");
}



#[test]
fn enc_bmi2_rorx5900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rcx, QWORD [rax * 2 + rdx], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0x0C, 0x42, 0x51", "rorx rcx, QWORD [rax * 2 + rdx], 81");
}



#[test]
fn enc_bmi2_rorx5901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rbx, QWORD [rax], 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0x18, 0x4B", "rorx rbx, QWORD [rax], 75");
}



#[test]
fn enc_bmi2_rorx5902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rdx, rcx, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0xD1, 0x4C", "rorx rdx, rcx, 76");
}



#[test]
fn enc_bmi2_rorx5903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rorx rdx, rcx, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xFB, 0xF0, 0xD1, 0x21", "rorx rdx, rcx, 33");
}



#[test]
fn enc_bmi2_sarx5904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rdx, QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE2, 0xF7, 0x10", "sarx rdx, QWORD [rax], rbx");
}



#[test]
fn enc_bmi2_sarx5905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rdx, QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEA, 0xF7, 0x14, 0x42", "sarx rdx, QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_bmi2_sarx5906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rax, QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF2, 0xF7, 0x04, 0x42", "sarx rax, QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_bmi2_sarx5907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sarx rbx, rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xFA, 0xF7, 0xD9", "sarx rbx, rcx, rax");
}



#[test]
fn enc_bmi2_shlx5908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rcx, QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xF7, 0x0C, 0x42", "shlx rcx, QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_bmi2_shlx5909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rdx, QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xF7, 0x14, 0x42", "shlx rdx, QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_bmi2_shlx5910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rcx, QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xF7, 0x0C, 0x42", "shlx rcx, QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_bmi2_shlx5911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rbx, QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xF7, 0x18", "shlx rbx, QWORD [rax], rdx");
}



#[test]
fn enc_bmi2_shlx5912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shlx rcx, QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xF7, 0x08", "shlx rcx, QWORD [rax], rdx");
}



#[test]
fn enc_bmi2_shrx5913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rdx, QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF7, 0x10", "shrx rdx, QWORD [rax], rdx");
}



#[test]
fn enc_bmi2_shrx5914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rbx, QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xEB, 0xF7, 0x1C, 0x42", "shrx rbx, QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_bmi2_shrx5915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rdx, rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF7, 0xD1", "shrx rdx, rcx, rbx");
}



#[test]
fn enc_bmi2_shrx5916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rcx, QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF7, 0x08", "shrx rcx, QWORD [rax], rbx");
}



#[test]
fn enc_bmi2_shrx5917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrx rcx, QWORD [rax * 2 + rdx], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE3, 0xF7, 0x0C, 0x42", "shrx rcx, QWORD [rax * 2 + rdx], rbx");
}


