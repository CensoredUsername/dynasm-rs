
#[test]
fn enc_fma_vfmadd123sd522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm3, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0xD9", "vfmadd123sd xmm3, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmadd123sd523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm12, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xA9, 0xE7", "vfmadd123sd xmm12, xmm0, xmm15");
}



#[test]
fn enc_fma_vfmadd123sd524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm12, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xA9, 0xE4", "vfmadd123sd xmm12, xmm2, xmm4");
}



#[test]
fn enc_fma_vfmadd123sd525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xA9, 0xC1", "vfmadd123sd xmm0, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmadd123sd526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm2, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xA9, 0xD2", "vfmadd123sd xmm2, xmm0, xmm2");
}



#[test]
fn enc_fma_vfmadd123sd527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm0, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xA9, 0x00", "vfmadd123sd xmm0, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123sd528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm4, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0x20", "vfmadd123sd xmm4, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123sd529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm4, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xA9, 0x60, 0x10", "vfmadd123sd xmm4, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm3, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xA9, 0x58, 0x10", "vfmadd123sd xmm3, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm12, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xA9, 0x60, 0x10", "vfmadd123sd xmm12, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123ss532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm3, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xA9, 0xDA", "vfmadd123ss xmm3, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmadd123ss533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm2, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xA9, 0xD3", "vfmadd123ss xmm2, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmadd123ss534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm0, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xA9, 0xC3", "vfmadd123ss xmm0, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmadd123ss535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm15, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0xA9, 0xFC", "vfmadd123ss xmm15, xmm11, xmm12");
}



#[test]
fn enc_fma_vfmadd123ss536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xA9, 0xDC", "vfmadd123ss xmm3, xmm15, xmm4");
}



#[test]
fn enc_fma_vfmadd123ss537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm0, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0x04, 0x42", "vfmadd123ss xmm0, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd123ss538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm0, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xA9, 0x00", "vfmadd123ss xmm0, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123ss539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm15, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xA9, 0x78, 0x10", "vfmadd123ss xmm15, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123ss540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm1, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xA9, 0x0C, 0x42", "vfmadd123ss xmm1, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd123ss541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm1, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xA9, 0x0C, 0x42", "vfmadd123ss xmm1, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132sd542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm2, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x99, 0xD2", "vfmadd132sd xmm2, xmm3, xmm2");
}



#[test]
fn enc_fma_vfmadd132sd543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm1, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x99, 0xCB", "vfmadd132sd xmm1, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd132sd544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm11, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x81, 0x99, 0xDB", "vfmadd132sd xmm11, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmadd132sd545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm15, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x81, 0x99, 0xFB", "vfmadd132sd xmm15, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmadd132sd546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm4, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0xE1", "vfmadd132sd xmm4, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmadd132sd547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm4, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x99, 0x20", "vfmadd132sd xmm4, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132sd548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm3, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0x58, 0x10", "vfmadd132sd xmm3, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132sd549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm0, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0x04, 0x42", "vfmadd132sd xmm0, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132sd550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm0, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x99, 0x40, 0x10", "vfmadd132sd xmm0, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132sd551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm0, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x99, 0x00", "vfmadd132sd xmm0, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm2, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x99, 0xD1", "vfmadd132ss xmm2, xmm15, xmm1");
}



#[test]
fn enc_fma_vfmadd132ss553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm0, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0x99, 0xC3", "vfmadd132ss xmm0, xmm2, xmm11");
}



#[test]
fn enc_fma_vfmadd132ss554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm4, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x99, 0xE1", "vfmadd132ss xmm4, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmadd132ss555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm2, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x99, 0xD2", "vfmadd132ss xmm2, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmadd132ss556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm12, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0x99, 0xE7", "vfmadd132ss xmm12, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmadd132ss557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm11, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x99, 0x58, 0x10", "vfmadd132ss xmm11, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132ss558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm3, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x99, 0x58, 0x10", "vfmadd132ss xmm3, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132ss559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm15, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x99, 0x78, 0x10", "vfmadd132ss xmm15, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132ss560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm4, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x99, 0x24, 0x42", "vfmadd132ss xmm4, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132ss561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm4, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x99, 0x24, 0x42", "vfmadd132ss xmm4, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213sd562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xA9, 0xDF", "vfmadd213sd xmm3, xmm4, xmm15");
}



#[test]
fn enc_fma_vfmadd213sd563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xA9, 0xC8", "vfmadd213sd xmm1, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmadd213sd564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm2, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xA9, 0xD3", "vfmadd213sd xmm2, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd213sd565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm3, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xA9, 0xDC", "vfmadd213sd xmm3, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmadd213sd566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm11, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xA9, 0xDB", "vfmadd213sd xmm11, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd213sd567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xA9, 0x0C, 0x42", "vfmadd213sd xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213sd568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm0, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xA9, 0x04, 0x42", "vfmadd213sd xmm0, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213sd569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xA9, 0x48, 0x10", "vfmadd213sd xmm1, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xA9, 0x1C, 0x42", "vfmadd213sd xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213sd571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xA9, 0x24, 0x42", "vfmadd213sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213ss572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm2, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0xD4", "vfmadd213ss xmm2, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmadd213ss573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xA9, 0xD3", "vfmadd213ss xmm2, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmadd213ss574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm15, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xA9, 0xFB", "vfmadd213ss xmm15, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd213ss575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm1, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xA9, 0xCB", "vfmadd213ss xmm1, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmadd213ss576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm2, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xA9, 0xD1", "vfmadd213ss xmm2, xmm11, xmm1");
}



#[test]
fn enc_fma_vfmadd213ss577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0x40, 0x10", "vfmadd213ss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213ss578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm15, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xA9, 0x38", "vfmadd213ss xmm15, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213ss579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm0, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xA9, 0x00", "vfmadd213ss xmm0, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213ss580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm2, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xA9, 0x10", "vfmadd213ss xmm2, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213ss581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm12, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xA9, 0x60, 0x10", "vfmadd213ss xmm12, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231sd582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm3, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xB9, 0xD8", "vfmadd231sd xmm3, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmadd231sd583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm3, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xB9, 0xDC", "vfmadd231sd xmm3, xmm15, xmm4");
}



#[test]
fn enc_fma_vfmadd231sd584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xB9, 0xC3", "vfmadd231sd xmm0, xmm12, xmm11");
}



#[test]
fn enc_fma_vfmadd231sd585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm11, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xB9, 0xDC", "vfmadd231sd xmm11, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmadd231sd586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm4, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xB9, 0xE0", "vfmadd231sd xmm4, xmm11, xmm0");
}



#[test]
fn enc_fma_vfmadd231sd587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm15, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xB9, 0x3C, 0x42", "vfmadd231sd xmm15, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xB9, 0x60, 0x10", "vfmadd231sd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231sd589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm3, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xB9, 0x1C, 0x42", "vfmadd231sd xmm3, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xB9, 0x1C, 0x42", "vfmadd231sd xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm4, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xB9, 0x60, 0x10", "vfmadd231sd xmm4, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231ss592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm1, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xB9, 0xC8", "vfmadd231ss xmm1, xmm2, xmm0");
}



#[test]
fn enc_fma_vfmadd231ss593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm3, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xB9, 0xDA", "vfmadd231ss xmm3, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmadd231ss594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm15, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xB9, 0xFC", "vfmadd231ss xmm15, xmm12, xmm4");
}



#[test]
fn enc_fma_vfmadd231ss595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm11, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xB9, 0xD8", "vfmadd231ss xmm11, xmm12, xmm0");
}



#[test]
fn enc_fma_vfmadd231ss596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm4, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xB9, 0xE2", "vfmadd231ss xmm4, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmadd231ss597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xB9, 0x38", "vfmadd231ss xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231ss598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm3, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xB9, 0x1C, 0x42", "vfmadd231ss xmm3, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231ss599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm1, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xB9, 0x08", "vfmadd231ss xmm1, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231ss600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm3, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xB9, 0x58, 0x10", "vfmadd231ss xmm3, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231ss601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm11, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xB9, 0x18", "vfmadd231ss xmm11, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm12, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x99, 0xE4", "vfmadd312sd xmm12, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmadd312sd603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x99, 0xD4", "vfmadd312sd xmm2, xmm2, xmm4");
}



#[test]
fn enc_fma_vfmadd312sd604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x99, 0xD1", "vfmadd312sd xmm2, xmm15, xmm1");
}



#[test]
fn enc_fma_vfmadd312sd605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0x99, 0xDF", "vfmadd312sd xmm11, xmm0, xmm15");
}



#[test]
fn enc_fma_vfmadd312sd606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm4, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x99, 0xE1", "vfmadd312sd xmm4, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmadd312sd607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x99, 0x38", "vfmadd312sd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm1, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x99, 0x0C, 0x42", "vfmadd312sd xmm1, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312sd609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x99, 0x10", "vfmadd312sd xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x99, 0x10", "vfmadd312sd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x99, 0x40, 0x10", "vfmadd312sd xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm4, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x99, 0xE7", "vfmadd312ss xmm4, xmm3, xmm15");
}



#[test]
fn enc_fma_vfmadd312ss613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm1, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x99, 0xCC", "vfmadd312ss xmm1, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmadd312ss614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm1, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x99, 0xCF", "vfmadd312ss xmm1, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmadd312ss615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm12, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x99, 0xE4", "vfmadd312ss xmm12, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmadd312ss616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm11, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x99, 0xDB", "vfmadd312ss xmm11, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd312ss617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x99, 0x0C, 0x42", "vfmadd312ss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312ss618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm1, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0x08", "vfmadd312ss xmm1, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312ss619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm11, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x99, 0x58, 0x10", "vfmadd312ss xmm11, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm4, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x99, 0x20", "vfmadd312ss xmm4, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312ss621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm0, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x99, 0x40, 0x10", "vfmadd312ss xmm0, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm3, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xB9, 0xD9", "vfmadd321sd xmm3, xmm11, xmm1");
}



#[test]
fn enc_fma_vfmadd321sd623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm4, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xB9, 0xE3", "vfmadd321sd xmm4, xmm4, xmm3");
}



#[test]
fn enc_fma_vfmadd321sd624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm2, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xB9, 0xD1", "vfmadd321sd xmm2, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmadd321sd625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm3, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xB9, 0xDC", "vfmadd321sd xmm3, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmadd321sd626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm3, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xB9, 0xDB", "vfmadd321sd xmm3, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd321sd627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm11, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xB9, 0x58, 0x10", "vfmadd321sd xmm11, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm3, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xB9, 0x58, 0x10", "vfmadd321sd xmm3, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xB9, 0x78, 0x10", "vfmadd321sd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xB9, 0x18", "vfmadd321sd xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321ss631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xB9, 0xDB", "vfmadd321ss xmm3, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmadd321ss632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm4, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xB9, 0xE2", "vfmadd321ss xmm4, xmm3, xmm2");
}



#[test]
fn enc_fma_vfmadd321ss633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm11, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xB9, 0xDB", "vfmadd321ss xmm11, xmm2, xmm3");
}



#[test]
fn enc_fma_vfmadd321ss634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xB9, 0xC3", "vfmadd321ss xmm0, xmm1, xmm3");
}



#[test]
fn enc_fma_vfmadd321ss635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm2, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0xB9, 0xD3", "vfmadd321ss xmm2, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmadd321ss636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm11, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xB9, 0x58, 0x10", "vfmadd321ss xmm11, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm2, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xB9, 0x14, 0x42", "vfmadd321ss xmm2, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321ss638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm2, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xB9, 0x10", "vfmadd321ss xmm2, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321ss639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm12, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xB9, 0x20", "vfmadd321ss xmm12, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321ss640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm15, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xB9, 0x3C, 0x42", "vfmadd321ss xmm15, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm15, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAB, 0xF9", "vfmsub123sd xmm15, xmm11, xmm1");
}



#[test]
fn enc_fma_vfmsub123sd642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAB, 0xC4", "vfmsub123sd xmm0, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmsub123sd643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0xC0", "vfmsub123sd xmm0, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmsub123sd644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm0, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xAB, 0xC4", "vfmsub123sd xmm0, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmsub123sd645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm4, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAB, 0xE3", "vfmsub123sd xmm4, xmm12, xmm3");
}



#[test]
fn enc_fma_vfmsub123sd646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAB, 0x04, 0x42", "vfmsub123sd xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAB, 0x58, 0x10", "vfmsub123sd xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123sd648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0x18", "vfmsub123sd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123sd649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0x48, 0x10", "vfmsub123sd xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123sd650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm0, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAB, 0x04, 0x42", "vfmsub123sd xmm0, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123ss651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm3, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xAB, 0xDC", "vfmsub123ss xmm3, xmm3, xmm12");
}



#[test]
fn enc_fma_vfmsub123ss652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm1, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xAB, 0xCB", "vfmsub123ss xmm1, xmm12, xmm11");
}



#[test]
fn enc_fma_vfmsub123ss653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm0, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xAB, 0xC4", "vfmsub123ss xmm0, xmm3, xmm12");
}



#[test]
fn enc_fma_vfmsub123ss654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm3, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAB, 0xDC", "vfmsub123ss xmm3, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmsub123ss655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm4, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAB, 0xE0", "vfmsub123ss xmm4, xmm3, xmm0");
}



#[test]
fn enc_fma_vfmsub123ss656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm4, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAB, 0x60, 0x10", "vfmsub123ss xmm4, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm0, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAB, 0x40, 0x10", "vfmsub123ss xmm0, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm11, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xAB, 0x58, 0x10", "vfmsub123ss xmm11, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm2, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAB, 0x50, 0x10", "vfmsub123ss xmm2, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm12, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAB, 0x20", "vfmsub123ss xmm12, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132sd661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm15, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0x9B, 0xFF", "vfmsub132sd xmm15, xmm1, xmm15");
}



#[test]
fn enc_fma_vfmsub132sd662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm12, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9B, 0xE1", "vfmsub132sd xmm12, xmm15, xmm1");
}



#[test]
fn enc_fma_vfmsub132sd663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm4, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0xE3", "vfmsub132sd xmm4, xmm11, xmm3");
}



#[test]
fn enc_fma_vfmsub132sd664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm1, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0x9B, 0xCF", "vfmsub132sd xmm1, xmm12, xmm15");
}



#[test]
fn enc_fma_vfmsub132sd665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm12, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x9B, 0xE3", "vfmsub132sd xmm12, xmm12, xmm3");
}



#[test]
fn enc_fma_vfmsub132sd666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm0, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9B, 0x00", "vfmsub132sd xmm0, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132sd667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm12, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9B, 0x60, 0x10", "vfmsub132sd xmm12, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132sd668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm0, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0x40, 0x10", "vfmsub132sd xmm0, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132sd669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm12, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9B, 0x60, 0x10", "vfmsub132sd xmm12, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132sd670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm4, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9B, 0x60, 0x10", "vfmsub132sd xmm4, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132ss671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm4, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9B, 0xE3", "vfmsub132ss xmm4, xmm2, xmm3");
}



#[test]
fn enc_fma_vfmsub132ss672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm2, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x9B, 0xD3", "vfmsub132ss xmm2, xmm1, xmm11");
}



#[test]
fn enc_fma_vfmsub132ss673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm2, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9B, 0xD0", "vfmsub132ss xmm2, xmm11, xmm0");
}



#[test]
fn enc_fma_vfmsub132ss674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm0, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0x9B, 0xC4", "vfmsub132ss xmm0, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmsub132ss675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9B, 0xDA", "vfmsub132ss xmm3, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmsub132ss676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm11, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9B, 0x1C, 0x42", "vfmsub132ss xmm11, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132ss677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm11, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0x9B, 0x58, 0x10", "vfmsub132ss xmm11, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132ss678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm3, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9B, 0x18", "vfmsub132ss xmm3, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132ss679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm15, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9B, 0x38", "vfmsub132ss xmm15, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132ss680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm0, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9B, 0x04, 0x42", "vfmsub132ss xmm0, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm4, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAB, 0xE1", "vfmsub213sd xmm4, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmsub213sd682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm4, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xAB, 0xE7", "vfmsub213sd xmm4, xmm3, xmm15");
}



#[test]
fn enc_fma_vfmsub213sd683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0xD3", "vfmsub213sd xmm2, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmsub213sd684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xAB, 0xDF", "vfmsub213sd xmm3, xmm4, xmm15");
}



#[test]
fn enc_fma_vfmsub213sd685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm2, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0xAB, 0xD4", "vfmsub213sd xmm2, xmm15, xmm12");
}



#[test]
fn enc_fma_vfmsub213sd686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xAB, 0x1C, 0x42", "vfmsub213sd xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xAB, 0x24, 0x42", "vfmsub213sd xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm2, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0x14, 0x42", "vfmsub213sd xmm2, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0x04, 0x42", "vfmsub213sd xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAB, 0x38", "vfmsub213sd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm11, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAB, 0xDC", "vfmsub213ss xmm11, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAB, 0xD2", "vfmsub213ss xmm2, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmsub213ss693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAB, 0xDC", "vfmsub213ss xmm3, xmm4, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm3, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAB, 0xD9", "vfmsub213ss xmm3, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmsub213ss695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm0, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAB, 0xC4", "vfmsub213ss xmm0, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm3, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAB, 0x58, 0x10", "vfmsub213ss xmm3, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub213ss697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm3, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAB, 0x18", "vfmsub213ss xmm3, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm2, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAB, 0x14, 0x42", "vfmsub213ss xmm2, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213ss699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAB, 0x40, 0x10", "vfmsub213ss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub213ss700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm11, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAB, 0x1C, 0x42", "vfmsub213ss xmm11, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub231sd701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBB, 0xC9", "vfmsub231sd xmm1, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmsub231sd702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm2, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0xD0", "vfmsub231sd xmm2, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmsub231sd703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm4, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xBB, 0xE4", "vfmsub231sd xmm4, xmm12, xmm12");
}



#[test]
fn enc_fma_vfmsub231sd704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm12, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE1, 0xBB, 0xE3", "vfmsub231sd xmm12, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmsub231sd705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm2, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBB, 0xD2", "vfmsub231sd xmm2, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmsub231sd706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm4, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0x24, 0x42", "vfmsub231sd xmm4, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub231sd707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm3, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBB, 0x58, 0x10", "vfmsub231sd xmm3, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBB, 0x78, 0x10", "vfmsub231sd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBB, 0x20", "vfmsub231sd xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231sd710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm4, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBB, 0x60, 0x10", "vfmsub231sd xmm4, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231ss711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm3, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBB, 0xDA", "vfmsub231ss xmm3, xmm0, xmm2");
}



#[test]
fn enc_fma_vfmsub231ss712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xBB, 0xDF", "vfmsub231ss xmm11, xmm0, xmm15");
}



#[test]
fn enc_fma_vfmsub231ss713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBB, 0xDA", "vfmsub231ss xmm3, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmsub231ss714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm2, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0xD0", "vfmsub231ss xmm2, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmsub231ss715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm11, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBB, 0xDA", "vfmsub231ss xmm11, xmm4, xmm2");
}



#[test]
fn enc_fma_vfmsub231ss716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm3, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBB, 0x18", "vfmsub231ss xmm3, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm4, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBB, 0x20", "vfmsub231ss xmm4, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm1, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBB, 0x08", "vfmsub231ss xmm1, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm12, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xBB, 0x60, 0x10", "vfmsub231ss xmm12, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231ss720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm15, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBB, 0x78, 0x10", "vfmsub231ss xmm15, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312sd721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm3, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9B, 0xDA", "vfmsub312sd xmm3, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmsub312sd722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0xC1", "vfmsub312sd xmm0, xmm11, xmm1");
}



#[test]
fn enc_fma_vfmsub312sd723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm0, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0x9B, 0xC7", "vfmsub312sd xmm0, xmm4, xmm15");
}



#[test]
fn enc_fma_vfmsub312sd724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0xD2", "vfmsub312sd xmm2, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmsub312sd725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm4, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0xE4", "vfmsub312sd xmm4, xmm12, xmm4");
}



#[test]
fn enc_fma_vfmsub312sd726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm3, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0x58, 0x10", "vfmsub312sd xmm3, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312sd727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0x9B, 0x78, 0x10", "vfmsub312sd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312sd728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm4, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9B, 0x60, 0x10", "vfmsub312sd xmm4, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312sd729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm1, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9B, 0x48, 0x10", "vfmsub312sd xmm1, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312sd730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm3, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0x1C, 0x42", "vfmsub312sd xmm3, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312ss731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm4, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9B, 0xE1", "vfmsub312ss xmm4, xmm1, xmm1");
}



#[test]
fn enc_fma_vfmsub312ss732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm3, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x9B, 0xDA", "vfmsub312ss xmm3, xmm3, xmm2");
}



#[test]
fn enc_fma_vfmsub312ss733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0x9B, 0xFC", "vfmsub312ss xmm15, xmm3, xmm4");
}



#[test]
fn enc_fma_vfmsub312ss734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm3, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0x9B, 0xDB", "vfmsub312ss xmm3, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmsub312ss735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm11, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0x9B, 0xDC", "vfmsub312ss xmm11, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmsub312ss736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm2, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9B, 0x10", "vfmsub312ss xmm2, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312ss737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm0, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9B, 0x40, 0x10", "vfmsub312ss xmm0, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312ss738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm0, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9B, 0x04, 0x42", "vfmsub312ss xmm0, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312ss739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm12, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9B, 0x24, 0x42", "vfmsub312ss xmm12, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312ss740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm11, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x9B, 0x58, 0x10", "vfmsub312ss xmm11, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub321sd741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm1, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF1, 0xBB, 0xCB", "vfmsub321sd xmm1, xmm1, xmm11");
}



#[test]
fn enc_fma_vfmsub321sd742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBB, 0xDA", "vfmsub321sd xmm3, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmsub321sd743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm11, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xBB, 0xDC", "vfmsub321sd xmm11, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmsub321sd744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBB, 0xC4", "vfmsub321sd xmm0, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmsub321sd745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm3, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBB, 0xDB", "vfmsub321sd xmm3, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmsub321sd746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBB, 0x20", "vfmsub321sd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321sd747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBB, 0x0C, 0x42", "vfmsub321sd xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBB, 0x04, 0x42", "vfmsub321sd xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm15, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBB, 0x38", "vfmsub321sd xmm15, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321sd750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xBB, 0x38", "vfmsub321sd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm15, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xBB, 0xFC", "vfmsub321ss xmm15, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmsub321ss752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm2, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0xBB, 0xD3", "vfmsub321ss xmm2, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmsub321ss753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm15, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xBB, 0xFF", "vfmsub321ss xmm15, xmm3, xmm15");
}



#[test]
fn enc_fma_vfmsub321ss754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBB, 0xC8", "vfmsub321ss xmm1, xmm11, xmm0");
}



#[test]
fn enc_fma_vfmsub321ss755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x79, 0xBB, 0xFC", "vfmsub321ss xmm15, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmsub321ss756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm11, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xBB, 0x1C, 0x42", "vfmsub321ss xmm11, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321ss757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm0, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0x40, 0x10", "vfmsub321ss xmm0, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub321ss758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm3, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBB, 0x1C, 0x42", "vfmsub321ss xmm3, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321ss759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBB, 0x0C, 0x42", "vfmsub321ss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321ss760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm3, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0x58, 0x10", "vfmsub321ss xmm3, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123sd761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm12, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x99, 0xAD, 0xE7", "vfnmadd123sd xmm12, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmadd123sd762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm12, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xAD, 0xE4", "vfnmadd123sd xmm12, xmm0, xmm12");
}



#[test]
fn enc_fma_vfnmadd123sd763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm15, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xAD, 0xFB", "vfnmadd123sd xmm15, xmm12, xmm3");
}



#[test]
fn enc_fma_vfnmadd123sd764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm15, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xAD, 0xF9", "vfnmadd123sd xmm15, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmadd123sd765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm0, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0xC4", "vfnmadd123sd xmm0, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmadd123sd766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm4, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAD, 0x24, 0x42", "vfnmadd123sd xmm4, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123sd767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0x14, 0x42", "vfnmadd123sd xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123sd768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xAD, 0x20", "vfnmadd123sd xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123sd769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm15, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xAD, 0x3C, 0x42", "vfnmadd123sd xmm15, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123sd770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAD, 0x24, 0x42", "vfnmadd123sd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123ss771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm2, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAD, 0xD4", "vfnmadd123ss xmm2, xmm0, xmm4");
}



#[test]
fn enc_fma_vfnmadd123ss772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm4, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0xE2", "vfnmadd123ss xmm4, xmm11, xmm2");
}



#[test]
fn enc_fma_vfnmadd123ss773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm0, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAD, 0xC0", "vfnmadd123ss xmm0, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmadd123ss774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0xC9", "vfnmadd123ss xmm1, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmadd123ss775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm12, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xAD, 0xE4", "vfnmadd123ss xmm12, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmadd123ss776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm3, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAD, 0x18", "vfnmadd123ss xmm3, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm1, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0x0C, 0x42", "vfnmadd123ss xmm1, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123ss778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm12, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xAD, 0x60, 0x10", "vfnmadd123ss xmm12, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123ss779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm2, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAD, 0x14, 0x42", "vfnmadd123ss xmm2, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123ss780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm1, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAD, 0x08", "vfnmadd123ss xmm1, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132sd781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm0, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9D, 0xC1", "vfnmadd132sd xmm0, xmm4, xmm1");
}



#[test]
fn enc_fma_vfnmadd132sd782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm12, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0x9D, 0xE7", "vfnmadd132sd xmm12, xmm11, xmm15");
}



#[test]
fn enc_fma_vfnmadd132sd783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9D, 0xE2", "vfnmadd132sd xmm12, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmadd132sd784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm12, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0x9D, 0xE4", "vfnmadd132sd xmm12, xmm11, xmm12");
}



#[test]
fn enc_fma_vfnmadd132sd785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm0, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0x9D, 0xC7", "vfnmadd132sd xmm0, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmadd132sd786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9D, 0x18", "vfnmadd132sd xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132sd787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9D, 0x38", "vfnmadd132sd xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132sd788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm15, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0x9D, 0x38", "vfnmadd132sd xmm15, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132sd789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9D, 0x1C, 0x42", "vfnmadd132sd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132sd790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm1, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9D, 0x48, 0x10", "vfnmadd132sd xmm1, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132ss791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm11, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9D, 0xDC", "vfnmadd132ss xmm11, xmm0, xmm4");
}



#[test]
fn enc_fma_vfnmadd132ss792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm0, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9D, 0xC3", "vfnmadd132ss xmm0, xmm15, xmm3");
}



#[test]
fn enc_fma_vfnmadd132ss793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm2, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9D, 0xD1", "vfnmadd132ss xmm2, xmm12, xmm1");
}



#[test]
fn enc_fma_vfnmadd132ss794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm4, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x9D, 0xE3", "vfnmadd132ss xmm4, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd132ss795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm12, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0x9D, 0xE3", "vfnmadd132ss xmm12, xmm2, xmm11");
}



#[test]
fn enc_fma_vfnmadd132ss796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm3, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9D, 0x58, 0x10", "vfnmadd132ss xmm3, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132ss797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm1, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9D, 0x08", "vfnmadd132ss xmm1, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm3, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9D, 0x18", "vfnmadd132ss xmm3, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm12, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x9D, 0x60, 0x10", "vfnmadd132ss xmm12, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132ss800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm1, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9D, 0x48, 0x10", "vfnmadd132ss xmm1, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213sd801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm11, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAD, 0xDC", "vfnmadd213sd xmm11, xmm0, xmm4");
}



#[test]
fn enc_fma_vfnmadd213sd802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm3, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAD, 0xD8", "vfnmadd213sd xmm3, xmm4, xmm0");
}



#[test]
fn enc_fma_vfnmadd213sd803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm0, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xAD, 0xC7", "vfnmadd213sd xmm0, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmadd213sd804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm3, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xAD, 0xDB", "vfnmadd213sd xmm3, xmm2, xmm11");
}



#[test]
fn enc_fma_vfnmadd213sd805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAD, 0xC1", "vfnmadd213sd xmm0, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmadd213sd806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0x08", "vfnmadd213sd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm2, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAD, 0x10", "vfnmadd213sd xmm2, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm12, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAD, 0x60, 0x10", "vfnmadd213sd xmm12, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213sd809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm2, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0x10", "vfnmadd213sd xmm2, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm12, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xAD, 0x60, 0x10", "vfnmadd213sd xmm12, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213ss811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAD, 0xC3", "vfnmadd213ss xmm0, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmadd213ss812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm12, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x01, 0xAD, 0xE4", "vfnmadd213ss xmm12, xmm15, xmm12");
}



#[test]
fn enc_fma_vfnmadd213ss813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm15, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAD, 0xFC", "vfnmadd213ss xmm15, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmadd213ss814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xAD, 0xCC", "vfnmadd213ss xmm1, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmadd213ss815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAD, 0xD2", "vfnmadd213ss xmm2, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmadd213ss816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm12, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xAD, 0x24, 0x42", "vfnmadd213ss xmm12, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213ss817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm3, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAD, 0x1C, 0x42", "vfnmadd213ss xmm3, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213ss818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAD, 0x08", "vfnmadd213ss xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213ss819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm1, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAD, 0x48, 0x10", "vfnmadd213ss xmm1, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213ss820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm4, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0x20", "vfnmadd213ss xmm4, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231sd821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xBD, 0xDB", "vfnmadd231sd xmm3, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd231sd822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm15, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xBD, 0xFB", "vfnmadd231sd xmm15, xmm0, xmm11");
}



#[test]
fn enc_fma_vfnmadd231sd823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm2, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBD, 0xD2", "vfnmadd231sd xmm2, xmm0, xmm2");
}



#[test]
fn enc_fma_vfnmadd231sd824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm2, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0xBD, 0xD7", "vfnmadd231sd xmm2, xmm15, xmm15");
}



#[test]
fn enc_fma_vfnmadd231sd825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm15, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBD, 0xF9", "vfnmadd231sd xmm15, xmm1, xmm1");
}



#[test]
fn enc_fma_vfnmadd231sd826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm12, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xBD, 0x60, 0x10", "vfnmadd231sd xmm12, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm0, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBD, 0x00", "vfnmadd231sd xmm0, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231sd828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBD, 0x58, 0x10", "vfnmadd231sd xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBD, 0x1C, 0x42", "vfnmadd231sd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231sd830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBD, 0x58, 0x10", "vfnmadd231sd xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231ss831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm0, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBD, 0xC4", "vfnmadd231ss xmm0, xmm12, xmm4");
}



#[test]
fn enc_fma_vfnmadd231ss832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm0, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBD, 0xC4", "vfnmadd231ss xmm0, xmm15, xmm4");
}



#[test]
fn enc_fma_vfnmadd231ss833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xBD, 0xDA", "vfnmadd231ss xmm11, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmadd231ss834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm0, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xBD, 0xC4", "vfnmadd231ss xmm0, xmm15, xmm12");
}



#[test]
fn enc_fma_vfnmadd231ss835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0xCC", "vfnmadd231ss xmm1, xmm3, xmm4");
}



#[test]
fn enc_fma_vfnmadd231ss836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm1, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBD, 0x0C, 0x42", "vfnmadd231ss xmm1, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231ss837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm3, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0x18", "vfnmadd231ss xmm3, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231ss838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm1, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBD, 0x48, 0x10", "vfnmadd231ss xmm1, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231ss839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm3, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBD, 0x58, 0x10", "vfnmadd231ss xmm3, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231ss840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm0, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBD, 0x04, 0x42", "vfnmadd231ss xmm0, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312sd841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0x9D, 0xDF", "vfnmadd312sd xmm3, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmadd312sd842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm1, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0xCA", "vfnmadd312sd xmm1, xmm15, xmm2");
}



#[test]
fn enc_fma_vfnmadd312sd843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm12, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x9D, 0xE3", "vfnmadd312sd xmm12, xmm12, xmm3");
}



#[test]
fn enc_fma_vfnmadd312sd844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm3, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0x9D, 0xDC", "vfnmadd312sd xmm3, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmadd312sd845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm15, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9D, 0xFC", "vfnmadd312sd xmm15, xmm15, xmm4");
}



#[test]
fn enc_fma_vfnmadd312sd846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm12, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9D, 0x24, 0x42", "vfnmadd312sd xmm12, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312sd847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm1, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0x48, 0x10", "vfnmadd312sd xmm1, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312sd848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm4, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0x60, 0x10", "vfnmadd312sd xmm4, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312sd849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0x9D, 0x24, 0x42", "vfnmadd312sd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312sd850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm2, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0x10", "vfnmadd312sd xmm2, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0x9D, 0xCB", "vfnmadd312ss xmm1, xmm12, xmm11");
}



#[test]
fn enc_fma_vfnmadd312ss852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm15, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9D, 0xFC", "vfnmadd312ss xmm15, xmm15, xmm4");
}



#[test]
fn enc_fma_vfnmadd312ss853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0x9D, 0xDF", "vfnmadd312ss xmm3, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmadd312ss854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm0, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0x9D, 0xC7", "vfnmadd312ss xmm0, xmm11, xmm15");
}



#[test]
fn enc_fma_vfnmadd312ss855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm12, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0x9D, 0xE4", "vfnmadd312ss xmm12, xmm11, xmm12");
}



#[test]
fn enc_fma_vfnmadd312ss856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x9D, 0x08", "vfnmadd312ss xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm3, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9D, 0x18", "vfnmadd312ss xmm3, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9D, 0x48, 0x10", "vfnmadd312ss xmm1, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312ss859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm2, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9D, 0x50, 0x10", "vfnmadd312ss xmm2, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312ss860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9D, 0x0C, 0x42", "vfnmadd312ss xmm1, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321sd861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm0, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xBD, 0xC3", "vfnmadd321sd xmm0, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd321sd862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm4, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xBD, 0xE7", "vfnmadd321sd xmm4, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmadd321sd863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm4, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xBD, 0xE3", "vfnmadd321sd xmm4, xmm2, xmm11");
}



#[test]
fn enc_fma_vfnmadd321sd864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBD, 0xC4", "vfnmadd321sd xmm0, xmm3, xmm4");
}



#[test]
fn enc_fma_vfnmadd321sd865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm3, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBD, 0xD8", "vfnmadd321sd xmm3, xmm11, xmm0");
}



#[test]
fn enc_fma_vfnmadd321sd866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm11, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBD, 0x1C, 0x42", "vfnmadd321sd xmm11, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321sd867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBD, 0x24, 0x42", "vfnmadd321sd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321sd868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBD, 0x24, 0x42", "vfnmadd321sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321sd869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm1, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBD, 0x48, 0x10", "vfnmadd321sd xmm1, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321sd870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xBD, 0x58, 0x10", "vfnmadd321sd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm2, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xBD, 0xD3", "vfnmadd321ss xmm2, xmm0, xmm11");
}



#[test]
fn enc_fma_vfnmadd321ss872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm4, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0xE3", "vfnmadd321ss xmm4, xmm3, xmm3");
}



#[test]
fn enc_fma_vfnmadd321ss873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm0, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xBD, 0xC3", "vfnmadd321ss xmm0, xmm15, xmm11");
}



#[test]
fn enc_fma_vfnmadd321ss874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm12, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBD, 0xE3", "vfnmadd321ss xmm12, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmadd321ss875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm1, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBD, 0xCA", "vfnmadd321ss xmm1, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmadd321ss876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm2, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBD, 0x10", "vfnmadd321ss xmm2, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321ss877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm3, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0x58, 0x10", "vfnmadd321ss xmm3, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0x40, 0x10", "vfnmadd321ss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm12, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xBD, 0x24, 0x42", "vfnmadd321ss xmm12, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321ss880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0x18", "vfnmadd321ss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123sd881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm2, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xAF, 0xD7", "vfnmsub123sd xmm2, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmsub123sd882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm3, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xAF, 0xDC", "vfnmsub123sd xmm3, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmsub123sd883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm1, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAF, 0xCC", "vfnmsub123sd xmm1, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmsub123sd884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm0, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xAF, 0xC3", "vfnmsub123sd xmm0, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmsub123sd885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm3, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAF, 0xDA", "vfnmsub123sd xmm3, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmsub123sd886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm2, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAF, 0x10", "vfnmsub123sd xmm2, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123sd887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAF, 0x78, 0x10", "vfnmsub123sd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm0, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xAF, 0x40, 0x10", "vfnmsub123sd xmm0, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm0, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAF, 0x00", "vfnmsub123sd xmm0, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123sd890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm0, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAF, 0x00", "vfnmsub123sd xmm0, xmm1, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAF, 0xDB", "vfnmsub123ss xmm3, xmm3, xmm3");
}



#[test]
fn enc_fma_vfnmsub123ss892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm0, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xAF, 0xC7", "vfnmsub123ss xmm0, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmsub123ss893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm2, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0xAF, 0xD3", "vfnmsub123ss xmm2, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmsub123ss894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm3, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAF, 0xD8", "vfnmsub123ss xmm3, xmm1, xmm0");
}



#[test]
fn enc_fma_vfnmsub123ss895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAF, 0xCC", "vfnmsub123ss xmm1, xmm3, xmm4");
}



#[test]
fn enc_fma_vfnmsub123ss896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm11, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAF, 0x58, 0x10", "vfnmsub123ss xmm11, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123ss897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm1, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAF, 0x48, 0x10", "vfnmsub123ss xmm1, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123ss898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAF, 0x20", "vfnmsub123ss xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm3, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAF, 0x58, 0x10", "vfnmsub123ss xmm3, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123ss900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm4, xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAF, 0x24, 0x42", "vfnmsub123ss xmm4, xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132sd901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9F, 0xC3", "vfnmsub132sd xmm0, xmm11, xmm3");
}



#[test]
fn enc_fma_vfnmsub132sd902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9F, 0xC9", "vfnmsub132sd xmm1, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmsub132sd903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm4, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9F, 0xE4", "vfnmsub132sd xmm4, xmm12, xmm4");
}



#[test]
fn enc_fma_vfnmsub132sd904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9F, 0xD9", "vfnmsub132sd xmm11, xmm2, xmm1");
}



#[test]
fn enc_fma_vfnmsub132sd905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm11, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9F, 0xD9", "vfnmsub132sd xmm11, xmm4, xmm1");
}



#[test]
fn enc_fma_vfnmsub132sd906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm1, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9F, 0x08", "vfnmsub132sd xmm1, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm0, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9F, 0x04, 0x42", "vfnmsub132sd xmm0, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132sd908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm11, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0x9F, 0x18", "vfnmsub132sd xmm11, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm11, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9F, 0x58, 0x10", "vfnmsub132sd xmm11, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub132sd910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm11, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x9F, 0x1C, 0x42", "vfnmsub132sd xmm11, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132ss911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9F, 0xC1", "vfnmsub132ss xmm0, xmm12, xmm1");
}



#[test]
fn enc_fma_vfnmsub132ss912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm1, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x9F, 0xCB", "vfnmsub132ss xmm1, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmsub132ss913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm15, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0x9F, 0xFC", "vfnmsub132ss xmm15, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmsub132ss914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm4, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9F, 0xE2", "vfnmsub132ss xmm4, xmm2, xmm2");
}



#[test]
fn enc_fma_vfnmsub132ss915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm1, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0x9F, 0xCC", "vfnmsub132ss xmm1, xmm12, xmm12");
}



#[test]
fn enc_fma_vfnmsub132ss916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm12, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x9F, 0x20", "vfnmsub132ss xmm12, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm11, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9F, 0x18", "vfnmsub132ss xmm11, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm3, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0x18", "vfnmsub132ss xmm3, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9F, 0x20", "vfnmsub132ss xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm1, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9F, 0x48, 0x10", "vfnmsub132ss xmm1, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213sd921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAF, 0xE0", "vfnmsub213sd xmm12, xmm11, xmm0");
}



#[test]
fn enc_fma_vfnmsub213sd922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm11, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAF, 0xDC", "vfnmsub213sd xmm11, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmsub213sd923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm3, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF1, 0xAF, 0xDC", "vfnmsub213sd xmm3, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmsub213sd924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAF, 0xE1", "vfnmsub213sd xmm12, xmm0, xmm1");
}



#[test]
fn enc_fma_vfnmsub213sd925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAF, 0xE4", "vfnmsub213sd xmm12, xmm0, xmm4");
}



#[test]
fn enc_fma_vfnmsub213sd926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm3, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAF, 0x58, 0x10", "vfnmsub213sd xmm3, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213sd927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm2, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAF, 0x50, 0x10", "vfnmsub213sd xmm2, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213sd928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm0, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAF, 0x04, 0x42", "vfnmsub213sd xmm0, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213sd929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm2, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAF, 0x14, 0x42", "vfnmsub213sd xmm2, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213sd930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xAF, 0x60, 0x10", "vfnmsub213sd xmm12, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm1, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAF, 0xC8", "vfnmsub213ss xmm1, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmsub213ss932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm11, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xAF, 0xDB", "vfnmsub213ss xmm11, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmsub213ss933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm3, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAF, 0xD8", "vfnmsub213ss xmm3, xmm0, xmm0");
}



#[test]
fn enc_fma_vfnmsub213ss934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm3, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAF, 0xD9", "vfnmsub213ss xmm3, xmm2, xmm1");
}



#[test]
fn enc_fma_vfnmsub213ss935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm12, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAF, 0xE3", "vfnmsub213ss xmm12, xmm4, xmm3");
}



#[test]
fn enc_fma_vfnmsub213ss936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm3, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0x58, 0x10", "vfnmsub213ss xmm3, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xAF, 0x38", "vfnmsub213ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213ss938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm1, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAF, 0x08", "vfnmsub213ss xmm1, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213ss939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm12, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xAF, 0x24, 0x42", "vfnmsub213ss xmm12, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213ss940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm1, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAF, 0x0C, 0x42", "vfnmsub213ss xmm1, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm11, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBF, 0xDC", "vfnmsub231sd xmm11, xmm12, xmm4");
}



#[test]
fn enc_fma_vfnmsub231sd942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm15, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xD9, 0xBF, 0xFC", "vfnmsub231sd xmm15, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmsub231sd943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xBF, 0xDB", "vfnmsub231sd xmm3, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmsub231sd944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBF, 0xF8", "vfnmsub231sd xmm15, xmm0, xmm0");
}



#[test]
fn enc_fma_vfnmsub231sd945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm4, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0xBF, 0xE3", "vfnmsub231sd xmm4, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmsub231sd946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm2, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBF, 0x50, 0x10", "vfnmsub231sd xmm2, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231sd947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBF, 0x18", "vfnmsub231sd xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub231sd948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm1, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBF, 0x08", "vfnmsub231sd xmm1, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub231sd949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xBF, 0x1C, 0x42", "vfnmsub231sd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBF, 0x10", "vfnmsub231sd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub231ss951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm4, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBF, 0xE2", "vfnmsub231ss xmm4, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmsub231ss952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm4, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xBF, 0xE3", "vfnmsub231ss xmm4, xmm1, xmm11");
}



#[test]
fn enc_fma_vfnmsub231ss953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm11, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0xBF, 0xDC", "vfnmsub231ss xmm11, xmm11, xmm12");
}



#[test]
fn enc_fma_vfnmsub231ss954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm0, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBF, 0xC0", "vfnmsub231ss xmm0, xmm1, xmm0");
}



#[test]
fn enc_fma_vfnmsub231ss955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBF, 0xE1", "vfnmsub231ss xmm12, xmm4, xmm1");
}



#[test]
fn enc_fma_vfnmsub231ss956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm3, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0x18", "vfnmsub231ss xmm3, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub231ss957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm2, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0x50, 0x10", "vfnmsub231ss xmm2, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm3, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0x1C, 0x42", "vfnmsub231ss xmm3, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231ss959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBF, 0x18", "vfnmsub231ss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub231ss960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm0, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBF, 0x40, 0x10", "vfnmsub231ss xmm0, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm15, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE9, 0x9F, 0xFB", "vfnmsub312sd xmm15, xmm2, xmm11");
}



#[test]
fn enc_fma_vfnmsub312sd962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9F, 0xE2", "vfnmsub312sd xmm12, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmsub312sd963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm12, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9F, 0xE4", "vfnmsub312sd xmm12, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmsub312sd964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm4, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9F, 0xE4", "vfnmsub312sd xmm4, xmm1, xmm4");
}



#[test]
fn enc_fma_vfnmsub312sd965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm15, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9F, 0xF9", "vfnmsub312sd xmm15, xmm2, xmm1");
}



#[test]
fn enc_fma_vfnmsub312sd966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9F, 0x18", "vfnmsub312sd xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312sd967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm2, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9F, 0x50, 0x10", "vfnmsub312sd xmm2, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9F, 0x58, 0x10", "vfnmsub312sd xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm15, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0x9F, 0x78, 0x10", "vfnmsub312sd xmm15, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm1, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9F, 0x0C, 0x42", "vfnmsub312sd xmm1, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub312ss971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm0, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9F, 0xC3", "vfnmsub312ss xmm0, xmm12, xmm3");
}



#[test]
fn enc_fma_vfnmsub312ss972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0xC0", "vfnmsub312ss xmm0, xmm0, xmm0");
}



#[test]
fn enc_fma_vfnmsub312ss973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm3, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x9F, 0xDA", "vfnmsub312ss xmm3, xmm3, xmm2");
}



#[test]
fn enc_fma_vfnmsub312ss974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0x9F, 0xCC", "vfnmsub312ss xmm1, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmsub312ss975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm11, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0x9F, 0xDF", "vfnmsub312ss xmm11, xmm11, xmm15");
}



#[test]
fn enc_fma_vfnmsub312ss976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm3, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9F, 0x18", "vfnmsub312ss xmm3, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x9F, 0x18", "vfnmsub312ss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm11, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9F, 0x18", "vfnmsub312ss xmm11, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm0, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0x00", "vfnmsub312ss xmm0, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm2, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9F, 0x50, 0x10", "vfnmsub312ss xmm2, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321sd981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm11, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0xDA", "vfnmsub321sd xmm11, xmm11, xmm2");
}



#[test]
fn enc_fma_vfnmsub321sd982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm4, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xBF, 0xE3", "vfnmsub321sd xmm4, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmsub321sd983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm12, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0xE0", "vfnmsub321sd xmm12, xmm11, xmm0");
}



#[test]
fn enc_fma_vfnmsub321sd984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm11, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0xD8", "vfnmsub321sd xmm11, xmm11, xmm0");
}



#[test]
fn enc_fma_vfnmsub321sd985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm4, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xBF, 0xE7", "vfnmsub321sd xmm4, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmsub321sd986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm1, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBF, 0x0C, 0x42", "vfnmsub321sd xmm1, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321sd987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm11, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0x1C, 0x42", "vfnmsub321sd xmm11, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321sd988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm12, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0x60, 0x10", "vfnmsub321sd xmm12, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321sd989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm15, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBF, 0x3C, 0x42", "vfnmsub321sd xmm15, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321sd990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm1, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBF, 0x08", "vfnmsub321sd xmm1, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321ss991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBF, 0xC4", "vfnmsub321ss xmm0, xmm1, xmm4");
}



#[test]
fn enc_fma_vfnmsub321ss992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xBF, 0xDB", "vfnmsub321ss xmm3, xmm1, xmm11");
}



#[test]
fn enc_fma_vfnmsub321ss993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm12, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0xBF, 0xE3", "vfnmsub321ss xmm12, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmsub321ss994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBF, 0xD3", "vfnmsub321ss xmm2, xmm12, xmm3");
}



#[test]
fn enc_fma_vfnmsub321ss995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xBF, 0xDB", "vfnmsub321ss xmm3, xmm12, xmm11");
}



#[test]
fn enc_fma_vfnmsub321ss996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm1, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBF, 0x48, 0x10", "vfnmsub321ss xmm1, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321ss997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm12, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBF, 0x24, 0x42", "vfnmsub321ss xmm12, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321ss998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm4, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBF, 0x20", "vfnmsub321ss xmm4, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321ss999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm0, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBF, 0x40, 0x10", "vfnmsub321ss xmm0, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321ss1000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm12, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xBF, 0x24, 0x42", "vfnmsub321ss xmm12, xmm11, DWORD [rax * 2 + rdx]");
}


