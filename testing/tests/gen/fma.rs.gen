
#[test]
fn enc_fma_vfmadd123sd502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm4, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xA9, 0xE3", "vfmadd123sd xmm4, xmm1, xmm3");
}



#[test]
fn enc_fma_vfmadd123sd503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xA9, 0xD9", "vfmadd123sd xmm11, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmadd123sd504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm2, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0xD4", "vfmadd123sd xmm2, xmm4, xmm4");
}



#[test]
fn enc_fma_vfmadd123sd505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm2, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xA9, 0xD3", "vfmadd123sd xmm2, xmm2, xmm11");
}



#[test]
fn enc_fma_vfmadd123sd506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm0, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xA9, 0xC4", "vfmadd123sd xmm0, xmm11, xmm4");
}



#[test]
fn enc_fma_vfmadd123sd507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm0, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xA9, 0x04, 0x42", "vfmadd123sd xmm0, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd123sd508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm15, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xA9, 0x38", "vfmadd123sd xmm15, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123sd509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm1, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xA9, 0x48, 0x10", "vfmadd123sd xmm1, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm2, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xA9, 0x50, 0x10", "vfmadd123sd xmm2, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123sd511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123sd xmm11, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xA9, 0x58, 0x10", "vfmadd123sd xmm11, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123ss512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm15, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0xA9, 0xFB", "vfmadd123ss xmm15, xmm1, xmm11");
}



#[test]
fn enc_fma_vfmadd123ss513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xA9, 0xD9", "vfmadd123ss xmm11, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmadd123ss514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm4, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0xE4", "vfmadd123ss xmm4, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmadd123ss515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm11, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0xA9, 0xDB", "vfmadd123ss xmm11, xmm2, xmm11");
}



#[test]
fn enc_fma_vfmadd123ss516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xA9, 0xDA", "vfmadd123ss xmm11, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmadd123ss517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xA9, 0x18", "vfmadd123ss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123ss518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm15, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xA9, 0x78, 0x10", "vfmadd123ss xmm15, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123ss519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm12, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xA9, 0x60, 0x10", "vfmadd123ss xmm12, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd123ss520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xA9, 0x18", "vfmadd123ss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd123ss521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd123ss xmm12, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xA9, 0x24, 0x42", "vfmadd123ss xmm12, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd132sd522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm15, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0x99, 0xFC", "vfmadd132sd xmm15, xmm11, xmm12");
}



#[test]
fn enc_fma_vfmadd132sd523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm12, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x99, 0xE3", "vfmadd132sd xmm12, xmm1, xmm3");
}



#[test]
fn enc_fma_vfmadd132sd524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm11, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0x99, 0xDC", "vfmadd132sd xmm11, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmadd132sd525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm11, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x99, 0xDB", "vfmadd132sd xmm11, xmm11, xmm3");
}



#[test]
fn enc_fma_vfmadd132sd526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm4, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x99, 0xE3", "vfmadd132sd xmm4, xmm0, xmm3");
}



#[test]
fn enc_fma_vfmadd132sd527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0x18", "vfmadd132sd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132sd528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x99, 0x20", "vfmadd132sd xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132sd529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm3, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x99, 0x18", "vfmadd132sd xmm3, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132sd530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm11, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x99, 0x18", "vfmadd132sd xmm11, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132sd531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132sd xmm0, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x99, 0x00", "vfmadd132sd xmm0, xmm1, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm0, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x99, 0xC1", "vfmadd132ss xmm0, xmm1, xmm1");
}



#[test]
fn enc_fma_vfmadd132ss533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm4, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0x99, 0xE7", "vfmadd132ss xmm4, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmadd132ss534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0xC8", "vfmadd132ss xmm1, xmm11, xmm0");
}



#[test]
fn enc_fma_vfmadd132ss535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm3, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x99, 0xDA", "vfmadd132ss xmm3, xmm4, xmm2");
}



#[test]
fn enc_fma_vfmadd132ss536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm1, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0x99, 0xCB", "vfmadd132ss xmm1, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmadd132ss537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm2, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0x50, 0x10", "vfmadd132ss xmm2, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd132ss538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm1, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0x08", "vfmadd132ss xmm1, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm4, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x99, 0x20", "vfmadd132ss xmm4, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm12, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x99, 0x20", "vfmadd132ss xmm12, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd132ss541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd132ss xmm15, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x99, 0x38", "vfmadd132ss xmm15, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213sd542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xA9, 0xC9", "vfmadd213sd xmm1, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmadd213sd543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xA9, 0xCC", "vfmadd213sd xmm1, xmm11, xmm12");
}



#[test]
fn enc_fma_vfmadd213sd544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0xC8", "vfmadd213sd xmm1, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmadd213sd545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xD9, 0xA9, 0xE7", "vfmadd213sd xmm12, xmm4, xmm15");
}



#[test]
fn enc_fma_vfmadd213sd546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xA9, 0xDC", "vfmadd213sd xmm3, xmm4, xmm4");
}



#[test]
fn enc_fma_vfmadd213sd547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm1, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xA9, 0x0C, 0x42", "vfmadd213sd xmm1, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd213sd548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm0, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xA9, 0x40, 0x10", "vfmadd213sd xmm0, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm2, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xA9, 0x50, 0x10", "vfmadd213sd xmm2, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm11, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xA9, 0x58, 0x10", "vfmadd213sd xmm11, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213sd551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213sd xmm3, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xA9, 0x58, 0x10", "vfmadd213sd xmm3, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213ss552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm0, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xA9, 0xC7", "vfmadd213ss xmm0, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmadd213ss553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm15, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0xA9, 0xFB", "vfmadd213ss xmm15, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmadd213ss554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0xC4", "vfmadd213ss xmm0, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmadd213ss555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm11, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xA9, 0xD8", "vfmadd213ss xmm11, xmm2, xmm0");
}



#[test]
fn enc_fma_vfmadd213ss556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm4, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xA9, 0xE2", "vfmadd213ss xmm4, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmadd213ss557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm0, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xA9, 0x40, 0x10", "vfmadd213ss xmm0, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213ss558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xA9, 0x38", "vfmadd213ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213ss559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm1, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xA9, 0x48, 0x10", "vfmadd213ss xmm1, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd213ss560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm1, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xA9, 0x08", "vfmadd213ss xmm1, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd213ss561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd213ss xmm1, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xA9, 0x08", "vfmadd213ss xmm1, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231sd562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm12, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xB9, 0xE1", "vfmadd231sd xmm12, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmadd231sd563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm4, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0xB9, 0xE4", "vfmadd231sd xmm4, xmm12, xmm12");
}



#[test]
fn enc_fma_vfmadd231sd564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm3, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xB9, 0xDB", "vfmadd231sd xmm3, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmadd231sd565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm2, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0xB9, 0xD7", "vfmadd231sd xmm2, xmm15, xmm15");
}



#[test]
fn enc_fma_vfmadd231sd566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm11, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xB9, 0xD8", "vfmadd231sd xmm11, xmm15, xmm0");
}



#[test]
fn enc_fma_vfmadd231sd567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm15, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xB9, 0x3C, 0x42", "vfmadd231sd xmm15, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xB9, 0x04, 0x42", "vfmadd231sd xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm12, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xB9, 0x20", "vfmadd231sd xmm12, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231sd570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xB9, 0x24, 0x42", "vfmadd231sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231sd571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231sd xmm0, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xB9, 0x04, 0x42", "vfmadd231sd xmm0, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231ss572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm3, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xB9, 0xD9", "vfmadd231ss xmm3, xmm4, xmm1");
}



#[test]
fn enc_fma_vfmadd231ss573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm3, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xB9, 0xDB", "vfmadd231ss xmm3, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd231ss574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm12, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x01, 0xB9, 0xE3", "vfmadd231ss xmm12, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmadd231ss575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm2, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xB9, 0xD3", "vfmadd231ss xmm2, xmm1, xmm3");
}



#[test]
fn enc_fma_vfmadd231ss576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x21, 0xB9, 0xFB", "vfmadd231ss xmm15, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmadd231ss577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm0, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xB9, 0x00", "vfmadd231ss xmm0, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231ss578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm2, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xB9, 0x50, 0x10", "vfmadd231ss xmm2, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd231ss579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm1, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xB9, 0x0C, 0x42", "vfmadd231ss xmm1, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd231ss580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm3, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xB9, 0x18", "vfmadd231ss xmm3, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd231ss581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd231ss xmm2, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xB9, 0x10", "vfmadd231ss xmm2, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312sd582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x99, 0xD1", "vfmadd312sd xmm2, xmm1, xmm1");
}



#[test]
fn enc_fma_vfmadd312sd583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm15, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x99, 0xFA", "vfmadd312sd xmm15, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmadd312sd584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm15, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x99, 0xFC", "vfmadd312sd xmm15, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmadd312sd585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x99, 0xC0", "vfmadd312sd xmm0, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmadd312sd586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm11, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x99, 0xD9", "vfmadd312sd xmm11, xmm11, xmm1");
}



#[test]
fn enc_fma_vfmadd312sd587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm15, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0x99, 0x3C, 0x42", "vfmadd312sd xmm15, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312sd588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x99, 0x40, 0x10", "vfmadd312sd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312sd589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm1, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x99, 0x0C, 0x42", "vfmadd312sd xmm1, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd312sd590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x99, 0x50, 0x10", "vfmadd312sd xmm2, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312sd591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312sd xmm2, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x99, 0x50, 0x10", "vfmadd312sd xmm2, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm1, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x99, 0xCC", "vfmadd312ss xmm1, xmm3, xmm4");
}



#[test]
fn enc_fma_vfmadd312ss593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm12, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x61, 0x99, 0xE4", "vfmadd312ss xmm12, xmm3, xmm12");
}



#[test]
fn enc_fma_vfmadd312ss594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm2, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x99, 0xD4", "vfmadd312ss xmm2, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmadd312ss595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm3, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0x99, 0xDB", "vfmadd312ss xmm3, xmm4, xmm11");
}



#[test]
fn enc_fma_vfmadd312ss596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm12, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0x99, 0xE3", "vfmadd312ss xmm12, xmm4, xmm11");
}



#[test]
fn enc_fma_vfmadd312ss597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm2, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0x10", "vfmadd312ss xmm2, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312ss598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm0, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x99, 0x40, 0x10", "vfmadd312ss xmm0, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm3, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x99, 0x18", "vfmadd312ss xmm3, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd312ss600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm15, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0x99, 0x78, 0x10", "vfmadd312ss xmm15, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd312ss601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd312ss xmm4, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x99, 0x60, 0x10", "vfmadd312ss xmm4, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xB9, 0xD3", "vfmadd321sd xmm2, xmm12, xmm3");
}



#[test]
fn enc_fma_vfmadd321sd603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF9, 0xB9, 0xFC", "vfmadd321sd xmm15, xmm0, xmm12");
}



#[test]
fn enc_fma_vfmadd321sd604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm11, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xB9, 0xDB", "vfmadd321sd xmm11, xmm11, xmm3");
}



#[test]
fn enc_fma_vfmadd321sd605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm2, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xB9, 0xD3", "vfmadd321sd xmm2, xmm2, xmm11");
}



#[test]
fn enc_fma_vfmadd321sd606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xB9, 0xC4", "vfmadd321sd xmm0, xmm3, xmm4");
}



#[test]
fn enc_fma_vfmadd321sd607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xB9, 0x18", "vfmadd321sd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321sd608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xB9, 0x04, 0x42", "vfmadd321sd xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321sd609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm3, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xB9, 0x18", "vfmadd321sd xmm3, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321sd610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm11, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xB9, 0x58, 0x10", "vfmadd321sd xmm11, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321sd611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321sd xmm4, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xB9, 0x24, 0x42", "vfmadd321sd xmm4, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321ss612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm11, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0xB9, 0xDF", "vfmadd321ss xmm11, xmm2, xmm15");
}



#[test]
fn enc_fma_vfmadd321ss613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xB9, 0xC3", "vfmadd321ss xmm0, xmm12, xmm11");
}



#[test]
fn enc_fma_vfmadd321ss614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm1, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xB9, 0xCB", "vfmadd321ss xmm1, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmadd321ss615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm0, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xB9, 0xC3", "vfmadd321ss xmm0, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmadd321ss616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm12, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0xB9, 0xE3", "vfmadd321ss xmm12, xmm15, xmm3");
}



#[test]
fn enc_fma_vfmadd321ss617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm3, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xB9, 0x18", "vfmadd321ss xmm3, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfmadd321ss618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xB9, 0x0C, 0x42", "vfmadd321ss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmadd321ss619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm0, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xB9, 0x40, 0x10", "vfmadd321ss xmm0, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm12, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xB9, 0x60, 0x10", "vfmadd321ss xmm12, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmadd321ss621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmadd321ss xmm3, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xB9, 0x58, 0x10", "vfmadd321ss xmm3, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123sd622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm4, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAB, 0xE2", "vfmsub123sd xmm4, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmsub123sd623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm15, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xAB, 0xFB", "vfmsub123sd xmm15, xmm12, xmm3");
}



#[test]
fn enc_fma_vfmsub123sd624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm12, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xAB, 0xE2", "vfmsub123sd xmm12, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmsub123sd625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm1, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAB, 0xCB", "vfmsub123sd xmm1, xmm2, xmm3");
}



#[test]
fn enc_fma_vfmsub123sd626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm11, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAB, 0xDB", "vfmsub123sd xmm11, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmsub123sd627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm4, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAB, 0x24, 0x42", "vfmsub123sd xmm4, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm12, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xAB, 0x20", "vfmsub123sd xmm12, xmm1, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123sd629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm15, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xAB, 0x38", "vfmsub123sd xmm15, xmm1, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123sd630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm12, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xAB, 0x24, 0x42", "vfmsub123sd xmm12, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123sd631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123sd xmm12, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAB, 0x20", "vfmsub123sd xmm12, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123ss632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm0, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAB, 0xC0", "vfmsub123ss xmm0, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmsub123ss633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm4, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xAB, 0xE4", "vfmsub123ss xmm4, xmm15, xmm12");
}



#[test]
fn enc_fma_vfmsub123ss634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm0, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAB, 0xC2", "vfmsub123ss xmm0, xmm11, xmm2");
}



#[test]
fn enc_fma_vfmsub123ss635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm12, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xAB, 0xE1", "vfmsub123ss xmm12, xmm1, xmm1");
}



#[test]
fn enc_fma_vfmsub123ss636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm0, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xAB, 0xC4", "vfmsub123ss xmm0, xmm15, xmm12");
}



#[test]
fn enc_fma_vfmsub123ss637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm2, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAB, 0x50, 0x10", "vfmsub123ss xmm2, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm15, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xAB, 0x3C, 0x42", "vfmsub123ss xmm15, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub123ss639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm15, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAB, 0x78, 0x10", "vfmsub123ss xmm15, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub123ss640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAB, 0x08", "vfmsub123ss xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub123ss641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub123ss xmm2, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAB, 0x14, 0x42", "vfmsub123ss xmm2, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132sd642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm0, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0x9B, 0xC3", "vfmsub132sd xmm0, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmsub132sd643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm15, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE1, 0x9B, 0xFB", "vfmsub132sd xmm15, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmsub132sd644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm1, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0xCA", "vfmsub132sd xmm1, xmm12, xmm2");
}



#[test]
fn enc_fma_vfmsub132sd645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm15, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9B, 0xF8", "vfmsub132sd xmm15, xmm1, xmm0");
}



#[test]
fn enc_fma_vfmsub132sd646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm4, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF1, 0x9B, 0xE4", "vfmsub132sd xmm4, xmm1, xmm12");
}



#[test]
fn enc_fma_vfmsub132sd647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9B, 0x20", "vfmsub132sd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132sd648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm3, xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9B, 0x58, 0x10", "vfmsub132sd xmm3, xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132sd649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm0, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9B, 0x04, 0x42", "vfmsub132sd xmm0, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132sd650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm2, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9B, 0x50, 0x10", "vfmsub132sd xmm2, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132sd651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132sd xmm11, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9B, 0x18", "vfmsub132sd xmm11, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132ss652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm0, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0x9B, 0xC4", "vfmsub132ss xmm0, xmm4, xmm12");
}



#[test]
fn enc_fma_vfmsub132ss653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm15, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9B, 0xFA", "vfmsub132ss xmm15, xmm15, xmm2");
}



#[test]
fn enc_fma_vfmsub132ss654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm4, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0x9B, 0xE4", "vfmsub132ss xmm4, xmm15, xmm12");
}



#[test]
fn enc_fma_vfmsub132ss655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm15, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0x9B, 0xFB", "vfmsub132ss xmm15, xmm12, xmm3");
}



#[test]
fn enc_fma_vfmsub132ss656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm2, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0x9B, 0xD3", "vfmsub132ss xmm2, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmsub132ss657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm12, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0x9B, 0x60, 0x10", "vfmsub132ss xmm12, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub132ss658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm2, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9B, 0x14, 0x42", "vfmsub132ss xmm2, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132ss659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm11, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9B, 0x18", "vfmsub132ss xmm11, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub132ss660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm15, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9B, 0x3C, 0x42", "vfmsub132ss xmm15, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub132ss661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub132ss xmm4, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0x9B, 0x20", "vfmsub132ss xmm4, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213sd662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm0, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAB, 0xC3", "vfmsub213sd xmm0, xmm12, xmm3");
}



#[test]
fn enc_fma_vfmsub213sd663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm1, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xAB, 0xCB", "vfmsub213sd xmm1, xmm11, xmm11");
}



#[test]
fn enc_fma_vfmsub213sd664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm4, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAB, 0xE3", "vfmsub213sd xmm4, xmm3, xmm3");
}



#[test]
fn enc_fma_vfmsub213sd665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm3, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xAB, 0xDF", "vfmsub213sd xmm3, xmm11, xmm15");
}



#[test]
fn enc_fma_vfmsub213sd666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xAB, 0xDA", "vfmsub213sd xmm3, xmm1, xmm2");
}



#[test]
fn enc_fma_vfmsub213sd667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm0, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAB, 0x00", "vfmsub213sd xmm0, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213sd668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm11, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0xAB, 0x1C, 0x42", "vfmsub213sd xmm11, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213sd669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm4, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAB, 0x20", "vfmsub213sd xmm4, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213sd670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm2, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0x50, 0x10", "vfmsub213sd xmm2, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub213sd671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213sd xmm4, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAB, 0x24, 0x42", "vfmsub213sd xmm4, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213ss672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm15, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x69, 0xAB, 0xFB", "vfmsub213ss xmm15, xmm2, xmm11");
}



#[test]
fn enc_fma_vfmsub213ss673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm15, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xAB, 0xFC", "vfmsub213ss xmm15, xmm12, xmm4");
}



#[test]
fn enc_fma_vfmsub213ss674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm0, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xAB, 0xC3", "vfmsub213ss xmm0, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmsub213ss675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAB, 0xC1", "vfmsub213ss xmm0, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmsub213ss676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm2, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xAB, 0xD3", "vfmsub213ss xmm2, xmm3, xmm11");
}



#[test]
fn enc_fma_vfmsub213ss677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm11, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAB, 0x1C, 0x42", "vfmsub213ss xmm11, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub213ss678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm12, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAB, 0x20", "vfmsub213ss xmm12, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm3, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xAB, 0x58, 0x10", "vfmsub213ss xmm3, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub213ss680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm3, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAB, 0x18", "vfmsub213ss xmm3, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub213ss681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub213ss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAB, 0x18", "vfmsub213ss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231sd682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBB, 0xF8", "vfmsub231sd xmm15, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmsub231sd683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm4, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBB, 0xE1", "vfmsub231sd xmm4, xmm15, xmm1");
}



#[test]
fn enc_fma_vfmsub231sd684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm11, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xBB, 0xDA", "vfmsub231sd xmm11, xmm11, xmm2");
}



#[test]
fn enc_fma_vfmsub231sd685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm1, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0xC8", "vfmsub231sd xmm1, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmsub231sd686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBB, 0xC9", "vfmsub231sd xmm1, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmsub231sd687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm0, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBB, 0x04, 0x42", "vfmsub231sd xmm0, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub231sd688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBB, 0x60, 0x10", "vfmsub231sd xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm2, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBB, 0x50, 0x10", "vfmsub231sd xmm2, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm3, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBB, 0x58, 0x10", "vfmsub231sd xmm3, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231sd691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231sd xmm2, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBB, 0x10", "vfmsub231sd xmm2, xmm1, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm4, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xBB, 0xE3", "vfmsub231ss xmm4, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmsub231ss693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm12, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x01, 0xBB, 0xE3", "vfmsub231ss xmm12, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmsub231ss694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm12, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBB, 0xE1", "vfmsub231ss xmm12, xmm1, xmm1");
}



#[test]
fn enc_fma_vfmsub231ss695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm0, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0xC0", "vfmsub231ss xmm0, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmsub231ss696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm15, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBB, 0xFC", "vfmsub231ss xmm15, xmm1, xmm4");
}



#[test]
fn enc_fma_vfmsub231ss697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm4, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBB, 0x60, 0x10", "vfmsub231ss xmm4, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub231ss698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm12, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xBB, 0x20", "vfmsub231ss xmm12, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub231ss699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm2, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBB, 0x14, 0x42", "vfmsub231ss xmm2, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub231ss700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm4, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0x24, 0x42", "vfmsub231ss xmm4, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub231ss701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub231ss xmm2, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBB, 0x10", "vfmsub231ss xmm2, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312sd702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9B, 0xE2", "vfmsub312sd xmm12, xmm4, xmm2");
}



#[test]
fn enc_fma_vfmsub312sd703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm0, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9B, 0xC2", "vfmsub312sd xmm0, xmm11, xmm2");
}



#[test]
fn enc_fma_vfmsub312sd704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9B, 0xD9", "vfmsub312sd xmm11, xmm2, xmm1");
}



#[test]
fn enc_fma_vfmsub312sd705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm1, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9B, 0xC8", "vfmsub312sd xmm1, xmm4, xmm0");
}



#[test]
fn enc_fma_vfmsub312sd706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm11, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0x9B, 0xDB", "vfmsub312sd xmm11, xmm0, xmm3");
}



#[test]
fn enc_fma_vfmsub312sd707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm1, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9B, 0x08", "vfmsub312sd xmm1, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312sd708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm0, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9B, 0x04, 0x42", "vfmsub312sd xmm0, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312sd709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm4, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9B, 0x20", "vfmsub312sd xmm4, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312sd710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312sd xmm15, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9B, 0x78, 0x10", "vfmsub312sd xmm15, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312ss711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0xC4", "vfmsub312ss xmm0, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmsub312ss712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm2, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0x9B, 0xD7", "vfmsub312ss xmm2, xmm11, xmm15");
}



#[test]
fn enc_fma_vfmsub312ss713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm15, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x01, 0x9B, 0xFB", "vfmsub312ss xmm15, xmm15, xmm11");
}



#[test]
fn enc_fma_vfmsub312ss714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm11, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x9B, 0xD8", "vfmsub312ss xmm11, xmm2, xmm0");
}



#[test]
fn enc_fma_vfmsub312ss715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm2, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0x9B, 0xD3", "vfmsub312ss xmm2, xmm0, xmm11");
}



#[test]
fn enc_fma_vfmsub312ss716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm3, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0x58, 0x10", "vfmsub312ss xmm3, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub312ss717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm4, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9B, 0x24, 0x42", "vfmsub312ss xmm4, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub312ss718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9B, 0x38", "vfmsub312ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312ss719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm2, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9B, 0x10", "vfmsub312ss xmm2, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub312ss720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub312ss xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9B, 0x10", "vfmsub312ss xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321sd721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm11, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xBB, 0xDA", "vfmsub321sd xmm11, xmm15, xmm2");
}



#[test]
fn enc_fma_vfmsub321sd722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm2, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBB, 0xD1", "vfmsub321sd xmm2, xmm12, xmm1");
}



#[test]
fn enc_fma_vfmsub321sd723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm11, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x99, 0xBB, 0xDB", "vfmsub321sd xmm11, xmm12, xmm11");
}



#[test]
fn enc_fma_vfmsub321sd724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm2, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBB, 0xD0", "vfmsub321sd xmm2, xmm0, xmm0");
}



#[test]
fn enc_fma_vfmsub321sd725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm12, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBB, 0xE4", "vfmsub321sd xmm12, xmm0, xmm4");
}



#[test]
fn enc_fma_vfmsub321sd726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm0, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBB, 0x00", "vfmsub321sd xmm0, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321sd727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm0, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBB, 0x04, 0x42", "vfmsub321sd xmm0, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm2, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBB, 0x50, 0x10", "vfmsub321sd xmm2, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub321sd729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm3, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBB, 0x1C, 0x42", "vfmsub321sd xmm3, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfmsub321sd730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321sd xmm2, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBB, 0x50, 0x10", "vfmsub321sd xmm2, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfmsub321ss731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm4, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBB, 0xE2", "vfmsub321ss xmm4, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmsub321ss732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm3, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBB, 0xD9", "vfmsub321ss xmm3, xmm0, xmm1");
}



#[test]
fn enc_fma_vfmsub321ss733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm0, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0xC4", "vfmsub321ss xmm0, xmm4, xmm4");
}



#[test]
fn enc_fma_vfmsub321ss734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm1, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBB, 0xCA", "vfmsub321ss xmm1, xmm2, xmm2");
}



#[test]
fn enc_fma_vfmsub321ss735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm4, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0xBB, 0xE4", "vfmsub321ss xmm4, xmm11, xmm12");
}



#[test]
fn enc_fma_vfmsub321ss736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm15, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBB, 0x38", "vfmsub321ss xmm15, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm11, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBB, 0x18", "vfmsub321ss xmm11, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm1, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0x08", "vfmsub321ss xmm1, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm11, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBB, 0x18", "vfmsub321ss xmm11, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfmsub321ss740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsub321ss xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xBB, 0x10", "vfmsub321ss xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123sd741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm1, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0xC9", "vfnmadd123sd xmm1, xmm0, xmm1");
}



#[test]
fn enc_fma_vfnmadd123sd742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm15, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xAD, 0xFC", "vfnmadd123sd xmm15, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmadd123sd743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm15, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xD9, 0xAD, 0xFF", "vfnmadd123sd xmm15, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmadd123sd744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm0, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAD, 0xC3", "vfnmadd123sd xmm0, xmm3, xmm3");
}



#[test]
fn enc_fma_vfnmadd123sd745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm1, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAD, 0xCC", "vfnmadd123sd xmm1, xmm11, xmm4");
}



#[test]
fn enc_fma_vfnmadd123sd746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm4, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0x60, 0x10", "vfnmadd123sd xmm4, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123sd747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAD, 0x1C, 0x42", "vfnmadd123sd xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123sd748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm3, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAD, 0x58, 0x10", "vfnmadd123sd xmm3, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123sd749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm12, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xAD, 0x60, 0x10", "vfnmadd123sd xmm12, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd123sd750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123sd xmm4, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0x20", "vfnmadd123sd xmm4, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm1, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xAD, 0xCC", "vfnmadd123ss xmm1, xmm15, xmm12");
}



#[test]
fn enc_fma_vfnmadd123ss752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm1, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xAD, 0xCB", "vfnmadd123ss xmm1, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd123ss753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0xC1", "vfnmadd123ss xmm0, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmadd123ss754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm15, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xAD, 0xF9", "vfnmadd123ss xmm15, xmm2, xmm1");
}



#[test]
fn enc_fma_vfnmadd123ss755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm11, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xAD, 0xD8", "vfnmadd123ss xmm11, xmm0, xmm0");
}



#[test]
fn enc_fma_vfnmadd123ss756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm3, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAD, 0x1C, 0x42", "vfnmadd123ss xmm3, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd123ss757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm1, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAD, 0x08", "vfnmadd123ss xmm1, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm12, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAD, 0x20", "vfnmadd123ss xmm12, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAD, 0x10", "vfnmadd123ss xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd123ss760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd123ss xmm2, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAD, 0x14, 0x42", "vfnmadd123ss xmm2, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132sd761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm11, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0x9D, 0xDF", "vfnmadd132sd xmm11, xmm1, xmm15");
}



#[test]
fn enc_fma_vfnmadd132sd762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm1, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9D, 0xCA", "vfnmadd132sd xmm1, xmm2, xmm2");
}



#[test]
fn enc_fma_vfnmadd132sd763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm4, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x81, 0x9D, 0xE3", "vfnmadd132sd xmm4, xmm15, xmm11");
}



#[test]
fn enc_fma_vfnmadd132sd764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm4, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9D, 0xE1", "vfnmadd132sd xmm4, xmm0, xmm1");
}



#[test]
fn enc_fma_vfnmadd132sd765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm15, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xE1, 0x9D, 0xFB", "vfnmadd132sd xmm15, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd132sd766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm11, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0x9D, 0x1C, 0x42", "vfnmadd132sd xmm11, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132sd767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm2, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9D, 0x10", "vfnmadd132sd xmm2, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132sd768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9D, 0x58, 0x10", "vfnmadd132sd xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132sd769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm12, xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9D, 0x24, 0x42", "vfnmadd132sd xmm12, xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132sd770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132sd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9D, 0x18", "vfnmadd132sd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9D, 0xD2", "vfnmadd132ss xmm2, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmadd132ss772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm0, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0x9D, 0xC7", "vfnmadd132ss xmm0, xmm1, xmm15");
}



#[test]
fn enc_fma_vfnmadd132ss773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm4, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9D, 0xE2", "vfnmadd132ss xmm4, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmadd132ss774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm12, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0x9D, 0xE3", "vfnmadd132ss xmm12, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmadd132ss775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0x9D, 0xE7", "vfnmadd132ss xmm12, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmadd132ss776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm2, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0x9D, 0x10", "vfnmadd132ss xmm2, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm12, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0x9D, 0x20", "vfnmadd132ss xmm12, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd132ss778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm15, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0x9D, 0x3C, 0x42", "vfnmadd132ss xmm15, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd132ss779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm12, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0x9D, 0x60, 0x10", "vfnmadd132ss xmm12, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd132ss780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd132ss xmm2, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9D, 0x10", "vfnmadd132ss xmm2, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm1, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xAD, 0xCF", "vfnmadd213sd xmm1, xmm11, xmm15");
}



#[test]
fn enc_fma_vfnmadd213sd782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm15, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAD, 0xFB", "vfnmadd213sd xmm15, xmm11, xmm3");
}



#[test]
fn enc_fma_vfnmadd213sd783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm2, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xAD, 0xD2", "vfnmadd213sd xmm2, xmm3, xmm2");
}



#[test]
fn enc_fma_vfnmadd213sd784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm3, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xAD, 0xDF", "vfnmadd213sd xmm3, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmadd213sd785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm2, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0xD2", "vfnmadd213sd xmm2, xmm2, xmm2");
}



#[test]
fn enc_fma_vfnmadd213sd786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm4, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0x24, 0x42", "vfnmadd213sd xmm4, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213sd787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAD, 0x08", "vfnmadd213sd xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm2, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xAD, 0x10", "vfnmadd213sd xmm2, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213sd789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm3, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAD, 0x58, 0x10", "vfnmadd213sd xmm3, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213sd790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213sd xmm11, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xAD, 0x58, 0x10", "vfnmadd213sd xmm11, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213ss791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm1, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xAD, 0xCA", "vfnmadd213ss xmm1, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmadd213ss792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm3, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x71, 0xAD, 0xDF", "vfnmadd213ss xmm3, xmm1, xmm15");
}



#[test]
fn enc_fma_vfnmadd213ss793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm12, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x19, 0xAD, 0xE7", "vfnmadd213ss xmm12, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmadd213ss794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm1, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xAD, 0xCC", "vfnmadd213ss xmm1, xmm12, xmm12");
}



#[test]
fn enc_fma_vfnmadd213ss795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm11, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAD, 0xDB", "vfnmadd213ss xmm11, xmm4, xmm3");
}



#[test]
fn enc_fma_vfnmadd213ss796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAD, 0x18", "vfnmadd213ss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213ss797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm3, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAD, 0x18", "vfnmadd213ss xmm3, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd213ss798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm1, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAD, 0x0C, 0x42", "vfnmadd213ss xmm1, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd213ss799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm2, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xAD, 0x50, 0x10", "vfnmadd213ss xmm2, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd213ss800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd213ss xmm15, xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAD, 0x3C, 0x42", "vfnmadd213ss xmm15, xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231sd801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm12, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBD, 0xE0", "vfnmadd231sd xmm12, xmm12, xmm0");
}



#[test]
fn enc_fma_vfnmadd231sd802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm0, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBD, 0xC3", "vfnmadd231sd xmm0, xmm15, xmm3");
}



#[test]
fn enc_fma_vfnmadd231sd803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm1, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xBD, 0xCB", "vfnmadd231sd xmm1, xmm3, xmm11");
}



#[test]
fn enc_fma_vfnmadd231sd804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm3, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBD, 0xD9", "vfnmadd231sd xmm3, xmm12, xmm1");
}



#[test]
fn enc_fma_vfnmadd231sd805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm3, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBD, 0xD9", "vfnmadd231sd xmm3, xmm3, xmm1");
}



#[test]
fn enc_fma_vfnmadd231sd806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm12, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBD, 0x20", "vfnmadd231sd xmm12, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231sd807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm12, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xBD, 0x20", "vfnmadd231sd xmm12, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231sd808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm0, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBD, 0x40, 0x10", "vfnmadd231sd xmm0, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm11, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xBD, 0x58, 0x10", "vfnmadd231sd xmm11, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231sd810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231sd xmm3, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBD, 0x18", "vfnmadd231sd xmm3, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231ss811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm0, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0xC3", "vfnmadd231ss xmm0, xmm3, xmm3");
}



#[test]
fn enc_fma_vfnmadd231ss812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm4, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0xE1", "vfnmadd231ss xmm4, xmm1, xmm1");
}



#[test]
fn enc_fma_vfnmadd231ss813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm3, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBD, 0xDB", "vfnmadd231ss xmm3, xmm11, xmm3");
}



#[test]
fn enc_fma_vfnmadd231ss814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm15, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0xBD, 0xFB", "vfnmadd231ss xmm15, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmadd231ss815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0xBD, 0xDC", "vfnmadd231ss xmm11, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmadd231ss816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm1, xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBD, 0x48, 0x10", "vfnmadd231ss xmm1, xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231ss817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm15, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0xBD, 0x3C, 0x42", "vfnmadd231ss xmm15, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd231ss818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBD, 0x20", "vfnmadd231ss xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd231ss819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm11, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBD, 0x58, 0x10", "vfnmadd231ss xmm11, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd231ss820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd231ss xmm1, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBD, 0x48, 0x10", "vfnmadd231ss xmm1, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312sd821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm1, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9D, 0xCA", "vfnmadd312sd xmm1, xmm15, xmm2");
}



#[test]
fn enc_fma_vfnmadd312sd822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0x9D, 0xFB", "vfnmadd312sd xmm15, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmadd312sd823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0x9D, 0xC9", "vfnmadd312sd xmm1, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmadd312sd824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm12, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0x9D, 0xE3", "vfnmadd312sd xmm12, xmm2, xmm3");
}



#[test]
fn enc_fma_vfnmadd312sd825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm0, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xD9, 0x9D, 0xC3", "vfnmadd312sd xmm0, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmadd312sd826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9D, 0x10", "vfnmadd312sd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312sd827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm2, xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9D, 0x50, 0x10", "vfnmadd312sd xmm2, xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312sd828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm1, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9D, 0x48, 0x10", "vfnmadd312sd xmm1, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd312sd829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm11, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xD9, 0x9D, 0x18", "vfnmadd312sd xmm11, xmm4, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312sd830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312sd xmm3, xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9D, 0x1C, 0x42", "vfnmadd312sd xmm3, xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312ss831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0x9D, 0xCC", "vfnmadd312ss xmm1, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmadd312ss832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x21, 0x9D, 0xCB", "vfnmadd312ss xmm1, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmadd312ss833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm3, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9D, 0xDB", "vfnmadd312ss xmm3, xmm15, xmm3");
}



#[test]
fn enc_fma_vfnmadd312ss834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm1, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0x9D, 0xCF", "vfnmadd312ss xmm1, xmm15, xmm15");
}



#[test]
fn enc_fma_vfnmadd312ss835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm11, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9D, 0xD9", "vfnmadd312ss xmm11, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmadd312ss836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm2, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9D, 0x14, 0x42", "vfnmadd312ss xmm2, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd312ss837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm15, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9D, 0x38", "vfnmadd312ss xmm15, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm11, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0x9D, 0x18", "vfnmadd312ss xmm11, xmm3, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9D, 0x38", "vfnmadd312ss xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd312ss840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd312ss xmm15, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x9D, 0x38", "vfnmadd312ss xmm15, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321sd841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm15, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xBD, 0xF8", "vfnmadd321sd xmm15, xmm12, xmm0");
}



#[test]
fn enc_fma_vfnmadd321sd842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm11, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xBD, 0xD9", "vfnmadd321sd xmm11, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmadd321sd843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm11, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x81, 0xBD, 0xDC", "vfnmadd321sd xmm11, xmm15, xmm12");
}



#[test]
fn enc_fma_vfnmadd321sd844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xBD, 0xC9", "vfnmadd321sd xmm1, xmm11, xmm1");
}



#[test]
fn enc_fma_vfnmadd321sd845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm1, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF1, 0xBD, 0xCF", "vfnmadd321sd xmm1, xmm1, xmm15");
}



#[test]
fn enc_fma_vfnmadd321sd846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm4, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBD, 0x60, 0x10", "vfnmadd321sd xmm4, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321sd847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm1, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xBD, 0x48, 0x10", "vfnmadd321sd xmm1, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321sd848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBD, 0x60, 0x10", "vfnmadd321sd xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321sd849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm3, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBD, 0x18", "vfnmadd321sd xmm3, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321sd850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321sd xmm0, xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBD, 0x40, 0x10", "vfnmadd321sd xmm0, xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm2, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBD, 0xD1", "vfnmadd321ss xmm2, xmm12, xmm1");
}



#[test]
fn enc_fma_vfnmadd321ss852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm4, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBD, 0xE0", "vfnmadd321ss xmm4, xmm0, xmm0");
}



#[test]
fn enc_fma_vfnmadd321ss853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm1, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xBD, 0xCC", "vfnmadd321ss xmm1, xmm15, xmm12");
}



#[test]
fn enc_fma_vfnmadd321ss854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm3, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xBD, 0xDF", "vfnmadd321ss xmm3, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmadd321ss855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBD, 0xC3", "vfnmadd321ss xmm0, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmadd321ss856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm0, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBD, 0x04, 0x42", "vfnmadd321ss xmm0, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321ss857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm0, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBD, 0x00", "vfnmadd321ss xmm0, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmadd321ss858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm0, xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0xBD, 0x40, 0x10", "vfnmadd321ss xmm0, xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmadd321ss859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm2, xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBD, 0x14, 0x42", "vfnmadd321ss xmm2, xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmadd321ss860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmadd321ss xmm11, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBD, 0x58, 0x10", "vfnmadd321ss xmm11, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm3, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAF, 0xD9", "vfnmsub123sd xmm3, xmm2, xmm1");
}



#[test]
fn enc_fma_vfnmsub123sd862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm11, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xF1, 0xAF, 0xDC", "vfnmsub123sd xmm11, xmm1, xmm12");
}



#[test]
fn enc_fma_vfnmsub123sd863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm4, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xAF, 0xE3", "vfnmsub123sd xmm4, xmm0, xmm11");
}



#[test]
fn enc_fma_vfnmsub123sd864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm4, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAF, 0xE2", "vfnmsub123sd xmm4, xmm11, xmm2");
}



#[test]
fn enc_fma_vfnmsub123sd865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm3, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xF9, 0xAF, 0xDC", "vfnmsub123sd xmm3, xmm0, xmm12");
}



#[test]
fn enc_fma_vfnmsub123sd866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm4, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xA1, 0xAF, 0x20", "vfnmsub123sd xmm4, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123sd867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAF, 0x58, 0x10", "vfnmsub123sd xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm4, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xAF, 0x20", "vfnmsub123sd xmm4, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123sd869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm12, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAF, 0x60, 0x10", "vfnmsub123sd xmm12, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123sd870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123sd xmm11, xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAF, 0x58, 0x10", "vfnmsub123sd xmm11, xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123ss871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm1, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0xAF, 0xCB", "vfnmsub123ss xmm1, xmm2, xmm11");
}



#[test]
fn enc_fma_vfnmsub123ss872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm11, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAF, 0xD8", "vfnmsub123ss xmm11, xmm3, xmm0");
}



#[test]
fn enc_fma_vfnmsub123ss873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm4, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAF, 0xE1", "vfnmsub123ss xmm4, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmsub123ss874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm3, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAF, 0xDC", "vfnmsub123ss xmm3, xmm11, xmm4");
}



#[test]
fn enc_fma_vfnmsub123ss875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm3, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x01, 0xAF, 0xDB", "vfnmsub123ss xmm3, xmm15, xmm11");
}



#[test]
fn enc_fma_vfnmsub123ss876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm3, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAF, 0x18", "vfnmsub123ss xmm3, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm4, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0x60, 0x10", "vfnmsub123ss xmm4, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123ss878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm4, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xAF, 0x60, 0x10", "vfnmsub123ss xmm4, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub123ss879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm0, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAF, 0x00", "vfnmsub123ss xmm0, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub123ss880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub123ss xmm1, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xAF, 0x0C, 0x42", "vfnmsub123ss xmm1, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132sd881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm2, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0x9F, 0xD7", "vfnmsub132sd xmm2, xmm2, xmm15");
}



#[test]
fn enc_fma_vfnmsub132sd882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm4, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9F, 0xE0", "vfnmsub132sd xmm4, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmsub132sd883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm11, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0x9F, 0xDA", "vfnmsub132sd xmm11, xmm11, xmm2");
}



#[test]
fn enc_fma_vfnmsub132sd884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm2, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0x9F, 0xD4", "vfnmsub132sd xmm2, xmm3, xmm12");
}



#[test]
fn enc_fma_vfnmsub132sd885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm12, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0x9F, 0xE3", "vfnmsub132sd xmm12, xmm12, xmm3");
}



#[test]
fn enc_fma_vfnmsub132sd886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm1, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0x9F, 0x0C, 0x42", "vfnmsub132sd xmm1, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132sd887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9F, 0x60, 0x10", "vfnmsub132sd xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub132sd888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm2, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9F, 0x14, 0x42", "vfnmsub132sd xmm2, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132sd889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm2, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0x9F, 0x10", "vfnmsub132sd xmm2, xmm3, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132sd890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132sd xmm2, xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9F, 0x50, 0x10", "vfnmsub132sd xmm2, xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub132ss891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm11, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0x9F, 0xDF", "vfnmsub132ss xmm11, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmsub132ss892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm1, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x69, 0x9F, 0xCF", "vfnmsub132ss xmm1, xmm2, xmm15");
}



#[test]
fn enc_fma_vfnmsub132ss893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm11, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x71, 0x9F, 0xDB", "vfnmsub132ss xmm11, xmm1, xmm11");
}



#[test]
fn enc_fma_vfnmsub132ss894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm11, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x9F, 0xD8", "vfnmsub132ss xmm11, xmm1, xmm0");
}



#[test]
fn enc_fma_vfnmsub132ss895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm3, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9F, 0xD8", "vfnmsub132ss xmm3, xmm4, xmm0");
}



#[test]
fn enc_fma_vfnmsub132ss896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm12, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0x9F, 0x60, 0x10", "vfnmsub132ss xmm12, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub132ss897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm2, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0x9F, 0x10", "vfnmsub132ss xmm2, xmm1, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm1, xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9F, 0x0C, 0x42", "vfnmsub132ss xmm1, xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub132ss899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm12, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x69, 0x9F, 0x20", "vfnmsub132ss xmm12, xmm2, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub132ss900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub132ss xmm0, xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9F, 0x04, 0x42", "vfnmsub132ss xmm0, xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213sd901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xAF, 0xE4", "vfnmsub213sd xmm12, xmm2, xmm4");
}



#[test]
fn enc_fma_vfnmsub213sd902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xAF, 0xE0", "vfnmsub213sd xmm4, xmm12, xmm0");
}



#[test]
fn enc_fma_vfnmsub213sd903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm11, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xAF, 0xD8", "vfnmsub213sd xmm11, xmm0, xmm0");
}



#[test]
fn enc_fma_vfnmsub213sd904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm2, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE9, 0xAF, 0xD4", "vfnmsub213sd xmm2, xmm2, xmm12");
}



#[test]
fn enc_fma_vfnmsub213sd905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm0, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xE1, 0xAF, 0xC7", "vfnmsub213sd xmm0, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmsub213sd906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm0, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0xAF, 0x40, 0x10", "vfnmsub213sd xmm0, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213sd907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm3, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xAF, 0x18", "vfnmsub213sd xmm3, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213sd908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xA1, 0xAF, 0x20", "vfnmsub213sd xmm12, xmm11, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213sd909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm12, xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x99, 0xAF, 0x24, 0x42", "vfnmsub213sd xmm12, xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213sd910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213sd xmm11, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xAF, 0x1C, 0x42", "vfnmsub213sd xmm11, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub213ss911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0xDC", "vfnmsub213ss xmm3, xmm4, xmm4");
}



#[test]
fn enc_fma_vfnmsub213ss912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm3, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAF, 0xDB", "vfnmsub213ss xmm3, xmm11, xmm3");
}



#[test]
fn enc_fma_vfnmsub213ss913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm2, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x19, 0xAF, 0xD7", "vfnmsub213ss xmm2, xmm12, xmm15");
}



#[test]
fn enc_fma_vfnmsub213ss914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm15, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xAF, 0xFB", "vfnmsub213ss xmm15, xmm3, xmm3");
}



#[test]
fn enc_fma_vfnmsub213ss915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xAF, 0xC9", "vfnmsub213ss xmm1, xmm15, xmm1");
}



#[test]
fn enc_fma_vfnmsub213ss916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm15, xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xAF, 0x78, 0x10", "vfnmsub213ss xmm15, xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm4, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xAF, 0x60, 0x10", "vfnmsub213ss xmm4, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm12, xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x21, 0xAF, 0x60, 0x10", "vfnmsub213ss xmm12, xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub213ss919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0xAF, 0x10", "vfnmsub213ss xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub213ss920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub213ss xmm12, xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xAF, 0x24, 0x42", "vfnmsub213ss xmm12, xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm11, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBF, 0xDB", "vfnmsub231sd xmm11, xmm3, xmm3");
}



#[test]
fn enc_fma_vfnmsub231sd922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm1, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0xBF, 0xCA", "vfnmsub231sd xmm1, xmm4, xmm2");
}



#[test]
fn enc_fma_vfnmsub231sd923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm12, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xD9, 0xBF, 0xE3", "vfnmsub231sd xmm12, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmsub231sd924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm2, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x81, 0xBF, 0xD2", "vfnmsub231sd xmm2, xmm15, xmm2");
}



#[test]
fn enc_fma_vfnmsub231sd925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm2, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBF, 0xD3", "vfnmsub231sd xmm2, xmm2, xmm3");
}



#[test]
fn enc_fma_vfnmsub231sd926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm1, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBF, 0x0C, 0x42", "vfnmsub231sd xmm1, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm3, xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE1, 0xBF, 0x1C, 0x42", "vfnmsub231sd xmm3, xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm3, xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0xBF, 0x1C, 0x42", "vfnmsub231sd xmm3, xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub231sd929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231sd xmm4, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBF, 0x60, 0x10", "vfnmsub231sd xmm4, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xBF, 0xDA", "vfnmsub231ss xmm11, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmsub231ss931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm12, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x61, 0xBF, 0xE2", "vfnmsub231ss xmm12, xmm3, xmm2");
}



#[test]
fn enc_fma_vfnmsub231ss932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm1, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x79, 0xBF, 0xCF", "vfnmsub231ss xmm1, xmm0, xmm15");
}



#[test]
fn enc_fma_vfnmsub231ss933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm1, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0xBF, 0xCC", "vfnmsub231ss xmm1, xmm11, xmm4");
}



#[test]
fn enc_fma_vfnmsub231ss934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm11, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0xBF, 0xDA", "vfnmsub231ss xmm11, xmm0, xmm2");
}



#[test]
fn enc_fma_vfnmsub231ss935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm1, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0x48, 0x10", "vfnmsub231ss xmm1, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm2, xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x71, 0xBF, 0x50, 0x10", "vfnmsub231ss xmm2, xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm3, xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBF, 0x58, 0x10", "vfnmsub231ss xmm3, xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub231ss938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub231ss xmm11, xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x19, 0xBF, 0x18", "vfnmsub231ss xmm11, xmm12, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312sd939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm3, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xE9, 0x9F, 0xD8", "vfnmsub312sd xmm3, xmm2, xmm0");
}



#[test]
fn enc_fma_vfnmsub312sd940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm1, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0x9F, 0xCA", "vfnmsub312sd xmm1, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmsub312sd941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9F, 0xE0", "vfnmsub312sd xmm4, xmm12, xmm0");
}



#[test]
fn enc_fma_vfnmsub312sd942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm12, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xD9, 0x9F, 0xE3", "vfnmsub312sd xmm12, xmm4, xmm11");
}



#[test]
fn enc_fma_vfnmsub312sd943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x99, 0x9F, 0xDB", "vfnmsub312sd xmm3, xmm12, xmm11");
}



#[test]
fn enc_fma_vfnmsub312sd944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm3, xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0x9F, 0x58, 0x10", "vfnmsub312sd xmm3, xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm1, xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xD9, 0x9F, 0x0C, 0x42", "vfnmsub312sd xmm1, xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub312sd946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm11, xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9F, 0x58, 0x10", "vfnmsub312sd xmm11, xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312sd947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm11, xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0x9F, 0x1C, 0x42", "vfnmsub312sd xmm11, xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub312sd948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312sd xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF9, 0x9F, 0x20", "vfnmsub312sd xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm12, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x59, 0x9F, 0xE4", "vfnmsub312ss xmm12, xmm4, xmm12");
}



#[test]
fn enc_fma_vfnmsub312ss950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm2, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0x9F, 0xD0", "vfnmsub312ss xmm2, xmm15, xmm0");
}



#[test]
fn enc_fma_vfnmsub312ss951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm12, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0x01, 0x9F, 0xE3", "vfnmsub312ss xmm12, xmm15, xmm11");
}



#[test]
fn enc_fma_vfnmsub312ss952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm3, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x59, 0x9F, 0xDF", "vfnmsub312ss xmm3, xmm4, xmm15");
}



#[test]
fn enc_fma_vfnmsub312ss953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x19, 0x9F, 0xD2", "vfnmsub312ss xmm2, xmm12, xmm2");
}



#[test]
fn enc_fma_vfnmsub312ss954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm3, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0x9F, 0x18", "vfnmsub312ss xmm3, xmm0, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm12, xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x01, 0x9F, 0x60, 0x10", "vfnmsub312ss xmm12, xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub312ss956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm2, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x21, 0x9F, 0x10", "vfnmsub312ss xmm2, xmm11, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub312ss957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm15, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x79, 0x9F, 0x3C, 0x42", "vfnmsub312ss xmm15, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub312ss958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub312ss xmm2, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x59, 0x9F, 0x10", "vfnmsub312ss xmm2, xmm4, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321sd959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm4, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBF, 0xE2", "vfnmsub321sd xmm4, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmsub321sd960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm15, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF1, 0xBF, 0xFB", "vfnmsub321sd xmm15, xmm1, xmm3");
}



#[test]
fn enc_fma_vfnmsub321sd961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm2, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0xA1, 0xBF, 0xD3", "vfnmsub321sd xmm2, xmm11, xmm11");
}



#[test]
fn enc_fma_vfnmsub321sd962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm11, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE1, 0xBF, 0xD9", "vfnmsub321sd xmm11, xmm3, xmm1");
}



#[test]
fn enc_fma_vfnmsub321sd963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm12, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x42, 0xA1, 0xBF, 0xE4", "vfnmsub321sd xmm12, xmm11, xmm12");
}



#[test]
fn enc_fma_vfnmsub321sd964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm2, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x99, 0xBF, 0x10", "vfnmsub321sd xmm2, xmm12, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321sd965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm4, xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0xF1, 0xBF, 0x24, 0x42", "vfnmsub321sd xmm4, xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321sd966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x81, 0xBF, 0x18", "vfnmsub321sd xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321sd967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm11, xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xF9, 0xBF, 0x58, 0x10", "vfnmsub321sd xmm11, xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321sd968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321sd xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0xE9, 0xBF, 0x38", "vfnmsub321sd xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321ss969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm3, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC2, 0x61, 0xBF, 0xDF", "vfnmsub321ss xmm3, xmm3, xmm15");
}



#[test]
fn enc_fma_vfnmsub321ss970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm1, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBF, 0xC9", "vfnmsub321ss xmm1, xmm3, xmm1");
}



#[test]
fn enc_fma_vfnmsub321ss971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm12, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x59, 0xBF, 0xE0", "vfnmsub321ss xmm12, xmm4, xmm0");
}



#[test]
fn enc_fma_vfnmsub321ss972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm12, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBF, 0xE4", "vfnmsub321ss xmm12, xmm1, xmm4");
}



#[test]
fn enc_fma_vfnmsub321ss973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm11, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x62, 0x71, 0xBF, 0xDA", "vfnmsub321ss xmm11, xmm1, xmm2");
}



#[test]
fn enc_fma_vfnmsub321ss974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm0, xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x79, 0xBF, 0x04, 0x42", "vfnmsub321ss xmm0, xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321ss975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm2, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0x10", "vfnmsub321ss xmm2, xmm15, DWORD [rax]");
}



#[test]
fn enc_fma_vfnmsub321ss976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm0, xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x69, 0xBF, 0x40, 0x10", "vfnmsub321ss xmm0, xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_fma_vfnmsub321ss977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm0, xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x01, 0xBF, 0x04, 0x42", "vfnmsub321ss xmm0, xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_fma_vfnmsub321ss978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsub321ss xmm2, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE2, 0x61, 0xBF, 0x10", "vfnmsub321ss xmm2, xmm3, DWORD [rax]");
}


