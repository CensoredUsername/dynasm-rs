
#[test]
fn enc_generic_adc1800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x50, 0x10", "adc BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_adc1801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x0C, 0x42", "adc BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_adc1802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x40, 0x10", "adc BYTE [rax + 16], al");
}



#[test]
fn enc_generic_adc1803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x14, 0x42", "adc BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_adc1804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x55", "adc rbx, 85");
}



#[test]
fn enc_generic_adc1805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x2E", "adc rax, 46");
}



#[test]
fn enc_generic_adc1806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD2, 0x36", "adc rdx, 54");
}



#[test]
fn enc_generic_adc1807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x15", "adc rbx, 21");
}



#[test]
fn enc_generic_adc1808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x20", "adc rcx, 32");
}



#[test]
fn enc_generic_adc1809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x50, 0x10, 0x41", "adc BYTE [rax + 16], 65");
}



#[test]
fn enc_generic_adc1810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x14, 0x42, 0x1D", "adc BYTE [rax * 2 + rdx], 29");
}



#[test]
fn enc_generic_adc1811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x37", "adc BYTE [rax], 55");
}



#[test]
fn enc_generic_adc1812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x6B", "adc BYTE [rax], 107");
}



#[test]
fn enc_generic_adc1813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x50, 0x10, 0x5C", "adc BYTE [rax + 16], 92");
}



#[test]
fn enc_generic_adc1814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x70", "adc al, 112");
}



#[test]
fn enc_generic_adc1815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x43", "adc al, 67");
}



#[test]
fn enc_generic_adc1816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x74", "adc al, 116");
}



#[test]
fn enc_generic_adc1817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x14", "adc al, 20");
}



#[test]
fn enc_generic_adc1818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x6F", "adc al, 111");
}



#[test]
fn enc_generic_adc1819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc ax, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD0, 0x64", "adc ax, 100");
}



#[test]
fn enc_generic_adc1820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc ax, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD0, 0x78", "adc ax, 120");
}



#[test]
fn enc_generic_adc1821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc ax, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD0, 0x0F", "adc ax, 15");
}



#[test]
fn enc_generic_adc1822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x74", "adc eax, 116");
}



#[test]
fn enc_generic_adc1823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x1D", "adc eax, 29");
}



#[test]
fn enc_generic_adc1824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x00", "adc al, BYTE [rax]");
}



#[test]
fn enc_generic_adc1825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x08", "adc cl, BYTE [rax]");
}



#[test]
fn enc_generic_adc1826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x10", "adc dl, BYTE [rax]");
}



#[test]
fn enc_generic_adc1827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC1", "adc cl, al");
}



#[test]
fn enc_generic_adc1828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC0", "adc al, al");
}



#[test]
fn enc_generic_adc1829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC8", "adc al, cl");
}



#[test]
fn enc_generic_adc1830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xCA", "adc dl, cl");
}



#[test]
fn enc_generic_adc1831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD0", "adc al, dl");
}



#[test]
fn enc_generic_adc1832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x2E", "adc rcx, 46");
}



#[test]
fn enc_generic_adc1833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x6A", "adc rax, 106");
}



#[test]
fn enc_generic_adc1834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x1D", "adc rcx, 29");
}



#[test]
fn enc_generic_adc1835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x44", "adc rax, 68");
}



#[test]
fn enc_generic_adc1836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x19", "adc rbx, 25");
}



#[test]
fn enc_generic_adc1837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x1C, 0x42", "adc rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_adc1838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x00", "adc rax, QWORD [rax]");
}



#[test]
fn enc_generic_adc1839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xCA", "adc rdx, rcx");
}



#[test]
fn enc_generic_adc1840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x3D", "adc dl, 61");
}



#[test]
fn enc_generic_adc1841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x5B", "adc al, 91");
}



#[test]
fn enc_generic_adc1842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x4C", "adc al, 76");
}



#[test]
fn enc_generic_adc1843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x5F", "adc cl, 95");
}



#[test]
fn enc_generic_adc1844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x2C", "adc cl, 44");
}



#[test]
fn enc_generic_adc1845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn enc_generic_adcx1846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adcx rcx, [rax]");
}



#[test]
fn enc_generic_adcx1847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adcx rdx, rax");
}



#[test]
fn enc_generic_adcx1848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adcx rax, [rax]");
}



#[test]
fn enc_generic_add1849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x22", "add rbx, 34");
}



#[test]
fn enc_generic_add1850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x44", "add rbx, 68");
}



#[test]
fn enc_generic_add1851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x15", "add rax, 21");
}



#[test]
fn enc_generic_add1852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x3B", "add rbx, 59");
}



#[test]
fn enc_generic_add1853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x29", "add rcx, 41");
}



#[test]
fn enc_generic_add1854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD0", "add al, dl");
}



#[test]
fn enc_generic_add1855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC0", "add al, al");
}



#[test]
fn enc_generic_add1856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC9", "add cl, cl");
}



#[test]
fn enc_generic_add1857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xCA", "add dl, cl");
}



#[test]
fn enc_generic_add1858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x44", "add rax, 68");
}



#[test]
fn enc_generic_add1859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x2B", "add eax, 43");
}



#[test]
fn enc_generic_add1860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x57", "add rax, 87");
}



#[test]
fn enc_generic_add1861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add ax, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC0, 0x6B", "add ax, 107");
}



#[test]
fn enc_generic_add1862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add ax, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC0, 0x53", "add ax, 83");
}



#[test]
fn enc_generic_add1863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn enc_generic_add1864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn enc_generic_add1865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x08", "add cl, BYTE [rax]");
}



#[test]
fn enc_generic_add1866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x10", "add dl, BYTE [rax]");
}



#[test]
fn enc_generic_add1867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC2", "add dl, al");
}



#[test]
fn enc_generic_add1868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC9", "add rcx, rcx");
}



#[test]
fn enc_generic_add1869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xCA", "add rdx, rcx");
}



#[test]
fn enc_generic_add1870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x04, 0x42", "add rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_add1871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x14, 0x42", "add rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_add1872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x3E", "add cl, 62");
}



#[test]
fn enc_generic_add1873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x5F", "add dl, 95");
}



#[test]
fn enc_generic_add1874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x24", "add dl, 36");
}



#[test]
fn enc_generic_add1875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x19", "add al, 25");
}



#[test]
fn enc_generic_add1876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x18", "add dl, 24");
}



#[test]
fn enc_generic_add1877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax + 16], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x40, 0x10, 0x4D", "add BYTE [rax + 16], 77");
}



#[test]
fn enc_generic_add1878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x17", "add BYTE [rax * 2 + rdx], 23");
}



#[test]
fn enc_generic_add1879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x6F", "add BYTE [rax * 2 + rdx], 111");
}



#[test]
fn enc_generic_add1880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax + 16], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x40, 0x10, 0x10", "add BYTE [rax + 16], 16");
}



#[test]
fn enc_generic_add1881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x2E", "add BYTE [rax * 2 + rdx], 46");
}



#[test]
fn enc_generic_add1882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x00", "add BYTE [rax], al");
}



#[test]
fn enc_generic_add1883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x48, 0x10", "add BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_add1884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x10", "add BYTE [rax], dl");
}



#[test]
fn enc_generic_add1885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x08", "add BYTE [rax], cl");
}



#[test]
fn enc_generic_add1886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x0F", "add rdx, 15");
}



#[test]
fn enc_generic_add1887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x56", "add rax, 86");
}



#[test]
fn enc_generic_add1888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x29", "add rax, 41");
}



#[test]
fn enc_generic_add1889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x43", "add rcx, 67");
}



#[test]
fn enc_generic_add1890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x4C", "add rbx, 76");
}



#[test]
fn enc_generic_add1891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x6D", "add al, 109");
}



#[test]
fn enc_generic_add1892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x07", "add al, 7");
}



#[test]
fn enc_generic_add1893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x03", "add al, 3");
}



#[test]
fn enc_generic_add1894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x7B", "add al, 123");
}



#[test]
fn enc_generic_add1895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x74", "add al, 116");
}



#[test]
fn enc_generic_adox1896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adox rcx, [rax]");
}



#[test]
fn enc_generic_adox1897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x10", "adox rdx, [rax]");
}



#[test]
fn enc_generic_adox1898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adox rax, [rax]");
}



#[test]
fn enc_generic_adox1899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adox rdx, rax");
}



#[test]
fn enc_generic_and1900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x20", "and rax, 32");
}



#[test]
fn enc_generic_and1901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and ax, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE0, 0x54", "and ax, 84");
}



#[test]
fn enc_generic_and1902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x14", "and rax, 20");
}



#[test]
fn enc_generic_and1903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and ax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE0, 0x2E", "and ax, 46");
}



#[test]
fn enc_generic_and1904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x17", "and rax, 23");
}



#[test]
fn enc_generic_and1905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x43", "and al, 67");
}



#[test]
fn enc_generic_and1906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x18", "and al, 24");
}



#[test]
fn enc_generic_and1907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x05", "and al, 5");
}



#[test]
fn enc_generic_and1908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x6F", "and al, 111");
}



#[test]
fn enc_generic_and1909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x1C, 0x42", "and rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_and1910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x0C, 0x42", "and rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_and1911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x14, 0x42", "and rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_and1912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC9", "and rcx, rcx");
}



#[test]
fn enc_generic_and1913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xCB", "and rbx, rcx");
}



#[test]
fn enc_generic_and1914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn enc_generic_and1915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD1", "and cl, dl");
}



#[test]
fn enc_generic_and1916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xCA", "and dl, cl");
}



#[test]
fn enc_generic_and1917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC2", "and dl, al");
}



#[test]
fn enc_generic_and1918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn enc_generic_and1919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x17", "and rcx, 23");
}



#[test]
fn enc_generic_and1920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x3B", "and rax, 59");
}



#[test]
fn enc_generic_and1921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x5A", "and rdx, 90");
}



#[test]
fn enc_generic_and1922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x3C", "and rax, 60");
}



#[test]
fn enc_generic_and1923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x5C", "and rdx, 92");
}



#[test]
fn enc_generic_and1924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x30", "and BYTE [rax], 48");
}



#[test]
fn enc_generic_and1925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x63", "and BYTE [rax], 99");
}



#[test]
fn enc_generic_and1926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x24, 0x42, 0x51", "and BYTE [rax * 2 + rdx], 81");
}



#[test]
fn enc_generic_and1927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x37", "and BYTE [rax], 55");
}



#[test]
fn enc_generic_and1928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x1D", "and BYTE [rax], 29");
}



#[test]
fn enc_generic_and1929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn enc_generic_and1930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x10", "and dl, BYTE [rax]");
}



#[test]
fn enc_generic_and1931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x00", "and al, BYTE [rax]");
}



#[test]
fn enc_generic_and1932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC1", "and cl, al");
}



#[test]
fn enc_generic_and1933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x13", "and rbx, 19");
}



#[test]
fn enc_generic_and1934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x19", "and rdx, 25");
}



#[test]
fn enc_generic_and1935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x44", "and rcx, 68");
}



#[test]
fn enc_generic_and1936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x22", "and rdx, 34");
}



#[test]
fn enc_generic_and1937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x61", "and rcx, 97");
}



#[test]
fn enc_generic_and1938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn enc_generic_and1939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x08", "and BYTE [rax], cl");
}



#[test]
fn enc_generic_and1940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x0C, 0x42", "and BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_and1941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x04, 0x42", "and BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_and1942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x1E", "and al, 30");
}



#[test]
fn enc_generic_and1943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x13", "and dl, 19");
}



#[test]
fn enc_generic_and1944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x69", "and cl, 105");
}



#[test]
fn enc_generic_and1945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x0D", "and al, 13");
}



#[test]
fn enc_generic_and1946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x72", "and cl, 114");
}



#[test]
fn enc_generic_bsf1947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xC1", "bsf rax, rcx");
}



#[test]
fn enc_generic_bsf1948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xD1", "bsf rdx, rcx");
}



#[test]
fn enc_generic_bsf1949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x1C, 0x42", "bsf rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsf1950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x10", "bsf rdx, QWORD [rax]");
}



#[test]
fn enc_generic_bsr1951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x04, 0x42", "bsr rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsr1952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xC1", "bsr rax, rcx");
}



#[test]
fn enc_generic_bsr1953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xD9", "bsr rbx, rcx");
}



#[test]
fn enc_generic_bsr1954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xD1", "bsr rdx, rcx");
}



#[test]
fn enc_generic_bswap1955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCB", "bswap rbx");
}



#[test]
fn enc_generic_bswap1956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCA", "bswap rdx");
}



#[test]
fn enc_generic_bswap1957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn enc_generic_bt1958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x0C, 0x42", "bt QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_generic_bt1959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x08", "bt QWORD [rax], rcx");
}



#[test]
fn enc_generic_bt1960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xD1", "bt rcx, rdx");
}



#[test]
fn enc_generic_bt1961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x18", "bt QWORD [rax], rbx");
}



#[test]
fn enc_generic_bt1962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x6E", "bt rcx, 110");
}



#[test]
fn enc_generic_bt1963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x18", "bt rcx, 24");
}



#[test]
fn enc_generic_bt1964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x24, 0x42, 0x76", "bt QWORD [rax * 2 + rdx], 118");
}



#[test]
fn enc_generic_bt1965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x6C", "bt QWORD [rax], 108");
}



#[test]
fn enc_generic_bt1966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x24, 0x42, 0x41", "bt QWORD [rax * 2 + rdx], 65");
}



#[test]
fn enc_generic_btc1967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x56", "btc rbx, 86");
}



#[test]
fn enc_generic_btc1968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF8, 0x46", "btc rax, 70");
}



#[test]
fn enc_generic_btc1969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x6E", "btc rbx, 110");
}



#[test]
fn enc_generic_btc1970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x77", "btc rbx, 119");
}



#[test]
fn enc_generic_btc1971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rcx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF9, 0x22", "btc rcx, 34");
}



#[test]
fn enc_generic_btc1972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn enc_generic_btr1973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn enc_generic_btr1974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rdx, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF2, 0x3B", "btr rdx, 59");
}



#[test]
fn enc_generic_btr1975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rbx, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF3, 0x15", "btr rbx, 21");
}



#[test]
fn enc_generic_btr1976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rdx, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF2, 0x59", "btr rdx, 89");
}



#[test]
fn enc_generic_btr1977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rcx, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF1, 0x71", "btr rcx, 113");
}



#[test]
fn enc_generic_btr1978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x67", "btr rax, 103");
}



#[test]
fn enc_generic_bts1979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn enc_generic_bts1980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x37", "bts rdx, 55");
}



#[test]
fn enc_generic_bts1981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x6E", "bts rcx, 110");
}



#[test]
fn enc_generic_bts1982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x36", "bts rdx, 54");
}



#[test]
fn enc_generic_bts1983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rbx, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEB, 0x16", "bts rbx, 22");
}



#[test]
fn enc_generic_bts1984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x2F", "bts rdx, 47");
}



#[test]
fn enc_generic_cbw1985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cbw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x98", "cbw");
}



#[test]
fn enc_generic_cdq1986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x99", "cdq");
}



#[test]
fn enc_generic_cdqe1987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdqe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x98", "cdqe");
}



#[test]
fn enc_generic_clac1988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCA", "clac");
}



#[test]
fn enc_generic_clc1989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF8", "clc");
}



#[test]
fn enc_generic_cld1990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFC", "cld");
}



#[test]
fn enc_generic_cli1991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cli
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFA", "cli");
}



#[test]
fn enc_generic_clts1992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clts
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x06", "clts");
}



#[test]
fn enc_generic_cmc1993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF5", "cmc");
}



#[test]
fn enc_generic_cpuid1994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpuid
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA2", "cpuid");
}



#[test]
fn enc_generic_cqo1995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cqo
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x99", "cqo");
}



#[test]
fn enc_generic_cwd1996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x99", "cwd");
}



#[test]
fn enc_generic_cwde1997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwde
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x98", "cwde");
}



#[test]
fn enc_generic_dec1998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC9", "dec rcx");
}



#[test]
fn enc_generic_dec1999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCB", "dec rbx");
}



#[test]
fn enc_generic_dec2000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCA", "dec rdx");
}



#[test]
fn enc_generic_dec2001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC8", "dec rax");
}



#[test]
fn enc_generic_dec2002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x48, 0x10", "dec BYTE [rax + 16]");
}



#[test]
fn enc_generic_dec2003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x0C, 0x42", "dec BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_dec2004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn enc_generic_dec2005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xCA", "dec dl");
}



#[test]
fn enc_generic_dec2006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC9", "dec cl");
}



#[test]
fn enc_generic_div2007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn enc_generic_div2008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn enc_generic_div2009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn enc_generic_div2010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn enc_generic_div2011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x34, 0x42", "div QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_enter2012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 2556, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xFC, 0x09, 0x65", "enter 2556, 101");
}



#[test]
fn enc_generic_enter2013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 2747, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xBB, 0x0A, 0x38", "enter 2747, 56");
}



#[test]
fn enc_generic_enter2014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 13488, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xB0, 0x34, 0x0B", "enter 13488, 11");
}



#[test]
fn enc_generic_enter2015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 5761, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x81, 0x16, 0x35", "enter 5761, 53");
}



#[test]
fn enc_generic_enter2016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 5860, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xE4, 0x16, 0x21", "enter 5860, 33");
}



#[test]
fn enc_generic_fwait2017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B", "fwait");
}



#[test]
fn enc_generic_getsec2018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; getsec
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37", "getsec");
}



#[test]
fn enc_generic_hlt2019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hlt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF4", "hlt");
}



#[test]
fn enc_generic_icebp2020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; icebp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "icebp");
}



#[test]
fn enc_generic_idiv2021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF8", "idiv al");
}



#[test]
fn enc_generic_idiv2022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn enc_generic_idiv2023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x3C, 0x42", "idiv QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_idiv2024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn enc_generic_idiv2025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn enc_generic_inc2026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC3", "inc rbx");
}



#[test]
fn enc_generic_inc2027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC2", "inc rdx");
}



#[test]
fn enc_generic_inc2028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC0", "inc rax");
}



#[test]
fn enc_generic_inc2029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x04, 0x42", "inc BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_inc2030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn enc_generic_inc2031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn enc_generic_inc2032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC0", "inc al");
}



#[test]
fn enc_generic_inc2033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC1", "inc cl");
}



#[test]
fn enc_generic_insb2034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6C", "insb");
}



#[test]
fn enc_generic_insd2035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6D", "insd");
}



#[test]
fn enc_generic_insw2036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6D", "insw");
}



#[test]
fn enc_generic_int2037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x6E", "int 110");
}



#[test]
fn enc_generic_int2038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x22", "int 34");
}



#[test]
fn enc_generic_int2039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x5F", "int 95");
}



#[test]
fn enc_generic_int2040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x60", "int 96");
}



#[test]
fn enc_generic_int2041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x19", "int 25");
}



#[test]
fn enc_generic_int012042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int01
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int01");
}



#[test]
fn enc_generic_int032043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int03
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int03");
}



#[test]
fn enc_generic_int12044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int1");
}



#[test]
fn enc_generic_int32045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int3");
}



#[test]
fn enc_generic_invd2046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x08", "invd");
}



#[test]
fn enc_generic_invlpg2047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn enc_generic_iret2048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iret");
}



#[test]
fn enc_generic_iretd2049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iretd");
}



#[test]
fn enc_generic_iretq2050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xCF", "iretq");
}



#[test]
fn enc_generic_iretw2051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xCF", "iretw");
}



#[test]
fn enc_generic_lahf2052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9F", "lahf");
}



#[test]
fn enc_generic_lar2053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn enc_generic_lar2054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x00", "lar rax, WORD [rax]");
}



#[test]
fn enc_generic_lar2055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x18", "lar rbx, WORD [rax]");
}



#[test]
fn enc_generic_lar2056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x58, 0x10", "lar rbx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lar2057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rdx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x50, 0x10", "lar rdx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lea2058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x00", "lea rax, [rax]");
}



#[test]
fn enc_generic_lea2059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x18", "lea rbx, [rax]");
}



#[test]
fn enc_generic_lea2060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x08", "lea rcx, [rax]");
}



#[test]
fn enc_generic_leave2061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; leave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC9", "leave");
}



#[test]
fn enc_generic_lfs2062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x08", "lfs rcx, [rax]");
}



#[test]
fn enc_generic_lfs2063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn enc_generic_lfs2064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x00", "lfs rax, [rax]");
}



#[test]
fn enc_generic_lgdt2065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn enc_generic_lgs2066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x00", "lgs rax, [rax]");
}



#[test]
fn enc_generic_lgs2067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x18", "lgs rbx, [rax]");
}



#[test]
fn enc_generic_lgs2068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x08", "lgs rcx, [rax]");
}



#[test]
fn enc_generic_lgs2069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x10", "lgs rdx, [rax]");
}



#[test]
fn enc_generic_lidt2070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn enc_generic_lldt2071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn enc_generic_lldt2072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD1", "lldt cx");
}



#[test]
fn enc_generic_lldt2073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD0", "lldt ax");
}



#[test]
fn enc_generic_lmsw2074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn enc_generic_lmsw2075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF0", "lmsw ax");
}



#[test]
fn enc_generic_lmsw2076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF1", "lmsw cx");
}



#[test]
fn enc_generic_lmsw2077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF2", "lmsw dx");
}



#[test]
fn enc_generic_lodsb2078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAC", "lodsb");
}



#[test]
fn enc_generic_lodsd2079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAD", "lodsd");
}



#[test]
fn enc_generic_lodsq2080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAD", "lodsq");
}



#[test]
fn enc_generic_lodsw2081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAD", "lodsw");
}



#[test]
fn enc_generic_lsl2082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn enc_generic_lsl2083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rdx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x50, 0x10", "lsl rdx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lsl2084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x04, 0x42", "lsl rax, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lsl2085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x18", "lsl rbx, WORD [rax]");
}



#[test]
fn enc_generic_lss2086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn enc_generic_lss2087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x08", "lss rcx, [rax]");
}



#[test]
fn enc_generic_ltr2088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn enc_generic_ltr2089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD9", "ltr cx");
}



#[test]
fn enc_generic_ltr2090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xDA", "ltr dx");
}



#[test]
fn enc_generic_ltr2091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD8", "ltr ax");
}



#[test]
fn enc_generic_monitor2092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn enc_generic_monitor2093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor");
}



#[test]
fn enc_generic_movnti2094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax + 16], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x40, 0x10", "movnti QWORD [rax + 16], rax");
}



#[test]
fn enc_generic_movnti2095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax + 16], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x48, 0x10", "movnti QWORD [rax + 16], rcx");
}



#[test]
fn enc_generic_movnti2096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x0C, 0x42", "movnti QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_generic_movnti2097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x08", "movnti QWORD [rax], rcx");
}



#[test]
fn enc_generic_movnti2098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax], edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x10", "movnti DWORD [rax], edx");
}



#[test]
fn enc_generic_movnti2099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax + 16], eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x40, 0x10", "movnti DWORD [rax + 16], eax");
}



#[test]
fn enc_generic_movnti2100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax * 2 + rdx], eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x04, 0x42", "movnti DWORD [rax * 2 + rdx], eax");
}



#[test]
fn enc_generic_movsb2101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA4", "movsb");
}



#[test]
fn enc_generic_movsd2102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA5", "movsd");
}



#[test]
fn enc_generic_movsq2103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA5", "movsq");
}



#[test]
fn enc_generic_movsw2104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA5", "movsw");
}



#[test]
fn enc_generic_movsx2105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x08", "movsx rcx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x18", "movsx rbx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0xC0", "movsx rax, al");
}



#[test]
fn enc_generic_movsx2108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD8", "movsx rbx, ax");
}



#[test]
fn enc_generic_movsx2109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x18", "movsx rbx, WORD [rax]");
}



#[test]
fn enc_generic_movsx2110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x00", "movsx rax, WORD [rax]");
}



#[test]
fn enc_generic_movsx2111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x10", "movsx rdx, WORD [rax]");
}



#[test]
fn enc_generic_movsx2112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx cx, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x0C, 0x42", "movsx cx, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_movsx2113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x08", "movsx cx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x40, 0x10", "movsx ax, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movsx2115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC0", "movsx rax, eax");
}



#[test]
fn enc_generic_movsx2116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsx rcx, DWORD [rax]");
}



#[test]
fn enc_generic_movsx2117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xD0", "movsx rdx, eax");
}



#[test]
fn enc_generic_movsxd2118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rcx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC8", "movsxd rcx, eax");
}



#[test]
fn enc_generic_movsxd2119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsxd rcx, DWORD [rax]");
}



#[test]
fn enc_generic_movsxd2120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsxd rdx, DWORD [rax]");
}



#[test]
fn enc_generic_movsxd2121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsxd rax, DWORD [rax]");
}



#[test]
fn enc_generic_movzx2122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x50, 0x10", "movzx dx, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movzx2123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx cx, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x0C, 0x42", "movzx cx, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_movzx2124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x08", "movzx cx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx2125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC0", "movzx rax, ax");
}



#[test]
fn enc_generic_movzx2126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0x18", "movzx rbx, WORD [rax]");
}



#[test]
fn enc_generic_movzx2127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xD8", "movzx rbx, ax");
}



#[test]
fn enc_generic_movzx2128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC8", "movzx rcx, ax");
}



#[test]
fn enc_generic_movzx2129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x10", "movzx rdx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx2130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x08", "movzx rcx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx2131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC0", "movzx rax, al");
}



#[test]
fn enc_generic_movzx2132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC8", "movzx rcx, al");
}



#[test]
fn enc_generic_mul2133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x20", "mul BYTE [rax]");
}



#[test]
fn enc_generic_mul2134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn enc_generic_mul2135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn enc_generic_mul2136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x24, 0x42", "mul QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_mwait2137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn enc_generic_mwait2138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait");
}



#[test]
fn enc_generic_neg2139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD8", "neg rax");
}



#[test]
fn enc_generic_neg2140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD9", "neg rcx");
}



#[test]
fn enc_generic_neg2141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn enc_generic_neg2142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x1C, 0x42", "neg BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_neg2143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn enc_generic_neg2144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD9", "neg cl");
}



#[test]
fn enc_generic_neg2145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn enc_generic_neg2146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xDA", "neg dl");
}



#[test]
fn enc_generic_nop2147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x90", "nop");
}



#[test]
fn enc_generic_nop2148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn enc_generic_nop2149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x04, 0x42", "nop QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_nop2150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn enc_generic_not2151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD1", "not cl");
}



#[test]
fn enc_generic_not2152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD0", "not al");
}



#[test]
fn enc_generic_not2153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn enc_generic_not2154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD2", "not rdx");
}



#[test]
fn enc_generic_not2155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD0", "not rax");
}



#[test]
fn enc_generic_not2156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD3", "not rbx");
}



#[test]
fn enc_generic_not2157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn enc_generic_not2158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x14, 0x42", "not BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or2159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x06", "or rdx, 6");
}



#[test]
fn enc_generic_or2160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x37", "or rcx, 55");
}



#[test]
fn enc_generic_or2161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x7B", "or rbx, 123");
}



#[test]
fn enc_generic_or2162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x08", "or rcx, 8");
}



#[test]
fn enc_generic_or2163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x56", "or rdx, 86");
}



#[test]
fn enc_generic_or2164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn enc_generic_or2165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC8", "or al, cl");
}



#[test]
fn enc_generic_or2166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC2", "or dl, al");
}



#[test]
fn enc_generic_or2167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC9", "or rcx, rcx");
}



#[test]
fn enc_generic_or2168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x18", "or rbx, QWORD [rax]");
}



#[test]
fn enc_generic_or2169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x04, 0x42", "or rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or2170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x0C, 0x42", "or rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or2171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x14, 0x42", "or BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_or2172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x48, 0x10", "or BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_or2173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x04, 0x42", "or BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_or2174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x50, 0x10", "or BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_or2175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn enc_generic_or2176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC1", "or cl, al");
}



#[test]
fn enc_generic_or2177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn enc_generic_or2178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x10", "or dl, BYTE [rax]");
}



#[test]
fn enc_generic_or2179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x51", "or rbx, 81");
}



#[test]
fn enc_generic_or2180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x31", "or rax, 49");
}



#[test]
fn enc_generic_or2181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x24", "or rdx, 36");
}



#[test]
fn enc_generic_or2182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x77", "or rcx, 119");
}



#[test]
fn enc_generic_or2183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x31", "or rdx, 49");
}



#[test]
fn enc_generic_or2184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x13", "or al, 19");
}



#[test]
fn enc_generic_or2185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x09", "or al, 9");
}



#[test]
fn enc_generic_or2186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x03", "or al, 3");
}



#[test]
fn enc_generic_or2187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x04", "or al, 4");
}



#[test]
fn enc_generic_or2188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x62", "or al, 98");
}



#[test]
fn enc_generic_or2189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x0C, 0x42, 0x7D", "or BYTE [rax * 2 + rdx], 125");
}



#[test]
fn enc_generic_or2190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x7D", "or BYTE [rax], 125");
}



#[test]
fn enc_generic_or2191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x48, 0x10, 0x7D", "or BYTE [rax + 16], 125");
}



#[test]
fn enc_generic_or2192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x48, 0x10, 0x76", "or BYTE [rax + 16], 118");
}



#[test]
fn enc_generic_or2193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x47", "or BYTE [rax], 71");
}



#[test]
fn enc_generic_or2194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x74", "or ax, 116");
}



#[test]
fn enc_generic_or2195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x2A", "or rax, 42");
}



#[test]
fn enc_generic_or2196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x58", "or ax, 88");
}



#[test]
fn enc_generic_or2197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x4A", "or ax, 74");
}



#[test]
fn enc_generic_or2198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x70", "or rax, 112");
}



#[test]
fn enc_generic_or2199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn enc_generic_or2200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x31", "or al, 49");
}



#[test]
fn enc_generic_or2201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x36", "or cl, 54");
}



#[test]
fn enc_generic_or2202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x20", "or al, 32");
}



#[test]
fn enc_generic_or2203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x3C", "or cl, 60");
}



#[test]
fn enc_generic_or2204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x28", "or dl, 40");
}



#[test]
fn enc_generic_outsb2205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6E", "outsb");
}



#[test]
fn enc_generic_outsd2206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6F", "outsd");
}



#[test]
fn enc_generic_outsw2207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6F", "outsw");
}



#[test]
fn enc_generic_pause2208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pause
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x90", "pause");
}



#[test]
fn enc_generic_pop2209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5B", "pop rbx");
}



#[test]
fn enc_generic_pop2210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5A", "pop rdx");
}



#[test]
fn enc_generic_pop2211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x58", "pop rax");
}



#[test]
fn enc_generic_pop2212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn enc_generic_pop2213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn enc_generic_pop2214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x04, 0x42", "pop QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_pop2215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn enc_generic_popcnt2216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x14, 0x42", "popcnt rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_popcnt2217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x04, 0x42", "popcnt rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_popcnt2218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD1", "popcnt rdx, rcx");
}



#[test]
fn enc_generic_popcnt2219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD9", "popcnt rbx, rcx");
}



#[test]
fn enc_generic_popf2220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popf");
}



#[test]
fn enc_generic_popfq2221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popfq");
}



#[test]
fn enc_generic_popfw2222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9D", "popfw");
}



#[test]
fn enc_generic_prefetchnta2223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x04, 0x42", "prefetchnta BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetchnta2224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x40, 0x10", "prefetchnta BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht02225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x08", "prefetcht0 BYTE [rax]");
}



#[test]
fn enc_generic_prefetcht02226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x48, 0x10", "prefetcht0 BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht12227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn enc_generic_prefetcht12228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x14, 0x42", "prefetcht1 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht22229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x58, 0x10", "prefetcht2 BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht22230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn enc_generic_prefetcht22231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x1C, 0x42", "prefetcht2 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_push2232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x7C", "push 124");
}



#[test]
fn enc_generic_push2233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x21", "push 33");
}



#[test]
fn enc_generic_push2234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x1A", "push 26");
}



#[test]
fn enc_generic_push2235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x61", "push 97");
}



#[test]
fn enc_generic_push2236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x39", "push 57");
}



#[test]
fn enc_generic_push2237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn enc_generic_push2238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x50", "push rax");
}



#[test]
fn enc_generic_push2239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x53", "push rbx");
}



#[test]
fn enc_generic_push2240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn enc_generic_push2241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn enc_generic_push2242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x34, 0x42", "push QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_push2243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x40", "push 64");
}



#[test]
fn enc_generic_push2244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x7B", "push 123");
}



#[test]
fn enc_generic_push2245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x4A", "push 74");
}



#[test]
fn enc_generic_push2246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x06", "push 6");
}



#[test]
fn enc_generic_push2247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x4D", "push 77");
}



#[test]
fn enc_generic_push2248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn enc_generic_pushf2249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushf");
}



#[test]
fn enc_generic_pushfq2250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushfq");
}



#[test]
fn enc_generic_pushfw2251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9C", "pushfw");
}



#[test]
fn enc_generic_rcl2252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn enc_generic_rcl2253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x14, 0x42", "rcl QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rcl2254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x32", "rcl al, 50");
}



#[test]
fn enc_generic_rcl2255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x52", "rcl al, 82");
}



#[test]
fn enc_generic_rcl2256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x42", "rcl BYTE [rax], 66");
}



#[test]
fn enc_generic_rcl2257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x54", "rcl al, 84");
}



#[test]
fn enc_generic_rcl2258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x4A", "rcl BYTE [rax], 74");
}



#[test]
fn enc_generic_rcl2259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn enc_generic_rcl2260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD0", "rcl al, cl");
}



#[test]
fn enc_generic_rcl2261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x10, 0x52", "rcl QWORD [rax], 82");
}



#[test]
fn enc_generic_rcl2262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x22", "rcl rcx, 34");
}



#[test]
fn enc_generic_rcl2263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x02", "rcl rcx, 2");
}



#[test]
fn enc_generic_rcl2264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x14, 0x42, 0x39", "rcl QWORD [rax * 2 + rdx], 57");
}



#[test]
fn enc_generic_rcl2265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x10, 0x5F", "rcl QWORD [rax], 95");
}



#[test]
fn enc_generic_rcr2266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x62", "rcr al, 98");
}



#[test]
fn enc_generic_rcr2267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x65", "rcr al, 101");
}



#[test]
fn enc_generic_rcr2268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x47", "rcr al, 71");
}



#[test]
fn enc_generic_rcr2269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x7D", "rcr BYTE [rax], 125");
}



#[test]
fn enc_generic_rcr2270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x41", "rcr al, 65");
}



#[test]
fn enc_generic_rcr2271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn enc_generic_rcr2272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD8", "rcr al, cl");
}



#[test]
fn enc_generic_rcr2273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x1C, 0x42, 0x18", "rcr QWORD [rax * 2 + rdx], 24");
}



#[test]
fn enc_generic_rcr2274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x78", "rcr QWORD [rax], 120");
}



#[test]
fn enc_generic_rcr2275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x1C, 0x42, 0x48", "rcr QWORD [rax * 2 + rdx], 72");
}



#[test]
fn enc_generic_rcr2276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x55", "rcr QWORD [rax], 85");
}



#[test]
fn enc_generic_rcr2277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x1C, 0x42, 0x24", "rcr QWORD [rax * 2 + rdx], 36");
}



#[test]
fn enc_generic_rcr2278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x1C, 0x42", "rcr QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rcr2279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn enc_generic_rcr2280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn enc_generic_rdfsbase2281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC0", "rdfsbase rax");
}



#[test]
fn enc_generic_rdfsbase2282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn enc_generic_rdfsbase2283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn enc_generic_rdfsbase2284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC0", "rdfsbase eax");
}



#[test]
fn enc_generic_rdfsbase2285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC1", "rdfsbase ecx");
}



#[test]
fn enc_generic_rdfsbase2286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC2", "rdfsbase edx");
}



#[test]
fn enc_generic_rdgsbase2287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn enc_generic_rdgsbase2288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC8", "rdgsbase rax");
}



#[test]
fn enc_generic_rdgsbase2289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCA", "rdgsbase rdx");
}



#[test]
fn enc_generic_rdgsbase2290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xCA", "rdgsbase edx");
}



#[test]
fn enc_generic_rdgsbase2291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC8", "rdgsbase eax");
}



#[test]
fn enc_generic_rdmsr2292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x32", "rdmsr");
}



#[test]
fn enc_generic_rdpid2293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn enc_generic_rdpid2294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF9", "rdpid rcx");
}



#[test]
fn enc_generic_rdpkru2295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEE", "rdpkru");
}



#[test]
fn enc_generic_rdpmc2296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x33", "rdpmc");
}



#[test]
fn enc_generic_rdrand2297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF0", "rdrand rax");
}



#[test]
fn enc_generic_rdrand2298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF1", "rdrand rcx");
}



#[test]
fn enc_generic_rdrand2299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn enc_generic_rdseed2300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xFA", "rdseed rdx");
}



#[test]
fn enc_generic_rdseed2301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn enc_generic_rdseed2302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn enc_generic_rdtsc2303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtsc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x31", "rdtsc");
}



#[test]
fn enc_generic_rdtscp2304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtscp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF9", "rdtscp");
}



#[test]
fn enc_generic_ret2305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "ret");
}



#[test]
fn enc_generic_ret2306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 2665
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x69, 0x0A", "ret 2665");
}



#[test]
fn enc_generic_ret2307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 15821
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xCD, 0x3D", "ret 15821");
}



#[test]
fn enc_generic_ret2308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 1208
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xB8, 0x04", "ret 1208");
}



#[test]
fn enc_generic_ret2309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 12099
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x43, 0x2F", "ret 12099");
}



#[test]
fn enc_generic_ret2310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 5627
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xFB, 0x15", "ret 5627");
}



#[test]
fn enc_generic_retf2311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCB", "retf");
}



#[test]
fn enc_generic_retf2312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 15321
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xD9, 0x3B", "retf 15321");
}



#[test]
fn enc_generic_retf2313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 1511
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xE7, 0x05", "retf 1511");
}



#[test]
fn enc_generic_retf2314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 15225
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x79, 0x3B", "retf 15225");
}



#[test]
fn enc_generic_retf2315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 12223
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xBF, 0x2F", "retf 12223");
}



#[test]
fn enc_generic_retf2316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 12029
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xFD, 0x2E", "retf 12029");
}



#[test]
fn enc_generic_retn2317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "retn");
}



#[test]
fn enc_generic_retn2318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 7168
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x00, 0x1C", "retn 7168");
}



#[test]
fn enc_generic_retn2319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 12264
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xE8, 0x2F", "retn 12264");
}



#[test]
fn enc_generic_retn2320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 1978
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xBA, 0x07", "retn 1978");
}



#[test]
fn enc_generic_retn2321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 14406
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x46, 0x38", "retn 14406");
}



#[test]
fn enc_generic_retn2322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 12100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x44, 0x2F", "retn 12100");
}



#[test]
fn enc_generic_rol2323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x04, 0x42, 0x5D", "rol QWORD [rax * 2 + rdx], 93");
}



#[test]
fn enc_generic_rol2324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x04, 0x42, 0x44", "rol QWORD [rax * 2 + rdx], 68");
}



#[test]
fn enc_generic_rol2325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x39", "rol rcx, 57");
}



#[test]
fn enc_generic_rol2326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x04, 0x42, 0x5A", "rol QWORD [rax * 2 + rdx], 90");
}



#[test]
fn enc_generic_rol2327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x04, 0x42, 0x61", "rol QWORD [rax * 2 + rdx], 97");
}



#[test]
fn enc_generic_rol2328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x31", "rol BYTE [rax], 49");
}



#[test]
fn enc_generic_rol2329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x65", "rol al, 101");
}



#[test]
fn enc_generic_rol2330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x58", "rol BYTE [rax], 88");
}



#[test]
fn enc_generic_rol2331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x60", "rol al, 96");
}



#[test]
fn enc_generic_rol2332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x77", "rol al, 119");
}



#[test]
fn enc_generic_rol2333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn enc_generic_rol2334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn enc_generic_rol2335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x04, 0x42", "rol QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rol2336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x00", "rol BYTE [rax], cl");
}



#[test]
fn enc_generic_rol2337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn enc_generic_ror2338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x1D", "ror al, 29");
}



#[test]
fn enc_generic_ror2339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x58", "ror BYTE [rax], 88");
}



#[test]
fn enc_generic_ror2340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x4C", "ror al, 76");
}



#[test]
fn enc_generic_ror2341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x1B", "ror BYTE [rax], 27");
}



#[test]
fn enc_generic_ror2342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x51", "ror al, 81");
}



#[test]
fn enc_generic_ror2343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn enc_generic_ror2344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x08", "ror BYTE [rax], cl");
}



#[test]
fn enc_generic_ror2345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn enc_generic_ror2346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x0C, 0x42", "ror QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_ror2347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x08", "ror QWORD [rax], cl");
}



#[test]
fn enc_generic_ror2348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x35", "ror rcx, 53");
}



#[test]
fn enc_generic_ror2349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x63", "ror QWORD [rax], 99");
}



#[test]
fn enc_generic_ror2350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x08", "ror rcx, 8");
}



#[test]
fn enc_generic_ror2351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x30", "ror QWORD [rax], 48");
}



#[test]
fn enc_generic_ror2352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x72", "ror QWORD [rax], 114");
}



#[test]
fn enc_generic_rsm2353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAA", "rsm");
}



#[test]
fn enc_generic_sahf2354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9E", "sahf");
}



#[test]
fn enc_generic_sal2355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x6D", "sal QWORD [rax], 109");
}



#[test]
fn enc_generic_sal2356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x63", "sal rcx, 99");
}



#[test]
fn enc_generic_sal2357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x47", "sal QWORD [rax * 2 + rdx], 71");
}



#[test]
fn enc_generic_sal2358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x58", "sal QWORD [rax], 88");
}



#[test]
fn enc_generic_sal2359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x4C", "sal rcx, 76");
}



#[test]
fn enc_generic_sal2360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn enc_generic_sal2361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn enc_generic_sal2362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x24, 0x42", "sal QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sal2363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "sal rcx, cl");
}



#[test]
fn enc_generic_sal2364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x48", "sal BYTE [rax], 72");
}



#[test]
fn enc_generic_sal2365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x54", "sal al, 84");
}



#[test]
fn enc_generic_sal2366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x73", "sal BYTE [rax], 115");
}



#[test]
fn enc_generic_sal2367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x05", "sal BYTE [rax], 5");
}



#[test]
fn enc_generic_sal2368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x62", "sal BYTE [rax], 98");
}



#[test]
fn enc_generic_sar2369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x5D", "sar BYTE [rax], 93");
}



#[test]
fn enc_generic_sar2370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x10", "sar BYTE [rax], 16");
}



#[test]
fn enc_generic_sar2371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x67", "sar al, 103");
}



#[test]
fn enc_generic_sar2372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x5B", "sar al, 91");
}



#[test]
fn enc_generic_sar2373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x7B", "sar BYTE [rax], 123");
}



#[test]
fn enc_generic_sar2374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn enc_generic_sar2375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x3C, 0x42", "sar QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sar2376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xF9", "sar rcx, cl");
}



#[test]
fn enc_generic_sar2377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn enc_generic_sar2378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn enc_generic_sar2379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x3C, 0x42, 0x06", "sar QWORD [rax * 2 + rdx], 6");
}



#[test]
fn enc_generic_sar2380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x22", "sar rcx, 34");
}



#[test]
fn enc_generic_sar2381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x3C, 0x42, 0x18", "sar QWORD [rax * 2 + rdx], 24");
}



#[test]
fn enc_generic_sar2382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x3C, 0x42, 0x4D", "sar QWORD [rax * 2 + rdx], 77");
}



#[test]
fn enc_generic_sar2383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x22", "sar QWORD [rax], 34");
}



#[test]
fn enc_generic_sbb2384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xCB", "sbb rbx, rcx");
}



#[test]
fn enc_generic_sbb2385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xCA", "sbb rdx, rcx");
}



#[test]
fn enc_generic_sbb2386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x10", "sbb rdx, QWORD [rax]");
}



#[test]
fn enc_generic_sbb2387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC9", "sbb rcx, rcx");
}



#[test]
fn enc_generic_sbb2388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x18", "sbb rbx, QWORD [rax]");
}



#[test]
fn enc_generic_sbb2389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x1C, 0x42, 0x4A", "sbb BYTE [rax * 2 + rdx], 74");
}



#[test]
fn enc_generic_sbb2390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x0B", "sbb BYTE [rax + 16], 11");
}



#[test]
fn enc_generic_sbb2391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x1C, 0x42, 0x3A", "sbb BYTE [rax * 2 + rdx], 58");
}



#[test]
fn enc_generic_sbb2392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x03", "sbb BYTE [rax], 3");
}



#[test]
fn enc_generic_sbb2393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x21", "sbb rdx, 33");
}



#[test]
fn enc_generic_sbb2394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x71", "sbb rbx, 113");
}



#[test]
fn enc_generic_sbb2395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x0C", "sbb rax, 12");
}



#[test]
fn enc_generic_sbb2396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x40", "sbb rdx, 64");
}



#[test]
fn enc_generic_sbb2397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x69", "sbb rax, 105");
}



#[test]
fn enc_generic_sbb2398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn enc_generic_sbb2399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xD1", "sbb cl, dl");
}



#[test]
fn enc_generic_sbb2400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xCA", "sbb dl, cl");
}



#[test]
fn enc_generic_sbb2401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC1", "sbb cl, al");
}



#[test]
fn enc_generic_sbb2402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC9", "sbb cl, cl");
}



#[test]
fn enc_generic_sbb2403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x18", "sbb rcx, 24");
}



#[test]
fn enc_generic_sbb2404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x61", "sbb rcx, 97");
}



#[test]
fn enc_generic_sbb2405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x77", "sbb rcx, 119");
}



#[test]
fn enc_generic_sbb2406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x05", "sbb rcx, 5");
}



#[test]
fn enc_generic_sbb2407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x61", "sbb rdx, 97");
}



#[test]
fn enc_generic_sbb2408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb eax, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD8, 0x18", "sbb eax, 24");
}



#[test]
fn enc_generic_sbb2409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x7B", "sbb rax, 123");
}



#[test]
fn enc_generic_sbb2410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb eax, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD8, 0x0A", "sbb eax, 10");
}



#[test]
fn enc_generic_sbb2411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x14", "sbb ax, 20");
}



#[test]
fn enc_generic_sbb2412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb eax, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD8, 0x76", "sbb eax, 118");
}



#[test]
fn enc_generic_sbb2413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x4E", "sbb al, 78");
}



#[test]
fn enc_generic_sbb2414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x3F", "sbb al, 63");
}



#[test]
fn enc_generic_sbb2415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x0C", "sbb al, 12");
}



#[test]
fn enc_generic_sbb2416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x07", "sbb al, 7");
}



#[test]
fn enc_generic_sbb2417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x79", "sbb al, 121");
}



#[test]
fn enc_generic_sbb2418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x23", "sbb al, 35");
}



#[test]
fn enc_generic_sbb2419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x13", "sbb al, 19");
}



#[test]
fn enc_generic_sbb2420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x21", "sbb cl, 33");
}



#[test]
fn enc_generic_sbb2421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x33", "sbb cl, 51");
}



#[test]
fn enc_generic_sbb2422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xDA, 0x40", "sbb dl, 64");
}



#[test]
fn enc_generic_sbb2423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x0C, 0x42", "sbb BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sbb2424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x00", "sbb BYTE [rax], al");
}



#[test]
fn enc_generic_sbb2425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x50, 0x10", "sbb BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_sbb2426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x14, 0x42", "sbb BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_sbb2427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC1", "sbb cl, al");
}



#[test]
fn enc_generic_sbb2428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x00", "sbb al, BYTE [rax]");
}



#[test]
fn enc_generic_sbb2429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC2", "sbb dl, al");
}



#[test]
fn enc_generic_sbb2430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x08", "sbb cl, BYTE [rax]");
}



#[test]
fn enc_generic_scasb2431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAE", "scasb");
}



#[test]
fn enc_generic_scasd2432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAF", "scasd");
}



#[test]
fn enc_generic_scasq2433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAF", "scasq");
}



#[test]
fn enc_generic_scasw2434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAF", "scasw");
}



#[test]
fn enc_generic_sgdt2435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn enc_generic_shl2436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn enc_generic_shl2437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x24, 0x42", "shl QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_shl2438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn enc_generic_shl2439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn enc_generic_shl2440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x03", "shl BYTE [rax], 3");
}



#[test]
fn enc_generic_shl2441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x5C", "shl BYTE [rax], 92");
}



#[test]
fn enc_generic_shl2442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x4F", "shl al, 79");
}



#[test]
fn enc_generic_shl2443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x6A", "shl BYTE [rax], 106");
}



#[test]
fn enc_generic_shl2444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x66", "shl BYTE [rax], 102");
}



#[test]
fn enc_generic_shl2445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x51", "shl QWORD [rax * 2 + rdx], 81");
}



#[test]
fn enc_generic_shl2446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x3A", "shl QWORD [rax], 58");
}



#[test]
fn enc_generic_shl2447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x54", "shl rcx, 84");
}



#[test]
fn enc_generic_shl2448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x26", "shl rcx, 38");
}



#[test]
fn enc_generic_shl2449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x02", "shl QWORD [rax], 2");
}



#[test]
fn enc_generic_shld2450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rax, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x04, 0x42, 0x13", "shld QWORD [rax * 2 + rdx], rax, 19");
}



#[test]
fn enc_generic_shld2451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rax, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x04, 0x42, 0x6C", "shld QWORD [rax * 2 + rdx], rax, 108");
}



#[test]
fn enc_generic_shld2452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rdx, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x10, 0x32", "shld QWORD [rax], rdx, 50");
}



#[test]
fn enc_generic_shld2453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rbx, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x18, 0x50", "shld QWORD [rax], rbx, 80");
}



#[test]
fn enc_generic_shld2454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rbx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x1C, 0x42, 0x22", "shld QWORD [rax * 2 + rdx], rbx, 34");
}



#[test]
fn enc_generic_shld2455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x04, 0x42", "shld QWORD [rax * 2 + rdx], rax, cl");
}



#[test]
fn enc_generic_shld2456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xC1", "shld rcx, rax, cl");
}



#[test]
fn enc_generic_shld2457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xD1", "shld rcx, rdx, cl");
}



#[test]
fn enc_generic_shld2458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xC9", "shld rcx, rcx, cl");
}



#[test]
fn enc_generic_shr2459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x39", "shr QWORD [rax], 57");
}



#[test]
fn enc_generic_shr2460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x2F", "shr rcx, 47");
}



#[test]
fn enc_generic_shr2461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x54", "shr rcx, 84");
}



#[test]
fn enc_generic_shr2462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax * 2 + rdx], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x2C, 0x42, 0x08", "shr QWORD [rax * 2 + rdx], 8");
}



#[test]
fn enc_generic_shr2463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x26", "shr QWORD [rax], 38");
}



#[test]
fn enc_generic_shr2464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x31", "shr BYTE [rax], 49");
}



#[test]
fn enc_generic_shr2465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x17", "shr BYTE [rax], 23");
}



#[test]
fn enc_generic_shr2466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x2E", "shr al, 46");
}



#[test]
fn enc_generic_shr2467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x52", "shr BYTE [rax], 82");
}



#[test]
fn enc_generic_shr2468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x43", "shr al, 67");
}



#[test]
fn enc_generic_shr2469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn enc_generic_shr2470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn enc_generic_shr2471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x2C, 0x42", "shr QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_shr2472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn enc_generic_shr2473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn enc_generic_shrd2474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rbx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD9", "shrd rcx, rbx, cl");
}



#[test]
fn enc_generic_shrd2475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD1", "shrd rcx, rdx, cl");
}



#[test]
fn enc_generic_shrd2476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x04, 0x42", "shrd QWORD [rax * 2 + rdx], rax, cl");
}



#[test]
fn enc_generic_shrd2477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x0C, 0x42", "shrd QWORD [rax * 2 + rdx], rcx, cl");
}



#[test]
fn enc_generic_shrd2478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rcx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x0C, 0x42, 0x51", "shrd QWORD [rax * 2 + rdx], rcx, 81");
}



#[test]
fn enc_generic_shrd2479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rbx, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0xD9, 0x5E", "shrd rcx, rbx, 94");
}



#[test]
fn enc_generic_shrd2480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x04, 0x42, 0x4A", "shrd QWORD [rax * 2 + rdx], rax, 74");
}



#[test]
fn enc_generic_shrd2481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rdx, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x10, 0x65", "shrd QWORD [rax], rdx, 101");
}



#[test]
fn enc_generic_shrd2482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rax, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x00, 0x42", "shrd QWORD [rax], rax, 66");
}



#[test]
fn enc_generic_sidt2483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn enc_generic_skinit2484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; skinit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDE", "skinit");
}



#[test]
fn enc_generic_sldt2485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn enc_generic_sldt2486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC0", "sldt rax");
}



#[test]
fn enc_generic_sldt2487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC1", "sldt rcx");
}



#[test]
fn enc_generic_sldt2488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn enc_generic_sldt2489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC3", "sldt rbx");
}



#[test]
fn enc_generic_smsw2490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn enc_generic_smsw2491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE2", "smsw rdx");
}



#[test]
fn enc_generic_smsw2492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE0", "smsw rax");
}



#[test]
fn enc_generic_smsw2493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE1", "smsw rcx");
}



#[test]
fn enc_generic_stac2494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCB", "stac");
}



#[test]
fn enc_generic_stc2495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF9", "stc");
}



#[test]
fn enc_generic_std2496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; std
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFD", "std");
}



#[test]
fn enc_generic_sti2497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sti
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFB", "sti");
}



#[test]
fn enc_generic_stosb2498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAA", "stosb");
}



#[test]
fn enc_generic_stosd2499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAB", "stosd");
}



#[test]
fn enc_generic_stosq2500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAB", "stosq");
}



#[test]
fn enc_generic_stosw2501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAB", "stosw");
}



#[test]
fn enc_generic_str2502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn enc_generic_str2503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC9", "str rcx");
}



#[test]
fn enc_generic_str2504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCB", "str rbx");
}



#[test]
fn enc_generic_str2505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCA", "str rdx");
}



#[test]
fn enc_generic_str2506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC8", "str rax");
}



#[test]
fn enc_generic_sub2507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x24", "sub eax, 36");
}



#[test]
fn enc_generic_sub2508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x44", "sub eax, 68");
}



#[test]
fn enc_generic_sub2509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x0A", "sub eax, 10");
}



#[test]
fn enc_generic_sub2510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x34", "sub ax, 52");
}



#[test]
fn enc_generic_sub2511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x4E", "sub eax, 78");
}



#[test]
fn enc_generic_sub2512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x6C", "sub BYTE [rax], 108");
}



#[test]
fn enc_generic_sub2513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x2C, 0x42, 0x4D", "sub BYTE [rax * 2 + rdx], 77");
}



#[test]
fn enc_generic_sub2514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x68, 0x10, 0x34", "sub BYTE [rax + 16], 52");
}



#[test]
fn enc_generic_sub2515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x2C, 0x42, 0x5E", "sub BYTE [rax * 2 + rdx], 94");
}



#[test]
fn enc_generic_sub2516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x6A", "sub BYTE [rax], 106");
}



#[test]
fn enc_generic_sub2517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x05", "sub al, 5");
}



#[test]
fn enc_generic_sub2518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x1B", "sub al, 27");
}



#[test]
fn enc_generic_sub2519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x0D", "sub al, 13");
}



#[test]
fn enc_generic_sub2520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x11", "sub al, 17");
}



#[test]
fn enc_generic_sub2521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x4E", "sub al, 78");
}



#[test]
fn enc_generic_sub2522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn enc_generic_sub2523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC9", "sub rcx, rcx");
}



#[test]
fn enc_generic_sub2524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x1C, 0x42", "sub rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sub2525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x0C, 0x42", "sub rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sub2526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x08", "sub rcx, QWORD [rax]");
}



#[test]
fn enc_generic_sub2527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn enc_generic_sub2528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC2", "sub dl, al");
}



#[test]
fn enc_generic_sub2529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x00", "sub al, BYTE [rax]");
}



#[test]
fn enc_generic_sub2530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x08", "sub cl, BYTE [rax]");
}



#[test]
fn enc_generic_sub2531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x10", "sub dl, BYTE [rax]");
}



#[test]
fn enc_generic_sub2532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x37", "sub rax, 55");
}



#[test]
fn enc_generic_sub2533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x5E", "sub rbx, 94");
}



#[test]
fn enc_generic_sub2534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x43", "sub rcx, 67");
}



#[test]
fn enc_generic_sub2535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x63", "sub rbx, 99");
}



#[test]
fn enc_generic_sub2536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x7C", "sub rax, 124");
}



#[test]
fn enc_generic_sub2537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x4D", "sub rbx, 77");
}



#[test]
fn enc_generic_sub2538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x0C", "sub rbx, 12");
}



#[test]
fn enc_generic_sub2539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x1A", "sub rbx, 26");
}



#[test]
fn enc_generic_sub2540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x33", "sub rdx, 51");
}



#[test]
fn enc_generic_sub2541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x05", "sub rax, 5");
}



#[test]
fn enc_generic_sub2542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x50, 0x10", "sub BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_sub2543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x10", "sub BYTE [rax], dl");
}



#[test]
fn enc_generic_sub2544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x08", "sub BYTE [rax], cl");
}



#[test]
fn enc_generic_sub2545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x00", "sub BYTE [rax], al");
}



#[test]
fn enc_generic_sub2546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE9, 0x2B", "sub cl, 43");
}



#[test]
fn enc_generic_sub2547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x35", "sub dl, 53");
}



#[test]
fn enc_generic_sub2548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE9, 0x3F", "sub cl, 63");
}



#[test]
fn enc_generic_sub2549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x4E", "sub dl, 78");
}



#[test]
fn enc_generic_sub2550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x50", "sub al, 80");
}



#[test]
fn enc_generic_sub2551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn enc_generic_sub2552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xD0", "sub al, dl");
}



#[test]
fn enc_generic_sub2553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xD1", "sub cl, dl");
}



#[test]
fn enc_generic_sub2554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC2", "sub dl, al");
}



#[test]
fn enc_generic_sub2555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC9", "sub cl, cl");
}



#[test]
fn enc_generic_swapgs2556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; swapgs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF8", "swapgs");
}



#[test]
fn enc_generic_sysenter2557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysenter
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x34", "sysenter");
}



#[test]
fn enc_generic_sysexit2558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysexit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x35", "sysexit");
}



#[test]
fn enc_generic_test2559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x5D", "test al, 93");
}



#[test]
fn enc_generic_test2560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x4B", "test al, 75");
}



#[test]
fn enc_generic_test2561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x23", "test BYTE [rax], 35");
}



#[test]
fn enc_generic_test2562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x60", "test al, 96");
}



#[test]
fn enc_generic_test2563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x1F", "test BYTE [rax], 31");
}



#[test]
fn enc_generic_test2564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x4F", "test al, 79");
}



#[test]
fn enc_generic_test2565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x79", "test al, 121");
}



#[test]
fn enc_generic_test2566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x68", "test al, 104");
}



#[test]
fn enc_generic_test2567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x10", "test al, 16");
}



#[test]
fn enc_generic_test2568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x7E", "test al, 126");
}



#[test]
fn enc_generic_test2569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x64, 0x00", "test ax, 100");
}



#[test]
fn enc_generic_test2570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x4A, 0x00, 0x00, 0x00", "test eax, 74");
}



#[test]
fn enc_generic_test2571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x1A, 0x00, 0x00, 0x00", "test eax, 26");
}



#[test]
fn enc_generic_test2572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x28, 0x00, 0x00, 0x00", "test rax, 40");
}



#[test]
fn enc_generic_test2573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x2E, 0x00, 0x00, 0x00", "test rax, 46");
}



#[test]
fn enc_generic_test2574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x75, 0x00, 0x00, 0x00", "test rcx, 117");
}



#[test]
fn enc_generic_test2575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x63, 0x00, 0x00, 0x00", "test QWORD [rax], 99");
}



#[test]
fn enc_generic_test2576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x42, 0x00, 0x00, 0x00", "test QWORD [rax], 66");
}



#[test]
fn enc_generic_test2577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x12, 0x00, 0x00, 0x00", "test QWORD [rax], 18");
}



#[test]
fn enc_generic_test2578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x04, 0x42, 0x06, 0x00, 0x00, 0x00", "test QWORD [rax * 2 + rdx], 6");
}



#[test]
fn enc_generic_test2579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xC9", "test rcx, rcx");
}



#[test]
fn enc_generic_test2580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x14, 0x42", "test QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_generic_test2581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xD1", "test rcx, rdx");
}



#[test]
fn enc_generic_test2582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xD9", "test rcx, rbx");
}



#[test]
fn enc_generic_test2583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x04, 0x42", "test QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_generic_test2584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x14, 0x42", "test dl, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_test2585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test al, BYTE [rax]");
}



#[test]
fn enc_generic_test2586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x10", "test dl, BYTE [rax]");
}



#[test]
fn enc_generic_test2587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC0", "test al, al");
}



#[test]
fn enc_generic_test2588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC8", "test al, cl");
}



#[test]
fn enc_generic_test2589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x10", "test BYTE [rax], dl");
}



#[test]
fn enc_generic_ud22590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2");
}



#[test]
fn enc_generic_ud2a2591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2a
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2a");
}



#[test]
fn enc_generic_verr2592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn enc_generic_verr2593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE2", "verr dx");
}



#[test]
fn enc_generic_verr2594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE0", "verr ax");
}



#[test]
fn enc_generic_verw2595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn enc_generic_verw2596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE8", "verw ax");
}



#[test]
fn enc_generic_verw2597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xEA", "verw dx");
}



#[test]
fn enc_generic_wbinvd2598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wbinvd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x09", "wbinvd");
}



#[test]
fn enc_generic_wrfsbase2599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD1", "wrfsbase rcx");
}



#[test]
fn enc_generic_wrfsbase2600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD2", "wrfsbase rdx");
}



#[test]
fn enc_generic_wrfsbase2601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD0", "wrfsbase rax");
}



#[test]
fn enc_generic_wrfsbase2602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD0", "wrfsbase eax");
}



#[test]
fn enc_generic_wrfsbase2603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD2", "wrfsbase edx");
}



#[test]
fn enc_generic_wrfsbase2604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD1", "wrfsbase ecx");
}



#[test]
fn enc_generic_wrgsbase2605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn enc_generic_wrgsbase2606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD9", "wrgsbase rcx");
}



#[test]
fn enc_generic_wrgsbase2607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD8", "wrgsbase rax");
}



#[test]
fn enc_generic_wrgsbase2608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD8", "wrgsbase eax");
}



#[test]
fn enc_generic_wrgsbase2609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xDA", "wrgsbase edx");
}



#[test]
fn enc_generic_wrgsbase2610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD9", "wrgsbase ecx");
}



#[test]
fn enc_generic_wrmsr2611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x30", "wrmsr");
}



#[test]
fn enc_generic_wrpkru2612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEF", "wrpkru");
}



#[test]
fn enc_generic_xadd2613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn enc_generic_xadd2614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD0", "xadd al, dl");
}



#[test]
fn enc_generic_xadd2615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC9", "xadd cl, cl");
}



#[test]
fn enc_generic_xadd2616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD1", "xadd cl, dl");
}



#[test]
fn enc_generic_xadd2617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC2", "xadd dl, al");
}



#[test]
fn enc_generic_xadd2618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC1", "xadd cl, al");
}



#[test]
fn enc_generic_xadd2619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x14, 0x42", "xadd BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_xadd2620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x10", "xadd BYTE [rax], dl");
}



#[test]
fn enc_generic_xadd2621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x50, 0x10", "xadd BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_xadd2622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x00", "xadd BYTE [rax], al");
}



#[test]
fn enc_generic_xadd2623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x0C, 0x42", "xadd BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_xchg2624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg2625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg2626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD2", "xchg dl, dl");
}



#[test]
fn enc_generic_xchg2627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn enc_generic_xchg2628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn enc_generic_xchg2629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn enc_generic_xchg2630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC2", "xchg al, dl");
}



#[test]
fn enc_generic_xchg2631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x14, 0x42", "xchg dl, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xchg2632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn enc_generic_xchg2633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x04, 0x42", "xchg al, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xchg2634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg2635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC8", "xchg cl, al");
}



#[test]
fn enc_generic_xchg2636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC9", "xchg cl, cl");
}



#[test]
fn enc_generic_xchg2637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC1", "xchg al, cl");
}



#[test]
fn enc_generic_xchg2638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD1", "xchg dl, cl");
}



#[test]
fn enc_generic_xchg2639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x14, 0x42", "xchg BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_xchg2640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg BYTE [rax], cl");
}



#[test]
fn enc_generic_xchg2641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x0C, 0x42", "xchg BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_xchg2642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg BYTE [rax], al");
}



#[test]
fn enc_generic_xchg2643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xgetbv2644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xgetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD0", "xgetbv");
}



#[test]
fn enc_generic_xlat2645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlat
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlat");
}



#[test]
fn enc_generic_xlatb2646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlatb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlatb");
}



#[test]
fn enc_generic_xor2647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x0C", "xor al, 12");
}



#[test]
fn enc_generic_xor2648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x78", "xor al, 120");
}



#[test]
fn enc_generic_xor2649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x52", "xor dl, 82");
}



#[test]
fn enc_generic_xor2650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x5B", "xor dl, 91");
}



#[test]
fn enc_generic_xor2651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x10", "xor al, 16");
}



#[test]
fn enc_generic_xor2652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x18", "xor rbx, QWORD [rax]");
}



#[test]
fn enc_generic_xor2653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC9", "xor rcx, rcx");
}



#[test]
fn enc_generic_xor2654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x14, 0x42", "xor rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xor2655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x10", "xor rdx, QWORD [rax]");
}



#[test]
fn enc_generic_xor2656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xCA", "xor rdx, rcx");
}



#[test]
fn enc_generic_xor2657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC1", "xor cl, al");
}



#[test]
fn enc_generic_xor2658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC2", "xor dl, al");
}



#[test]
fn enc_generic_xor2659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD2", "xor dl, dl");
}



#[test]
fn enc_generic_xor2660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn enc_generic_xor2661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x58", "xor rax, 88");
}



#[test]
fn enc_generic_xor2662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x55", "xor rcx, 85");
}



#[test]
fn enc_generic_xor2663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x32", "xor rbx, 50");
}



#[test]
fn enc_generic_xor2664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x2F", "xor rbx, 47");
}



#[test]
fn enc_generic_xor2665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x13", "xor rdx, 19");
}



#[test]
fn enc_generic_xor2666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax * 2 + rdx], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x34, 0x42, 0x09", "xor BYTE [rax * 2 + rdx], 9");
}



#[test]
fn enc_generic_xor2667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x70, 0x10, 0x13", "xor BYTE [rax + 16], 19");
}



#[test]
fn enc_generic_xor2668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax * 2 + rdx], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x34, 0x42, 0x2A", "xor BYTE [rax * 2 + rdx], 42");
}



#[test]
fn enc_generic_xor2669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x70, 0x10, 0x66", "xor BYTE [rax + 16], 102");
}



#[test]
fn enc_generic_xor2670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x0E", "xor BYTE [rax], 14");
}



#[test]
fn enc_generic_xor2671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x04, 0x42", "xor BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_xor2672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x48, 0x10", "xor BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_xor2673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x08", "xor BYTE [rax], cl");
}



#[test]
fn enc_generic_xor2674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn enc_generic_xor2675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn enc_generic_xor2676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x34", "xor rax, 52");
}



#[test]
fn enc_generic_xor2677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x25", "xor rax, 37");
}



#[test]
fn enc_generic_xor2678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x61", "xor rax, 97");
}



#[test]
fn enc_generic_xor2679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x18", "xor rax, 24");
}



#[test]
fn enc_generic_xor2680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x0B", "xor rax, 11");
}



#[test]
fn enc_generic_xor2681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC2", "xor dl, al");
}



#[test]
fn enc_generic_xor2682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC1", "xor cl, al");
}



#[test]
fn enc_generic_xor2683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn enc_generic_xor2684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x08", "xor cl, BYTE [rax]");
}



#[test]
fn enc_generic_xor2685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn enc_generic_xor2686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x5E", "xor rax, 94");
}



#[test]
fn enc_generic_xor2687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x22", "xor rax, 34");
}



#[test]
fn enc_generic_xor2688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x6D", "xor rdx, 109");
}



#[test]
fn enc_generic_xor2689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x4D", "xor rax, 77");
}



#[test]
fn enc_generic_xor2690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x35", "xor rdx, 53");
}



#[test]
fn enc_generic_xor2691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x2D", "xor al, 45");
}



#[test]
fn enc_generic_xor2692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x65", "xor al, 101");
}



#[test]
fn enc_generic_xor2693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x74", "xor al, 116");
}



#[test]
fn enc_generic_xor2694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x20", "xor al, 32");
}



#[test]
fn enc_generic_xor2695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x6F", "xor al, 111");
}



#[test]
fn enc_generic_xrstor2696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn enc_generic_xrstor642697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn enc_generic_xrstors642698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn enc_generic_xsave2699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn enc_generic_xsave642700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn enc_generic_xsavec642701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn enc_generic_xsaveopt642702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn enc_generic_xsaves642703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn enc_generic_xsetbv2704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD1", "xsetbv");
}


