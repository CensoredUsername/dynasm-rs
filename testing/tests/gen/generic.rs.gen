
#[test]
fn enc_generic_adc1823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC0", "adc al, al");
}



#[test]
fn enc_generic_adc1824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC1", "adc cl, al");
}



#[test]
fn enc_generic_adc1825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x10", "adc dl, BYTE [rax]");
}



#[test]
fn enc_generic_adc1826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x17", "adc rax, 23");
}



#[test]
fn enc_generic_adc1827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x5A", "adc rbx, 90");
}



#[test]
fn enc_generic_adc1828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x42", "adc rax, 66");
}



#[test]
fn enc_generic_adc1829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x4B", "adc rbx, 75");
}



#[test]
fn enc_generic_adc1830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x71", "adc rbx, 113");
}



#[test]
fn enc_generic_adc1831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x50, 0x10, 0x5B", "adc BYTE [rax + 16], 91");
}



#[test]
fn enc_generic_adc1832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x14, 0x42, 0x7A", "adc BYTE [rax * 2 + rdx], 122");
}



#[test]
fn enc_generic_adc1833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x67", "adc BYTE [rax], 103");
}



#[test]
fn enc_generic_adc1834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x50, 0x10, 0x47", "adc BYTE [rax + 16], 71");
}



#[test]
fn enc_generic_adc1835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x1E", "adc BYTE [rax], 30");
}



#[test]
fn enc_generic_lock1836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x10, 0x44", "lock adc BYTE [rax], 68");
}



#[test]
fn enc_generic_lock1837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax + 16], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x50, 0x10, 0x5A", "lock adc BYTE [rax + 16], 90");
}



#[test]
fn enc_generic_lock1838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax + 16], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x50, 0x10, 0x5B", "lock adc BYTE [rax + 16], 91");
}



#[test]
fn enc_generic_lock1839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax * 2 + rdx], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x14, 0x42, 0x10", "lock adc BYTE [rax * 2 + rdx], 16");
}



#[test]
fn enc_generic_lock1840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax * 2 + rdx], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x14, 0x42, 0x6F", "lock adc BYTE [rax * 2 + rdx], 111");
}



#[test]
fn enc_generic_adc1841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x75", "adc cl, 117");
}



#[test]
fn enc_generic_adc1842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x48", "adc al, 72");
}



#[test]
fn enc_generic_adc1843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x07", "adc cl, 7");
}



#[test]
fn enc_generic_adc1844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x5F", "adc cl, 95");
}



#[test]
fn enc_generic_adc1845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x31", "adc al, 49");
}



#[test]
fn enc_generic_adc1846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x09", "adc rax, 9");
}



#[test]
fn enc_generic_adc1847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x46", "adc rax, 70");
}



#[test]
fn enc_generic_adc1848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x70", "adc eax, 112");
}



#[test]
fn enc_generic_adc1849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x41", "adc rax, 65");
}



#[test]
fn enc_generic_adc1850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc ax, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD0, 0x15", "adc ax, 21");
}



#[test]
fn enc_generic_adc1851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD1", "adc cl, dl");
}



#[test]
fn enc_generic_adc1852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC9", "adc cl, cl");
}



#[test]
fn enc_generic_adc1853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC0", "adc al, al");
}



#[test]
fn enc_generic_adc1854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD2", "adc dl, dl");
}



#[test]
fn enc_generic_adc1855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x40, 0x10", "adc BYTE [rax + 16], al");
}



#[test]
fn enc_generic_adc1856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x00", "adc BYTE [rax], al");
}



#[test]
fn enc_generic_adc1857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x08", "adc BYTE [rax], cl");
}



#[test]
fn enc_generic_adc1858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x14, 0x42", "adc BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_lock1859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x10, 0x04, 0x42", "lock adc BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_lock1860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x10, 0x0C, 0x42", "lock adc BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_lock1861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x10, 0x48, 0x10", "lock adc BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_lock1862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x10, 0x14, 0x42", "lock adc BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_lock1863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock adc BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x10, 0x08", "lock adc BYTE [rax], cl");
}



#[test]
fn enc_generic_adc1864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn enc_generic_adc1865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xCA", "adc rdx, rcx");
}



#[test]
fn enc_generic_adc1866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x18", "adc rbx, QWORD [rax]");
}



#[test]
fn enc_generic_adc1867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x1C, 0x42", "adc rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_adc1868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC8", "adc rax, rcx");
}



#[test]
fn enc_generic_adc1869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x5F", "adc al, 95");
}



#[test]
fn enc_generic_adc1870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x1D", "adc al, 29");
}



#[test]
fn enc_generic_adc1871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x14", "adc al, 20");
}



#[test]
fn enc_generic_adc1872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x27", "adc al, 39");
}



#[test]
fn enc_generic_adc1873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x47", "adc al, 71");
}



#[test]
fn enc_generic_adc1874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x77", "adc rbx, 119");
}



#[test]
fn enc_generic_adc1875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x4A", "adc rcx, 74");
}



#[test]
fn enc_generic_adc1876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x05", "adc rcx, 5");
}



#[test]
fn enc_generic_adc1877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x43", "adc rcx, 67");
}



#[test]
fn enc_generic_adc1878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x6A", "adc rcx, 106");
}



#[test]
fn enc_generic_adcx1879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adcx rcx, [rax]");
}



#[test]
fn enc_generic_adcx1880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x10", "adcx rdx, [rax]");
}



#[test]
fn enc_generic_adcx1881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xD0", "adcx rdx, rax");
}



#[test]
fn enc_generic_add1882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x25", "add rdx, 37");
}



#[test]
fn enc_generic_add1883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x56", "add rcx, 86");
}



#[test]
fn enc_generic_add1884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x0A", "add rbx, 10");
}



#[test]
fn enc_generic_add1885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x3F", "add rbx, 63");
}



#[test]
fn enc_generic_add1886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x73", "add rbx, 115");
}



#[test]
fn enc_generic_add1887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn enc_generic_add1888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD1", "add cl, dl");
}



#[test]
fn enc_generic_add1889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD0", "add al, dl");
}



#[test]
fn enc_generic_add1890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn enc_generic_add1891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x49", "add al, 73");
}



#[test]
fn enc_generic_add1892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x34", "add al, 52");
}



#[test]
fn enc_generic_add1893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x24", "add al, 36");
}



#[test]
fn enc_generic_add1894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x4F", "add al, 79");
}



#[test]
fn enc_generic_add1895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x56", "add al, 86");
}



#[test]
fn enc_generic_add1896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x5A", "add BYTE [rax], 90");
}



#[test]
fn enc_generic_add1897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x69", "add BYTE [rax], 105");
}



#[test]
fn enc_generic_add1898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x1B", "add BYTE [rax], 27");
}



#[test]
fn enc_generic_add1899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x1A", "add BYTE [rax], 26");
}



#[test]
fn enc_generic_add1900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x6B", "add BYTE [rax * 2 + rdx], 107");
}



#[test]
fn enc_generic_lock1901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax + 16], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x40, 0x10, 0x33", "lock add BYTE [rax + 16], 51");
}



#[test]
fn enc_generic_lock1902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax + 16], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x40, 0x10, 0x0A", "lock add BYTE [rax + 16], 10");
}



#[test]
fn enc_generic_lock1903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax * 2 + rdx], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x04, 0x42, 0x7D", "lock add BYTE [rax * 2 + rdx], 125");
}



#[test]
fn enc_generic_lock1904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax * 2 + rdx], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x04, 0x42, 0x34", "lock add BYTE [rax * 2 + rdx], 52");
}



#[test]
fn enc_generic_lock1905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax + 16], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x40, 0x10, 0x17", "lock add BYTE [rax + 16], 23");
}



#[test]
fn enc_generic_add1906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x46", "add al, 70");
}



#[test]
fn enc_generic_add1907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x03", "add cl, 3");
}



#[test]
fn enc_generic_add1908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x7A", "add dl, 122");
}



#[test]
fn enc_generic_add1909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x3C", "add cl, 60");
}



#[test]
fn enc_generic_add1910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x11", "add dl, 17");
}



#[test]
fn enc_generic_add1911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x67", "add rax, 103");
}



#[test]
fn enc_generic_add1912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x0F", "add rbx, 15");
}



#[test]
fn enc_generic_add1913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x70", "add rbx, 112");
}



#[test]
fn enc_generic_add1914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x0C", "add rdx, 12");
}



#[test]
fn enc_generic_add1915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC2, 0x72", "add rdx, 114");
}



#[test]
fn enc_generic_add1916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x08", "add cl, BYTE [rax]");
}



#[test]
fn enc_generic_add1917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x00", "add al, BYTE [rax]");
}



#[test]
fn enc_generic_add1918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC2", "add dl, al");
}



#[test]
fn enc_generic_add1919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC0", "add al, al");
}



#[test]
fn enc_generic_add1920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x2F", "add rax, 47");
}



#[test]
fn enc_generic_add1921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x14", "add eax, 20");
}



#[test]
fn enc_generic_add1922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x1F", "add eax, 31");
}



#[test]
fn enc_generic_add1923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x20", "add rax, 32");
}



#[test]
fn enc_generic_add1924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x23", "add eax, 35");
}



#[test]
fn enc_generic_add1925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x08", "add rcx, QWORD [rax]");
}



#[test]
fn enc_generic_add1926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC9", "add rcx, rcx");
}



#[test]
fn enc_generic_add1927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x10", "add rdx, QWORD [rax]");
}



#[test]
fn enc_generic_add1928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC8", "add rax, rcx");
}



#[test]
fn enc_generic_add1929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x0C, 0x42", "add rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_add1930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x08", "add BYTE [rax], cl");
}



#[test]
fn enc_generic_add1931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x04, 0x42", "add BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_add1932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x0C, 0x42", "add BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_add1933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x14, 0x42", "add BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_lock1934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x00, 0x40, 0x10", "lock add BYTE [rax + 16], al");
}



#[test]
fn enc_generic_lock1935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x00, 0x14, 0x42", "lock add BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_lock1936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x00, 0x04, 0x42", "lock add BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_lock1937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock add BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x00, 0x10", "lock add BYTE [rax], dl");
}



#[test]
fn enc_generic_adox1938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adox rax, [rax]");
}



#[test]
fn enc_generic_adox1939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adox rcx, [rax]");
}



#[test]
fn enc_generic_adox1940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xC8", "adox rcx, rax");
}



#[test]
fn enc_generic_and1941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x7B", "and BYTE [rax], 123");
}



#[test]
fn enc_generic_and1942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x05", "and BYTE [rax], 5");
}



#[test]
fn enc_generic_and1943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x24, 0x42, 0x5D", "and BYTE [rax * 2 + rdx], 93");
}



#[test]
fn enc_generic_and1944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax + 16], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x60, 0x10, 0x22", "and BYTE [rax + 16], 34");
}



#[test]
fn enc_generic_and1945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x24, 0x42, 0x4C", "and BYTE [rax * 2 + rdx], 76");
}



#[test]
fn enc_generic_lock1946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax * 2 + rdx], 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x24, 0x42, 0x2F", "lock and BYTE [rax * 2 + rdx], 47");
}



#[test]
fn enc_generic_lock1947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax * 2 + rdx], 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x24, 0x42, 0x71", "lock and BYTE [rax * 2 + rdx], 113");
}



#[test]
fn enc_generic_lock1948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x20, 0x4F", "lock and BYTE [rax], 79");
}



#[test]
fn enc_generic_lock1949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax * 2 + rdx], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x24, 0x42, 0x5F", "lock and BYTE [rax * 2 + rdx], 95");
}



#[test]
fn enc_generic_lock1950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x20, 0x09", "lock and BYTE [rax], 9");
}



#[test]
fn enc_generic_and1951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn enc_generic_and1952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x40", "and rdx, 64");
}



#[test]
fn enc_generic_and1953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x73", "and rbx, 115");
}



#[test]
fn enc_generic_and1954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x46", "and rcx, 70");
}



#[test]
fn enc_generic_and1955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x52", "and rax, 82");
}



#[test]
fn enc_generic_and1956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x64", "and rbx, 100");
}



#[test]
fn enc_generic_and1957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD1", "and cl, dl");
}



#[test]
fn enc_generic_and1958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC8", "and al, cl");
}



#[test]
fn enc_generic_and1959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC9", "and cl, cl");
}



#[test]
fn enc_generic_and1960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn enc_generic_and1961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC2", "and dl, al");
}



#[test]
fn enc_generic_and1962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x10", "and dl, BYTE [rax]");
}



#[test]
fn enc_generic_and1963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn enc_generic_and1964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC9", "and rcx, rcx");
}



#[test]
fn enc_generic_and1965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x14, 0x42", "and rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_and1966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x10", "and rdx, QWORD [rax]");
}



#[test]
fn enc_generic_and1967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x08", "and rcx, QWORD [rax]");
}



#[test]
fn enc_generic_and1968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x7A", "and rax, 122");
}



#[test]
fn enc_generic_and1969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x1D", "and rbx, 29");
}



#[test]
fn enc_generic_and1970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x6D", "and rcx, 109");
}



#[test]
fn enc_generic_and1971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x4B", "and rbx, 75");
}



#[test]
fn enc_generic_and1972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x5B", "and rcx, 91");
}



#[test]
fn enc_generic_and1973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x76", "and al, 118");
}



#[test]
fn enc_generic_and1974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x5E", "and al, 94");
}



#[test]
fn enc_generic_and1975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x17", "and al, 23");
}



#[test]
fn enc_generic_and1976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x63", "and al, 99");
}



#[test]
fn enc_generic_and1977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x2B", "and al, 43");
}



#[test]
fn enc_generic_and1978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x0C", "and al, 12");
}



#[test]
fn enc_generic_and1979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE1, 0x58", "and cl, 88");
}



#[test]
fn enc_generic_and1980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x04", "and al, 4");
}



#[test]
fn enc_generic_and1981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x4A", "and al, 74");
}



#[test]
fn enc_generic_and1982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x20", "and dl, 32");
}



#[test]
fn enc_generic_and1983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x08", "and BYTE [rax], cl");
}



#[test]
fn enc_generic_and1984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x40, 0x10", "and BYTE [rax + 16], al");
}



#[test]
fn enc_generic_and1985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x0C, 0x42", "and BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_and1986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x50, 0x10", "and BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_lock1987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x20, 0x00", "lock and BYTE [rax], al");
}



#[test]
fn enc_generic_lock1988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x20, 0x10", "lock and BYTE [rax], dl");
}



#[test]
fn enc_generic_lock1989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x20, 0x0C, 0x42", "lock and BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_lock1990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock and BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x20, 0x04, 0x42", "lock and BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_and1991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and ax, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE0, 0x61", "and ax, 97");
}



#[test]
fn enc_generic_and1992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x35", "and eax, 53");
}



#[test]
fn enc_generic_and1993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x3F", "and rax, 63");
}



#[test]
fn enc_generic_and1994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x17", "and eax, 23");
}



#[test]
fn enc_generic_and1995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and ax, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE0, 0x3D", "and ax, 61");
}



#[test]
fn enc_generic_bsf1996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x1C, 0x42", "bsf rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsf1997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x14, 0x42", "bsf rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsf1998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x04, 0x42", "bsf rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsr1999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x0C, 0x42", "bsr rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsr2000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xC1", "bsr rax, rcx");
}



#[test]
fn enc_generic_bsr2001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xC9", "bsr rcx, rcx");
}



#[test]
fn enc_generic_bsr2002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x04, 0x42", "bsr rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bswap2003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCB", "bswap rbx");
}



#[test]
fn enc_generic_bswap2004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC9", "bswap rcx");
}



#[test]
fn enc_generic_bswap2005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xCA", "bswap rdx");
}



#[test]
fn enc_generic_bswap2006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn enc_generic_bt2007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x52", "bt rcx, 82");
}



#[test]
fn enc_generic_bt2008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE1, 0x1A", "bt rcx, 26");
}



#[test]
fn enc_generic_bt2009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x24, 0x42, 0x7E", "bt QWORD [rax * 2 + rdx], 126");
}



#[test]
fn enc_generic_bt2010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x24, 0x42, 0x4E", "bt QWORD [rax * 2 + rdx], 78");
}



#[test]
fn enc_generic_bt2011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x42", "bt QWORD [rax], 66");
}



#[test]
fn enc_generic_bt2012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x08", "bt QWORD [rax], rcx");
}



#[test]
fn enc_generic_bt2013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x04, 0x42", "bt QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_generic_bt2014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xD9", "bt rcx, rbx");
}



#[test]
fn enc_generic_bt2015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xC9", "bt rcx, rcx");
}



#[test]
fn enc_generic_btc2016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF8, 0x1A", "btc rax, 26");
}



#[test]
fn enc_generic_btc2017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x68", "btc rbx, 104");
}



#[test]
fn enc_generic_btc2018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x73", "btc rbx, 115");
}



#[test]
fn enc_generic_btc2019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x3F", "btc rdx, 63");
}



#[test]
fn enc_generic_btc2020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x4C", "btc rdx, 76");
}



#[test]
fn enc_generic_btc2021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn enc_generic_btr2022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x71", "btr rax, 113");
}



#[test]
fn enc_generic_btr2023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rdx, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF2, 0x42", "btr rdx, 66");
}



#[test]
fn enc_generic_btr2024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rdx, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF2, 0x12", "btr rdx, 18");
}



#[test]
fn enc_generic_btr2025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x35", "btr rax, 53");
}



#[test]
fn enc_generic_btr2026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rbx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF3, 0x0F", "btr rbx, 15");
}



#[test]
fn enc_generic_btr2027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn enc_generic_bts2028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn enc_generic_bts2029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x18", "bts rdx, 24");
}



#[test]
fn enc_generic_bts2030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x04", "bts rcx, 4");
}



#[test]
fn enc_generic_bts2031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rbx, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEB, 0x79", "bts rbx, 121");
}



#[test]
fn enc_generic_bts2032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE8, 0x4D", "bts rax, 77");
}



#[test]
fn enc_generic_bts2033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rbx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEB, 0x6E", "bts rbx, 110");
}



#[test]
fn enc_generic_cbw2034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cbw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x98", "cbw");
}



#[test]
fn enc_generic_cdq2035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x99", "cdq");
}



#[test]
fn enc_generic_cdqe2036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdqe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x98", "cdqe");
}



#[test]
fn enc_generic_clac2037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCA", "clac");
}



#[test]
fn enc_generic_clc2038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF8", "clc");
}



#[test]
fn enc_generic_cld2039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFC", "cld");
}



#[test]
fn enc_generic_cli2040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cli
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFA", "cli");
}



#[test]
fn enc_generic_clts2041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clts
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x06", "clts");
}



#[test]
fn enc_generic_cmc2042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF5", "cmc");
}



#[test]
fn enc_generic_cpuid2043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpuid
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA2", "cpuid");
}



#[test]
fn enc_generic_cqo2044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cqo
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x99", "cqo");
}



#[test]
fn enc_generic_cwd2045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x99", "cwd");
}



#[test]
fn enc_generic_cwde2046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwde
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x98", "cwde");
}



#[test]
fn enc_generic_dec2047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCB", "dec rbx");
}



#[test]
fn enc_generic_dec2048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC9", "dec rcx");
}



#[test]
fn enc_generic_dec2049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC8", "dec rax");
}



#[test]
fn enc_generic_dec2050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xCA", "dec dl");
}



#[test]
fn enc_generic_dec2051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC9", "dec cl");
}



#[test]
fn enc_generic_dec2052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn enc_generic_dec2053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x08", "dec BYTE [rax]");
}



#[test]
fn enc_generic_dec2054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x48, 0x10", "dec BYTE [rax + 16]");
}



#[test]
fn enc_generic_dec2055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x0C, 0x42", "dec BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lock2056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock dec BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xFE, 0x48, 0x10", "lock dec BYTE [rax + 16]");
}



#[test]
fn enc_generic_lock2057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock dec BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xFE, 0x08", "lock dec BYTE [rax]");
}



#[test]
fn enc_generic_lock2058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock dec BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xFE, 0x0C, 0x42", "lock dec BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_div2059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn enc_generic_div2060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF1", "div rcx");
}



#[test]
fn enc_generic_div2061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x34, 0x42", "div QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_div2062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn enc_generic_div2063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn enc_generic_enter2064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 14059, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xEB, 0x36, 0x15", "enter 14059, 21");
}



#[test]
fn enc_generic_enter2065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 9168, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xD0, 0x23, 0x3A", "enter 9168, 58");
}



#[test]
fn enc_generic_enter2066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 3796, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xD4, 0x0E, 0x65", "enter 3796, 101");
}



#[test]
fn enc_generic_enter2067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 13722, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x9A, 0x35, 0x72", "enter 13722, 114");
}



#[test]
fn enc_generic_enter2068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 11673, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x99, 0x2D, 0x5E", "enter 11673, 94");
}



#[test]
fn enc_generic_fwait2069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B", "fwait");
}



#[test]
fn enc_generic_getsec2070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; getsec
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37", "getsec");
}



#[test]
fn enc_generic_hlt2071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hlt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF4", "hlt");
}



#[test]
fn enc_generic_icebp2072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; icebp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "icebp");
}



#[test]
fn enc_generic_idiv2073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn enc_generic_idiv2074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF8", "idiv al");
}



#[test]
fn enc_generic_idiv2075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn enc_generic_idiv2076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x38", "idiv QWORD [rax]");
}



#[test]
fn enc_generic_idiv2077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x3C, 0x42", "idiv QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_inc2078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn enc_generic_inc2079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x40, 0x10", "inc BYTE [rax + 16]");
}



#[test]
fn enc_generic_lock2080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xFE, 0x00", "lock inc BYTE [rax]");
}



#[test]
fn enc_generic_lock2081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock inc BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xFE, 0x04, 0x42", "lock inc BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lock2082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock inc BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xFE, 0x40, 0x10", "lock inc BYTE [rax + 16]");
}



#[test]
fn enc_generic_inc2083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC3", "inc rbx");
}



#[test]
fn enc_generic_inc2084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC1", "inc rcx");
}



#[test]
fn enc_generic_inc2085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC0", "inc rax");
}



#[test]
fn enc_generic_inc2086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn enc_generic_insb2087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6C", "insb");
}



#[test]
fn enc_generic_rep2088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep insb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x6C", "rep insb");
}



#[test]
fn enc_generic_insd2089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6D", "insd");
}



#[test]
fn enc_generic_rep2090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep insd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x6D", "rep insd");
}



#[test]
fn enc_generic_insw2091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6D", "insw");
}



#[test]
fn enc_generic_rep2092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep insw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x66, 0x6D", "rep insw");
}



#[test]
fn enc_generic_int2093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x76", "int 118");
}



#[test]
fn enc_generic_int2094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x65", "int 101");
}



#[test]
fn enc_generic_int2095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x1B", "int 27");
}



#[test]
fn enc_generic_int2096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x72", "int 114");
}



#[test]
fn enc_generic_int2097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x3E", "int 62");
}



#[test]
fn enc_generic_int012098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int01
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int01");
}



#[test]
fn enc_generic_int032099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int03
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int03");
}



#[test]
fn enc_generic_int12100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int1");
}



#[test]
fn enc_generic_int32101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int3");
}



#[test]
fn enc_generic_invd2102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x08", "invd");
}



#[test]
fn enc_generic_invlpg2103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn enc_generic_iret2104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iret");
}



#[test]
fn enc_generic_iretd2105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iretd");
}



#[test]
fn enc_generic_iretq2106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xCF", "iretq");
}



#[test]
fn enc_generic_iretw2107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xCF", "iretw");
}



#[test]
fn enc_generic_lahf2108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9F", "lahf");
}



#[test]
fn enc_generic_lar2109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x00", "lar rax, WORD [rax]");
}



#[test]
fn enc_generic_lar2110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rcx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x48, 0x10", "lar rcx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lar2111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x1C, 0x42", "lar rbx, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lar2112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x40, 0x10", "lar rax, WORD [rax + 16]");
}



#[test]
fn enc_generic_lar2113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rdx, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x14, 0x42", "lar rdx, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lar2114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn enc_generic_lea2115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x00", "lea rax, [rax]");
}



#[test]
fn enc_generic_lea2116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x10", "lea rdx, [rax]");
}



#[test]
fn enc_generic_leave2117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; leave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC9", "leave");
}



#[test]
fn enc_generic_lfs2118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn enc_generic_lfs2119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x10", "lfs rdx, [rax]");
}



#[test]
fn enc_generic_lgdt2120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn enc_generic_lgs2121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x18", "lgs rbx, [rax]");
}



#[test]
fn enc_generic_lgs2122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x08", "lgs rcx, [rax]");
}



#[test]
fn enc_generic_lgs2123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x00", "lgs rax, [rax]");
}



#[test]
fn enc_generic_lidt2124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn enc_generic_lldt2125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn enc_generic_lldt2126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD1", "lldt cx");
}



#[test]
fn enc_generic_lldt2127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD0", "lldt ax");
}



#[test]
fn enc_generic_lmsw2128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn enc_generic_lmsw2129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF2", "lmsw dx");
}



#[test]
fn enc_generic_lmsw2130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF0", "lmsw ax");
}



#[test]
fn enc_generic_lodsb2131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAC", "lodsb");
}



#[test]
fn enc_generic_rep2132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep lodsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xAC", "rep lodsb");
}



#[test]
fn enc_generic_lodsd2133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAD", "lodsd");
}



#[test]
fn enc_generic_rep2134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep lodsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xAD", "rep lodsd");
}



#[test]
fn enc_generic_lodsq2135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAD", "lodsq");
}



#[test]
fn enc_generic_rep2136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep lodsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0xAD", "rep lodsq");
}



#[test]
fn enc_generic_lodsw2137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAD", "lodsw");
}



#[test]
fn enc_generic_rep2138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep lodsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x66, 0xAD", "rep lodsw");
}



#[test]
fn enc_generic_lsl2139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x48, 0x10", "lsl rcx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lsl2140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x08", "lsl rcx, WORD [rax]");
}



#[test]
fn enc_generic_lsl2141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x00", "lsl rax, WORD [rax]");
}



#[test]
fn enc_generic_lsl2142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x0C, 0x42", "lsl rcx, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lsl2143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rbx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x58, 0x10", "lsl rbx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lsl2144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn enc_generic_lss2145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x10", "lss rdx, [rax]");
}



#[test]
fn enc_generic_lss2146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x00", "lss rax, [rax]");
}



#[test]
fn enc_generic_lss2147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn enc_generic_lss2148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x08", "lss rcx, [rax]");
}



#[test]
fn enc_generic_ltr2149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn enc_generic_ltr2150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD9", "ltr cx");
}



#[test]
fn enc_generic_ltr2151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD8", "ltr ax");
}



#[test]
fn enc_generic_monitor2152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor");
}



#[test]
fn enc_generic_monitor2153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn enc_generic_movnti2154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x04, 0x42", "movnti QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_generic_movnti2155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x0C, 0x42", "movnti QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_generic_movnti2156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x00", "movnti QWORD [rax], rax");
}



#[test]
fn enc_generic_movnti2157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x14, 0x42", "movnti QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_generic_movnti2158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x08", "movnti QWORD [rax], rcx");
}



#[test]
fn enc_generic_movnti2159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax * 2 + rdx], ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x0C, 0x42", "movnti DWORD [rax * 2 + rdx], ecx");
}



#[test]
fn enc_generic_movnti2160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax], ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x08", "movnti DWORD [rax], ecx");
}



#[test]
fn enc_generic_movnti2161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax], edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x10", "movnti DWORD [rax], edx");
}



#[test]
fn enc_generic_movnti2162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax * 2 + rdx], edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x14, 0x42", "movnti DWORD [rax * 2 + rdx], edx");
}



#[test]
fn enc_generic_movsb2163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA4", "movsb");
}



#[test]
fn enc_generic_rep2164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep movsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xA4", "rep movsb");
}



#[test]
fn enc_generic_movsd2165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA5", "movsd");
}



#[test]
fn enc_generic_rep2166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep movsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xA5", "rep movsd");
}



#[test]
fn enc_generic_movsq2167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA5", "movsq");
}



#[test]
fn enc_generic_rep2168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep movsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0xA5", "rep movsq");
}



#[test]
fn enc_generic_movsw2169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA5", "movsw");
}



#[test]
fn enc_generic_rep2170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep movsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x66, 0xA5", "rep movsw");
}



#[test]
fn enc_generic_movsx2171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx cx, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x0C, 0x42", "movsx cx, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_movsx2172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x04, 0x42", "movsx ax, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_movsx2173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x10", "movsx dx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x40, 0x10", "movsx ax, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movsx2175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x18", "movsx rbx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0xD0", "movsx rdx, al");
}



#[test]
fn enc_generic_movsx2178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x10", "movsx rdx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx2179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x00", "movsx rax, WORD [rax]");
}



#[test]
fn enc_generic_movsx2180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD0", "movsx rdx, ax");
}



#[test]
fn enc_generic_movsx2181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD8", "movsx rbx, ax");
}



#[test]
fn enc_generic_movsx2182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xD0", "movsx rdx, eax");
}



#[test]
fn enc_generic_movsx2183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC8", "movsx rcx, eax");
}



#[test]
fn enc_generic_movsx2184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsx rcx, DWORD [rax]");
}



#[test]
fn enc_generic_movsx2185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsx rdx, DWORD [rax]");
}



#[test]
fn enc_generic_movsx2186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsx rax, DWORD [rax]");
}



#[test]
fn enc_generic_movsxd2187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rcx, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC8", "movsxd rcx, eax");
}



#[test]
fn enc_generic_movsxd2188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rax, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC0", "movsxd rax, eax");
}



#[test]
fn enc_generic_movzx2189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x08", "movzx rcx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx2190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x18", "movzx rbx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx2191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC8", "movzx rcx, al");
}



#[test]
fn enc_generic_movzx2192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xD8", "movzx rbx, al");
}



#[test]
fn enc_generic_movzx2193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x50, 0x10", "movzx dx, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movzx2194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn enc_generic_movzx2195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x40, 0x10", "movzx ax, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movzx2196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx dx, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x14, 0x42", "movzx dx, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_movzx2197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC8", "movzx rcx, ax");
}



#[test]
fn enc_generic_movzx2198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xD8", "movzx rbx, ax");
}



#[test]
fn enc_generic_movzx2199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0x00", "movzx rax, WORD [rax]");
}



#[test]
fn enc_generic_movzx2200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0x10", "movzx rdx, WORD [rax]");
}



#[test]
fn enc_generic_movzx2201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC0", "movzx rax, ax");
}



#[test]
fn enc_generic_mul2202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn enc_generic_mul2203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x24, 0x42", "mul QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_mul2204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn enc_generic_mul2205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn enc_generic_mwait2206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn enc_generic_mwait2207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait");
}



#[test]
fn enc_generic_neg2208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD8", "neg rax");
}



#[test]
fn enc_generic_neg2209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn enc_generic_neg2210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDB", "neg rbx");
}



#[test]
fn enc_generic_neg2211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD9", "neg cl");
}



#[test]
fn enc_generic_neg2212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xDA", "neg dl");
}



#[test]
fn enc_generic_neg2213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn enc_generic_neg2214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x1C, 0x42", "neg BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_neg2215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x58, 0x10", "neg BYTE [rax + 16]");
}



#[test]
fn enc_generic_neg2216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn enc_generic_lock2217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock neg BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xF6, 0x1C, 0x42", "lock neg BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lock2218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock neg BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xF6, 0x58, 0x10", "lock neg BYTE [rax + 16]");
}



#[test]
fn enc_generic_nop2219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0xC1", "nop rcx");
}



#[test]
fn enc_generic_nop2220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x04, 0x42", "nop QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_nop2221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn enc_generic_nop2222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x90", "nop");
}



#[test]
fn enc_generic_not2223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD1", "not rcx");
}



#[test]
fn enc_generic_not2224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD3", "not rbx");
}



#[test]
fn enc_generic_not2225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD0", "not rax");
}



#[test]
fn enc_generic_not2226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD2", "not rdx");
}



#[test]
fn enc_generic_not2227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn enc_generic_not2228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD1", "not cl");
}



#[test]
fn enc_generic_not2229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x50, 0x10", "not BYTE [rax + 16]");
}



#[test]
fn enc_generic_not2230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x14, 0x42", "not BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_not2231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x10", "not BYTE [rax]");
}



#[test]
fn enc_generic_lock2232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock not BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xF6, 0x50, 0x10", "lock not BYTE [rax + 16]");
}



#[test]
fn enc_generic_lock2233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock not BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xF6, 0x14, 0x42", "lock not BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lock2234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock not BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0xF6, 0x10", "lock not BYTE [rax]");
}



#[test]
fn enc_generic_or2235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x14, 0x42", "or rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or2236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x1C, 0x42", "or rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or2237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x04, 0x42", "or rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or2238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x00", "or rax, QWORD [rax]");
}



#[test]
fn enc_generic_or2239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x10", "or rdx, QWORD [rax]");
}



#[test]
fn enc_generic_or2240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x29", "or rcx, 41");
}



#[test]
fn enc_generic_or2241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x30", "or rcx, 48");
}



#[test]
fn enc_generic_or2242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x47", "or rcx, 71");
}



#[test]
fn enc_generic_or2243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x06", "or rax, 6");
}



#[test]
fn enc_generic_or2244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x63", "or rdx, 99");
}



#[test]
fn enc_generic_or2245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x0A", "or BYTE [rax], 10");
}



#[test]
fn enc_generic_or2246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x0C, 0x42, 0x04", "or BYTE [rax * 2 + rdx], 4");
}



#[test]
fn enc_generic_or2247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x48, 0x10, 0x33", "or BYTE [rax + 16], 51");
}



#[test]
fn enc_generic_or2248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x39", "or BYTE [rax], 57");
}



#[test]
fn enc_generic_or2249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x48, 0x10, 0x2C", "or BYTE [rax + 16], 44");
}



#[test]
fn enc_generic_lock2250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax * 2 + rdx], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x0C, 0x42, 0x1D", "lock or BYTE [rax * 2 + rdx], 29");
}



#[test]
fn enc_generic_lock2251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax * 2 + rdx], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x0C, 0x42, 0x46", "lock or BYTE [rax * 2 + rdx], 70");
}



#[test]
fn enc_generic_lock2252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x08, 0x35", "lock or BYTE [rax], 53");
}



#[test]
fn enc_generic_lock2253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax * 2 + rdx], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x0C, 0x42, 0x10", "lock or BYTE [rax * 2 + rdx], 16");
}



#[test]
fn enc_generic_lock2254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax * 2 + rdx], 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x0C, 0x42, 0x6E", "lock or BYTE [rax * 2 + rdx], 110");
}



#[test]
fn enc_generic_or2255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn enc_generic_or2256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x10", "or BYTE [rax], dl");
}



#[test]
fn enc_generic_or2257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x40, 0x10", "or BYTE [rax + 16], al");
}



#[test]
fn enc_generic_or2258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x14, 0x42", "or BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_or2259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x00", "or BYTE [rax], al");
}



#[test]
fn enc_generic_lock2260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x08, 0x48, 0x10", "lock or BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_lock2261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x08, 0x50, 0x10", "lock or BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_lock2262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x08, 0x0C, 0x42", "lock or BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_lock2263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x08, 0x04, 0x42", "lock or BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_lock2264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock or BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x08, 0x08", "lock or BYTE [rax], cl");
}



#[test]
fn enc_generic_or2265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x2D", "or ax, 45");
}



#[test]
fn enc_generic_or2266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x4C", "or ax, 76");
}



#[test]
fn enc_generic_or2267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x28", "or eax, 40");
}



#[test]
fn enc_generic_or2268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x1F", "or ax, 31");
}



#[test]
fn enc_generic_or2269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x5B", "or eax, 91");
}



#[test]
fn enc_generic_or2270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x08", "or cl, BYTE [rax]");
}



#[test]
fn enc_generic_or2271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x00", "or al, BYTE [rax]");
}



#[test]
fn enc_generic_or2272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x10", "or dl, BYTE [rax]");
}



#[test]
fn enc_generic_or2273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC2", "or dl, al");
}



#[test]
fn enc_generic_or2274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn enc_generic_or2275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x1F", "or rdx, 31");
}



#[test]
fn enc_generic_or2276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x03", "or rax, 3");
}



#[test]
fn enc_generic_or2277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x5D", "or rdx, 93");
}



#[test]
fn enc_generic_or2278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x1F", "or rax, 31");
}



#[test]
fn enc_generic_or2279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x18", "or rbx, 24");
}



#[test]
fn enc_generic_or2280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xD1", "or cl, dl");
}



#[test]
fn enc_generic_or2281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC8", "or al, cl");
}



#[test]
fn enc_generic_or2282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC1", "or cl, al");
}



#[test]
fn enc_generic_or2283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn enc_generic_or2284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x4B", "or al, 75");
}



#[test]
fn enc_generic_or2285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x1B", "or al, 27");
}



#[test]
fn enc_generic_or2286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x77", "or al, 119");
}



#[test]
fn enc_generic_or2287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x36", "or al, 54");
}



#[test]
fn enc_generic_or2288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x1E", "or al, 30");
}



#[test]
fn enc_generic_or2289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x63", "or cl, 99");
}



#[test]
fn enc_generic_or2290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x2C", "or al, 44");
}



#[test]
fn enc_generic_or2291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x54", "or cl, 84");
}



#[test]
fn enc_generic_or2292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x2A", "or dl, 42");
}



#[test]
fn enc_generic_or2293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x20", "or cl, 32");
}



#[test]
fn enc_generic_outsb2294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6E", "outsb");
}



#[test]
fn enc_generic_rep2295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep outsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x6E", "rep outsb");
}



#[test]
fn enc_generic_outsd2296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6F", "outsd");
}



#[test]
fn enc_generic_rep2297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep outsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x6F", "rep outsd");
}



#[test]
fn enc_generic_outsw2298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6F", "outsw");
}



#[test]
fn enc_generic_rep2299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep outsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x66, 0x6F", "rep outsw");
}



#[test]
fn enc_generic_pause2300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pause
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x90", "pause");
}



#[test]
fn enc_generic_pop2301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn enc_generic_pop2302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn enc_generic_pop2303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5B", "pop rbx");
}



#[test]
fn enc_generic_pop2304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5A", "pop rdx");
}



#[test]
fn enc_generic_pop2305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn enc_generic_pop2306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn enc_generic_pop2307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x04, 0x42", "pop QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_popcnt2308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x18", "popcnt rbx, QWORD [rax]");
}



#[test]
fn enc_generic_popcnt2309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x10", "popcnt rdx, QWORD [rax]");
}



#[test]
fn enc_generic_popcnt2310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC1", "popcnt rax, rcx");
}



#[test]
fn enc_generic_popcnt2311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD1", "popcnt rdx, rcx");
}



#[test]
fn enc_generic_popf2312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popf");
}



#[test]
fn enc_generic_popfq2313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popfq");
}



#[test]
fn enc_generic_popfw2314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9D", "popfw");
}



#[test]
fn enc_generic_prefetchnta2315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x04, 0x42", "prefetchnta BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetchnta2316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x40, 0x10", "prefetchnta BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetchnta2317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn enc_generic_prefetcht02318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x0C, 0x42", "prefetcht0 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht02319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x48, 0x10", "prefetcht0 BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht12320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x50, 0x10", "prefetcht1 BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht12321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn enc_generic_prefetcht12322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x14, 0x42", "prefetcht1 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht22323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x1C, 0x42", "prefetcht2 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht22324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x58, 0x10", "prefetcht2 BYTE [rax + 16]");
}



#[test]
fn enc_generic_push2325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn enc_generic_push2326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn enc_generic_push2327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x11", "push 17");
}



#[test]
fn enc_generic_push2328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x1A", "push 26");
}



#[test]
fn enc_generic_push2329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x25", "push 37");
}



#[test]
fn enc_generic_push2330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x44", "push 68");
}



#[test]
fn enc_generic_push2331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x17", "push 23");
}



#[test]
fn enc_generic_push2332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn enc_generic_push2333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x4B", "push 75");
}



#[test]
fn enc_generic_push2334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x2A", "push 42");
}



#[test]
fn enc_generic_push2335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x0C", "push 12");
}



#[test]
fn enc_generic_push2336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x1B", "push 27");
}



#[test]
fn enc_generic_push2337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x29", "push 41");
}



#[test]
fn enc_generic_push2338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x52", "push rdx");
}



#[test]
fn enc_generic_push2339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn enc_generic_push2340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x53", "push rbx");
}



#[test]
fn enc_generic_pushf2341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushf");
}



#[test]
fn enc_generic_pushfq2342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushfq");
}



#[test]
fn enc_generic_pushfw2343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9C", "pushfw");
}



#[test]
fn enc_generic_rcl2344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn enc_generic_rcl2345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn enc_generic_rcl2346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x14, 0x42", "rcl QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rcl2347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn enc_generic_rcl2348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD0", "rcl al, cl");
}



#[test]
fn enc_generic_rcl2349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x2A", "rcl rcx, 42");
}



#[test]
fn enc_generic_rcl2350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x27", "rcl rcx, 39");
}



#[test]
fn enc_generic_rcl2351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax * 2 + rdx], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x14, 0x42, 0x60", "rcl QWORD [rax * 2 + rdx], 96");
}



#[test]
fn enc_generic_rcl2352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax * 2 + rdx], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x14, 0x42, 0x34", "rcl QWORD [rax * 2 + rdx], 52");
}



#[test]
fn enc_generic_rcl2353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x60", "rcl BYTE [rax], 96");
}



#[test]
fn enc_generic_rcl2354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x0D", "rcl al, 13");
}



#[test]
fn enc_generic_rcl2355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x60", "rcl al, 96");
}



#[test]
fn enc_generic_rcl2356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x51", "rcl al, 81");
}



#[test]
fn enc_generic_rcl2357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x42", "rcl BYTE [rax], 66");
}



#[test]
fn enc_generic_rcr2358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x06", "rcr BYTE [rax], 6");
}



#[test]
fn enc_generic_rcr2359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x4F", "rcr BYTE [rax], 79");
}



#[test]
fn enc_generic_rcr2360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x76", "rcr al, 118");
}



#[test]
fn enc_generic_rcr2361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x25", "rcr BYTE [rax], 37");
}



#[test]
fn enc_generic_rcr2362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x3F", "rcr al, 63");
}



#[test]
fn enc_generic_rcr2363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x1C, 0x42, 0x41", "rcr QWORD [rax * 2 + rdx], 65");
}



#[test]
fn enc_generic_rcr2364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x0A", "rcr rcx, 10");
}



#[test]
fn enc_generic_rcr2365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x67", "rcr rcx, 103");
}



#[test]
fn enc_generic_rcr2366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x65", "rcr QWORD [rax], 101");
}



#[test]
fn enc_generic_rcr2367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn enc_generic_rcr2368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD8", "rcr al, cl");
}



#[test]
fn enc_generic_rcr2369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn enc_generic_rcr2370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x1C, 0x42", "rcr QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rcr2371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn enc_generic_rdfsbase2372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn enc_generic_rdfsbase2373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn enc_generic_rdfsbase2374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC0", "rdfsbase rax");
}



#[test]
fn enc_generic_rdfsbase2375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC0", "rdfsbase eax");
}



#[test]
fn enc_generic_rdfsbase2376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC1", "rdfsbase ecx");
}



#[test]
fn enc_generic_rdgsbase2377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCA", "rdgsbase rdx");
}



#[test]
fn enc_generic_rdgsbase2378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn enc_generic_rdgsbase2379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC9", "rdgsbase ecx");
}



#[test]
fn enc_generic_rdgsbase2380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xCA", "rdgsbase edx");
}



#[test]
fn enc_generic_rdmsr2381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x32", "rdmsr");
}



#[test]
fn enc_generic_rdpid2382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn enc_generic_rdpid2383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF9", "rdpid rcx");
}



#[test]
fn enc_generic_rdpid2384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn enc_generic_rdpkru2385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEE", "rdpkru");
}



#[test]
fn enc_generic_rdpmc2386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x33", "rdpmc");
}



#[test]
fn enc_generic_rdrand2387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn enc_generic_rdrand2388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF1", "rdrand rcx");
}



#[test]
fn enc_generic_rdrand2389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF0", "rdrand rax");
}



#[test]
fn enc_generic_rdseed2390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn enc_generic_rdseed2391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xFA", "rdseed rdx");
}



#[test]
fn enc_generic_rdseed2392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn enc_generic_rdtsc2393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtsc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x31", "rdtsc");
}



#[test]
fn enc_generic_rdtscp2394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtscp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF9", "rdtscp");
}



#[test]
fn enc_generic_ret2395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 11155
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x93, 0x2B", "ret 11155");
}



#[test]
fn enc_generic_ret2396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 590
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x4E, 0x02", "ret 590");
}



#[test]
fn enc_generic_ret2397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 5477
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x65, 0x15", "ret 5477");
}



#[test]
fn enc_generic_ret2398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 9240
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x18, 0x24", "ret 9240");
}



#[test]
fn enc_generic_ret2399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 4104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x08, 0x10", "ret 4104");
}



#[test]
fn enc_generic_ret2400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "ret");
}



#[test]
fn enc_generic_retf2401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCB", "retf");
}



#[test]
fn enc_generic_retf2402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 3248
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xB0, 0x0C", "retf 3248");
}



#[test]
fn enc_generic_retf2403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 14056
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xE8, 0x36", "retf 14056");
}



#[test]
fn enc_generic_retf2404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 8467
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x13, 0x21", "retf 8467");
}



#[test]
fn enc_generic_retf2405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 2417
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x71, 0x09", "retf 2417");
}



#[test]
fn enc_generic_retf2406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 4065
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xE1, 0x0F", "retf 4065");
}



#[test]
fn enc_generic_retn2407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 7811
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x83, 0x1E", "retn 7811");
}



#[test]
fn enc_generic_retn2408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 9975
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xF7, 0x26", "retn 9975");
}



#[test]
fn enc_generic_retn2409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 10498
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x02, 0x29", "retn 10498");
}



#[test]
fn enc_generic_retn2410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 13880
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x38, 0x36", "retn 13880");
}



#[test]
fn enc_generic_retn2411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 3443
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x73, 0x0D", "retn 3443");
}



#[test]
fn enc_generic_retn2412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "retn");
}



#[test]
fn enc_generic_rol2413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x00", "rol BYTE [rax], cl");
}



#[test]
fn enc_generic_rol2414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn enc_generic_rol2415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x04, 0x42, 0x71", "rol QWORD [rax * 2 + rdx], 113");
}



#[test]
fn enc_generic_rol2416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x43", "rol rcx, 67");
}



#[test]
fn enc_generic_rol2417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x04, 0x42, 0x2E", "rol QWORD [rax * 2 + rdx], 46");
}



#[test]
fn enc_generic_rol2418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x47", "rol rcx, 71");
}



#[test]
fn enc_generic_rol2419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x6E", "rol rcx, 110");
}



#[test]
fn enc_generic_rol2420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x43", "rol BYTE [rax], 67");
}



#[test]
fn enc_generic_rol2421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x03", "rol al, 3");
}



#[test]
fn enc_generic_rol2422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x13", "rol al, 19");
}



#[test]
fn enc_generic_rol2423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x14", "rol BYTE [rax], 20");
}



#[test]
fn enc_generic_rol2424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x2C", "rol al, 44");
}



#[test]
fn enc_generic_rol2425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x04, 0x42", "rol QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rol2426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn enc_generic_rol2427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn enc_generic_ror2428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x09", "ror QWORD [rax], 9");
}



#[test]
fn enc_generic_ror2429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x35", "ror QWORD [rax], 53");
}



#[test]
fn enc_generic_ror2430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x7C", "ror QWORD [rax], 124");
}



#[test]
fn enc_generic_ror2431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x38", "ror QWORD [rax], 56");
}



#[test]
fn enc_generic_ror2432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x25", "ror rcx, 37");
}



#[test]
fn enc_generic_ror2433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x08", "ror BYTE [rax], cl");
}



#[test]
fn enc_generic_ror2434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn enc_generic_ror2435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x1E", "ror al, 30");
}



#[test]
fn enc_generic_ror2436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x17", "ror BYTE [rax], 23");
}



#[test]
fn enc_generic_ror2437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x79", "ror al, 121");
}



#[test]
fn enc_generic_ror2438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x25", "ror al, 37");
}



#[test]
fn enc_generic_ror2439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x10", "ror BYTE [rax], 16");
}



#[test]
fn enc_generic_ror2440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x08", "ror QWORD [rax], cl");
}



#[test]
fn enc_generic_ror2441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x0C, 0x42", "ror QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_ror2442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn enc_generic_rsm2443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAA", "rsm");
}



#[test]
fn enc_generic_sahf2444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9E", "sahf");
}



#[test]
fn enc_generic_sal2445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x24, 0x42", "sal QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sal2446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn enc_generic_sal2447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "sal rcx, cl");
}



#[test]
fn enc_generic_sal2448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x1E", "sal rcx, 30");
}



#[test]
fn enc_generic_sal2449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x4B", "sal rcx, 75");
}



#[test]
fn enc_generic_sal2450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x62", "sal QWORD [rax], 98");
}



#[test]
fn enc_generic_sal2451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x78", "sal QWORD [rax * 2 + rdx], 120");
}



#[test]
fn enc_generic_sal2452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x48", "sal QWORD [rax], 72");
}



#[test]
fn enc_generic_sal2453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn enc_generic_sal2454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn enc_generic_sal2455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x57", "sal al, 87");
}



#[test]
fn enc_generic_sal2456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x15", "sal al, 21");
}



#[test]
fn enc_generic_sal2457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x59", "sal BYTE [rax], 89");
}



#[test]
fn enc_generic_sal2458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x78", "sal al, 120");
}



#[test]
fn enc_generic_sal2459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x45", "sal BYTE [rax], 69");
}



#[test]
fn enc_generic_sar2460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x31", "sar al, 49");
}



#[test]
fn enc_generic_sar2461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x47", "sar BYTE [rax], 71");
}



#[test]
fn enc_generic_sar2462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x78", "sar BYTE [rax], 120");
}



#[test]
fn enc_generic_sar2463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x6F", "sar BYTE [rax], 111");
}



#[test]
fn enc_generic_sar2464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x78", "sar al, 120");
}



#[test]
fn enc_generic_sar2465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xF9", "sar rcx, cl");
}



#[test]
fn enc_generic_sar2466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn enc_generic_sar2467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x28", "sar rcx, 40");
}



#[test]
fn enc_generic_sar2468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x29", "sar QWORD [rax], 41");
}



#[test]
fn enc_generic_sar2469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x55", "sar rcx, 85");
}



#[test]
fn enc_generic_sar2470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x3C, 0x42, 0x48", "sar QWORD [rax * 2 + rdx], 72");
}



#[test]
fn enc_generic_sar2471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x29", "sar rcx, 41");
}



#[test]
fn enc_generic_sar2472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn enc_generic_sar2473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn enc_generic_sbb2474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC1", "sbb cl, al");
}



#[test]
fn enc_generic_sbb2475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x00", "sbb al, BYTE [rax]");
}



#[test]
fn enc_generic_sbb2476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x08", "sbb cl, BYTE [rax]");
}



#[test]
fn enc_generic_sbb2477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC0", "sbb al, al");
}



#[test]
fn enc_generic_sbb2478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x10", "sbb rax, 16");
}



#[test]
fn enc_generic_sbb2479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x73", "sbb rax, 115");
}



#[test]
fn enc_generic_sbb2480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x1C", "sbb rbx, 28");
}



#[test]
fn enc_generic_sbb2481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x0B", "sbb rcx, 11");
}



#[test]
fn enc_generic_sbb2482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x44", "sbb rcx, 68");
}



#[test]
fn enc_generic_sbb2483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x10", "sbb rdx, QWORD [rax]");
}



#[test]
fn enc_generic_sbb2484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x00", "sbb rax, QWORD [rax]");
}



#[test]
fn enc_generic_sbb2485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x14, 0x42", "sbb rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sbb2486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x18", "sbb rbx, QWORD [rax]");
}



#[test]
fn enc_generic_sbb2487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x4C", "sbb al, 76");
}



#[test]
fn enc_generic_sbb2488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x46", "sbb al, 70");
}



#[test]
fn enc_generic_sbb2489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xDA, 0x2C", "sbb dl, 44");
}



#[test]
fn enc_generic_sbb2490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x0E", "sbb al, 14");
}



#[test]
fn enc_generic_sbb2491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x0A", "sbb cl, 10");
}



#[test]
fn enc_generic_sbb2492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x1C", "sbb ax, 28");
}



#[test]
fn enc_generic_sbb2493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x1C", "sbb rax, 28");
}



#[test]
fn enc_generic_sbb2494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x0D", "sbb rax, 13");
}



#[test]
fn enc_generic_sbb2495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb eax, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD8, 0x11", "sbb eax, 17");
}



#[test]
fn enc_generic_sbb2496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x3F", "sbb rax, 63");
}



#[test]
fn enc_generic_sbb2497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x04, 0x42", "sbb BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_sbb2498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x48, 0x10", "sbb BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_sbb2499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x50, 0x10", "sbb BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_sbb2500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x10", "sbb BYTE [rax], dl");
}



#[test]
fn enc_generic_lock2501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x18, 0x0C, 0x42", "lock sbb BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_lock2502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x18, 0x04, 0x42", "lock sbb BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_lock2503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x18, 0x00", "lock sbb BYTE [rax], al");
}



#[test]
fn enc_generic_lock2504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x18, 0x50, 0x10", "lock sbb BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_sbb2505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC2", "sbb dl, al");
}



#[test]
fn enc_generic_sbb2506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC1", "sbb cl, al");
}



#[test]
fn enc_generic_sbb2507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xD2", "sbb dl, dl");
}



#[test]
fn enc_generic_sbb2508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xD1", "sbb cl, dl");
}



#[test]
fn enc_generic_sbb2509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xD0", "sbb al, dl");
}



#[test]
fn enc_generic_sbb2510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x25", "sbb al, 37");
}



#[test]
fn enc_generic_sbb2511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x0C", "sbb al, 12");
}



#[test]
fn enc_generic_sbb2512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x67", "sbb al, 103");
}



#[test]
fn enc_generic_sbb2513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x17", "sbb al, 23");
}



#[test]
fn enc_generic_sbb2514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x51", "sbb al, 81");
}



#[test]
fn enc_generic_sbb2515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x38", "sbb rcx, 56");
}



#[test]
fn enc_generic_sbb2516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x3A", "sbb rdx, 58");
}



#[test]
fn enc_generic_sbb2517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x0C", "sbb rax, 12");
}



#[test]
fn enc_generic_sbb2518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x67", "sbb rcx, 103");
}



#[test]
fn enc_generic_sbb2519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x05", "sbb rax, 5");
}



#[test]
fn enc_generic_sbb2520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x1F", "sbb BYTE [rax], 31");
}



#[test]
fn enc_generic_sbb2521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x4F", "sbb BYTE [rax + 16], 79");
}



#[test]
fn enc_generic_sbb2522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x67", "sbb BYTE [rax + 16], 103");
}



#[test]
fn enc_generic_sbb2523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x0E", "sbb BYTE [rax + 16], 14");
}



#[test]
fn enc_generic_sbb2524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x20", "sbb BYTE [rax + 16], 32");
}



#[test]
fn enc_generic_lock2525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax + 16], 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x58, 0x10, 0x50", "lock sbb BYTE [rax + 16], 80");
}



#[test]
fn enc_generic_lock2526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax + 16], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x58, 0x10, 0x0D", "lock sbb BYTE [rax + 16], 13");
}



#[test]
fn enc_generic_lock2527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax + 16], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x58, 0x10, 0x42", "lock sbb BYTE [rax + 16], 66");
}



#[test]
fn enc_generic_lock2528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sbb BYTE [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x18, 0x2C", "lock sbb BYTE [rax], 44");
}



#[test]
fn enc_generic_sbb2529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn enc_generic_scasb2530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAE", "scasb");
}



#[test]
fn enc_generic_repe2531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; repe scasb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xAE", "repe scasb");
}



#[test]
fn enc_generic_scasd2532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAF", "scasd");
}



#[test]
fn enc_generic_repe2533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; repe scasd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xAF", "repe scasd");
}



#[test]
fn enc_generic_scasq2534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAF", "scasq");
}



#[test]
fn enc_generic_repe2535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; repe scasq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0xAF", "repe scasq");
}



#[test]
fn enc_generic_scasw2536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAF", "scasw");
}



#[test]
fn enc_generic_repe2537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; repe scasw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x66, 0xAF", "repe scasw");
}



#[test]
fn enc_generic_sgdt2538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn enc_generic_shl2539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn enc_generic_shl2540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn enc_generic_shl2541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x24, 0x42", "shl QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_shl2542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "shl QWORD [rax], cl");
}



#[test]
fn enc_generic_shl2543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn enc_generic_shl2544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x20, 0x5B", "shl QWORD [rax], 91");
}



#[test]
fn enc_generic_shl2545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x51", "shl QWORD [rax * 2 + rdx], 81");
}



#[test]
fn enc_generic_shl2546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x03", "shl rcx, 3");
}



#[test]
fn enc_generic_shl2547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x1C", "shl QWORD [rax * 2 + rdx], 28");
}



#[test]
fn enc_generic_shl2548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x20", "shl rcx, 32");
}



#[test]
fn enc_generic_shl2549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x22", "shl BYTE [rax], 34");
}



#[test]
fn enc_generic_shl2550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x2D", "shl al, 45");
}



#[test]
fn enc_generic_shl2551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x33", "shl BYTE [rax], 51");
}



#[test]
fn enc_generic_shl2552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x6F", "shl BYTE [rax], 111");
}



#[test]
fn enc_generic_shl2553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x5A", "shl BYTE [rax], 90");
}



#[test]
fn enc_generic_shld2554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rbx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x1C, 0x42", "shld QWORD [rax * 2 + rdx], rbx, cl");
}



#[test]
fn enc_generic_shld2555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xC9", "shld rcx, rcx, cl");
}



#[test]
fn enc_generic_shld2556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x10", "shld QWORD [rax], rdx, cl");
}



#[test]
fn enc_generic_shld2557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0xC1", "shld rcx, rax, cl");
}



#[test]
fn enc_generic_shld2558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x0C, 0x42", "shld QWORD [rax * 2 + rdx], rcx, cl");
}



#[test]
fn enc_generic_shld2559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rdx, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x14, 0x42, 0x32", "shld QWORD [rax * 2 + rdx], rdx, 50");
}



#[test]
fn enc_generic_shld2560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rcx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC9, 0x14", "shld rcx, rcx, 20");
}



#[test]
fn enc_generic_shld2561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x04, 0x42, 0x43", "shld QWORD [rax * 2 + rdx], rax, 67");
}



#[test]
fn enc_generic_shld2562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rbx, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x1C, 0x42, 0x56", "shld QWORD [rax * 2 + rdx], rbx, 86");
}



#[test]
fn enc_generic_shld2563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rbx, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x18, 0x4A", "shld QWORD [rax], rbx, 74");
}



#[test]
fn enc_generic_shr2564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn enc_generic_shr2565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn enc_generic_shr2566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x2C, 0x42", "shr QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_shr2567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x63", "shr BYTE [rax], 99");
}



#[test]
fn enc_generic_shr2568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x6A", "shr BYTE [rax], 106");
}



#[test]
fn enc_generic_shr2569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x77", "shr al, 119");
}



#[test]
fn enc_generic_shr2570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x0F", "shr al, 15");
}



#[test]
fn enc_generic_shr2571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x25", "shr BYTE [rax], 37");
}



#[test]
fn enc_generic_shr2572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn enc_generic_shr2573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn enc_generic_shr2574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax * 2 + rdx], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x2C, 0x42, 0x29", "shr QWORD [rax * 2 + rdx], 41");
}



#[test]
fn enc_generic_shr2575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x61", "shr QWORD [rax], 97");
}



#[test]
fn enc_generic_shr2576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x1C", "shr rcx, 28");
}



#[test]
fn enc_generic_shr2577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax * 2 + rdx], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x2C, 0x42, 0x42", "shr QWORD [rax * 2 + rdx], 66");
}



#[test]
fn enc_generic_shr2578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x69", "shr QWORD [rax], 105");
}



#[test]
fn enc_generic_shrd2579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rcx, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x08, 0x42", "shrd QWORD [rax], rcx, 66");
}



#[test]
fn enc_generic_shrd2580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rax, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x00, 0x63", "shrd QWORD [rax], rax, 99");
}



#[test]
fn enc_generic_shrd2581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rcx, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x08, 0x65", "shrd QWORD [rax], rcx, 101");
}



#[test]
fn enc_generic_shrd2582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rax, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x00, 0x42", "shrd QWORD [rax], rax, 66");
}



#[test]
fn enc_generic_shrd2583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rdx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x10, 0x0F", "shrd QWORD [rax], rdx, 15");
}



#[test]
fn enc_generic_shrd2584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD1", "shrd rcx, rdx, cl");
}



#[test]
fn enc_generic_shrd2585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x08", "shrd QWORD [rax], rcx, cl");
}



#[test]
fn enc_generic_shrd2586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x0C, 0x42", "shrd QWORD [rax * 2 + rdx], rcx, cl");
}



#[test]
fn enc_generic_shrd2587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x14, 0x42", "shrd QWORD [rax * 2 + rdx], rdx, cl");
}



#[test]
fn enc_generic_sidt2588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn enc_generic_skinit2589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; skinit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDE", "skinit");
}



#[test]
fn enc_generic_sldt2590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn enc_generic_sldt2591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC3", "sldt rbx");
}



#[test]
fn enc_generic_sldt2592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC1", "sldt rcx");
}



#[test]
fn enc_generic_sldt2593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn enc_generic_smsw2594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn enc_generic_smsw2595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE3", "smsw rbx");
}



#[test]
fn enc_generic_smsw2596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE2", "smsw rdx");
}



#[test]
fn enc_generic_stac2597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCB", "stac");
}



#[test]
fn enc_generic_stc2598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF9", "stc");
}



#[test]
fn enc_generic_std2599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; std
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFD", "std");
}



#[test]
fn enc_generic_sti2600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sti
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFB", "sti");
}



#[test]
fn enc_generic_stosb2601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAA", "stosb");
}



#[test]
fn enc_generic_rep2602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep stosb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xAA", "rep stosb");
}



#[test]
fn enc_generic_stosd2603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAB", "stosd");
}



#[test]
fn enc_generic_rep2604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep stosd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0xAB", "rep stosd");
}



#[test]
fn enc_generic_stosq2605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAB", "stosq");
}



#[test]
fn enc_generic_rep2606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep stosq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0xAB", "rep stosq");
}



#[test]
fn enc_generic_stosw2607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAB", "stosw");
}



#[test]
fn enc_generic_rep2608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rep stosw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x66, 0xAB", "rep stosw");
}



#[test]
fn enc_generic_str2609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn enc_generic_str2610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCA", "str rdx");
}



#[test]
fn enc_generic_str2611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xCB", "str rbx");
}



#[test]
fn enc_generic_sub2612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x22", "sub eax, 34");
}



#[test]
fn enc_generic_sub2613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x20", "sub eax, 32");
}



#[test]
fn enc_generic_sub2614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x7E", "sub rax, 126");
}



#[test]
fn enc_generic_sub2615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x3F", "sub ax, 63");
}



#[test]
fn enc_generic_sub2616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x63", "sub ax, 99");
}



#[test]
fn enc_generic_sub2617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn enc_generic_sub2618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x08", "sub cl, BYTE [rax]");
}



#[test]
fn enc_generic_sub2619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC2", "sub dl, al");
}



#[test]
fn enc_generic_sub2620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC0", "sub al, al");
}



#[test]
fn enc_generic_sub2621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x68, 0x10, 0x45", "sub BYTE [rax + 16], 69");
}



#[test]
fn enc_generic_sub2622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x2E", "sub BYTE [rax], 46");
}



#[test]
fn enc_generic_sub2623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x2C, 0x42, 0x42", "sub BYTE [rax * 2 + rdx], 66");
}



#[test]
fn enc_generic_sub2624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x2C, 0x42, 0x4D", "sub BYTE [rax * 2 + rdx], 77");
}



#[test]
fn enc_generic_sub2625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x68, 0x10, 0x39", "sub BYTE [rax + 16], 57");
}



#[test]
fn enc_generic_lock2626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x28, 0x19", "lock sub BYTE [rax], 25");
}



#[test]
fn enc_generic_lock2627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax * 2 + rdx], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x2C, 0x42, 0x3F", "lock sub BYTE [rax * 2 + rdx], 63");
}



#[test]
fn enc_generic_lock2628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x28, 0x2B", "lock sub BYTE [rax], 43");
}



#[test]
fn enc_generic_lock2629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x28, 0x5A", "lock sub BYTE [rax], 90");
}



#[test]
fn enc_generic_lock2630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax * 2 + rdx], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x2C, 0x42, 0x27", "lock sub BYTE [rax * 2 + rdx], 39");
}



#[test]
fn enc_generic_sub2631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x05", "sub al, 5");
}



#[test]
fn enc_generic_sub2632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x3A", "sub al, 58");
}



#[test]
fn enc_generic_sub2633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x72", "sub al, 114");
}



#[test]
fn enc_generic_sub2634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x1A", "sub al, 26");
}



#[test]
fn enc_generic_sub2635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x48", "sub al, 72");
}



#[test]
fn enc_generic_sub2636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn enc_generic_sub2637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC0", "sub al, al");
}



#[test]
fn enc_generic_sub2638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC8", "sub al, cl");
}



#[test]
fn enc_generic_sub2639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x3A", "sub al, 58");
}



#[test]
fn enc_generic_sub2640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE9, 0x2C", "sub cl, 44");
}



#[test]
fn enc_generic_sub2641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x56", "sub al, 86");
}



#[test]
fn enc_generic_sub2642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x70", "sub dl, 112");
}



#[test]
fn enc_generic_sub2643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x4D", "sub al, 77");
}



#[test]
fn enc_generic_sub2644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x4B", "sub rdx, 75");
}



#[test]
fn enc_generic_sub2645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x37", "sub rbx, 55");
}



#[test]
fn enc_generic_sub2646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x79", "sub rbx, 121");
}



#[test]
fn enc_generic_sub2647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x5A", "sub rbx, 90");
}



#[test]
fn enc_generic_sub2648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x2A", "sub rbx, 42");
}



#[test]
fn enc_generic_sub2649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x0C, 0x42", "sub BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sub2650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x08", "sub BYTE [rax], cl");
}



#[test]
fn enc_generic_sub2651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x04, 0x42", "sub BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_lock2652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x28, 0x0C, 0x42", "lock sub BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_lock2653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x28, 0x00", "lock sub BYTE [rax], al");
}



#[test]
fn enc_generic_lock2654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock sub BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x28, 0x08", "lock sub BYTE [rax], cl");
}



#[test]
fn enc_generic_sub2655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC9", "sub rcx, rcx");
}



#[test]
fn enc_generic_sub2656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x10", "sub rdx, QWORD [rax]");
}



#[test]
fn enc_generic_sub2657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x04, 0x42", "sub rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sub2658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xCA", "sub rdx, rcx");
}



#[test]
fn enc_generic_sub2659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x58", "sub rbx, 88");
}



#[test]
fn enc_generic_sub2660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x2F", "sub rcx, 47");
}



#[test]
fn enc_generic_sub2661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x7A", "sub rax, 122");
}



#[test]
fn enc_generic_sub2662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x26", "sub rdx, 38");
}



#[test]
fn enc_generic_sub2663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x6C", "sub rbx, 108");
}



#[test]
fn enc_generic_swapgs2664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; swapgs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF8", "swapgs");
}



#[test]
fn enc_generic_sysenter2665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysenter
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x34", "sysenter");
}



#[test]
fn enc_generic_sysexit2666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysexit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x35", "sysexit");
}



#[test]
fn enc_generic_test2667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x50, 0x10", "test dl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_test2668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test cl, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x0C, 0x42", "test cl, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_test2669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test cl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x48, 0x10", "test cl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_test2670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x40, 0x10", "test al, BYTE [rax + 16]");
}



#[test]
fn enc_generic_test2671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x2D, 0x00, 0x00, 0x00", "test eax, 45");
}



#[test]
fn enc_generic_test2672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x32, 0x00", "test ax, 50");
}



#[test]
fn enc_generic_test2673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x6E, 0x00", "test ax, 110");
}



#[test]
fn enc_generic_test2674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA9, 0x2E, 0x00, 0x00, 0x00", "test rax, 46");
}



#[test]
fn enc_generic_test2675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x71, 0x00", "test ax, 113");
}



#[test]
fn enc_generic_test2676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x5A", "test al, 90");
}



#[test]
fn enc_generic_test2677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x78", "test al, 120");
}



#[test]
fn enc_generic_test2678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x51", "test al, 81");
}



#[test]
fn enc_generic_test2679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x67", "test al, 103");
}



#[test]
fn enc_generic_test2680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x2F", "test al, 47");
}



#[test]
fn enc_generic_test2681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x66, 0x00, 0x00, 0x00", "test rcx, 102");
}



#[test]
fn enc_generic_test2682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x04, 0x42, 0x41, 0x00, 0x00, 0x00", "test QWORD [rax * 2 + rdx], 65");
}



#[test]
fn enc_generic_test2683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x04, 0x42, 0x7E, 0x00, 0x00, 0x00", "test QWORD [rax * 2 + rdx], 126");
}



#[test]
fn enc_generic_test2684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x20, 0x00, 0x00, 0x00", "test rcx, 32");
}



#[test]
fn enc_generic_test2685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x00, 0x62, 0x00, 0x00, 0x00", "test QWORD [rax], 98");
}



#[test]
fn enc_generic_test2686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x08", "test QWORD [rax], rcx");
}



#[test]
fn enc_generic_test2687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x14, 0x42", "test QWORD [rax * 2 + rdx], rdx");
}



#[test]
fn enc_generic_test2688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x04, 0x42", "test QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_generic_test2689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xD1", "test rcx, rdx");
}



#[test]
fn enc_generic_test2690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x1F", "test al, 31");
}



#[test]
fn enc_generic_test2691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x6C", "test BYTE [rax], 108");
}



#[test]
fn enc_generic_test2692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x65", "test BYTE [rax], 101");
}



#[test]
fn enc_generic_test2693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x75", "test al, 117");
}



#[test]
fn enc_generic_test2694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x3E", "test al, 62");
}



#[test]
fn enc_generic_test2695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xD0", "test al, dl");
}



#[test]
fn enc_generic_test2696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x08", "test BYTE [rax], cl");
}



#[test]
fn enc_generic_test2697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC0", "test al, al");
}



#[test]
fn enc_generic_test2698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x00", "test BYTE [rax], al");
}



#[test]
fn enc_generic_test2699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x10", "test BYTE [rax], dl");
}



#[test]
fn enc_generic_ud22700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2");
}



#[test]
fn enc_generic_ud2a2701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2a
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2a");
}



#[test]
fn enc_generic_verr2702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn enc_generic_verr2703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE1", "verr cx");
}



#[test]
fn enc_generic_verr2704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE2", "verr dx");
}



#[test]
fn enc_generic_verr2705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE0", "verr ax");
}



#[test]
fn enc_generic_verw2706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn enc_generic_verw2707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xEA", "verw dx");
}



#[test]
fn enc_generic_verw2708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE9", "verw cx");
}



#[test]
fn enc_generic_wbinvd2709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wbinvd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x09", "wbinvd");
}



#[test]
fn enc_generic_wrfsbase2710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD1", "wrfsbase rcx");
}



#[test]
fn enc_generic_wrfsbase2711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD0", "wrfsbase rax");
}



#[test]
fn enc_generic_wrfsbase2712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD2", "wrfsbase rdx");
}



#[test]
fn enc_generic_wrfsbase2713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD1", "wrfsbase ecx");
}



#[test]
fn enc_generic_wrfsbase2714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD0", "wrfsbase eax");
}



#[test]
fn enc_generic_wrgsbase2715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn enc_generic_wrgsbase2716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD9", "wrgsbase rcx");
}



#[test]
fn enc_generic_wrgsbase2717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD8", "wrgsbase eax");
}



#[test]
fn enc_generic_wrgsbase2718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD9", "wrgsbase ecx");
}



#[test]
fn enc_generic_wrmsr2719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x30", "wrmsr");
}



#[test]
fn enc_generic_wrpkru2720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEF", "wrpkru");
}



#[test]
fn enc_generic_xadd2721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x48, 0x10", "xadd BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_xadd2722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x40, 0x10", "xadd BYTE [rax + 16], al");
}



#[test]
fn enc_generic_xadd2723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x14, 0x42", "xadd BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_xadd2724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x10", "xadd BYTE [rax], dl");
}



#[test]
fn enc_generic_lock2725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xadd BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x0F, 0xC0, 0x0C, 0x42", "lock xadd BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_lock2726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x0F, 0xC0, 0x00", "lock xadd BYTE [rax], al");
}



#[test]
fn enc_generic_lock2727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xadd BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x0F, 0xC0, 0x50, 0x10", "lock xadd BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_xadd2728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn enc_generic_xadd2729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD2", "xadd dl, dl");
}



#[test]
fn enc_generic_xadd2730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD1", "xadd cl, dl");
}



#[test]
fn enc_generic_xadd2731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC9", "xadd cl, cl");
}



#[test]
fn enc_generic_xadd2732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xC1", "xadd cl, al");
}



#[test]
fn enc_generic_xadd2733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xCA", "xadd dl, cl");
}



#[test]
fn enc_generic_xchg2734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x14, 0x42", "xchg dl, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xchg2735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x04, 0x42", "xchg al, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xchg2736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn enc_generic_xchg2737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x50, 0x10", "xchg dl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_lock2738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg dl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x50, 0x10", "lock xchg dl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_lock2739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg dl, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x14, 0x42", "lock xchg dl, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lock2740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg cl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x48, 0x10", "lock xchg cl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_lock2741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg al, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x04, 0x42", "lock xchg al, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xchg2742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC8", "xchg cl, al");
}



#[test]
fn enc_generic_xchg2743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC2", "xchg al, dl");
}



#[test]
fn enc_generic_xchg2744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD2", "xchg dl, dl");
}



#[test]
fn enc_generic_xchg2745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn enc_generic_xchg2746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC2", "xchg al, dl");
}



#[test]
fn enc_generic_xchg2747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn enc_generic_xchg2748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC8", "xchg cl, al");
}



#[test]
fn enc_generic_xchg2749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC1", "xchg al, cl");
}



#[test]
fn enc_generic_xchg2750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC0", "xchg al, al");
}



#[test]
fn enc_generic_xchg2751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg2752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg2753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg BYTE [rax], al");
}



#[test]
fn enc_generic_xchg2754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg BYTE [rax], cl");
}



#[test]
fn enc_generic_xchg2755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x14, 0x42", "xchg BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_xchg2756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x04, 0x42", "xchg BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_xchg2757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg BYTE [rax], dl");
}



#[test]
fn enc_generic_lock2758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x48, 0x10", "lock xchg BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_lock2759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x00", "lock xchg BYTE [rax], al");
}



#[test]
fn enc_generic_lock2760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x50, 0x10", "lock xchg BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_lock2761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x10", "lock xchg BYTE [rax], dl");
}



#[test]
fn enc_generic_lock2762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xchg BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x86, 0x0C, 0x42", "lock xchg BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_xchg2763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg2764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xgetbv2765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xgetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD0", "xgetbv");
}



#[test]
fn enc_generic_xlat2766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlat
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlat");
}



#[test]
fn enc_generic_xlatb2767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlatb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlatb");
}



#[test]
fn enc_generic_xor2768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x08", "xor rcx, QWORD [rax]");
}



#[test]
fn enc_generic_xor2769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x0C, 0x42", "xor rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xor2770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x10", "xor rdx, QWORD [rax]");
}



#[test]
fn enc_generic_xor2771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x1C, 0x42", "xor rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xor2772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x3C", "xor rax, 60");
}



#[test]
fn enc_generic_xor2773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x65", "xor rax, 101");
}



#[test]
fn enc_generic_xor2774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor eax, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF0, 0x71", "xor eax, 113");
}



#[test]
fn enc_generic_xor2775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x30", "xor rax, 48");
}



#[test]
fn enc_generic_xor2776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor eax, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF0, 0x6D", "xor eax, 109");
}



#[test]
fn enc_generic_xor2777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn enc_generic_xor2778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC1", "xor cl, al");
}



#[test]
fn enc_generic_xor2779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD0", "xor al, dl");
}



#[test]
fn enc_generic_xor2780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD1", "xor cl, dl");
}



#[test]
fn enc_generic_xor2781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD2", "xor dl, dl");
}



#[test]
fn enc_generic_xor2782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x00", "xor BYTE [rax], al");
}



#[test]
fn enc_generic_xor2783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x48, 0x10", "xor BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_xor2784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x40, 0x10", "xor BYTE [rax + 16], al");
}



#[test]
fn enc_generic_xor2785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x10", "xor BYTE [rax], dl");
}



#[test]
fn enc_generic_lock2786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x30, 0x40, 0x10", "lock xor BYTE [rax + 16], al");
}



#[test]
fn enc_generic_lock2787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x30, 0x48, 0x10", "lock xor BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_lock2788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x30, 0x50, 0x10", "lock xor BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_lock2789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x30, 0x08", "lock xor BYTE [rax], cl");
}



#[test]
fn enc_generic_xor2790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x50", "xor BYTE [rax], 80");
}



#[test]
fn enc_generic_xor2791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x2B", "xor BYTE [rax], 43");
}



#[test]
fn enc_generic_xor2792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x02", "xor BYTE [rax], 2");
}



#[test]
fn enc_generic_xor2793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x75", "xor BYTE [rax], 117");
}



#[test]
fn enc_generic_xor2794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax * 2 + rdx], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x34, 0x42, 0x0D", "xor BYTE [rax * 2 + rdx], 13");
}



#[test]
fn enc_generic_lock2795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax + 16], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x70, 0x10, 0x5E", "lock xor BYTE [rax + 16], 94");
}



#[test]
fn enc_generic_lock2796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax * 2 + rdx], 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x34, 0x42, 0x6B", "lock xor BYTE [rax * 2 + rdx], 107");
}



#[test]
fn enc_generic_lock2797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax * 2 + rdx], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x34, 0x42, 0x41", "lock xor BYTE [rax * 2 + rdx], 65");
}



#[test]
fn enc_generic_lock2798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax + 16], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x70, 0x10, 0x7D", "lock xor BYTE [rax + 16], 125");
}



#[test]
fn enc_generic_lock2799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lock xor BYTE [rax + 16], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF0, 0x80, 0x70, 0x10, 0x1E", "lock xor BYTE [rax + 16], 30");
}



#[test]
fn enc_generic_xor2800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x68", "xor rax, 104");
}



#[test]
fn enc_generic_xor2801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x7B", "xor rax, 123");
}



#[test]
fn enc_generic_xor2802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x2A", "xor rcx, 42");
}



#[test]
fn enc_generic_xor2803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x04", "xor rdx, 4");
}



#[test]
fn enc_generic_xor2804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x07", "xor rdx, 7");
}



#[test]
fn enc_generic_xor2805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC2", "xor dl, al");
}



#[test]
fn enc_generic_xor2806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x08", "xor cl, BYTE [rax]");
}



#[test]
fn enc_generic_xor2807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn enc_generic_xor2808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC1", "xor cl, al");
}



#[test]
fn enc_generic_xor2809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x07", "xor al, 7");
}



#[test]
fn enc_generic_xor2810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x71", "xor al, 113");
}



#[test]
fn enc_generic_xor2811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x25", "xor al, 37");
}



#[test]
fn enc_generic_xor2812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x14", "xor al, 20");
}



#[test]
fn enc_generic_xor2813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x29", "xor al, 41");
}



#[test]
fn enc_generic_xor2814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF1, 0x59", "xor cl, 89");
}



#[test]
fn enc_generic_xor2815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x37", "xor al, 55");
}



#[test]
fn enc_generic_xor2816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x23", "xor dl, 35");
}



#[test]
fn enc_generic_xor2817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x49", "xor dl, 73");
}



#[test]
fn enc_generic_xor2818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x2A", "xor al, 42");
}



#[test]
fn enc_generic_xor2819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x4D", "xor rbx, 77");
}



#[test]
fn enc_generic_xor2820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x3D", "xor rdx, 61");
}



#[test]
fn enc_generic_xor2821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x32", "xor rbx, 50");
}



#[test]
fn enc_generic_xor2822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x2E", "xor rcx, 46");
}



#[test]
fn enc_generic_xor2823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x5D", "xor rax, 93");
}



#[test]
fn enc_generic_xrstor2824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn enc_generic_xrstor642825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn enc_generic_xrstors642826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn enc_generic_xsave2827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn enc_generic_xsave642828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn enc_generic_xsavec642829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn enc_generic_xsaveopt642830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn enc_generic_xsaves642831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn enc_generic_xsetbv2832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD1", "xsetbv");
}


