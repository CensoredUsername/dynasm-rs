
#[test]
fn enc_generic_adc3029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x56", "adc dl, 86");
}



#[test]
fn enc_generic_adc3030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x36", "adc dl, 54");
}



#[test]
fn enc_generic_adc3031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD1, 0x1E", "adc cl, 30");
}



#[test]
fn enc_generic_adc3032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x3F", "adc dl, 63");
}



#[test]
fn enc_generic_adc3033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD2, 0x22", "adc dl, 34");
}



#[test]
fn enc_generic_adc3034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD2", "adc dl, dl");
}



#[test]
fn enc_generic_adc3035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD1", "adc cl, dl");
}



#[test]
fn enc_generic_adc3036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC1", "adc cl, al");
}



#[test]
fn enc_generic_adc3037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC2", "adc dl, al");
}



#[test]
fn enc_generic_adc3038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xD0", "adc al, dl");
}



#[test]
fn enc_generic_adc3039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC0", "adc rax, rax");
}



#[test]
fn enc_generic_adc3040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x09", "adc rax, 9");
}



#[test]
fn enc_generic_adc3041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x43", "adc rcx, 67");
}



#[test]
fn enc_generic_adc3042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x39", "adc rax, 57");
}



#[test]
fn enc_generic_adc3043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x46", "adc rcx, 70");
}



#[test]
fn enc_generic_adc3044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x25", "adc rcx, 37");
}



#[test]
fn enc_generic_adc3045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x50, 0x10, 0x1E", "adc BYTE [rax + 16], 30");
}



#[test]
fn enc_generic_adc3046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x14, 0x42, 0x17", "adc BYTE [rax * 2 + rdx], 23");
}



#[test]
fn enc_generic_adc3047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x14, 0x42, 0x2B", "adc BYTE [rax * 2 + rdx], 43");
}



#[test]
fn enc_generic_adc3048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x14, 0x42, 0x39", "adc BYTE [rax * 2 + rdx], 57");
}



#[test]
fn enc_generic_adc3049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x10, 0x51", "adc BYTE [rax], 81");
}



#[test]
fn enc_generic_adc3050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x54", "adc al, 84");
}



#[test]
fn enc_generic_adc3051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x3D", "adc al, 61");
}



#[test]
fn enc_generic_adc3052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x61", "adc al, 97");
}



#[test]
fn enc_generic_adc3053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x2B", "adc al, 43");
}



#[test]
fn enc_generic_adc3054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x14, 0x52", "adc al, 82");
}



#[test]
fn enc_generic_adc3055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x2C", "adc rax, 44");
}



#[test]
fn enc_generic_adc3056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x43", "adc eax, 67");
}



#[test]
fn enc_generic_adc3057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x1F", "adc rax, 31");
}



#[test]
fn enc_generic_adc3058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc eax, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xD0, 0x68", "adc eax, 104");
}



#[test]
fn enc_generic_adc3059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x5E", "adc rax, 94");
}



#[test]
fn enc_generic_adc3060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC2", "adc dl, al");
}



#[test]
fn enc_generic_adc3061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0xC0", "adc al, al");
}



#[test]
fn enc_generic_adc3062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x00", "adc al, BYTE [rax]");
}



#[test]
fn enc_generic_adc3063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x12, 0x10", "adc dl, BYTE [rax]");
}



#[test]
fn enc_generic_adc3064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x04, 0x42", "adc rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_adc3065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x11, 0xC9", "adc rcx, rcx");
}



#[test]
fn enc_generic_adc3066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x08", "adc rcx, QWORD [rax]");
}



#[test]
fn enc_generic_adc3067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x13, 0x00", "adc rax, QWORD [rax]");
}



#[test]
fn enc_generic_adc3068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x14, 0x42", "adc BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_adc3069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x48, 0x10", "adc BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_adc3070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x50, 0x10", "adc BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_adc3071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x10, 0x08", "adc BYTE [rax], cl");
}



#[test]
fn enc_generic_adc3072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x0C", "adc rcx, 12");
}



#[test]
fn enc_generic_adc3073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x2E", "adc rax, 46");
}



#[test]
fn enc_generic_adc3074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rax, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD0, 0x51", "adc rax, 81");
}



#[test]
fn enc_generic_adc3075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rcx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD1, 0x76", "adc rcx, 118");
}



#[test]
fn enc_generic_adc3076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adc rbx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD3, 0x04", "adc rbx, 4");
}



#[test]
fn enc_generic_adcx3077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adcx rcx, [rax]");
}



#[test]
fn enc_generic_adcx3078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0xC8", "adcx rcx, rax");
}



#[test]
fn enc_generic_adcx3079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adcx rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x38, 0xF6, 0x00", "adcx rax, [rax]");
}



#[test]
fn enc_generic_add3080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC0", "add rax, rax");
}



#[test]
fn enc_generic_add3081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add eax, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC0, 0x2F", "add eax, 47");
}



#[test]
fn enc_generic_add3082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x72", "add rax, 114");
}



#[test]
fn enc_generic_add3083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add ax, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC0, 0x5C", "add ax, 92");
}



#[test]
fn enc_generic_add3084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x60", "add rax, 96");
}



#[test]
fn enc_generic_add3085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x30", "add rax, 48");
}



#[test]
fn enc_generic_add3086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x15", "add rcx, 21");
}



#[test]
fn enc_generic_add3087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x60", "add rbx, 96");
}



#[test]
fn enc_generic_add3088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x55", "add rcx, 85");
}



#[test]
fn enc_generic_add3089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x6D", "add rcx, 109");
}



#[test]
fn enc_generic_add3090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x4E", "add rax, 78");
}



#[test]
fn enc_generic_add3091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC0", "add al, al");
}



#[test]
fn enc_generic_add3092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC9", "add cl, cl");
}



#[test]
fn enc_generic_add3093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD1", "add cl, dl");
}



#[test]
fn enc_generic_add3094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC2", "add dl, al");
}



#[test]
fn enc_generic_add3095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xD2", "add dl, dl");
}



#[test]
fn enc_generic_add3096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x02, 0x08", "add cl, BYTE [rax]");
}



#[test]
fn enc_generic_add3097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC1", "add cl, al");
}



#[test]
fn enc_generic_add3098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0xC0", "add al, al");
}



#[test]
fn enc_generic_add3099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x22", "add BYTE [rax], 34");
}



#[test]
fn enc_generic_add3100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x00, 0x6C", "add BYTE [rax], 108");
}



#[test]
fn enc_generic_add3101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x15", "add BYTE [rax * 2 + rdx], 21");
}



#[test]
fn enc_generic_add3102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x0F", "add BYTE [rax * 2 + rdx], 15");
}



#[test]
fn enc_generic_add3103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x04, 0x42, 0x5E", "add BYTE [rax * 2 + rdx], 94");
}



#[test]
fn enc_generic_add3104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x4B", "add al, 75");
}



#[test]
fn enc_generic_add3105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x2B", "add al, 43");
}



#[test]
fn enc_generic_add3106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x20", "add al, 32");
}



#[test]
fn enc_generic_add3107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x37", "add al, 55");
}



#[test]
fn enc_generic_add3108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add al, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x04, 0x5C", "add al, 92");
}



#[test]
fn enc_generic_add3109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC1, 0x77", "add rcx, 119");
}



#[test]
fn enc_generic_add3110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x6E", "add rbx, 110");
}



#[test]
fn enc_generic_add3111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x0C", "add rbx, 12");
}



#[test]
fn enc_generic_add3112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rax, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC0, 0x34", "add rax, 52");
}



#[test]
fn enc_generic_add3113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC3, 0x56", "add rbx, 86");
}



#[test]
fn enc_generic_add3114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xCA", "add rdx, rcx");
}



#[test]
fn enc_generic_add3115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x18", "add rbx, QWORD [rax]");
}



#[test]
fn enc_generic_add3116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x01, 0xC9", "add rcx, rcx");
}



#[test]
fn enc_generic_add3117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x08", "add rcx, QWORD [rax]");
}



#[test]
fn enc_generic_add3118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x03, 0x1C, 0x42", "add rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_add3119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x48, 0x10", "add BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_add3120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x00", "add BYTE [rax], al");
}



#[test]
fn enc_generic_add3121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x50, 0x10", "add BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_add3122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x00, 0x04, 0x42", "add BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_add3123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x56", "add dl, 86");
}



#[test]
fn enc_generic_add3124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add cl, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC1, 0x4D", "add cl, 77");
}



#[test]
fn enc_generic_add3125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x43", "add dl, 67");
}



#[test]
fn enc_generic_add3126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x5B", "add dl, 91");
}



#[test]
fn enc_generic_add3127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; add dl, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC2, 0x68", "add dl, 104");
}



#[test]
fn enc_generic_adox3128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x10", "adox rdx, [rax]");
}



#[test]
fn enc_generic_adox3129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xC8", "adox rcx, rax");
}



#[test]
fn enc_generic_adox3130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0xC0", "adox rax, rax");
}



#[test]
fn enc_generic_adox3131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; adox rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x38, 0xF6, 0x08", "adox rcx, [rax]");
}



#[test]
fn enc_generic_and3132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xC0", "and rax, rax");
}



#[test]
fn enc_generic_and3133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD0", "and al, dl");
}



#[test]
fn enc_generic_and3134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC8", "and al, cl");
}



#[test]
fn enc_generic_and3135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC0", "and al, al");
}



#[test]
fn enc_generic_and3136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xD1", "and cl, dl");
}



#[test]
fn enc_generic_and3137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x12", "and al, 18");
}



#[test]
fn enc_generic_and3138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x37", "and dl, 55");
}



#[test]
fn enc_generic_and3139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE2, 0x4C", "and dl, 76");
}



#[test]
fn enc_generic_and3140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x6F", "and al, 111");
}



#[test]
fn enc_generic_and3141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x27", "and al, 39");
}



#[test]
fn enc_generic_and3142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x10", "and BYTE [rax], dl");
}



#[test]
fn enc_generic_and3143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x40, 0x10", "and BYTE [rax + 16], al");
}



#[test]
fn enc_generic_and3144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x08", "and BYTE [rax], cl");
}



#[test]
fn enc_generic_and3145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0x0C, 0x42", "and BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_and3146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x1F", "and BYTE [rax], 31");
}



#[test]
fn enc_generic_and3147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax + 16], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x60, 0x10, 0x5F", "and BYTE [rax + 16], 95");
}



#[test]
fn enc_generic_and3148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x70", "and BYTE [rax], 112");
}



#[test]
fn enc_generic_and3149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax], 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x20, 0x6E", "and BYTE [rax], 110");
}



#[test]
fn enc_generic_and3150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and BYTE [rax * 2 + rdx], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x24, 0x42, 0x5A", "and BYTE [rax * 2 + rdx], 90");
}



#[test]
fn enc_generic_and3151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x4F", "and rbx, 79");
}



#[test]
fn enc_generic_and3152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x39", "and rax, 57");
}



#[test]
fn enc_generic_and3153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x26", "and rdx, 38");
}



#[test]
fn enc_generic_and3154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE1, 0x26", "and rcx, 38");
}



#[test]
fn enc_generic_and3155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x57", "and rdx, 87");
}



#[test]
fn enc_generic_and3156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x63", "and al, 99");
}



#[test]
fn enc_generic_and3157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x1C", "and al, 28");
}



#[test]
fn enc_generic_and3158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x3F", "and al, 63");
}



#[test]
fn enc_generic_and3159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x3C", "and al, 60");
}



#[test]
fn enc_generic_and3160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and al, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x24, 0x41", "and al, 65");
}



#[test]
fn enc_generic_and3161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x08", "and cl, BYTE [rax]");
}



#[test]
fn enc_generic_and3162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x20, 0xC1", "and cl, al");
}



#[test]
fn enc_generic_and3163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x22, 0x10", "and dl, BYTE [rax]");
}



#[test]
fn enc_generic_and3164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x14, 0x42", "and rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_and3165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x00", "and rax, QWORD [rax]");
}



#[test]
fn enc_generic_and3166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x10", "and rdx, QWORD [rax]");
}



#[test]
fn enc_generic_and3167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x21, 0xCB", "and rbx, rcx");
}



#[test]
fn enc_generic_and3168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x23, 0x08", "and rcx, QWORD [rax]");
}



#[test]
fn enc_generic_and3169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and ax, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE0, 0x39", "and ax, 57");
}



#[test]
fn enc_generic_and3170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x62", "and eax, 98");
}



#[test]
fn enc_generic_and3171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rax, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE0, 0x0C", "and rax, 12");
}



#[test]
fn enc_generic_and3172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x7C", "and eax, 124");
}



#[test]
fn enc_generic_and3173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and eax, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE0, 0x1F", "and eax, 31");
}



#[test]
fn enc_generic_and3174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x2A", "and rbx, 42");
}



#[test]
fn enc_generic_and3175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x3D", "and rdx, 61");
}



#[test]
fn enc_generic_and3176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x7D", "and rdx, 125");
}



#[test]
fn enc_generic_and3177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rbx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE3, 0x25", "and rbx, 37");
}



#[test]
fn enc_generic_and3178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; and rdx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE2, 0x51", "and rdx, 81");
}



#[test]
fn enc_generic_bsf3179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x00", "bsf rax, QWORD [rax]");
}



#[test]
fn enc_generic_bsf3180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0xD1", "bsf rdx, rcx");
}



#[test]
fn enc_generic_bsf3181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x1C, 0x42", "bsf rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsf3182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsf rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBC, 0x0C, 0x42", "bsf rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsr3183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x0C, 0x42", "bsr rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsr3184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x10", "bsr rdx, QWORD [rax]");
}



#[test]
fn enc_generic_bsr3185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x14, 0x42", "bsr rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_bsr3186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0xC1", "bsr rax, rcx");
}



#[test]
fn enc_generic_bsr3187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bsr rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBD, 0x00", "bsr rax, QWORD [rax]");
}



#[test]
fn enc_generic_bswap3188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC8", "bswap rax");
}



#[test]
fn enc_generic_bswap3189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bswap rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC9", "bswap rcx");
}



#[test]
fn enc_generic_bt3190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xD1", "bt rcx, rdx");
}



#[test]
fn enc_generic_bt3191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0xD9", "bt rcx, rbx");
}



#[test]
fn enc_generic_bt3192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x10", "bt QWORD [rax], rdx");
}



#[test]
fn enc_generic_bt3193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x0C, 0x42", "bt QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_generic_bt3194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA3, 0x04, 0x42", "bt QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_generic_bt3195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x67", "bt QWORD [rax], 103");
}



#[test]
fn enc_generic_bt3196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax * 2 + rdx], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x24, 0x42, 0x14", "bt QWORD [rax * 2 + rdx], 20");
}



#[test]
fn enc_generic_bt3197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x7E", "bt QWORD [rax], 126");
}



#[test]
fn enc_generic_bt3198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x72", "bt QWORD [rax], 114");
}



#[test]
fn enc_generic_bt3199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bt QWORD [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0x20, 0x02", "bt QWORD [rax], 2");
}



#[test]
fn enc_generic_btc3200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBB, 0xC0", "btc rax, rax");
}



#[test]
fn enc_generic_btc3201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x57", "btc rdx, 87");
}



#[test]
fn enc_generic_btc3202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rdx, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFA, 0x41", "btc rdx, 65");
}



#[test]
fn enc_generic_btc3203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rax, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF8, 0x45", "btc rax, 69");
}



#[test]
fn enc_generic_btc3204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x04", "btc rbx, 4");
}



#[test]
fn enc_generic_btc3205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btc rbx, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xFB, 0x13", "btc rbx, 19");
}



#[test]
fn enc_generic_btr3206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB3, 0xC0", "btr rax, rax");
}



#[test]
fn enc_generic_btr3207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x0F", "btr rax, 15");
}



#[test]
fn enc_generic_btr3208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rcx, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF1, 0x10", "btr rcx, 16");
}



#[test]
fn enc_generic_btr3209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rax, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF0, 0x7C", "btr rax, 124");
}



#[test]
fn enc_generic_btr3210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rcx, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF1, 0x0E", "btr rcx, 14");
}



#[test]
fn enc_generic_btr3211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; btr rcx, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xF1, 0x72", "btr rcx, 114");
}



#[test]
fn enc_generic_bts3212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE8, 0x33", "bts rax, 51");
}



#[test]
fn enc_generic_bts3213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x53", "bts rcx, 83");
}



#[test]
fn enc_generic_bts3214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x4D", "bts rcx, 77");
}



#[test]
fn enc_generic_bts3215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rcx, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xE9, 0x7A", "bts rcx, 122");
}



#[test]
fn enc_generic_bts3216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rdx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBA, 0xEA, 0x1B", "bts rdx, 27");
}



#[test]
fn enc_generic_bts3217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; bts rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAB, 0xC0", "bts rax, rax");
}



#[test]
fn enc_generic_cbw3218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cbw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x98", "cbw");
}



#[test]
fn enc_generic_cdq3219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x99", "cdq");
}



#[test]
fn enc_generic_cdqe3220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cdqe
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x98", "cdqe");
}



#[test]
fn enc_generic_clac3221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCA", "clac");
}



#[test]
fn enc_generic_clc3222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF8", "clc");
}



#[test]
fn enc_generic_cld3223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cld
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFC", "cld");
}



#[test]
fn enc_generic_cli3224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cli
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFA", "cli");
}



#[test]
fn enc_generic_clts3225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clts
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x06", "clts");
}



#[test]
fn enc_generic_cmc3226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF5", "cmc");
}



#[test]
fn enc_generic_cmp3227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3C, 0x62", "cmp al, 98");
}



#[test]
fn enc_generic_cmp3228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3C, 0x50", "cmp al, 80");
}



#[test]
fn enc_generic_cmp3229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3C, 0x0A", "cmp al, 10");
}



#[test]
fn enc_generic_cmp3230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3C, 0x69", "cmp al, 105");
}



#[test]
fn enc_generic_cmp3231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3C, 0x5B", "cmp al, 91");
}



#[test]
fn enc_generic_cmp3232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0x10", "cmp QWORD [rax], rdx");
}



#[test]
fn enc_generic_cmp3233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0x08", "cmp QWORD [rax], rcx");
}



#[test]
fn enc_generic_cmp3234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0xD9", "cmp rcx, rbx");
}



#[test]
fn enc_generic_cmp3235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0xC1", "cmp rcx, rax");
}



#[test]
fn enc_generic_cmp3236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0x18", "cmp QWORD [rax], rbx");
}



#[test]
fn enc_generic_cmp3237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x38, 0xC8", "cmp al, cl");
}



#[test]
fn enc_generic_cmp3238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x38, 0xD0", "cmp al, dl");
}



#[test]
fn enc_generic_cmp3239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x38, 0xC0", "cmp al, al");
}



#[test]
fn enc_generic_cmp3240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x38, 0x00", "cmp BYTE [rax], al");
}



#[test]
fn enc_generic_cmp3241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax * 2 + rdx], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0x3C, 0x42, 0x68", "cmp QWORD [rax * 2 + rdx], 104");
}



#[test]
fn enc_generic_cmp3242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax], 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0x38, 0x1A", "cmp QWORD [rax], 26");
}



#[test]
fn enc_generic_cmp3243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0x38, 0x21", "cmp QWORD [rax], 33");
}



#[test]
fn enc_generic_cmp3244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF9, 0x17", "cmp rcx, 23");
}



#[test]
fn enc_generic_cmp3245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax * 2 + rdx], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0x3C, 0x42, 0x20", "cmp QWORD [rax * 2 + rdx], 32");
}



#[test]
fn enc_generic_cmp3246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0xC8", "cmp rax, rcx");
}



#[test]
fn enc_generic_cmp3247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x3B, 0x14, 0x42", "cmp rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_cmp3248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x3B, 0x04, 0x42", "cmp rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_cmp3249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x39, 0xC9", "cmp rcx, rcx");
}



#[test]
fn enc_generic_cmp3250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp BYTE [rax], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x38, 0x7A", "cmp BYTE [rax], 122");
}



#[test]
fn enc_generic_cmp3251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp BYTE [rax], 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x38, 0x3C", "cmp BYTE [rax], 60");
}



#[test]
fn enc_generic_cmp3252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x38, 0x25", "cmp BYTE [rax], 37");
}



#[test]
fn enc_generic_cmp3253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3C, 0x2D", "cmp al, 45");
}



#[test]
fn enc_generic_cmp3254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp BYTE [rax], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x38, 0x2A", "cmp BYTE [rax], 42");
}



#[test]
fn enc_generic_cmp3255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rax, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF8, 0x1E", "cmp rax, 30");
}



#[test]
fn enc_generic_cmp3256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp eax, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF8, 0x73", "cmp eax, 115");
}



#[test]
fn enc_generic_cmp3257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp ax, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF8, 0x0C", "cmp ax, 12");
}



#[test]
fn enc_generic_cmp3258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rax, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF8, 0x6D", "cmp rax, 109");
}



#[test]
fn enc_generic_cmp3259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp ax, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF8, 0x79", "cmp ax, 121");
}



#[test]
fn enc_generic_cmp3260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF9, 0x23", "cmp rcx, 35");
}



#[test]
fn enc_generic_cmp3261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF9, 0x43", "cmp rcx, 67");
}



#[test]
fn enc_generic_cmp3262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp rcx, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF9, 0x58", "cmp rcx, 88");
}



#[test]
fn enc_generic_cmp3263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax * 2 + rdx], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0x3C, 0x42, 0x7D", "cmp QWORD [rax * 2 + rdx], 125");
}



#[test]
fn enc_generic_cmp3264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp QWORD [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0x3C, 0x42, 0x39", "cmp QWORD [rax * 2 + rdx], 57");
}



#[test]
fn enc_generic_cmp3265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x38, 0xC0", "cmp al, al");
}



#[test]
fn enc_generic_cmp3266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x3A, 0x08", "cmp cl, BYTE [rax]");
}



#[test]
fn enc_generic_cmp3267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmp cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x38, 0xC1", "cmp cl, al");
}



#[test]
fn enc_generic_cmpsb3268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA6", "cmpsb");
}



#[test]
fn enc_generic_cmpsd3269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA7", "cmpsd");
}



#[test]
fn enc_generic_cmpsq3270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA7", "cmpsq");
}



#[test]
fn enc_generic_cmpsw3271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA7", "cmpsw");
}



#[test]
fn enc_generic_cmpxchg3272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0xC0", "cmpxchg al, al");
}



#[test]
fn enc_generic_cmpxchg3273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0xC1", "cmpxchg cl, al");
}



#[test]
fn enc_generic_cmpxchg3274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0xD1", "cmpxchg cl, dl");
}



#[test]
fn enc_generic_cmpxchg3275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB1, 0xC0", "cmpxchg rax, rax");
}



#[test]
fn enc_generic_cmpxchg3276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0x00", "cmpxchg BYTE [rax], al");
}



#[test]
fn enc_generic_cmpxchg3277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0x50, 0x10", "cmpxchg BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_cmpxchg3278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0x10", "cmpxchg BYTE [rax], dl");
}



#[test]
fn enc_generic_cmpxchg3279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xB0, 0x0C, 0x42", "cmpxchg BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_cmpxchg16b3280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg16b OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x48, 0x10", "cmpxchg16b OWORD [rax + 16]");
}



#[test]
fn enc_generic_cmpxchg16b3281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg16b OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x08", "cmpxchg16b OWORD [rax]");
}



#[test]
fn enc_generic_cmpxchg8b3282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg8b QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x48, 0x10", "cmpxchg8b QWORD [rax + 16]");
}



#[test]
fn enc_generic_cmpxchg8b3283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg8b QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x08", "cmpxchg8b QWORD [rax]");
}



#[test]
fn enc_generic_cmpxchg8b3284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpxchg8b QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x0C, 0x42", "cmpxchg8b QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_cpuid3285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cpuid
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA2", "cpuid");
}



#[test]
fn enc_generic_cqo3286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cqo
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x99", "cqo");
}



#[test]
fn enc_generic_cwd3287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x99", "cwd");
}



#[test]
fn enc_generic_cwde3288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cwde
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x98", "cwde");
}



#[test]
fn enc_generic_dec3289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xCB", "dec rbx");
}



#[test]
fn enc_generic_dec3290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC8", "dec rax");
}



#[test]
fn enc_generic_dec3291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x48, 0x10", "dec BYTE [rax + 16]");
}



#[test]
fn enc_generic_dec3292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xCA", "dec dl");
}



#[test]
fn enc_generic_dec3293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC9", "dec cl");
}



#[test]
fn enc_generic_dec3294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dec al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC8", "dec al");
}



#[test]
fn enc_generic_div3295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF0", "div al");
}



#[test]
fn enc_generic_div3296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x30", "div BYTE [rax]");
}



#[test]
fn enc_generic_div3297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x30", "div QWORD [rax]");
}



#[test]
fn enc_generic_div3298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; div QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x34, 0x42", "div QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_enter3299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 15909, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x25, 0x3E, 0x29", "enter 15909, 41");
}



#[test]
fn enc_generic_enter3300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 7850, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0xAA, 0x1E, 0x0B", "enter 7850, 11");
}



#[test]
fn enc_generic_enter3301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 1385, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x69, 0x05, 0x61", "enter 1385, 97");
}



#[test]
fn enc_generic_enter3302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 4218, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x7A, 0x10, 0x74", "enter 4218, 116");
}



#[test]
fn enc_generic_enter3303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; enter 4386, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC8, 0x22, 0x11, 0x3D", "enter 4386, 61");
}



#[test]
fn enc_generic_fwait3304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; fwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9B", "fwait");
}



#[test]
fn enc_generic_getsec3305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; getsec
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x37", "getsec");
}



#[test]
fn enc_generic_hlt3306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hlt
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF4", "hlt");
}



#[test]
fn enc_generic_icebp3307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; icebp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "icebp");
}



#[test]
fn enc_generic_idiv3308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x38", "idiv BYTE [rax]");
}



#[test]
fn enc_generic_idiv3309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xF8", "idiv al");
}



#[test]
fn enc_generic_idiv3310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xF9", "idiv rcx");
}



#[test]
fn enc_generic_idiv3311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; idiv QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x3C, 0x42", "idiv QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_inc3312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC0", "inc al");
}



#[test]
fn enc_generic_inc3313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0xC2", "inc dl");
}



#[test]
fn enc_generic_inc3314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x40, 0x10", "inc BYTE [rax + 16]");
}



#[test]
fn enc_generic_inc3315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFE, 0x00", "inc BYTE [rax]");
}



#[test]
fn enc_generic_inc3316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC2", "inc rdx");
}



#[test]
fn enc_generic_inc3317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC3", "inc rbx");
}



#[test]
fn enc_generic_inc3318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; inc rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xFF, 0xC0", "inc rax");
}



#[test]
fn enc_generic_insb3319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6C", "insb");
}



#[test]
fn enc_generic_insd3320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6D", "insd");
}



#[test]
fn enc_generic_insw3321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6D", "insw");
}



#[test]
fn enc_generic_int3322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x08", "int 8");
}



#[test]
fn enc_generic_int3323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x6D", "int 109");
}



#[test]
fn enc_generic_int3324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x52", "int 82");
}



#[test]
fn enc_generic_int3325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x59", "int 89");
}



#[test]
fn enc_generic_int3326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCD, 0x70", "int 112");
}



#[test]
fn enc_generic_int013327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int01
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int01");
}



#[test]
fn enc_generic_int033328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int03
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int03");
}



#[test]
fn enc_generic_int13329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF1", "int1");
}



#[test]
fn enc_generic_int33330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; int3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCC", "int3");
}



#[test]
fn enc_generic_invd3331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x08", "invd");
}



#[test]
fn enc_generic_invlpg3332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invlpg [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x38", "invlpg [rax]");
}



#[test]
fn enc_generic_iret3333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iret");
}



#[test]
fn enc_generic_iretd3334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCF", "iretd");
}



#[test]
fn enc_generic_iretq3335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xCF", "iretq");
}



#[test]
fn enc_generic_iretw3336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; iretw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xCF", "iretw");
}



#[test]
fn enc_generic_lahf3337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9F", "lahf");
}



#[test]
fn enc_generic_lar3338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0xC0", "lar rax, rax");
}



#[test]
fn enc_generic_lar3339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rdx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x50, 0x10", "lar rdx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lar3340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x10", "lar rdx, WORD [rax]");
}



#[test]
fn enc_generic_lar3341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rax, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x04, 0x42", "lar rax, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lar3342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rdx, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x14, 0x42", "lar rdx, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lar3343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lar rbx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x02, 0x58, 0x10", "lar rbx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lea3344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x00", "lea rax, [rax]");
}



#[test]
fn enc_generic_lea3345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x10", "lea rdx, [rax]");
}



#[test]
fn enc_generic_lea3346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lea rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x8D, 0x18", "lea rbx, [rax]");
}



#[test]
fn enc_generic_leave3347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; leave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC9", "leave");
}



#[test]
fn enc_generic_lfs3348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x10", "lfs rdx, [rax]");
}



#[test]
fn enc_generic_lfs3349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x00", "lfs rax, [rax]");
}



#[test]
fn enc_generic_lfs3350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x18", "lfs rbx, [rax]");
}



#[test]
fn enc_generic_lfs3351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lfs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB4, 0x08", "lfs rcx, [rax]");
}



#[test]
fn enc_generic_lgdt3352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x10", "lgdt [rax]");
}



#[test]
fn enc_generic_lgs3353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x18", "lgs rbx, [rax]");
}



#[test]
fn enc_generic_lgs3354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x10", "lgs rdx, [rax]");
}



#[test]
fn enc_generic_lgs3355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lgs rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB5, 0x08", "lgs rcx, [rax]");
}



#[test]
fn enc_generic_lidt3356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x18", "lidt [rax]");
}



#[test]
fn enc_generic_lldt3357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x10", "lldt [rax]");
}



#[test]
fn enc_generic_lldt3358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD0", "lldt ax");
}



#[test]
fn enc_generic_lldt3359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD1", "lldt cx");
}



#[test]
fn enc_generic_lldt3360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lldt dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD2", "lldt dx");
}



#[test]
fn enc_generic_lmsw3361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x30", "lmsw [rax]");
}



#[test]
fn enc_generic_lmsw3362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF1", "lmsw cx");
}



#[test]
fn enc_generic_lmsw3363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF2", "lmsw dx");
}



#[test]
fn enc_generic_lmsw3364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lmsw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF0", "lmsw ax");
}



#[test]
fn enc_generic_lodsb3365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAC", "lodsb");
}



#[test]
fn enc_generic_lodsd3366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAD", "lodsd");
}



#[test]
fn enc_generic_lodsq3367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAD", "lodsq");
}



#[test]
fn enc_generic_lodsw3368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lodsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAD", "lodsw");
}



#[test]
fn enc_generic_lsl3369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0xC0", "lsl rax, rax");
}



#[test]
fn enc_generic_lsl3370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rdx, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x50, 0x10", "lsl rdx, WORD [rax + 16]");
}



#[test]
fn enc_generic_lsl3371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rbx, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x1C, 0x42", "lsl rbx, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_lsl3372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rbx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x18", "lsl rbx, WORD [rax]");
}



#[test]
fn enc_generic_lsl3373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lsl rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x03, 0x08", "lsl rcx, WORD [rax]");
}



#[test]
fn enc_generic_lss3374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rbx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x18", "lss rbx, [rax]");
}



#[test]
fn enc_generic_lss3375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rax, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x00", "lss rax, [rax]");
}



#[test]
fn enc_generic_lss3376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lss rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB2, 0x08", "lss rcx, [rax]");
}



#[test]
fn enc_generic_ltr3377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x18", "ltr [rax]");
}



#[test]
fn enc_generic_ltr3378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD9", "ltr cx");
}



#[test]
fn enc_generic_ltr3379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xDA", "ltr dx");
}



#[test]
fn enc_generic_ltr3380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ltr ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xD8", "ltr ax");
}



#[test]
fn enc_generic_monitor3381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor rax, ecx, edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor rax, ecx, edx");
}



#[test]
fn enc_generic_monitor3382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; monitor
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC8", "monitor");
}



#[test]
fn enc_generic_movnti3383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax * 2 + rdx], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x04, 0x42", "movnti QWORD [rax * 2 + rdx], rax");
}



#[test]
fn enc_generic_movnti3384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax + 16], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x50, 0x10", "movnti QWORD [rax + 16], rdx");
}



#[test]
fn enc_generic_movnti3385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax * 2 + rdx], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x0C, 0x42", "movnti QWORD [rax * 2 + rdx], rcx");
}



#[test]
fn enc_generic_movnti3386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti QWORD [rax + 16], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC3, 0x48, 0x10", "movnti QWORD [rax + 16], rcx");
}



#[test]
fn enc_generic_movnti3387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax + 16], ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x48, 0x10", "movnti DWORD [rax + 16], ecx");
}



#[test]
fn enc_generic_movnti3388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax + 16], eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x40, 0x10", "movnti DWORD [rax + 16], eax");
}



#[test]
fn enc_generic_movnti3389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax * 2 + rdx], eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x04, 0x42", "movnti DWORD [rax * 2 + rdx], eax");
}



#[test]
fn enc_generic_movnti3390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax + 16], edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x50, 0x10", "movnti DWORD [rax + 16], edx");
}



#[test]
fn enc_generic_movnti3391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movnti DWORD [rax], edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC3, 0x10", "movnti DWORD [rax], edx");
}



#[test]
fn enc_generic_movsb3392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA4", "movsb");
}



#[test]
fn enc_generic_movsd3393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA5", "movsd");
}



#[test]
fn enc_generic_movsq3394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xA5", "movsq");
}



#[test]
fn enc_generic_movsw3395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA5", "movsw");
}



#[test]
fn enc_generic_movsx3396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0x18", "movsx rbx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx3397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0xD8", "movsx rbx, al");
}



#[test]
fn enc_generic_movsx3398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBE, 0xD0", "movsx rdx, al");
}



#[test]
fn enc_generic_movsx3399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx dx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x10", "movsx dx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx3400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x08", "movsx cx, BYTE [rax]");
}



#[test]
fn enc_generic_movsx3401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x00", "movsx ax, BYTE [rax]");
}



#[test]
fn enc_generic_movsx3402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx ax, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xBE, 0x40, 0x10", "movsx ax, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movsx3403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rbx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0xD8", "movsx rbx, ax");
}



#[test]
fn enc_generic_movsx3404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x00", "movsx rax, WORD [rax]");
}



#[test]
fn enc_generic_movsx3405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x10", "movsx rdx, WORD [rax]");
}



#[test]
fn enc_generic_movsx3406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xBF, 0x08", "movsx rcx, WORD [rax]");
}



#[test]
fn enc_generic_movsx3407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x10", "movsx rdx, DWORD [rax]");
}



#[test]
fn enc_generic_movsx3408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsx rax, DWORD [rax]");
}



#[test]
fn enc_generic_movsx3409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsx rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsx rcx, DWORD [rax]");
}



#[test]
fn enc_generic_movsxd3410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rax, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0xC0", "movsxd rax, eax");
}



#[test]
fn enc_generic_movsxd3411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x08", "movsxd rcx, DWORD [rax]");
}



#[test]
fn enc_generic_movsxd3412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsxd rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x63, 0x00", "movsxd rax, DWORD [rax]");
}



#[test]
fn enc_generic_movzx3413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC8", "movzx rcx, ax");
}



#[test]
fn enc_generic_movzx3414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB7, 0xC0", "movzx rax, ax");
}



#[test]
fn enc_generic_movzx3415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x04, 0x42", "movzx ax, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_movzx3416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx ax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x00", "movzx ax, BYTE [rax]");
}



#[test]
fn enc_generic_movzx3417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx cx, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x48, 0x10", "movzx cx, BYTE [rax + 16]");
}



#[test]
fn enc_generic_movzx3418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx cx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xB6, 0x08", "movzx cx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx3419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xC8", "movzx rcx, al");
}



#[test]
fn enc_generic_movzx3420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rdx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xD0", "movzx rdx, al");
}



#[test]
fn enc_generic_movzx3421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rcx, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x08", "movzx rcx, BYTE [rax]");
}



#[test]
fn enc_generic_movzx3422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rax, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0x00", "movzx rax, BYTE [rax]");
}



#[test]
fn enc_generic_movzx3423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movzx rbx, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xB6, 0xD8", "movzx rbx, al");
}



#[test]
fn enc_generic_mul3424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xE1", "mul rcx");
}



#[test]
fn enc_generic_mul3425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x20", "mul QWORD [rax]");
}



#[test]
fn enc_generic_mul3426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xE0", "mul al");
}



#[test]
fn enc_generic_mul3427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mul BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x20", "mul BYTE [rax]");
}



#[test]
fn enc_generic_mwait3428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait");
}



#[test]
fn enc_generic_mwait3429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mwait eax, ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC9", "mwait eax, ecx");
}



#[test]
fn enc_generic_neg3430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x18", "neg BYTE [rax]");
}



#[test]
fn enc_generic_neg3431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x1C, 0x42", "neg BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_neg3432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x58, 0x10", "neg BYTE [rax + 16]");
}



#[test]
fn enc_generic_neg3433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD8", "neg al");
}



#[test]
fn enc_generic_neg3434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xDA", "neg dl");
}



#[test]
fn enc_generic_neg3435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD9", "neg rcx");
}



#[test]
fn enc_generic_neg3436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD8", "neg rax");
}



#[test]
fn enc_generic_neg3437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; neg rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xDA", "neg rdx");
}



#[test]
fn enc_generic_nop3438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x90", "nop");
}



#[test]
fn enc_generic_nop3439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; nop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x1F, 0x00", "nop QWORD [rax]");
}



#[test]
fn enc_generic_not3440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x50, 0x10", "not BYTE [rax + 16]");
}



#[test]
fn enc_generic_not3441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x14, 0x42", "not BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_not3442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD2", "not dl");
}



#[test]
fn enc_generic_not3443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD0", "not al");
}



#[test]
fn enc_generic_not3444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0xD1", "not cl");
}



#[test]
fn enc_generic_not3445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD0", "not rax");
}



#[test]
fn enc_generic_not3446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD1", "not rcx");
}



#[test]
fn enc_generic_not3447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; not rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xD2", "not rdx");
}



#[test]
fn enc_generic_or3448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x7A", "or rcx, 122");
}



#[test]
fn enc_generic_or3449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x2B", "or rdx, 43");
}



#[test]
fn enc_generic_or3450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x5A", "or rdx, 90");
}



#[test]
fn enc_generic_or3451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x28", "or rax, 40");
}



#[test]
fn enc_generic_or3452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x1B", "or rbx, 27");
}



#[test]
fn enc_generic_or3453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xCB", "or rbx, rcx");
}



#[test]
fn enc_generic_or3454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0B, 0x04, 0x42", "or rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_or3455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC9", "or rcx, rcx");
}



#[test]
fn enc_generic_or3456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x09, 0xC0", "or rax, rax");
}



#[test]
fn enc_generic_or3457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x2F", "or al, 47");
}



#[test]
fn enc_generic_or3458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x55", "or al, 85");
}



#[test]
fn enc_generic_or3459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x10", "or al, 16");
}



#[test]
fn enc_generic_or3460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x69", "or al, 105");
}



#[test]
fn enc_generic_or3461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x50", "or al, 80");
}



#[test]
fn enc_generic_or3462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x04, 0x42", "or BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_or3463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x50, 0x10", "or BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_or3464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x48, 0x10", "or BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_or3465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0x10", "or BYTE [rax], dl");
}



#[test]
fn enc_generic_or3466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn enc_generic_or3467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xD1", "or cl, dl");
}



#[test]
fn enc_generic_or3468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xD0", "or al, dl");
}



#[test]
fn enc_generic_or3469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC1", "or cl, al");
}



#[test]
fn enc_generic_or3470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x34", "or eax, 52");
}



#[test]
fn enc_generic_or3471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or ax, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xC8, 0x06", "or ax, 6");
}



#[test]
fn enc_generic_or3472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x69", "or eax, 105");
}



#[test]
fn enc_generic_or3473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x1B", "or eax, 27");
}



#[test]
fn enc_generic_or3474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or eax, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xC8, 0x1F", "or eax, 31");
}



#[test]
fn enc_generic_or3475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax + 16], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x48, 0x10, 0x1E", "or BYTE [rax + 16], 30");
}



#[test]
fn enc_generic_or3476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax * 2 + rdx], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x0C, 0x42, 0x2C", "or BYTE [rax * 2 + rdx], 44");
}



#[test]
fn enc_generic_or3477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x25", "or BYTE [rax], 37");
}



#[test]
fn enc_generic_or3478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x7D", "or BYTE [rax], 125");
}



#[test]
fn enc_generic_or3479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or BYTE [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x08, 0x30", "or BYTE [rax], 48");
}



#[test]
fn enc_generic_or3480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC0", "or al, al");
}



#[test]
fn enc_generic_or3481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x08, 0xC2", "or dl, al");
}



#[test]
fn enc_generic_or3482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0A, 0x10", "or dl, BYTE [rax]");
}



#[test]
fn enc_generic_or3483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x19", "or al, 25");
}



#[test]
fn enc_generic_or3484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or al, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0C, 0x56", "or al, 86");
}



#[test]
fn enc_generic_or3485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x1F", "or dl, 31");
}



#[test]
fn enc_generic_or3486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or dl, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xCA, 0x66", "or dl, 102");
}



#[test]
fn enc_generic_or3487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or cl, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xC9, 0x0E", "or cl, 14");
}



#[test]
fn enc_generic_or3488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x43", "or rbx, 67");
}



#[test]
fn enc_generic_or3489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rcx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC9, 0x04", "or rcx, 4");
}



#[test]
fn enc_generic_or3490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rbx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCB, 0x78", "or rbx, 120");
}



#[test]
fn enc_generic_or3491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rdx, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xCA, 0x4B", "or rdx, 75");
}



#[test]
fn enc_generic_or3492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; or rax, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xC8, 0x6E", "or rax, 110");
}



#[test]
fn enc_generic_outsb3493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6E", "outsb");
}



#[test]
fn enc_generic_outsd3494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6F", "outsd");
}



#[test]
fn enc_generic_outsw3495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; outsw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x6F", "outsw");
}



#[test]
fn enc_generic_pause3496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pause
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x90", "pause");
}



#[test]
fn enc_generic_pop3497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5B", "pop rbx");
}



#[test]
fn enc_generic_pop3498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x5A", "pop rdx");
}



#[test]
fn enc_generic_pop3499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn enc_generic_pop3500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x04, 0x42", "pop QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_pop3501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x59", "pop rcx");
}



#[test]
fn enc_generic_pop3502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x00", "pop QWORD [rax]");
}



#[test]
fn enc_generic_pop3503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA9", "pop gs");
}



#[test]
fn enc_generic_pop3504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pop fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA1", "pop fs");
}



#[test]
fn enc_generic_popcnt3505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x1C, 0x42", "popcnt rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_popcnt3506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0x10", "popcnt rdx, QWORD [rax]");
}



#[test]
fn enc_generic_popcnt3507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xC9", "popcnt rcx, rcx");
}



#[test]
fn enc_generic_popcnt3508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD9", "popcnt rbx, rcx");
}



#[test]
fn enc_generic_popcnt3509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popcnt rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xB8, 0xD1", "popcnt rdx, rcx");
}



#[test]
fn enc_generic_popf3510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popf");
}



#[test]
fn enc_generic_popfq3511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9D", "popfq");
}



#[test]
fn enc_generic_popfw3512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; popfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9D", "popfw");
}



#[test]
fn enc_generic_prefetchnta3513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x00", "prefetchnta BYTE [rax]");
}



#[test]
fn enc_generic_prefetchnta3514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchnta BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x40, 0x10", "prefetchnta BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht03515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x48, 0x10", "prefetcht0 BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht03516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht0 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x0C, 0x42", "prefetcht0 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht13517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x10", "prefetcht1 BYTE [rax]");
}



#[test]
fn enc_generic_prefetcht13518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x50, 0x10", "prefetcht1 BYTE [rax + 16]");
}



#[test]
fn enc_generic_prefetcht13519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht1 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x14, 0x42", "prefetcht1 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht23520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x1C, 0x42", "prefetcht2 BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_prefetcht23521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetcht2 BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x18, 0x18", "prefetcht2 BYTE [rax]");
}



#[test]
fn enc_generic_push3522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push gs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA8", "push gs");
}



#[test]
fn enc_generic_push3523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push fs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xA0", "push fs");
}



#[test]
fn enc_generic_push3524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x53", "push rbx");
}



#[test]
fn enc_generic_push3525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x50", "push rax");
}



#[test]
fn enc_generic_push3526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn enc_generic_push3527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x51", "push rcx");
}



#[test]
fn enc_generic_push3528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFF, 0x30", "push QWORD [rax]");
}



#[test]
fn enc_generic_push3529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x0F", "push 15");
}



#[test]
fn enc_generic_push3530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x63", "push 99");
}



#[test]
fn enc_generic_push3531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x42", "push 66");
}



#[test]
fn enc_generic_push3532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x2C", "push 44");
}



#[test]
fn enc_generic_push3533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x50", "push 80");
}



#[test]
fn enc_generic_push3534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x74", "push 116");
}



#[test]
fn enc_generic_push3535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x7E", "push 126");
}



#[test]
fn enc_generic_push3536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x71", "push 113");
}



#[test]
fn enc_generic_push3537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x31", "push 49");
}



#[test]
fn enc_generic_push3538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; push 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x6A, 0x5B", "push 91");
}



#[test]
fn enc_generic_pushf3539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushf");
}



#[test]
fn enc_generic_pushfq3540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9C", "pushfq");
}



#[test]
fn enc_generic_pushfw3541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pushfw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x9C", "pushfw");
}



#[test]
fn enc_generic_rcl3542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x35", "rcl rcx, 53");
}



#[test]
fn enc_generic_rcl3543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x10, 0x15", "rcl QWORD [rax], 21");
}



#[test]
fn enc_generic_rcl3544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x10, 0x74", "rcl QWORD [rax], 116");
}



#[test]
fn enc_generic_rcl3545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x10, 0x31", "rcl QWORD [rax], 49");
}



#[test]
fn enc_generic_rcl3546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD1, 0x60", "rcl rcx, 96");
}



#[test]
fn enc_generic_rcl3547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x10", "rcl BYTE [rax], cl");
}



#[test]
fn enc_generic_rcl3548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD0", "rcl al, cl");
}



#[test]
fn enc_generic_rcl3549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD1", "rcl rcx, cl");
}



#[test]
fn enc_generic_rcl3550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x14, 0x42", "rcl QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rcl3551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x10", "rcl QWORD [rax], cl");
}



#[test]
fn enc_generic_rcl3552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x1C", "rcl BYTE [rax], 28");
}



#[test]
fn enc_generic_rcl3553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl al, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD0, 0x12", "rcl al, 18");
}



#[test]
fn enc_generic_rcl3554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x35", "rcl BYTE [rax], 53");
}



#[test]
fn enc_generic_rcl3555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x25", "rcl BYTE [rax], 37");
}



#[test]
fn enc_generic_rcl3556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcl BYTE [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x10, 0x26", "rcl BYTE [rax], 38");
}



#[test]
fn enc_generic_rcr3557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x18", "rcr BYTE [rax], cl");
}



#[test]
fn enc_generic_rcr3558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xD8", "rcr al, cl");
}



#[test]
fn enc_generic_rcr3559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xD9", "rcr rcx, cl");
}



#[test]
fn enc_generic_rcr3560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x1C, 0x42", "rcr QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rcr3561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x18", "rcr QWORD [rax], cl");
}



#[test]
fn enc_generic_rcr3562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x10", "rcr BYTE [rax], 16");
}



#[test]
fn enc_generic_rcr3563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x41", "rcr BYTE [rax], 65");
}



#[test]
fn enc_generic_rcr3564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr al, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xD8, 0x6E", "rcr al, 110");
}



#[test]
fn enc_generic_rcr3565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x4E", "rcr BYTE [rax], 78");
}



#[test]
fn enc_generic_rcr3566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr BYTE [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x18, 0x52", "rcr BYTE [rax], 82");
}



#[test]
fn enc_generic_rcr3567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x7D", "rcr QWORD [rax], 125");
}



#[test]
fn enc_generic_rcr3568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x6C", "rcr rcx, 108");
}



#[test]
fn enc_generic_rcr3569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x60", "rcr QWORD [rax], 96");
}



#[test]
fn enc_generic_rcr3570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr QWORD [rax], 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x18, 0x3D", "rcr QWORD [rax], 61");
}



#[test]
fn enc_generic_rcr3571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcr rcx, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xD9, 0x37", "rcr rcx, 55");
}



#[test]
fn enc_generic_rdfsbase3572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC2", "rdfsbase rdx");
}



#[test]
fn enc_generic_rdfsbase3573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC1", "rdfsbase rcx");
}



#[test]
fn enc_generic_rdfsbase3574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC0", "rdfsbase rax");
}



#[test]
fn enc_generic_rdfsbase3575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC2", "rdfsbase edx");
}



#[test]
fn enc_generic_rdfsbase3576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC1", "rdfsbase ecx");
}



#[test]
fn enc_generic_rdfsbase3577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdfsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC0", "rdfsbase eax");
}



#[test]
fn enc_generic_rdgsbase3578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC9", "rdgsbase rcx");
}



#[test]
fn enc_generic_rdgsbase3579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xC8", "rdgsbase rax");
}



#[test]
fn enc_generic_rdgsbase3580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xCA", "rdgsbase rdx");
}



#[test]
fn enc_generic_rdgsbase3581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC8", "rdgsbase eax");
}



#[test]
fn enc_generic_rdgsbase3582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xC9", "rdgsbase ecx");
}



#[test]
fn enc_generic_rdgsbase3583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdgsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xCA", "rdgsbase edx");
}



#[test]
fn enc_generic_rdmsr3584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x32", "rdmsr");
}



#[test]
fn enc_generic_rdpid3585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xFA", "rdpid rdx");
}



#[test]
fn enc_generic_rdpid3586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF9", "rdpid rcx");
}



#[test]
fn enc_generic_rdpid3587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpid rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0xF8", "rdpid rax");
}



#[test]
fn enc_generic_rdpkru3588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEE", "rdpkru");
}



#[test]
fn enc_generic_rdpmc3589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdpmc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x33", "rdpmc");
}



#[test]
fn enc_generic_rdrand3590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF1", "rdrand rcx");
}



#[test]
fn enc_generic_rdrand3591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF2", "rdrand rdx");
}



#[test]
fn enc_generic_rdrand3592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdrand rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF0", "rdrand rax");
}



#[test]
fn enc_generic_rdseed3593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xFA", "rdseed rdx");
}



#[test]
fn enc_generic_rdseed3594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF9", "rdseed rcx");
}



#[test]
fn enc_generic_rdseed3595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdseed rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0xF8", "rdseed rax");
}



#[test]
fn enc_generic_rdtsc3596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtsc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x31", "rdtsc");
}



#[test]
fn enc_generic_rdtscp3597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rdtscp
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF9", "rdtscp");
}



#[test]
fn enc_generic_ret3598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 10888
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x88, 0x2A", "ret 10888");
}



#[test]
fn enc_generic_ret3599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 8412
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xDC, 0x20", "ret 8412");
}



#[test]
fn enc_generic_ret3600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 3674
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x5A, 0x0E", "ret 3674");
}



#[test]
fn enc_generic_ret3601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 1362
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x52, 0x05", "ret 1362");
}



#[test]
fn enc_generic_ret3602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret 1171
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x93, 0x04", "ret 1171");
}



#[test]
fn enc_generic_ret3603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ret
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "ret");
}



#[test]
fn enc_generic_retf3604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCB", "retf");
}



#[test]
fn enc_generic_retf3605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 6609
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0xD1, 0x19", "retf 6609");
}



#[test]
fn enc_generic_retf3606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 9486
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x0E, 0x25", "retf 9486");
}



#[test]
fn enc_generic_retf3607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 12139
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x6B, 0x2F", "retf 12139");
}



#[test]
fn enc_generic_retf3608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 7304
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x88, 0x1C", "retf 7304");
}



#[test]
fn enc_generic_retf3609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retf 6178
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xCA, 0x22, 0x18", "retf 6178");
}



#[test]
fn enc_generic_retn3610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 3771
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xBB, 0x0E", "retn 3771");
}



#[test]
fn enc_generic_retn3611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 9576
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x68, 0x25", "retn 9576");
}



#[test]
fn enc_generic_retn3612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 9662
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0xBE, 0x25", "retn 9662");
}



#[test]
fn enc_generic_retn3613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 2421
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x75, 0x09", "retn 2421");
}



#[test]
fn enc_generic_retn3614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn 4207
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC2, 0x6F, 0x10", "retn 4207");
}



#[test]
fn enc_generic_retn3615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; retn
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC3", "retn");
}



#[test]
fn enc_generic_rol3616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC0", "rol al, cl");
}



#[test]
fn enc_generic_rol3617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x00", "rol BYTE [rax], cl");
}



#[test]
fn enc_generic_rol3618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x7A", "rol QWORD [rax], 122");
}



#[test]
fn enc_generic_rol3619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x7B", "rol rcx, 123");
}



#[test]
fn enc_generic_rol3620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x60", "rol rcx, 96");
}



#[test]
fn enc_generic_rol3621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x00, 0x1B", "rol QWORD [rax], 27");
}



#[test]
fn enc_generic_rol3622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC1, 0x54", "rol rcx, 84");
}



#[test]
fn enc_generic_rol3623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x2A", "rol al, 42");
}



#[test]
fn enc_generic_rol3624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x74", "rol al, 116");
}



#[test]
fn enc_generic_rol3625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol al, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC0, 0x12", "rol al, 18");
}



#[test]
fn enc_generic_rol3626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x39", "rol BYTE [rax], 57");
}



#[test]
fn enc_generic_rol3627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol BYTE [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x00, 0x6D", "rol BYTE [rax], 109");
}



#[test]
fn enc_generic_rol3628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x04, 0x42", "rol QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rol3629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x00", "rol QWORD [rax], cl");
}



#[test]
fn enc_generic_rol3630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rol rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC1", "rol rcx, cl");
}



#[test]
fn enc_generic_ror3631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax], 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x08, 0x12", "ror QWORD [rax], 18");
}



#[test]
fn enc_generic_ror3632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x5F", "ror rcx, 95");
}



#[test]
fn enc_generic_ror3633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax * 2 + rdx], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x0C, 0x42, 0x51", "ror QWORD [rax * 2 + rdx], 81");
}



#[test]
fn enc_generic_ror3634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x0C, 0x42, 0x39", "ror QWORD [rax * 2 + rdx], 57");
}



#[test]
fn enc_generic_ror3635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xC9, 0x65", "ror rcx, 101");
}



#[test]
fn enc_generic_ror3636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x08", "ror BYTE [rax], cl");
}



#[test]
fn enc_generic_ror3637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xC8", "ror al, cl");
}



#[test]
fn enc_generic_ror3638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x30", "ror BYTE [rax], 48");
}



#[test]
fn enc_generic_ror3639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x11", "ror al, 17");
}



#[test]
fn enc_generic_ror3640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x61", "ror al, 97");
}



#[test]
fn enc_generic_ror3641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror al, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xC8, 0x79", "ror al, 121");
}



#[test]
fn enc_generic_ror3642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror BYTE [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x08, 0x72", "ror BYTE [rax], 114");
}



#[test]
fn enc_generic_ror3643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xC9", "ror rcx, cl");
}



#[test]
fn enc_generic_ror3644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ror QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x0C, 0x42", "ror QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_rsm3645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsm
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAA", "rsm");
}



#[test]
fn enc_generic_sahf3646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sahf
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x9E", "sahf");
}



#[test]
fn enc_generic_sal3647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x20", "sal QWORD [rax], cl");
}



#[test]
fn enc_generic_sal3648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x24, 0x42", "sal QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sal3649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x2A", "sal QWORD [rax * 2 + rdx], 42");
}



#[test]
fn enc_generic_sal3650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal QWORD [rax * 2 + rdx], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x0D", "sal QWORD [rax * 2 + rdx], 13");
}



#[test]
fn enc_generic_sal3651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x10", "sal rcx, 16");
}



#[test]
fn enc_generic_sal3652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal rcx, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x4A", "sal rcx, 74");
}



#[test]
fn enc_generic_sal3653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "sal al, cl");
}



#[test]
fn enc_generic_sal3654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "sal BYTE [rax], cl");
}



#[test]
fn enc_generic_sal3655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x18", "sal al, 24");
}



#[test]
fn enc_generic_sal3656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal BYTE [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x1F", "sal BYTE [rax], 31");
}



#[test]
fn enc_generic_sal3657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x67", "sal al, 103");
}



#[test]
fn enc_generic_sal3658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x4E", "sal al, 78");
}



#[test]
fn enc_generic_sal3659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sal al, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x2B", "sal al, 43");
}



#[test]
fn enc_generic_sar3660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x3C, 0x42", "sar QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sar3661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x38", "sar QWORD [rax], cl");
}



#[test]
fn enc_generic_sar3662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xF9", "sar rcx, cl");
}



#[test]
fn enc_generic_sar3663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x61", "sar al, 97");
}



#[test]
fn enc_generic_sar3664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x20", "sar BYTE [rax], 32");
}



#[test]
fn enc_generic_sar3665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x67", "sar BYTE [rax], 103");
}



#[test]
fn enc_generic_sar3666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xF8, 0x19", "sar al, 25");
}



#[test]
fn enc_generic_sar3667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x38, 0x16", "sar BYTE [rax], 22");
}



#[test]
fn enc_generic_sar3668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x38", "sar BYTE [rax], cl");
}



#[test]
fn enc_generic_sar3669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xF8", "sar al, cl");
}



#[test]
fn enc_generic_sar3670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x0A", "sar QWORD [rax], 10");
}



#[test]
fn enc_generic_sar3671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x3C, 0x42, 0x39", "sar QWORD [rax * 2 + rdx], 57");
}



#[test]
fn enc_generic_sar3672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax * 2 + rdx], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x3C, 0x42, 0x6F", "sar QWORD [rax * 2 + rdx], 111");
}



#[test]
fn enc_generic_sar3673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar QWORD [rax], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x38, 0x53", "sar QWORD [rax], 83");
}



#[test]
fn enc_generic_sar3674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sar rcx, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xF9, 0x2B", "sar rcx, 43");
}



#[test]
fn enc_generic_sbb3675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x10", "sbb dl, BYTE [rax]");
}



#[test]
fn enc_generic_sbb3676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC1", "sbb cl, al");
}



#[test]
fn enc_generic_sbb3677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1A, 0x08", "sbb cl, BYTE [rax]");
}



#[test]
fn enc_generic_sbb3678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC0", "sbb al, al");
}



#[test]
fn enc_generic_sbb3679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC0", "sbb rax, rax");
}



#[test]
fn enc_generic_sbb3680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC9", "sbb rcx, rcx");
}



#[test]
fn enc_generic_sbb3681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x1B, 0x1C, 0x42", "sbb rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sbb3682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xC8", "sbb rax, rcx");
}



#[test]
fn enc_generic_sbb3683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x19, 0xCB", "sbb rbx, rcx");
}



#[test]
fn enc_generic_sbb3684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x03", "sbb rcx, 3");
}



#[test]
fn enc_generic_sbb3685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x68", "sbb rcx, 104");
}



#[test]
fn enc_generic_sbb3686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x4A", "sbb rax, 74");
}



#[test]
fn enc_generic_sbb3687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rbx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDB, 0x6D", "sbb rbx, 109");
}



#[test]
fn enc_generic_sbb3688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x04", "sbb rcx, 4");
}



#[test]
fn enc_generic_sbb3689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb ax, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xD8, 0x7C", "sbb ax, 124");
}



#[test]
fn enc_generic_sbb3690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x33", "sbb rax, 51");
}



#[test]
fn enc_generic_sbb3691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x7A", "sbb rax, 122");
}



#[test]
fn enc_generic_sbb3692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x7E", "sbb rax, 126");
}



#[test]
fn enc_generic_sbb3693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rax, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD8, 0x28", "sbb rax, 40");
}



#[test]
fn enc_generic_sbb3694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xD0", "sbb al, dl");
}



#[test]
fn enc_generic_sbb3695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xD2", "sbb dl, dl");
}



#[test]
fn enc_generic_sbb3696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC1", "sbb cl, al");
}



#[test]
fn enc_generic_sbb3697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC8", "sbb al, cl");
}



#[test]
fn enc_generic_sbb3698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0xC2", "sbb dl, al");
}



#[test]
fn enc_generic_sbb3699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x7B", "sbb rcx, 123");
}



#[test]
fn enc_generic_sbb3700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x0C", "sbb rdx, 12");
}



#[test]
fn enc_generic_sbb3701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x6C", "sbb rcx, 108");
}



#[test]
fn enc_generic_sbb3702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rcx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xD9, 0x78", "sbb rcx, 120");
}



#[test]
fn enc_generic_sbb3703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb rdx, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xDA, 0x78", "sbb rdx, 120");
}



#[test]
fn enc_generic_sbb3704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb dl, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xDA, 0x65", "sbb dl, 101");
}



#[test]
fn enc_generic_sbb3705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x55", "sbb al, 85");
}



#[test]
fn enc_generic_sbb3706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x52", "sbb cl, 82");
}



#[test]
fn enc_generic_sbb3707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x7B", "sbb al, 123");
}



#[test]
fn enc_generic_sbb3708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb cl, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xD9, 0x0E", "sbb cl, 14");
}



#[test]
fn enc_generic_sbb3709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x4F", "sbb al, 79");
}



#[test]
fn enc_generic_sbb3710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x28", "sbb al, 40");
}



#[test]
fn enc_generic_sbb3711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x74", "sbb al, 116");
}



#[test]
fn enc_generic_sbb3712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x0B", "sbb al, 11");
}



#[test]
fn enc_generic_sbb3713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb al, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x1C, 0x0F", "sbb al, 15");
}



#[test]
fn enc_generic_sbb3714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x50, 0x10", "sbb BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_sbb3715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x10", "sbb BYTE [rax], dl");
}



#[test]
fn enc_generic_sbb3716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x40, 0x10", "sbb BYTE [rax + 16], al");
}



#[test]
fn enc_generic_sbb3717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x04, 0x42", "sbb BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_sbb3718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x18, 0x14, 0x42", "sbb BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_sbb3719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x44", "sbb BYTE [rax + 16], 68");
}



#[test]
fn enc_generic_sbb3720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x46", "sbb BYTE [rax], 70");
}



#[test]
fn enc_generic_sbb3721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax + 16], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x58, 0x10, 0x55", "sbb BYTE [rax + 16], 85");
}



#[test]
fn enc_generic_sbb3722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax], 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x18, 0x1C", "sbb BYTE [rax], 28");
}



#[test]
fn enc_generic_sbb3723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sbb BYTE [rax * 2 + rdx], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x1C, 0x42, 0x26", "sbb BYTE [rax * 2 + rdx], 38");
}



#[test]
fn enc_generic_scasb3724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAE", "scasb");
}



#[test]
fn enc_generic_scasd3725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAF", "scasd");
}



#[test]
fn enc_generic_scasq3726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAF", "scasq");
}



#[test]
fn enc_generic_scasw3727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; scasw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAF", "scasw");
}



#[test]
fn enc_generic_sgdt3728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sgdt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x00", "sgdt [rax]");
}



#[test]
fn enc_generic_shl3729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x0A", "shl BYTE [rax], 10");
}



#[test]
fn enc_generic_shl3730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x20, 0x64", "shl BYTE [rax], 100");
}



#[test]
fn enc_generic_shl3731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x6B", "shl al, 107");
}



#[test]
fn enc_generic_shl3732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x66", "shl al, 102");
}



#[test]
fn enc_generic_shl3733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE0, 0x38", "shl al, 56");
}



#[test]
fn enc_generic_shl3734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE1, 0x36", "shl rcx, 54");
}



#[test]
fn enc_generic_shl3735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x73", "shl QWORD [rax * 2 + rdx], 115");
}



#[test]
fn enc_generic_shl3736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x5E", "shl QWORD [rax * 2 + rdx], 94");
}



#[test]
fn enc_generic_shl3737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x24, 0x42, 0x18", "shl QWORD [rax * 2 + rdx], 24");
}



#[test]
fn enc_generic_shl3738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE1", "shl rcx, cl");
}



#[test]
fn enc_generic_shl3739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x24, 0x42", "shl QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_shl3740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE0", "shl al, cl");
}



#[test]
fn enc_generic_shl3741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shl BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x20", "shl BYTE [rax], cl");
}



#[test]
fn enc_generic_shld3742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rdx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x10", "shld QWORD [rax], rdx, cl");
}



#[test]
fn enc_generic_shld3743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x04, 0x42", "shld QWORD [rax * 2 + rdx], rax, cl");
}



#[test]
fn enc_generic_shld3744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax * 2 + rdx], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA5, 0x0C, 0x42", "shld QWORD [rax * 2 + rdx], rcx, cl");
}



#[test]
fn enc_generic_shld3745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rax, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC1, 0x61", "shld rcx, rax, 97");
}



#[test]
fn enc_generic_shld3746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rbx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xD9, 0x29", "shld rcx, rbx, 41");
}



#[test]
fn enc_generic_shld3747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld QWORD [rax], rbx, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0x18, 0x0D", "shld QWORD [rax], rbx, 13");
}



#[test]
fn enc_generic_shld3748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rax, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC1, 0x2A", "shld rcx, rax, 42");
}



#[test]
fn enc_generic_shld3749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shld rcx, rax, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xA4, 0xC1, 0x22", "shld rcx, rax, 34");
}



#[test]
fn enc_generic_shr3750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x44", "shr al, 68");
}



#[test]
fn enc_generic_shr3751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0x28, 0x10", "shr BYTE [rax], 16");
}



#[test]
fn enc_generic_shr3752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x71", "shr al, 113");
}



#[test]
fn enc_generic_shr3753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x3D", "shr al, 61");
}



#[test]
fn enc_generic_shr3754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC0, 0xE8, 0x7A", "shr al, 122");
}



#[test]
fn enc_generic_shr3755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0xE8", "shr al, cl");
}



#[test]
fn enc_generic_shr3756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD2, 0x28", "shr BYTE [rax], cl");
}



#[test]
fn enc_generic_shr3757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0xE9", "shr rcx, cl");
}



#[test]
fn enc_generic_shr3758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x28", "shr QWORD [rax], cl");
}



#[test]
fn enc_generic_shr3759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xD3, 0x2C, 0x42", "shr QWORD [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_shr3760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x50", "shr QWORD [rax], 80");
}



#[test]
fn enc_generic_shr3761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x40", "shr QWORD [rax], 64");
}



#[test]
fn enc_generic_shr3762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x1F", "shr QWORD [rax], 31");
}



#[test]
fn enc_generic_shr3763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr rcx, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0xE9, 0x62", "shr rcx, 98");
}



#[test]
fn enc_generic_shr3764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shr QWORD [rax], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xC1, 0x28, 0x08", "shr QWORD [rax], 8");
}



#[test]
fn enc_generic_shrd3765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rbx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xD9", "shrd rcx, rbx, cl");
}



#[test]
fn enc_generic_shrd3766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x0C, 0x42", "shrd QWORD [rax * 2 + rdx], rcx, cl");
}



#[test]
fn enc_generic_shrd3767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rcx, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0xC9", "shrd rcx, rcx, cl");
}



#[test]
fn enc_generic_shrd3768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rax, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAD, 0x04, 0x42", "shrd QWORD [rax * 2 + rdx], rax, cl");
}



#[test]
fn enc_generic_shrd3769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rcx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x0C, 0x42, 0x0F", "shrd QWORD [rax * 2 + rdx], rcx, 15");
}



#[test]
fn enc_generic_shrd3770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax * 2 + rdx], rcx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x0C, 0x42, 0x14", "shrd QWORD [rax * 2 + rdx], rcx, 20");
}



#[test]
fn enc_generic_shrd3771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rax, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x00, 0x36", "shrd QWORD [rax], rax, 54");
}



#[test]
fn enc_generic_shrd3772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd QWORD [rax], rbx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0x18, 0x54", "shrd QWORD [rax], rbx, 84");
}



#[test]
fn enc_generic_shrd3773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shrd rcx, rbx, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAC, 0xD9, 0x61", "shrd rcx, rbx, 97");
}



#[test]
fn enc_generic_sidt3774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sidt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x08", "sidt [rax]");
}



#[test]
fn enc_generic_skinit3775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; skinit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDE", "skinit");
}



#[test]
fn enc_generic_sldt3776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x00", "sldt [rax]");
}



#[test]
fn enc_generic_sldt3777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC1", "sldt rcx");
}



#[test]
fn enc_generic_sldt3778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC0", "sldt rax");
}



#[test]
fn enc_generic_sldt3779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC3", "sldt rbx");
}



#[test]
fn enc_generic_sldt3780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sldt rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC2", "sldt rdx");
}



#[test]
fn enc_generic_smsw3781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0x20", "smsw [rax]");
}



#[test]
fn enc_generic_smsw3782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE1", "smsw rcx");
}



#[test]
fn enc_generic_smsw3783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE0", "smsw rax");
}



#[test]
fn enc_generic_smsw3784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; smsw rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x01, 0xE3", "smsw rbx");
}



#[test]
fn enc_generic_stac3785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stac
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xCB", "stac");
}



#[test]
fn enc_generic_stc3786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF9", "stc");
}



#[test]
fn enc_generic_std3787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; std
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFD", "std");
}



#[test]
fn enc_generic_sti3788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sti
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xFB", "sti");
}



#[test]
fn enc_generic_stosb3789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAA", "stosb");
}



#[test]
fn enc_generic_stosd3790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xAB", "stosd");
}



#[test]
fn enc_generic_stosq3791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosq
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xAB", "stosq");
}



#[test]
fn enc_generic_stosw3792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stosw
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xAB", "stosw");
}



#[test]
fn enc_generic_str3793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x08", "str [rax]");
}



#[test]
fn enc_generic_str3794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC8", "str rax");
}



#[test]
fn enc_generic_str3795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; str rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x00, 0xC9", "str rcx");
}



#[test]
fn enc_generic_sub3796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x2F", "sub rdx, 47");
}



#[test]
fn enc_generic_sub3797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x11", "sub rcx, 17");
}



#[test]
fn enc_generic_sub3798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x2C", "sub rdx, 44");
}



#[test]
fn enc_generic_sub3799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x25", "sub rcx, 37");
}



#[test]
fn enc_generic_sub3800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC0", "sub rax, rax");
}



#[test]
fn enc_generic_sub3801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x0B", "sub al, 11");
}



#[test]
fn enc_generic_sub3802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x1D", "sub al, 29");
}



#[test]
fn enc_generic_sub3803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x7E", "sub al, 126");
}



#[test]
fn enc_generic_sub3804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x49", "sub al, 73");
}



#[test]
fn enc_generic_sub3805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x16", "sub al, 22");
}



#[test]
fn enc_generic_sub3806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x14, 0x42", "sub rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sub3807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x29, 0xC9", "sub rcx, rcx");
}



#[test]
fn enc_generic_sub3808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x00", "sub rax, QWORD [rax]");
}



#[test]
fn enc_generic_sub3809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x04, 0x42", "sub rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_sub3810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x2B, 0x08", "sub rcx, QWORD [rax]");
}



#[test]
fn enc_generic_sub3811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC9", "sub cl, cl");
}



#[test]
fn enc_generic_sub3812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xCA", "sub dl, cl");
}



#[test]
fn enc_generic_sub3813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn enc_generic_sub3814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xD2", "sub dl, dl");
}



#[test]
fn enc_generic_sub3815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x3A", "sub rcx, 58");
}



#[test]
fn enc_generic_sub3816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x2E", "sub rax, 46");
}



#[test]
fn enc_generic_sub3817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rcx, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE9, 0x0F", "sub rcx, 15");
}



#[test]
fn enc_generic_sub3818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rbx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEB, 0x63", "sub rbx, 99");
}



#[test]
fn enc_generic_sub3819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rdx, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xEA, 0x6C", "sub rdx, 108");
}



#[test]
fn enc_generic_sub3820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub eax, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xE8, 0x7A", "sub eax, 122");
}



#[test]
fn enc_generic_sub3821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x76", "sub ax, 118");
}



#[test]
fn enc_generic_sub3822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub rax, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xE8, 0x65", "sub rax, 101");
}



#[test]
fn enc_generic_sub3823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x67", "sub ax, 103");
}



#[test]
fn enc_generic_sub3824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub ax, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xE8, 0x72", "sub ax, 114");
}



#[test]
fn enc_generic_sub3825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x08", "sub cl, BYTE [rax]");
}



#[test]
fn enc_generic_sub3826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0xC1", "sub cl, al");
}



#[test]
fn enc_generic_sub3827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2A, 0x10", "sub dl, BYTE [rax]");
}



#[test]
fn enc_generic_sub3828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x2E", "sub dl, 46");
}



#[test]
fn enc_generic_sub3829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub cl, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xE9, 0x67", "sub cl, 103");
}



#[test]
fn enc_generic_sub3830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x62", "sub dl, 98");
}



#[test]
fn enc_generic_sub3831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub dl, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xEA, 0x35", "sub dl, 53");
}



#[test]
fn enc_generic_sub3832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub al, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x2C, 0x5C", "sub al, 92");
}



#[test]
fn enc_generic_sub3833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x48, 0x10", "sub BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_sub3834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x04, 0x42", "sub BYTE [rax * 2 + rdx], al");
}



#[test]
fn enc_generic_sub3835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x0C, 0x42", "sub BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_sub3836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x28, 0x14, 0x42", "sub BYTE [rax * 2 + rdx], dl");
}



#[test]
fn enc_generic_sub3837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x6C", "sub BYTE [rax], 108");
}



#[test]
fn enc_generic_sub3838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x68, 0x10, 0x5A", "sub BYTE [rax + 16], 90");
}



#[test]
fn enc_generic_sub3839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax + 16], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x68, 0x10, 0x6C", "sub BYTE [rax + 16], 108");
}



#[test]
fn enc_generic_sub3840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x28, 0x6F", "sub BYTE [rax], 111");
}



#[test]
fn enc_generic_sub3841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sub BYTE [rax * 2 + rdx], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x2C, 0x42, 0x0C", "sub BYTE [rax * 2 + rdx], 12");
}



#[test]
fn enc_generic_swapgs3842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; swapgs
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xF8", "swapgs");
}



#[test]
fn enc_generic_sysenter3843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysenter
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x34", "sysenter");
}



#[test]
fn enc_generic_sysexit3844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sysexit
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x35", "sysexit");
}



#[test]
fn enc_generic_test3845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0xD9", "test rcx, rbx");
}



#[test]
fn enc_generic_test3846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x18", "test QWORD [rax], rbx");
}



#[test]
fn enc_generic_test3847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x10", "test QWORD [rax], rdx");
}



#[test]
fn enc_generic_test3848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax], rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x08", "test QWORD [rax], rcx");
}



#[test]
fn enc_generic_test3849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], rbx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x85, 0x1C, 0x42", "test QWORD [rax * 2 + rdx], rbx");
}



#[test]
fn enc_generic_test3850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x04, 0x42, 0x39, 0x00, 0x00, 0x00", "test QWORD [rax * 2 + rdx], 57");
}



#[test]
fn enc_generic_test3851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x04, 0x42, 0x34, 0x00, 0x00, 0x00", "test QWORD [rax * 2 + rdx], 52");
}



#[test]
fn enc_generic_test3852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test QWORD [rax * 2 + rdx], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0x04, 0x42, 0x4E, 0x00, 0x00, 0x00", "test QWORD [rax * 2 + rdx], 78");
}



#[test]
fn enc_generic_test3853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x30, 0x00, 0x00, 0x00", "test rcx, 48");
}



#[test]
fn enc_generic_test3854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test rcx, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0xF7, 0xC1, 0x47, 0x00, 0x00, 0x00", "test rcx, 71");
}



#[test]
fn enc_generic_test3855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x2C", "test al, 44");
}



#[test]
fn enc_generic_test3856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x6A", "test al, 106");
}



#[test]
fn enc_generic_test3857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x47", "test al, 71");
}



#[test]
fn enc_generic_test3858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x3C", "test al, 60");
}



#[test]
fn enc_generic_test3859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test ax, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0xA9, 0x73, 0x00", "test ax, 115");
}



#[test]
fn enc_generic_test3860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x17, 0x00, 0x00, 0x00", "test eax, 23");
}



#[test]
fn enc_generic_test3861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x5A, 0x00, 0x00, 0x00", "test eax, 90");
}



#[test]
fn enc_generic_test3862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x6F, 0x00, 0x00, 0x00", "test eax, 111");
}



#[test]
fn enc_generic_test3863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test eax, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA9, 0x3A, 0x00, 0x00, 0x00", "test eax, 58");
}



#[test]
fn enc_generic_test3864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test dl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x50, 0x10", "test dl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_test3865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x08", "test cl, BYTE [rax]");
}



#[test]
fn enc_generic_test3866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0x04, 0x42", "test al, BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_generic_test3867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC8", "test al, cl");
}



#[test]
fn enc_generic_test3868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x84, 0xC0", "test al, al");
}



#[test]
fn enc_generic_test3869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x5F", "test al, 95");
}



#[test]
fn enc_generic_test3870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test BYTE [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF6, 0x00, 0x30", "test BYTE [rax], 48");
}



#[test]
fn enc_generic_test3871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x3E", "test al, 62");
}



#[test]
fn enc_generic_test3872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x0F", "test al, 15");
}



#[test]
fn enc_generic_test3873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; test al, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xA8, 0x04", "test al, 4");
}



#[test]
fn enc_generic_ud23874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2");
}



#[test]
fn enc_generic_ud2a3875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ud2a
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0B", "ud2a");
}



#[test]
fn enc_generic_verr3876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x20", "verr [rax]");
}



#[test]
fn enc_generic_verr3877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr dx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE2", "verr dx");
}



#[test]
fn enc_generic_verr3878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE1", "verr cx");
}



#[test]
fn enc_generic_verr3879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verr ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE0", "verr ax");
}



#[test]
fn enc_generic_verw3880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0x28", "verw [rax]");
}



#[test]
fn enc_generic_verw3881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw ax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE8", "verw ax");
}



#[test]
fn enc_generic_verw3882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; verw cx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x00, 0xE9", "verw cx");
}



#[test]
fn enc_generic_wbinvd3883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wbinvd
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x09", "wbinvd");
}



#[test]
fn enc_generic_wrfsbase3884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD2", "wrfsbase rdx");
}



#[test]
fn enc_generic_wrfsbase3885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD0", "wrfsbase rax");
}



#[test]
fn enc_generic_wrfsbase3886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD0", "wrfsbase eax");
}



#[test]
fn enc_generic_wrfsbase3887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrfsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD1", "wrfsbase ecx");
}



#[test]
fn enc_generic_wrgsbase3888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xDA", "wrgsbase rdx");
}



#[test]
fn enc_generic_wrgsbase3889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0xAE, 0xD9", "wrgsbase rcx");
}



#[test]
fn enc_generic_wrgsbase3890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase ecx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD9", "wrgsbase ecx");
}



#[test]
fn enc_generic_wrgsbase3891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase edx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xDA", "wrgsbase edx");
}



#[test]
fn enc_generic_wrgsbase3892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrgsbase eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xAE, 0xD8", "wrgsbase eax");
}



#[test]
fn enc_generic_wrmsr3893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrmsr
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x30", "wrmsr");
}



#[test]
fn enc_generic_wrpkru3894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; wrpkru
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xEF", "wrpkru");
}



#[test]
fn enc_generic_xadd3895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x08", "xadd BYTE [rax], cl");
}



#[test]
fn enc_generic_xadd3896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x00", "xadd BYTE [rax], al");
}



#[test]
fn enc_generic_xadd3897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x40, 0x10", "xadd BYTE [rax + 16], al");
}



#[test]
fn enc_generic_xadd3898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x0C, 0x42", "xadd BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_xadd3899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd BYTE [rax], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0x10", "xadd BYTE [rax], dl");
}



#[test]
fn enc_generic_xadd3900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC1, 0xC0", "xadd rax, rax");
}



#[test]
fn enc_generic_xadd3901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD1", "xadd cl, dl");
}



#[test]
fn enc_generic_xadd3902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xCA", "xadd dl, cl");
}



#[test]
fn enc_generic_xadd3903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xadd dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC0, 0xD2", "xadd dl, dl");
}



#[test]
fn enc_generic_xchg3904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC9", "xchg cl, cl");
}



#[test]
fn enc_generic_xchg3905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn enc_generic_xchg3906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn enc_generic_xchg3907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC0", "xchg al, al");
}



#[test]
fn enc_generic_xchg3908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC1", "xchg al, cl");
}



#[test]
fn enc_generic_xchg3909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax + 16], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x40, 0x10", "xchg BYTE [rax + 16], al");
}



#[test]
fn enc_generic_xchg3910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg BYTE [rax], al");
}



#[test]
fn enc_generic_xchg3911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg BYTE [rax * 2 + rdx], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x0C, 0x42", "xchg BYTE [rax * 2 + rdx], cl");
}



#[test]
fn enc_generic_xchg3912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD2", "xchg dl, dl");
}



#[test]
fn enc_generic_xchg3913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xD0", "xchg dl, al");
}



#[test]
fn enc_generic_xchg3914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xCA", "xchg cl, dl");
}



#[test]
fn enc_generic_xchg3915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC0", "xchg al, al");
}



#[test]
fn enc_generic_xchg3916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0xC2", "xchg al, dl");
}



#[test]
fn enc_generic_xchg3917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg3918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg3919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xchg3920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x08", "xchg cl, BYTE [rax]");
}



#[test]
fn enc_generic_xchg3921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x10", "xchg dl, BYTE [rax]");
}



#[test]
fn enc_generic_xchg3922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x00", "xchg al, BYTE [rax]");
}



#[test]
fn enc_generic_xchg3923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg cl, BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x86, 0x48, 0x10", "xchg cl, BYTE [rax + 16]");
}



#[test]
fn enc_generic_xchg3924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xchg rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x90", "xchg rax, rax");
}



#[test]
fn enc_generic_xgetbv3925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xgetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD0", "xgetbv");
}



#[test]
fn enc_generic_xlat3926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlat
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlat");
}



#[test]
fn enc_generic_xlatb3927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xlatb
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xD7", "xlatb");
}



#[test]
fn enc_generic_xor3928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x24", "xor dl, 36");
}



#[test]
fn enc_generic_xor3929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF1, 0x31", "xor cl, 49");
}



#[test]
fn enc_generic_xor3930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x4C", "xor al, 76");
}



#[test]
fn enc_generic_xor3931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x69", "xor dl, 105");
}



#[test]
fn enc_generic_xor3932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0xF2, 0x12", "xor dl, 18");
}



#[test]
fn enc_generic_xor3933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x55", "xor rbx, 85");
}



#[test]
fn enc_generic_xor3934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x38", "xor rbx, 56");
}



#[test]
fn enc_generic_xor3935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x73", "xor rax, 115");
}



#[test]
fn enc_generic_xor3936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x38", "xor rax, 56");
}



#[test]
fn enc_generic_xor3937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF3, 0x40", "xor rbx, 64");
}



#[test]
fn enc_generic_xor3938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x31, 0xC0", "xor rax, rax");
}



#[test]
fn enc_generic_xor3939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x04, 0x42", "xor rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xor3940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x0C, 0x42", "xor rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xor3941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x00", "xor rax, QWORD [rax]");
}



#[test]
fn enc_generic_xor3942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x1C, 0x42", "xor rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_generic_xor3943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x33, 0x08", "xor rcx, QWORD [rax]");
}



#[test]
fn enc_generic_xor3944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rcx, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF1, 0x3B", "xor rcx, 59");
}



#[test]
fn enc_generic_xor3945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x68", "xor rdx, 104");
}



#[test]
fn enc_generic_xor3946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x4E", "xor rdx, 78");
}



#[test]
fn enc_generic_xor3947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x1C", "xor rax, 28");
}



#[test]
fn enc_generic_xor3948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rdx, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF2, 0x1A", "xor rdx, 26");
}



#[test]
fn enc_generic_xor3949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x39", "xor BYTE [rax], 57");
}



#[test]
fn enc_generic_xor3950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax * 2 + rdx], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x34, 0x42, 0x42", "xor BYTE [rax * 2 + rdx], 66");
}



#[test]
fn enc_generic_xor3951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x18", "xor BYTE [rax], 24");
}



#[test]
fn enc_generic_xor3952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax * 2 + rdx], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x34, 0x42, 0x4E", "xor BYTE [rax * 2 + rdx], 78");
}



#[test]
fn enc_generic_xor3953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x80, 0x30, 0x28", "xor BYTE [rax], 40");
}



#[test]
fn enc_generic_xor3954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x48, 0x10", "xor BYTE [rax + 16], cl");
}



#[test]
fn enc_generic_xor3955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x00", "xor BYTE [rax], al");
}



#[test]
fn enc_generic_xor3956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax], cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x08", "xor BYTE [rax], cl");
}



#[test]
fn enc_generic_xor3957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor BYTE [rax + 16], dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0x50, 0x10", "xor BYTE [rax + 16], dl");
}



#[test]
fn enc_generic_xor3958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn enc_generic_xor3959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, cl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xCA", "xor dl, cl");
}



#[test]
fn enc_generic_xor3960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, dl
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xD0", "xor al, dl");
}



#[test]
fn enc_generic_xor3961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC1", "xor cl, al");
}



#[test]
fn enc_generic_xor3962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor eax, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF0, 0x40", "xor eax, 64");
}



#[test]
fn enc_generic_xor3963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor eax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF0, 0x43", "xor eax, 67");
}



#[test]
fn enc_generic_xor3964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor ax, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x83, 0xF0, 0x7B", "xor ax, 123");
}



#[test]
fn enc_generic_xor3965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor eax, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x83, 0xF0, 0x76", "xor eax, 118");
}



#[test]
fn enc_generic_xor3966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor rax, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x83, 0xF0, 0x6E", "xor rax, 110");
}



#[test]
fn enc_generic_xor3967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x22", "xor al, 34");
}



#[test]
fn enc_generic_xor3968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x7C", "xor al, 124");
}



#[test]
fn enc_generic_xor3969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x77", "xor al, 119");
}



#[test]
fn enc_generic_xor3970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x34", "xor al, 52");
}



#[test]
fn enc_generic_xor3971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x34, 0x35", "xor al, 53");
}



#[test]
fn enc_generic_xor3972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor dl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x10", "xor dl, BYTE [rax]");
}



#[test]
fn enc_generic_xor3973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, al
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x30, 0xC0", "xor al, al");
}



#[test]
fn enc_generic_xor3974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor al, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x00", "xor al, BYTE [rax]");
}



#[test]
fn enc_generic_xor3975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xor cl, BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x32, 0x08", "xor cl, BYTE [rax]");
}



#[test]
fn enc_generic_xrstor3976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x28", "xrstor [rax]");
}



#[test]
fn enc_generic_xrstor643977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstor64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x28", "xrstor64 [rax]");
}



#[test]
fn enc_generic_xrstors643978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xrstors64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x18", "xrstors64 [rax]");
}



#[test]
fn enc_generic_xsave3979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x20", "xsave [rax]");
}



#[test]
fn enc_generic_xsave643980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsave64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x20", "xsave64 [rax]");
}



#[test]
fn enc_generic_xsavec643981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsavec64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x20", "xsavec64 [rax]");
}



#[test]
fn enc_generic_xsaveopt643982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaveopt64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xAE, 0x30", "xsaveopt64 [rax]");
}



#[test]
fn enc_generic_xsaves643983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsaves64 [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0xC7, 0x28", "xsaves64 [rax]");
}



#[test]
fn enc_generic_xsetbv3984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xsetbv
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD1", "xsetbv");
}


