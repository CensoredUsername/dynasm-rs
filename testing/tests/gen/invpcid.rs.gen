
#[test]
fn enc_invpcid_invpcid7455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66 0x0F 0x38 0x82 0x00", "invpcid rax, OWORD [rax]");
}



#[test]
fn enc_invpcid_invpcid7456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66 0x0F 0x38 0x82 0x08", "invpcid rcx, OWORD [rax]");
}



#[test]
fn enc_invpcid_invpcid7457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rcx, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66 0x0F 0x38 0x82 0x08", "invpcid rcx, OWORD [rax]");
}



#[test]
fn enc_invpcid_invpcid7458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invpcid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66 0x0F 0x38 0x82 0x00", "invpcid rax, OWORD [rax]");
}


