
#[test]
fn enc_mmx_cvtpi2ps3985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x10", "cvtpi2ps xmm2, [rax]");
}



#[test]
fn enc_mmx_cvtpi2ps3986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0xD8", "cvtpi2ps xmm3, mm0");
}



#[test]
fn enc_mmx_cvtpi2ps3987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x02", "cvtpi2ps xmm0, [rdx]");
}



#[test]
fn enc_mmx_cvtpi2ps3988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x12", "cvtpi2ps xmm2, [rdx]");
}



#[test]
fn enc_mmx_cvtpi2ps3989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm11, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2A, 0x1A", "cvtpi2ps xmm11, [rdx]");
}



#[test]
fn enc_mmx_cvtps2pi3990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xD3", "cvtps2pi mm2, xmm11");
}



#[test]
fn enc_mmx_cvtps2pi3991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xE0", "cvtps2pi mm4, xmm0");
}



#[test]
fn enc_mmx_cvtps2pi3992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xCC", "cvtps2pi mm1, xmm4");
}



#[test]
fn enc_mmx_cvtps2pi3993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm5, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xEF", "cvtps2pi mm5, xmm15");
}



#[test]
fn enc_mmx_cvtps2pi3994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xE4", "cvtps2pi mm4, xmm12");
}



#[test]
fn enc_mmx_cvtps2pi3995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm5, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x2C, 0x42", "cvtps2pi mm5, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_cvtps2pi3996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x00", "cvtps2pi mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_cvtps2pi3997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x14, 0x42", "cvtps2pi mm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_cvtps2pi3998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x58, 0x10", "cvtps2pi mm3, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_cvttps2pi3999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xCA", "cvttps2pi mm1, xmm2");
}



#[test]
fn enc_mmx_cvttps2pi4000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xDF", "cvttps2pi mm3, xmm15");
}



#[test]
fn enc_mmx_cvttps2pi4001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm5, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xEA", "cvttps2pi mm5, xmm2");
}



#[test]
fn enc_mmx_cvttps2pi4002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xC2", "cvttps2pi mm0, xmm2");
}



#[test]
fn enc_mmx_cvttps2pi4003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xC7", "cvttps2pi mm0, xmm15");
}



#[test]
fn enc_mmx_cvttps2pi4004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x48, 0x10", "cvttps2pi mm1, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_cvttps2pi4005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x00", "cvttps2pi mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_cvttps2pi4006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x04, 0x42", "cvttps2pi mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_cvttps2pi4007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x0C, 0x42", "cvttps2pi mm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_emms4008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; emms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x77", "emms");
}



#[test]
fn enc_mmx_maskmovq4009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xD8", "maskmovq mm3, mm0");
}



#[test]
fn enc_mmx_maskmovq4010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm2, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xD4", "maskmovq mm2, mm4");
}



#[test]
fn enc_mmx_maskmovq4011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm0, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xC1", "maskmovq mm0, mm1");
}



#[test]
fn enc_mmx_maskmovq4012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm2, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xD3", "maskmovq mm2, mm3");
}



#[test]
fn enc_mmx_movd4013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x20", "movd mm4, [rax]");
}



#[test]
fn enc_mmx_movd4014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC0", "movd mm0, rax");
}



#[test]
fn enc_mmx_movd4015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, [rax]");
}



#[test]
fn enc_mmx_movd4016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE0", "movd mm4, rax");
}



#[test]
fn enc_mmx_movd4017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x28", "movd mm5, [rax]");
}



#[test]
fn enc_mmx_movd4018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD8", "movd rax, mm3");
}



#[test]
fn enc_mmx_movd4019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xE0", "movd rax, mm4");
}



#[test]
fn enc_mmx_movd4020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xC8", "movd rax, mm1");
}



#[test]
fn enc_mmx_movd4021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD0", "movd rax, mm2");
}



#[test]
fn enc_mmx_movd4022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xE8", "movd rax, mm5");
}



#[test]
fn enc_mmx_movd4023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xC0", "movd eax, mm0");
}



#[test]
fn enc_mmx_movd4024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x18", "movd DWORD [rax], mm3");
}



#[test]
fn enc_mmx_movd4025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD0", "movd eax, mm2");
}



#[test]
fn enc_mmx_movd4026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD8", "movd eax, mm3");
}



#[test]
fn enc_mmx_movd4027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x10", "movd mm2, DWORD [rax]");
}



#[test]
fn enc_mmx_movd4028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xE8", "movd mm5, eax");
}



#[test]
fn enc_mmx_movd4029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xE0", "movd mm4, eax");
}



#[test]
fn enc_mmx_movd4030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x18", "movd mm3, DWORD [rax]");
}



#[test]
fn enc_mmx_movd4031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x28", "movd mm5, DWORD [rax]");
}



#[test]
fn enc_mmx_movntq4032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax + 16], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x58, 0x10", "movntq QWORD [rax + 16], mm3");
}



#[test]
fn enc_mmx_movntq4033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn enc_mmx_movntq4034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax * 2 + rdx], mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x24, 0x42", "movntq QWORD [rax * 2 + rdx], mm4");
}



#[test]
fn enc_mmx_movntq4035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax * 2 + rdx], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x14, 0x42", "movntq QWORD [rax * 2 + rdx], mm2");
}



#[test]
fn enc_mmx_movntq4036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x00", "movntq QWORD [rax], mm0");
}



#[test]
fn enc_mmx_movq4037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC8", "movq mm1, rax");
}



#[test]
fn enc_mmx_movq4038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE8", "movq mm5, rax");
}



#[test]
fn enc_mmx_movq4039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x28", "movq mm5, [rax]");
}



#[test]
fn enc_mmx_movq4040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm3, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xD8", "movq mm3, rax");
}



#[test]
fn enc_mmx_movq4041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE0", "movq mm4, rax");
}



#[test]
fn enc_mmx_movq4042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xD8", "movq mm3, mm0");
}



#[test]
fn enc_mmx_movq4043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x02", "movq mm0, [rdx]");
}



#[test]
fn enc_mmx_movq4044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xE8", "movq mm5, mm0");
}



#[test]
fn enc_mmx_movq4045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xE0", "movq mm4, mm0");
}



#[test]
fn enc_mmx_movq4046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x00", "movq mm0, [rax]");
}



#[test]
fn enc_mmx_movq4047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x2A", "movq [rdx], mm5");
}



#[test]
fn enc_mmx_movq4048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x08", "movq [rax], mm1");
}



#[test]
fn enc_mmx_movq4049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x28", "movq [rax], mm5");
}



#[test]
fn enc_mmx_movq4050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x02", "movq [rdx], mm0");
}



#[test]
fn enc_mmx_movq4051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD0", "movq rax, mm2");
}



#[test]
fn enc_mmx_movq4052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x18", "movq [rax], mm3");
}



#[test]
fn enc_mmx_movq4053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xE8", "movq rax, mm5");
}



#[test]
fn enc_mmx_movq4054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x00", "movq [rax], mm0");
}



#[test]
fn enc_mmx_pabsb4055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x2A", "pabsb mm5, [rdx]");
}



#[test]
fn enc_mmx_pabsb4056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x1A", "pabsb mm3, [rdx]");
}



#[test]
fn enc_mmx_pabsb4057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xD0", "pabsb mm2, mm0");
}



#[test]
fn enc_mmx_pabsb4058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x12", "pabsb mm2, [rdx]");
}



#[test]
fn enc_mmx_pabsb4059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xC0", "pabsb mm0, mm0");
}



#[test]
fn enc_mmx_pabsd4060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x2A", "pabsd mm5, [rdx]");
}



#[test]
fn enc_mmx_pabsd4061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0xD0", "pabsd mm2, mm0");
}



#[test]
fn enc_mmx_pabsd4062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0xD8", "pabsd mm3, mm0");
}



#[test]
fn enc_mmx_pabsd4063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x0A", "pabsd mm1, [rdx]");
}



#[test]
fn enc_mmx_pabsw4064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x08", "pabsw mm1, [rax]");
}



#[test]
fn enc_mmx_pabsw4065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x20", "pabsw mm4, [rax]");
}



#[test]
fn enc_mmx_pabsw4066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xD8", "pabsw mm3, mm0");
}



#[test]
fn enc_mmx_pabsw4067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xE0", "pabsw mm4, mm0");
}



#[test]
fn enc_mmx_packssdw4068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x20", "packssdw mm4, [rax]");
}



#[test]
fn enc_mmx_packssdw4069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xC8", "packssdw mm1, mm0");
}



#[test]
fn enc_mmx_packssdw4070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x08", "packssdw mm1, [rax]");
}



#[test]
fn enc_mmx_packssdw4071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x28", "packssdw mm5, [rax]");
}



#[test]
fn enc_mmx_packssdw4072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x1A", "packssdw mm3, [rdx]");
}



#[test]
fn enc_mmx_packsswb4073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0xC8", "packsswb mm1, mm0");
}



#[test]
fn enc_mmx_packsswb4074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x28", "packsswb mm5, [rax]");
}



#[test]
fn enc_mmx_packsswb4075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x1A", "packsswb mm3, [rdx]");
}



#[test]
fn enc_mmx_packsswb4076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x20", "packsswb mm4, [rax]");
}



#[test]
fn enc_mmx_packuswb4077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x00", "packuswb mm0, [rax]");
}



#[test]
fn enc_mmx_packuswb4078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0xD0", "packuswb mm2, mm0");
}



#[test]
fn enc_mmx_packuswb4079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x1A", "packuswb mm3, [rdx]");
}



#[test]
fn enc_mmx_packuswb4080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x20", "packuswb mm4, [rax]");
}



#[test]
fn enc_mmx_packuswb4081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x12", "packuswb mm2, [rdx]");
}



#[test]
fn enc_mmx_paddb4082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x12", "paddb mm2, [rdx]");
}



#[test]
fn enc_mmx_paddb4083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x00", "paddb mm0, [rax]");
}



#[test]
fn enc_mmx_paddb4084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x1A", "paddb mm3, [rdx]");
}



#[test]
fn enc_mmx_paddb4085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xC8", "paddb mm1, mm0");
}



#[test]
fn enc_mmx_paddb4086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x0A", "paddb mm1, [rdx]");
}



#[test]
fn enc_mmx_paddd4087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0xD0", "paddd mm2, mm0");
}



#[test]
fn enc_mmx_paddd4088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0xE0", "paddd mm4, mm0");
}



#[test]
fn enc_mmx_paddd4089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x00", "paddd mm0, [rax]");
}



#[test]
fn enc_mmx_paddq4090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xD0", "paddq mm2, mm0");
}



#[test]
fn enc_mmx_paddq4091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x00", "paddq mm0, [rax]");
}



#[test]
fn enc_mmx_paddq4092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x10", "paddq mm2, [rax]");
}



#[test]
fn enc_mmx_paddq4093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x02", "paddq mm0, [rdx]");
}



#[test]
fn enc_mmx_paddq4094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xC8", "paddq mm1, mm0");
}



#[test]
fn enc_mmx_paddsb4095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xC8", "paddsb mm1, mm0");
}



#[test]
fn enc_mmx_paddsb4096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xE0", "paddsb mm4, mm0");
}



#[test]
fn enc_mmx_paddsb4097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xE8", "paddsb mm5, mm0");
}



#[test]
fn enc_mmx_paddsb4098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x1A", "paddsb mm3, [rdx]");
}



#[test]
fn enc_mmx_paddsb4099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xD8", "paddsb mm3, mm0");
}



#[test]
fn enc_mmx_paddsiw4100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x10", "paddsiw mm2, [rax]");
}



#[test]
fn enc_mmx_paddsiw4101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xE8", "paddsiw mm5, mm0");
}



#[test]
fn enc_mmx_paddsiw4102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x2A", "paddsiw mm5, [rdx]");
}



#[test]
fn enc_mmx_paddsiw4103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x00", "paddsiw mm0, [rax]");
}



#[test]
fn enc_mmx_paddsw4104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x20", "paddsw mm4, [rax]");
}



#[test]
fn enc_mmx_paddsw4105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xC0", "paddsw mm0, mm0");
}



#[test]
fn enc_mmx_paddsw4106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x22", "paddsw mm4, [rdx]");
}



#[test]
fn enc_mmx_paddsw4107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x1A", "paddsw mm3, [rdx]");
}



#[test]
fn enc_mmx_paddsw4108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x12", "paddsw mm2, [rdx]");
}



#[test]
fn enc_mmx_paddusb4109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x1A", "paddusb mm3, [rdx]");
}



#[test]
fn enc_mmx_paddusb4110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x2A", "paddusb mm5, [rdx]");
}



#[test]
fn enc_mmx_paddusb4111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0xC8", "paddusb mm1, mm0");
}



#[test]
fn enc_mmx_paddusb4112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x22", "paddusb mm4, [rdx]");
}



#[test]
fn enc_mmx_paddusw4113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x08", "paddusw mm1, [rax]");
}



#[test]
fn enc_mmx_paddusw4114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x20", "paddusw mm4, [rax]");
}



#[test]
fn enc_mmx_paddusw4115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x22", "paddusw mm4, [rdx]");
}



#[test]
fn enc_mmx_paddusw4116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x28", "paddusw mm5, [rax]");
}



#[test]
fn enc_mmx_paddusw4117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x1A", "paddusw mm3, [rdx]");
}



#[test]
fn enc_mmx_paddw4118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x2A", "paddw mm5, [rdx]");
}



#[test]
fn enc_mmx_paddw4119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x28", "paddw mm5, [rax]");
}



#[test]
fn enc_mmx_paddw4120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x00", "paddw mm0, [rax]");
}



#[test]
fn enc_mmx_paddw4121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0xE0", "paddw mm4, mm0");
}



#[test]
fn enc_mmx_paddw4122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0xE8", "paddw mm5, mm0");
}



#[test]
fn enc_mmx_palignr4123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm4, [rdx], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x22, 0x10", "palignr mm4, [rdx], 16");
}



#[test]
fn enc_mmx_palignr4124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm3, [rax], 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x18, 0x77", "palignr mm3, [rax], 119");
}



#[test]
fn enc_mmx_palignr4125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm4, [rax], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x20, 0x56", "palignr mm4, [rax], 86");
}



#[test]
fn enc_mmx_palignr4126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm5, [rdx], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x2A, 0x61", "palignr mm5, [rdx], 97");
}



#[test]
fn enc_mmx_palignr4127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm5, [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x28, 0x58", "palignr mm5, [rax], 88");
}



#[test]
fn enc_mmx_pand4128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0xD8", "pand mm3, mm0");
}



#[test]
fn enc_mmx_pand4129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x10", "pand mm2, [rax]");
}



#[test]
fn enc_mmx_pand4130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x22", "pand mm4, [rdx]");
}



#[test]
fn enc_mmx_pand4131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0xD0", "pand mm2, mm0");
}



#[test]
fn enc_mmx_pandn4132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x10", "pandn mm2, [rax]");
}



#[test]
fn enc_mmx_pandn4133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0xC8", "pandn mm1, mm0");
}



#[test]
fn enc_mmx_pandn4134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x08", "pandn mm1, [rax]");
}



#[test]
fn enc_mmx_pandn4135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0xE0", "pandn mm4, mm0");
}



#[test]
fn enc_mmx_pandn4136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0xE8", "pandn mm5, mm0");
}



#[test]
fn enc_mmx_paveb4137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xD0", "paveb mm2, mm0");
}



#[test]
fn enc_mmx_paveb4138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xE0", "paveb mm4, mm0");
}



#[test]
fn enc_mmx_paveb4139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xD8", "paveb mm3, mm0");
}



#[test]
fn enc_mmx_paveb4140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xE8", "paveb mm5, mm0");
}



#[test]
fn enc_mmx_paveb4141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x22", "paveb mm4, [rdx]");
}



#[test]
fn enc_mmx_pavgb4142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x28", "pavgb mm5, [rax]");
}



#[test]
fn enc_mmx_pavgb4143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x20", "pavgb mm4, [rax]");
}



#[test]
fn enc_mmx_pavgb4144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x0A", "pavgb mm1, [rdx]");
}



#[test]
fn enc_mmx_pavgb4145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x10", "pavgb mm2, [rax]");
}



#[test]
fn enc_mmx_pavgb4146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xD0", "pavgb mm2, mm0");
}



#[test]
fn enc_mmx_pavgw4147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x02", "pavgw mm0, [rdx]");
}



#[test]
fn enc_mmx_pavgw4148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x0A", "pavgw mm1, [rdx]");
}



#[test]
fn enc_mmx_pavgw4149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0xE0", "pavgw mm4, mm0");
}



#[test]
fn enc_mmx_pavgw4150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0xD8", "pavgw mm3, mm0");
}



#[test]
fn enc_mmx_pavgw4151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x20", "pavgw mm4, [rax]");
}



#[test]
fn enc_mmx_pcmpeqb4152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x74, 0x18", "pcmpeqb mm3, [rax]");
}



#[test]
fn enc_mmx_pcmpeqb4153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x74, 0x0A", "pcmpeqb mm1, [rdx]");
}



#[test]
fn enc_mmx_pcmpeqb4154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x74, 0x02", "pcmpeqb mm0, [rdx]");
}



#[test]
fn enc_mmx_pcmpeqb4155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x74, 0x10", "pcmpeqb mm2, [rax]");
}



#[test]
fn enc_mmx_pcmpeqb4156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x74, 0x20", "pcmpeqb mm4, [rax]");
}



#[test]
fn enc_mmx_pcmpeqd4157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x76, 0xD0", "pcmpeqd mm2, mm0");
}



#[test]
fn enc_mmx_pcmpeqd4158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x76, 0x28", "pcmpeqd mm5, [rax]");
}



#[test]
fn enc_mmx_pcmpeqd4159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x76, 0x1A", "pcmpeqd mm3, [rdx]");
}



#[test]
fn enc_mmx_pcmpeqd4160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x76, 0x18", "pcmpeqd mm3, [rax]");
}



#[test]
fn enc_mmx_pcmpeqw4161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x75, 0xE8", "pcmpeqw mm5, mm0");
}



#[test]
fn enc_mmx_pcmpeqw4162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x75, 0x0A", "pcmpeqw mm1, [rdx]");
}



#[test]
fn enc_mmx_pcmpeqw4163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x75, 0x18", "pcmpeqw mm3, [rax]");
}



#[test]
fn enc_mmx_pcmpeqw4164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x75, 0x2A", "pcmpeqw mm5, [rdx]");
}



#[test]
fn enc_mmx_pcmpgtb4165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x64, 0x02", "pcmpgtb mm0, [rdx]");
}



#[test]
fn enc_mmx_pcmpgtb4166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x64, 0x10", "pcmpgtb mm2, [rax]");
}



#[test]
fn enc_mmx_pcmpgtb4167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x64, 0xC8", "pcmpgtb mm1, mm0");
}



#[test]
fn enc_mmx_pcmpgtb4168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x64, 0x0A", "pcmpgtb mm1, [rdx]");
}



#[test]
fn enc_mmx_pcmpgtd4169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x66, 0x10", "pcmpgtd mm2, [rax]");
}



#[test]
fn enc_mmx_pcmpgtd4170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x66, 0xE0", "pcmpgtd mm4, mm0");
}



#[test]
fn enc_mmx_pcmpgtd4171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x66, 0x2A", "pcmpgtd mm5, [rdx]");
}



#[test]
fn enc_mmx_pcmpgtd4172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x66, 0xE8", "pcmpgtd mm5, mm0");
}



#[test]
fn enc_mmx_pcmpgtd4173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x66, 0x28", "pcmpgtd mm5, [rax]");
}



#[test]
fn enc_mmx_pcmpgtw4174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x65, 0x28", "pcmpgtw mm5, [rax]");
}



#[test]
fn enc_mmx_pcmpgtw4175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x65, 0xD0", "pcmpgtw mm2, mm0");
}



#[test]
fn enc_mmx_pcmpgtw4176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x65, 0x12", "pcmpgtw mm2, [rdx]");
}



#[test]
fn enc_mmx_pcmpgtw4177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x65, 0x22", "pcmpgtw mm4, [rdx]");
}



#[test]
fn enc_mmx_pcmpgtw4178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x65, 0xD8", "pcmpgtw mm3, mm0");
}



#[test]
fn enc_mmx_pdistib4179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x18", "pdistib mm3, QWORD [rax]");
}



#[test]
fn enc_mmx_pdistib4180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x20", "pdistib mm4, QWORD [rax]");
}



#[test]
fn enc_mmx_pdistib4181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x48, 0x10", "pdistib mm1, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pdistib4182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x40, 0x10", "pdistib mm0, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pextrw4183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, mm4, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC4, 0x6E", "pextrw eax, mm4, 110");
}



#[test]
fn enc_mmx_pextrw4184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, mm0, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xD0, 0x3C", "pextrw edx, mm0, 60");
}



#[test]
fn enc_mmx_pextrw4185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm1, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC9, 0x38", "pextrw ecx, mm1, 56");
}



#[test]
fn enc_mmx_pextrw4186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, mm5, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xD5, 0x53", "pextrw edx, mm5, 83");
}



#[test]
fn enc_mmx_pextrw4187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm0, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC8, 0x34", "pextrw ecx, mm0, 52");
}



#[test]
fn enc_mmx_phaddd4188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xD0", "phaddd mm2, mm0");
}



#[test]
fn enc_mmx_phaddd4189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x08", "phaddd mm1, [rax]");
}



#[test]
fn enc_mmx_phaddd4190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x28", "phaddd mm5, [rax]");
}



#[test]
fn enc_mmx_phaddd4191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xE8", "phaddd mm5, mm0");
}



#[test]
fn enc_mmx_phaddsw4192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x02", "phaddsw mm0, [rdx]");
}



#[test]
fn enc_mmx_phaddsw4193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x2A", "phaddsw mm5, [rdx]");
}



#[test]
fn enc_mmx_phaddsw4194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x00", "phaddsw mm0, [rax]");
}



#[test]
fn enc_mmx_phaddsw4195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x12", "phaddsw mm2, [rdx]");
}



#[test]
fn enc_mmx_phaddw4196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xC0", "phaddw mm0, mm0");
}



#[test]
fn enc_mmx_phaddw4197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xD8", "phaddw mm3, mm0");
}



#[test]
fn enc_mmx_phaddw4198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xD0", "phaddw mm2, mm0");
}



#[test]
fn enc_mmx_phaddw4199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xE8", "phaddw mm5, mm0");
}



#[test]
fn enc_mmx_phsubd4200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x12", "phsubd mm2, [rdx]");
}



#[test]
fn enc_mmx_phsubd4201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x2A", "phsubd mm5, [rdx]");
}



#[test]
fn enc_mmx_phsubd4202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x1A", "phsubd mm3, [rdx]");
}



#[test]
fn enc_mmx_phsubd4203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xD0", "phsubd mm2, mm0");
}



#[test]
fn enc_mmx_phsubd4204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x10", "phsubd mm2, [rax]");
}



#[test]
fn enc_mmx_phsubsw4205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x0A", "phsubsw mm1, [rdx]");
}



#[test]
fn enc_mmx_phsubsw4206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xC8", "phsubsw mm1, mm0");
}



#[test]
fn enc_mmx_phsubsw4207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xC0", "phsubsw mm0, mm0");
}



#[test]
fn enc_mmx_phsubsw4208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x08", "phsubsw mm1, [rax]");
}



#[test]
fn enc_mmx_phsubw4209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x22", "phsubw mm4, [rdx]");
}



#[test]
fn enc_mmx_phsubw4210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x00", "phsubw mm0, [rax]");
}



#[test]
fn enc_mmx_phsubw4211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xD8", "phsubw mm3, mm0");
}



#[test]
fn enc_mmx_phsubw4212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xE8", "phsubw mm5, mm0");
}



#[test]
fn enc_mmx_pinsrw4213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x72", "pinsrw mm2, [rax], 114");
}



#[test]
fn enc_mmx_pinsrw4214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x18, 0x51", "pinsrw mm3, [rax], 81");
}



#[test]
fn enc_mmx_pinsrw4215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x7B", "pinsrw mm2, [rax], 123");
}



#[test]
fn enc_mmx_pinsrw4216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x08, 0x1B", "pinsrw mm1, [rax], 27");
}



#[test]
fn enc_mmx_pinsrw4217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm4, [rax], 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x20, 0x74", "pinsrw mm4, [rax], 116");
}



#[test]
fn enc_mmx_pinsrw4218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, ax, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xD0, 0x23", "pinsrw mm2, ax, 35");
}



#[test]
fn enc_mmx_pinsrw4219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, WORD [rax], 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x28, 0x6E", "pinsrw mm5, WORD [rax], 110");
}



#[test]
fn enc_mmx_pinsrw4220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, ax, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xD8, 0x04", "pinsrw mm3, ax, 4");
}



#[test]
fn enc_mmx_pinsrw4221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, ax, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE8, 0x34", "pinsrw mm5, ax, 52");
}



#[test]
fn enc_mmx_pinsrw4222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, WORD [rax], 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x0F", "pinsrw mm2, WORD [rax], 15");
}



#[test]
fn enc_mmx_pinsrw4223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, eax, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xD8, 0x64", "pinsrw mm3, eax, 100");
}



#[test]
fn enc_mmx_pinsrw4224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm4, edx, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE2, 0x3F", "pinsrw mm4, edx, 63");
}



#[test]
fn enc_mmx_pinsrw4225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, ecx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC9, 0x23", "pinsrw mm1, ecx, 35");
}



#[test]
fn enc_mmx_pinsrw4226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, edx, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC2, 0x6A", "pinsrw mm0, edx, 106");
}



#[test]
fn enc_mmx_pinsrw4227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, edx, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC2, 0x39", "pinsrw mm0, edx, 57");
}



#[test]
fn enc_mmx_pmachriw4228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x04, 0x42", "pmachriw mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmachriw4229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x58, 0x10", "pmachriw mm3, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmachriw4230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm5, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x68, 0x10", "pmachriw mm5, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmachriw4231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x60, 0x10", "pmachriw mm4, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmachriw4232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x10", "pmachriw mm2, QWORD [rax]");
}



#[test]
fn enc_mmx_pmaddubsw4233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0xC0", "pmaddubsw mm0, mm0");
}



#[test]
fn enc_mmx_pmaddubsw4234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x1A", "pmaddubsw mm3, [rdx]");
}



#[test]
fn enc_mmx_pmaddubsw4235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x08", "pmaddubsw mm1, [rax]");
}



#[test]
fn enc_mmx_pmaddubsw4236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x02", "pmaddubsw mm0, [rdx]");
}



#[test]
fn enc_mmx_pmaddwd4237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x12", "pmaddwd mm2, [rdx]");
}



#[test]
fn enc_mmx_pmaddwd4238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x22", "pmaddwd mm4, [rdx]");
}



#[test]
fn enc_mmx_pmaddwd4239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x0A", "pmaddwd mm1, [rdx]");
}



#[test]
fn enc_mmx_pmaddwd4240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0xD0", "pmaddwd mm2, mm0");
}



#[test]
fn enc_mmx_pmaddwd4241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0xD8", "pmaddwd mm3, mm0");
}



#[test]
fn enc_mmx_pmagw4242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x28", "pmagw mm5, [rax]");
}



#[test]
fn enc_mmx_pmagw4243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x02", "pmagw mm0, [rdx]");
}



#[test]
fn enc_mmx_pmagw4244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x2A", "pmagw mm5, [rdx]");
}



#[test]
fn enc_mmx_pmaxsw4245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xD8", "pmaxsw mm3, mm0");
}



#[test]
fn enc_mmx_pmaxsw4246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xE0", "pmaxsw mm4, mm0");
}



#[test]
fn enc_mmx_pmaxsw4247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x0A", "pmaxsw mm1, [rdx]");
}



#[test]
fn enc_mmx_pmaxsw4248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0xE8", "pmaxsw mm5, mm0");
}



#[test]
fn enc_mmx_pmaxub4249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x08", "pmaxub mm1, [rax]");
}



#[test]
fn enc_mmx_pmaxub4250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x20", "pmaxub mm4, [rax]");
}



#[test]
fn enc_mmx_pmaxub4251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x1A", "pmaxub mm3, [rdx]");
}



#[test]
fn enc_mmx_pmaxub4252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0xC8", "pmaxub mm1, mm0");
}



#[test]
fn enc_mmx_pminsw4253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x12", "pminsw mm2, [rdx]");
}



#[test]
fn enc_mmx_pminsw4254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x1A", "pminsw mm3, [rdx]");
}



#[test]
fn enc_mmx_pminsw4255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0xC0", "pminsw mm0, mm0");
}



#[test]
fn enc_mmx_pminsw4256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x20", "pminsw mm4, [rax]");
}



#[test]
fn enc_mmx_pminub4257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x18", "pminub mm3, [rax]");
}



#[test]
fn enc_mmx_pminub4258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xC0", "pminub mm0, mm0");
}



#[test]
fn enc_mmx_pminub4259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x02", "pminub mm0, [rdx]");
}



#[test]
fn enc_mmx_pminub4260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xD0", "pminub mm2, mm0");
}



#[test]
fn enc_mmx_pminub4261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x2A", "pminub mm5, [rdx]");
}



#[test]
fn enc_mmx_pmovmskb4262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC3", "pmovmskb eax, mm3");
}



#[test]
fn enc_mmx_pmovmskb4263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xD2", "pmovmskb edx, mm2");
}



#[test]
fn enc_mmx_pmovmskb4264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC0", "pmovmskb eax, mm0");
}



#[test]
fn enc_mmx_pmovmskb4265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC8", "pmovmskb ecx, mm0");
}



#[test]
fn enc_mmx_pmulhriw4266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xE0", "pmulhriw mm4, mm0");
}



#[test]
fn enc_mmx_pmulhriw4267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x22", "pmulhriw mm4, [rdx]");
}



#[test]
fn enc_mmx_pmulhriw4268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x18", "pmulhriw mm3, [rax]");
}



#[test]
fn enc_mmx_pmulhriw4269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x1A", "pmulhriw mm3, [rdx]");
}



#[test]
fn enc_mmx_pmulhriw4270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x10", "pmulhriw mm2, [rax]");
}



#[test]
fn enc_mmx_pmulhrsw4271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x20", "pmulhrsw mm4, [rax]");
}



#[test]
fn enc_mmx_pmulhrsw4272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x08", "pmulhrsw mm1, [rax]");
}



#[test]
fn enc_mmx_pmulhrsw4273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xC0", "pmulhrsw mm0, mm0");
}



#[test]
fn enc_mmx_pmulhrsw4274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xE0", "pmulhrsw mm4, mm0");
}



#[test]
fn enc_mmx_pmulhrsw4275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x0A", "pmulhrsw mm1, [rdx]");
}



#[test]
fn enc_mmx_pmulhrwc4276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x02", "pmulhrwc mm0, [rdx]");
}



#[test]
fn enc_mmx_pmulhrwc4277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x2A", "pmulhrwc mm5, [rdx]");
}



#[test]
fn enc_mmx_pmulhrwc4278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x10", "pmulhrwc mm2, [rax]");
}



#[test]
fn enc_mmx_pmulhrwc4279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x22", "pmulhrwc mm4, [rdx]");
}



#[test]
fn enc_mmx_pmulhrwc4280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xD0", "pmulhrwc mm2, mm0");
}



#[test]
fn enc_mmx_pmulhuw4281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x18", "pmulhuw mm3, [rax]");
}



#[test]
fn enc_mmx_pmulhuw4282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x22", "pmulhuw mm4, [rdx]");
}



#[test]
fn enc_mmx_pmulhuw4283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xC8", "pmulhuw mm1, mm0");
}



#[test]
fn enc_mmx_pmulhuw4284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x00", "pmulhuw mm0, [rax]");
}



#[test]
fn enc_mmx_pmulhuw4285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x12", "pmulhuw mm2, [rdx]");
}



#[test]
fn enc_mmx_pmulhw4286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0xC8", "pmulhw mm1, mm0");
}



#[test]
fn enc_mmx_pmulhw4287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x18", "pmulhw mm3, [rax]");
}



#[test]
fn enc_mmx_pmulhw4288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x2A", "pmulhw mm5, [rdx]");
}



#[test]
fn enc_mmx_pmulhw4289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x08", "pmulhw mm1, [rax]");
}



#[test]
fn enc_mmx_pmulhw4290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0xD0", "pmulhw mm2, mm0");
}



#[test]
fn enc_mmx_pmullw4291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x28", "pmullw mm5, [rax]");
}



#[test]
fn enc_mmx_pmullw4292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x10", "pmullw mm2, [rax]");
}



#[test]
fn enc_mmx_pmullw4293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x1A", "pmullw mm3, [rdx]");
}



#[test]
fn enc_mmx_pmullw4294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x00", "pmullw mm0, [rax]");
}



#[test]
fn enc_mmx_pmullw4295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x2A", "pmullw mm5, [rdx]");
}



#[test]
fn enc_mmx_pmvgezb4296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm5, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x68, 0x10", "pmvgezb mm5, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvgezb4297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x20", "pmvgezb mm4, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvgezb4298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x58, 0x10", "pmvgezb mm3, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvgezb4299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x04, 0x42", "pmvgezb mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvlzb4300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x04, 0x42", "pmvlzb mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvlzb4301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x50, 0x10", "pmvlzb mm2, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvlzb4302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x60, 0x10", "pmvlzb mm4, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvlzb4303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x18", "pmvlzb mm3, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvnzb4304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x14, 0x42", "pmvnzb mm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvnzb4305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x48, 0x10", "pmvnzb mm1, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvnzb4306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x04, 0x42", "pmvnzb mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvnzb4307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x50, 0x10", "pmvnzb mm2, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvnzb4308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x0C, 0x42", "pmvnzb mm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvzb4309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x60, 0x10", "pmvzb mm4, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvzb4310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x40, 0x10", "pmvzb mm0, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvzb4311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm5, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x2C, 0x42", "pmvzb mm5, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvzb4312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x08", "pmvzb mm1, QWORD [rax]");
}



#[test]
fn enc_mmx_por4313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xD8", "por mm3, mm0");
}



#[test]
fn enc_mmx_por4314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xC0", "por mm0, mm0");
}



#[test]
fn enc_mmx_por4315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xD0", "por mm2, mm0");
}



#[test]
fn enc_mmx_por4316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xE8", "por mm5, mm0");
}



#[test]
fn enc_mmx_psadbw4317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x02", "psadbw mm0, [rdx]");
}



#[test]
fn enc_mmx_psadbw4318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x20", "psadbw mm4, [rax]");
}



#[test]
fn enc_mmx_psadbw4319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x2A", "psadbw mm5, [rdx]");
}



#[test]
fn enc_mmx_psadbw4320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x22", "psadbw mm4, [rdx]");
}



#[test]
fn enc_mmx_psadbw4321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0xE0", "psadbw mm4, mm0");
}



#[test]
fn enc_mmx_pshufb4322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x02", "pshufb mm0, [rdx]");
}



#[test]
fn enc_mmx_pshufb4323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0xC8", "pshufb mm1, mm0");
}



#[test]
fn enc_mmx_pshufb4324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0xE8", "pshufb mm5, mm0");
}



#[test]
fn enc_mmx_pshufb4325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x2A", "pshufb mm5, [rdx]");
}



#[test]
fn enc_mmx_pshufb4326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x28", "pshufb mm5, [rax]");
}



#[test]
fn enc_mmx_pshufw4327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm1, [rdx], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x0A, 0x7C", "pshufw mm1, [rdx], 124");
}



#[test]
fn enc_mmx_pshufw4328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm5, mm0, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0xE8, 0x6E", "pshufw mm5, mm0, 110");
}



#[test]
fn enc_mmx_pshufw4329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm0, [rax], 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x00, 0x71", "pshufw mm0, [rax], 113");
}



#[test]
fn enc_mmx_pshufw4330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm1, [rax], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x08, 0x04", "pshufw mm1, [rax], 4");
}



#[test]
fn enc_mmx_pshufw4331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm2, [rdx], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x12, 0x60", "pshufw mm2, [rdx], 96");
}



#[test]
fn enc_mmx_psignb4332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xE0", "psignb mm4, mm0");
}



#[test]
fn enc_mmx_psignb4333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x02", "psignb mm0, [rdx]");
}



#[test]
fn enc_mmx_psignb4334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xE8", "psignb mm5, mm0");
}



#[test]
fn enc_mmx_psignb4335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x1A", "psignb mm3, [rdx]");
}



#[test]
fn enc_mmx_psignb4336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xD0", "psignb mm2, mm0");
}



#[test]
fn enc_mmx_psignd4337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x08", "psignd mm1, [rax]");
}



#[test]
fn enc_mmx_psignd4338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0xD8", "psignd mm3, mm0");
}



#[test]
fn enc_mmx_psignd4339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x22", "psignd mm4, [rdx]");
}



#[test]
fn enc_mmx_psignd4340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x1A", "psignd mm3, [rdx]");
}



#[test]
fn enc_mmx_psignd4341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x20", "psignd mm4, [rax]");
}



#[test]
fn enc_mmx_psignw4342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x1A", "psignw mm3, [rdx]");
}



#[test]
fn enc_mmx_psignw4343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0xC0", "psignw mm0, mm0");
}



#[test]
fn enc_mmx_psignw4344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0xC8", "psignw mm1, mm0");
}



#[test]
fn enc_mmx_psignw4345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0xE8", "psignw mm5, mm0");
}



#[test]
fn enc_mmx_pslld4346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xD8", "pslld mm3, mm0");
}



#[test]
fn enc_mmx_pslld4347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x22", "pslld mm4, [rdx]");
}



#[test]
fn enc_mmx_pslld4348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x02", "pslld mm0, [rdx]");
}



#[test]
fn enc_mmx_pslld4349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x0A", "pslld mm1, [rdx]");
}



#[test]
fn enc_mmx_pslld4350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x18", "pslld mm3, [rax]");
}



#[test]
fn enc_mmx_pslld4351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm1, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF1, 0x29", "pslld mm1, 41");
}



#[test]
fn enc_mmx_pslld4352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF2, 0x4D", "pslld mm2, 77");
}



#[test]
fn enc_mmx_pslld4353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm0, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF0, 0x05", "pslld mm0, 5");
}



#[test]
fn enc_mmx_pslld4354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF5, 0x5B", "pslld mm5, 91");
}



#[test]
fn enc_mmx_pslld4355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm3, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF3, 0x4A", "pslld mm3, 74");
}



#[test]
fn enc_mmx_psllq4356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x22", "psllq mm4, [rdx]");
}



#[test]
fn enc_mmx_psllq4357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x20", "psllq mm4, [rax]");
}



#[test]
fn enc_mmx_psllq4358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x28", "psllq mm5, [rax]");
}



#[test]
fn enc_mmx_psllq4359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x2A", "psllq mm5, [rdx]");
}



#[test]
fn enc_mmx_psllq4360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm0, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF0, 0x59", "psllq mm0, 89");
}



#[test]
fn enc_mmx_psllq4361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF2, 0x5B", "psllq mm2, 91");
}



#[test]
fn enc_mmx_psllq4362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm3, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF3, 0x74", "psllq mm3, 116");
}



#[test]
fn enc_mmx_psllq4363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm1, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF1, 0x59", "psllq mm1, 89");
}



#[test]
fn enc_mmx_psllq4364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF5, 0x77", "psllq mm5, 119");
}



#[test]
fn enc_mmx_psllw4365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x1A", "psllw mm3, [rdx]");
}



#[test]
fn enc_mmx_psllw4366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0xD0", "psllw mm2, mm0");
}



#[test]
fn enc_mmx_psllw4367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0xC8", "psllw mm1, mm0");
}



#[test]
fn enc_mmx_psllw4368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x0A", "psllw mm1, [rdx]");
}



#[test]
fn enc_mmx_psllw4369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0xD8", "psllw mm3, mm0");
}



#[test]
fn enc_mmx_psllw4370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF3, 0x08", "psllw mm3, 8");
}



#[test]
fn enc_mmx_psllw4371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm0, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF0, 0x2B", "psllw mm0, 43");
}



#[test]
fn enc_mmx_psllw4372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF4, 0x44", "psllw mm4, 68");
}



#[test]
fn enc_mmx_psllw4373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF1, 0x35", "psllw mm1, 53");
}



#[test]
fn enc_mmx_psllw4374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm0, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF0, 0x67", "psllw mm0, 103");
}



#[test]
fn enc_mmx_psrad4375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm4, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE4, 0x77", "psrad mm4, 119");
}



#[test]
fn enc_mmx_psrad4376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm4, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE4, 0x2C", "psrad mm4, 44");
}



#[test]
fn enc_mmx_psrad4377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm2, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE2, 0x33", "psrad mm2, 51");
}



#[test]
fn enc_mmx_psrad4378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE1, 0x28", "psrad mm1, 40");
}



#[test]
fn enc_mmx_psrad4379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE3, 0x60", "psrad mm3, 96");
}



#[test]
fn enc_mmx_psrad4380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xD8", "psrad mm3, mm0");
}



#[test]
fn enc_mmx_psrad4381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x10", "psrad mm2, [rax]");
}



#[test]
fn enc_mmx_psrad4382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x18", "psrad mm3, [rax]");
}



#[test]
fn enc_mmx_psrad4383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xE8", "psrad mm5, mm0");
}



#[test]
fn enc_mmx_psraw4384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x00", "psraw mm0, [rax]");
}



#[test]
fn enc_mmx_psraw4385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x22", "psraw mm4, [rdx]");
}



#[test]
fn enc_mmx_psraw4386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x2A", "psraw mm5, [rdx]");
}



#[test]
fn enc_mmx_psraw4387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE1, 0x4F", "psraw mm1, 79");
}



#[test]
fn enc_mmx_psraw4388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE1, 0x52", "psraw mm1, 82");
}



#[test]
fn enc_mmx_psraw4389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm5, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE5, 0x6A", "psraw mm5, 106");
}



#[test]
fn enc_mmx_psraw4390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm0, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE0, 0x63", "psraw mm0, 99");
}



#[test]
fn enc_mmx_psraw4391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE3, 0x68", "psraw mm3, 104");
}



#[test]
fn enc_mmx_psrld4392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD4, 0x58", "psrld mm4, 88");
}



#[test]
fn enc_mmx_psrld4393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm3, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD3, 0x50", "psrld mm3, 80");
}



#[test]
fn enc_mmx_psrld4394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD0, 0x0F", "psrld mm0, 15");
}



#[test]
fn enc_mmx_psrld4395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD0, 0x2D", "psrld mm0, 45");
}



#[test]
fn enc_mmx_psrld4396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD2, 0x69", "psrld mm2, 105");
}



#[test]
fn enc_mmx_psrld4397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x2A", "psrld mm5, [rdx]");
}



#[test]
fn enc_mmx_psrld4398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0xE8", "psrld mm5, mm0");
}



#[test]
fn enc_mmx_psrld4399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0xC8", "psrld mm1, mm0");
}



#[test]
fn enc_mmx_psrld4400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x12", "psrld mm2, [rdx]");
}



#[test]
fn enc_mmx_psrlq4401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x02", "psrlq mm0, [rdx]");
}



#[test]
fn enc_mmx_psrlq4402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x2A", "psrlq mm5, [rdx]");
}



#[test]
fn enc_mmx_psrlq4403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0xC8", "psrlq mm1, mm0");
}



#[test]
fn enc_mmx_psrlq4404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0xE0", "psrlq mm4, mm0");
}



#[test]
fn enc_mmx_psrlq4405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm1, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD1, 0x2B", "psrlq mm1, 43");
}



#[test]
fn enc_mmx_psrlq4406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm3, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD3, 0x78", "psrlq mm3, 120");
}



#[test]
fn enc_mmx_psrlq4407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm1, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD1, 0x78", "psrlq mm1, 120");
}



#[test]
fn enc_mmx_psrlq4408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD5, 0x6A", "psrlq mm5, 106");
}



#[test]
fn enc_mmx_psrlq4409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD5, 0x29", "psrlq mm5, 41");
}



#[test]
fn enc_mmx_psrlw4410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x1A", "psrlw mm3, [rdx]");
}



#[test]
fn enc_mmx_psrlw4411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x2A", "psrlw mm5, [rdx]");
}



#[test]
fn enc_mmx_psrlw4412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x02", "psrlw mm0, [rdx]");
}



#[test]
fn enc_mmx_psrlw4413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x18", "psrlw mm3, [rax]");
}



#[test]
fn enc_mmx_psrlw4414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD3, 0x65", "psrlw mm3, 101");
}



#[test]
fn enc_mmx_psrlw4415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD0, 0x7A", "psrlw mm0, 122");
}



#[test]
fn enc_mmx_psrlw4416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD3, 0x6B", "psrlw mm3, 107");
}



#[test]
fn enc_mmx_psrlw4417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm4, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD4, 0x4F", "psrlw mm4, 79");
}



#[test]
fn enc_mmx_psrlw4418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD5, 0x06", "psrlw mm5, 6");
}



#[test]
fn enc_mmx_psubb4419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x08", "psubb mm1, [rax]");
}



#[test]
fn enc_mmx_psubb4420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x0A", "psubb mm1, [rdx]");
}



#[test]
fn enc_mmx_psubb4421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0xE8", "psubb mm5, mm0");
}



#[test]
fn enc_mmx_psubb4422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x02", "psubb mm0, [rdx]");
}



#[test]
fn enc_mmx_psubd4423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x1A", "psubd mm3, [rdx]");
}



#[test]
fn enc_mmx_psubd4424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x00", "psubd mm0, [rax]");
}



#[test]
fn enc_mmx_psubd4425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x20", "psubd mm4, [rax]");
}



#[test]
fn enc_mmx_psubd4426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x0A", "psubd mm1, [rdx]");
}



#[test]
fn enc_mmx_psubsb4427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x20", "psubsb mm4, [rax]");
}



#[test]
fn enc_mmx_psubsb4428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x0A", "psubsb mm1, [rdx]");
}



#[test]
fn enc_mmx_psubsb4429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x02", "psubsb mm0, [rdx]");
}



#[test]
fn enc_mmx_psubsb4430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x08", "psubsb mm1, [rax]");
}



#[test]
fn enc_mmx_psubsiw4431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x28", "psubsiw mm5, [rax]");
}



#[test]
fn enc_mmx_psubsiw4432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xD8", "psubsiw mm3, mm0");
}



#[test]
fn enc_mmx_psubsiw4433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x08", "psubsiw mm1, [rax]");
}



#[test]
fn enc_mmx_psubsiw4434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x0A", "psubsiw mm1, [rdx]");
}



#[test]
fn enc_mmx_psubsw4435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x20", "psubsw mm4, [rax]");
}



#[test]
fn enc_mmx_psubsw4436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x1A", "psubsw mm3, [rdx]");
}



#[test]
fn enc_mmx_psubsw4437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x18", "psubsw mm3, [rax]");
}



#[test]
fn enc_mmx_psubsw4438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x2A", "psubsw mm5, [rdx]");
}



#[test]
fn enc_mmx_psubsw4439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x02", "psubsw mm0, [rdx]");
}



#[test]
fn enc_mmx_psubusb4440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xE0", "psubusb mm4, mm0");
}



#[test]
fn enc_mmx_psubusb4441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x2A", "psubusb mm5, [rdx]");
}



#[test]
fn enc_mmx_psubusb4442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x18", "psubusb mm3, [rax]");
}



#[test]
fn enc_mmx_psubusb4443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x0A", "psubusb mm1, [rdx]");
}



#[test]
fn enc_mmx_psubusb4444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xD0", "psubusb mm2, mm0");
}



#[test]
fn enc_mmx_psubusw4445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x10", "psubusw mm2, [rax]");
}



#[test]
fn enc_mmx_psubusw4446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x08", "psubusw mm1, [rax]");
}



#[test]
fn enc_mmx_psubusw4447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x0A", "psubusw mm1, [rdx]");
}



#[test]
fn enc_mmx_psubusw4448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0xD0", "psubusw mm2, mm0");
}



#[test]
fn enc_mmx_psubw4449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x02", "psubw mm0, [rdx]");
}



#[test]
fn enc_mmx_psubw4450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x10", "psubw mm2, [rax]");
}



#[test]
fn enc_mmx_psubw4451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xD8", "psubw mm3, mm0");
}



#[test]
fn enc_mmx_psubw4452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x1A", "psubw mm3, [rdx]");
}



#[test]
fn enc_mmx_punpckhbw4453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0xD8", "punpckhbw mm3, mm0");
}



#[test]
fn enc_mmx_punpckhbw4454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x12", "punpckhbw mm2, [rdx]");
}



#[test]
fn enc_mmx_punpckhbw4455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x22", "punpckhbw mm4, [rdx]");
}



#[test]
fn enc_mmx_punpckhbw4456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x2A", "punpckhbw mm5, [rdx]");
}



#[test]
fn enc_mmx_punpckhdq4457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x22", "punpckhdq mm4, [rdx]");
}



#[test]
fn enc_mmx_punpckhdq4458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x02", "punpckhdq mm0, [rdx]");
}



#[test]
fn enc_mmx_punpckhdq4459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0xD0", "punpckhdq mm2, mm0");
}



#[test]
fn enc_mmx_punpckhdq4460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x10", "punpckhdq mm2, [rax]");
}



#[test]
fn enc_mmx_punpckhwd4461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x10", "punpckhwd mm2, [rax]");
}



#[test]
fn enc_mmx_punpckhwd4462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0xC8", "punpckhwd mm1, mm0");
}



#[test]
fn enc_mmx_punpckhwd4463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x02", "punpckhwd mm0, [rdx]");
}



#[test]
fn enc_mmx_punpckhwd4464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x18", "punpckhwd mm3, [rax]");
}



#[test]
fn enc_mmx_punpckhwd4465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x0A", "punpckhwd mm1, [rdx]");
}



#[test]
fn enc_mmx_punpcklbw4466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0xE0", "punpcklbw mm4, mm0");
}



#[test]
fn enc_mmx_punpcklbw4467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x2A", "punpcklbw mm5, [rdx]");
}



#[test]
fn enc_mmx_punpcklbw4468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x02", "punpcklbw mm0, [rdx]");
}



#[test]
fn enc_mmx_punpcklbw4469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x22", "punpcklbw mm4, [rdx]");
}



#[test]
fn enc_mmx_punpckldq4470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x20", "punpckldq mm4, [rax]");
}



#[test]
fn enc_mmx_punpckldq4471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xE8", "punpckldq mm5, mm0");
}



#[test]
fn enc_mmx_punpckldq4472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xC0", "punpckldq mm0, mm0");
}



#[test]
fn enc_mmx_punpckldq4473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x0A", "punpckldq mm1, [rdx]");
}



#[test]
fn enc_mmx_punpckldq4474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xD0", "punpckldq mm2, mm0");
}



#[test]
fn enc_mmx_punpcklwd4475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0xD8", "punpcklwd mm3, mm0");
}



#[test]
fn enc_mmx_punpcklwd4476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x18", "punpcklwd mm3, [rax]");
}



#[test]
fn enc_mmx_punpcklwd4477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x28", "punpcklwd mm5, [rax]");
}



#[test]
fn enc_mmx_punpcklwd4478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0xC8", "punpcklwd mm1, mm0");
}



#[test]
fn enc_mmx_pxor4479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x00", "pxor mm0, [rax]");
}



#[test]
fn enc_mmx_pxor4480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x12", "pxor mm2, [rdx]");
}



#[test]
fn enc_mmx_pxor4481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x08", "pxor mm1, [rax]");
}



#[test]
fn enc_mmx_pxor4482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0xE8", "pxor mm5, mm0");
}


