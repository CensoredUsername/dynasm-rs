
#[test]
fn enc_mmx_cvtpi2ps2833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0xD8", "cvtpi2ps xmm3, mm0");
}



#[test]
fn enc_mmx_cvtpi2ps2834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0x18", "cvtpi2ps xmm3, [rax]");
}



#[test]
fn enc_mmx_cvtpi2ps2835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2A, 0xC8", "cvtpi2ps xmm1, mm0");
}



#[test]
fn enc_mmx_cvtpi2ps2836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm15, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2A, 0xF8", "cvtpi2ps xmm15, mm0");
}



#[test]
fn enc_mmx_cvtpi2ps2837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2ps xmm15, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2A, 0x3A", "cvtpi2ps xmm15, [rdx]");
}



#[test]
fn enc_mmx_cvtps2pi2838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xC4", "cvtps2pi mm0, xmm4");
}



#[test]
fn enc_mmx_cvtps2pi2839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm5, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xEF", "cvtps2pi mm5, xmm15");
}



#[test]
fn enc_mmx_cvtps2pi2840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xD0", "cvtps2pi mm2, xmm0");
}



#[test]
fn enc_mmx_cvtps2pi2841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2D, 0xDF", "cvtps2pi mm3, xmm15");
}



#[test]
fn enc_mmx_cvtps2pi2842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0xDB", "cvtps2pi mm3, xmm3");
}



#[test]
fn enc_mmx_cvtps2pi2843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x04, 0x42", "cvtps2pi mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_cvtps2pi2844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x24, 0x42", "cvtps2pi mm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_cvtps2pi2845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x60, 0x10", "cvtps2pi mm4, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_cvtps2pi2846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x0C, 0x42", "cvtps2pi mm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_cvtps2pi2847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pi mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2D, 0x20", "cvtps2pi mm4, QWORD [rax]");
}



#[test]
fn enc_mmx_cvttps2pi2848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xD2", "cvttps2pi mm2, xmm2");
}



#[test]
fn enc_mmx_cvttps2pi2849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xCC", "cvttps2pi mm1, xmm4");
}



#[test]
fn enc_mmx_cvttps2pi2850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2C, 0xDC", "cvttps2pi mm3, xmm12");
}



#[test]
fn enc_mmx_cvttps2pi2851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xE1", "cvttps2pi mm4, xmm1");
}



#[test]
fn enc_mmx_cvttps2pi2852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm5, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0xEC", "cvttps2pi mm5, xmm4");
}



#[test]
fn enc_mmx_cvttps2pi2853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x20", "cvttps2pi mm4, QWORD [rax]");
}



#[test]
fn enc_mmx_cvttps2pi2854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x00", "cvttps2pi mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_cvttps2pi2855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2pi mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2C, 0x04, 0x42", "cvttps2pi mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_emms2856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; emms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x77", "emms");
}



#[test]
fn enc_mmx_maskmovq2857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm0, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xC1", "maskmovq mm0, mm1");
}



#[test]
fn enc_mmx_maskmovq2858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm2, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xD1", "maskmovq mm2, mm1");
}



#[test]
fn enc_mmx_maskmovq2859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm0, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xC2", "maskmovq mm0, mm2");
}



#[test]
fn enc_mmx_maskmovq2860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm4, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xE5", "maskmovq mm4, mm5");
}



#[test]
fn enc_mmx_maskmovq2861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovq mm1, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF7, 0xCA", "maskmovq mm1, mm2");
}



#[test]
fn enc_mmx_movd2862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x08", "movd mm1, DWORD [rax]");
}



#[test]
fn enc_mmx_movd2863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xE8", "movd mm5, eax");
}



#[test]
fn enc_mmx_movd2864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm1, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0xC8", "movd mm1, eax");
}



#[test]
fn enc_mmx_movd2865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x20", "movd mm4, DWORD [rax]");
}



#[test]
fn enc_mmx_movd2866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm5, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x28", "movd mm5, DWORD [rax]");
}



#[test]
fn enc_mmx_movd2867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xE0", "movd rax, mm4");
}



#[test]
fn enc_mmx_movd2868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD8", "movd rax, mm3");
}



#[test]
fn enc_mmx_movd2869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xD0", "movd rax, mm2");
}



#[test]
fn enc_mmx_movd2870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd rax, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xC0", "movd rax, mm0");
}



#[test]
fn enc_mmx_movd2871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xE0", "movd mm4, rax");
}



#[test]
fn enc_mmx_movd2872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x10", "movd mm2, [rax]");
}



#[test]
fn enc_mmx_movd2873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x20", "movd mm4, [rax]");
}



#[test]
fn enc_mmx_movd2874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6E, 0x18", "movd mm3, [rax]");
}



#[test]
fn enc_mmx_movd2875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x20", "movd DWORD [rax], mm4");
}



#[test]
fn enc_mmx_movd2876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0x08", "movd DWORD [rax], mm1");
}



#[test]
fn enc_mmx_movd2877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xE0", "movd eax, mm4");
}



#[test]
fn enc_mmx_movd2878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xD8", "movd eax, mm3");
}



#[test]
fn enc_mmx_movd2879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7E, 0xE8", "movd eax, mm5");
}



#[test]
fn enc_mmx_movntq2880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x28", "movntq QWORD [rax], mm5");
}



#[test]
fn enc_mmx_movntq2881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x00", "movntq QWORD [rax], mm0");
}



#[test]
fn enc_mmx_movntq2882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntq QWORD [rax], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE7, 0x08", "movntq QWORD [rax], mm1");
}



#[test]
fn enc_mmx_movq2883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x08", "movq mm1, [rax]");
}



#[test]
fn enc_mmx_movq2884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x28", "movq mm5, [rax]");
}



#[test]
fn enc_mmx_movq2885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x20", "movq mm4, [rax]");
}



#[test]
fn enc_mmx_movq2886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x00", "movq mm0, [rax]");
}



#[test]
fn enc_mmx_movq2887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x0A", "movq [rdx], mm1");
}



#[test]
fn enc_mmx_movq2888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rdx], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x02", "movq [rdx], mm0");
}



#[test]
fn enc_mmx_movq2889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x00", "movq [rax], mm0");
}



#[test]
fn enc_mmx_movq2890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0xC3", "movq mm0, mm3");
}



#[test]
fn enc_mmx_movq2891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xE0", "movq rax, mm4");
}



#[test]
fn enc_mmx_movq2892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x00", "movq [rax], mm0");
}



#[test]
fn enc_mmx_movq2893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x10", "movq [rax], mm2");
}



#[test]
fn enc_mmx_movq2894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x7E, 0xC8", "movq rax, mm1");
}



#[test]
fn enc_mmx_movq2895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x7F, 0x28", "movq [rax], mm5");
}



#[test]
fn enc_mmx_movq2896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x10", "movq mm2, [rax]");
}



#[test]
fn enc_mmx_movq2897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xC0", "movq mm0, rax");
}



#[test]
fn enc_mmx_movq2898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm3, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x6E, 0xD8", "movq mm3, rax");
}



#[test]
fn enc_mmx_movq2899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6F, 0x00", "movq mm0, [rax]");
}



#[test]
fn enc_mmx_pabsb2900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xD8", "pabsb mm3, mm0");
}



#[test]
fn enc_mmx_pabsb2901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x1A", "pabsb mm3, [rdx]");
}



#[test]
fn enc_mmx_pabsb2902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x08", "pabsb mm1, [rax]");
}



#[test]
fn enc_mmx_pabsb2903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0xC8", "pabsb mm1, mm0");
}



#[test]
fn enc_mmx_pabsb2904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1C, 0x12", "pabsb mm2, [rdx]");
}



#[test]
fn enc_mmx_pabsd2905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x0A", "pabsd mm1, [rdx]");
}



#[test]
fn enc_mmx_pabsd2906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x20", "pabsd mm4, [rax]");
}



#[test]
fn enc_mmx_pabsd2907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x00", "pabsd mm0, [rax]");
}



#[test]
fn enc_mmx_pabsd2908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1E, 0x08", "pabsd mm1, [rax]");
}



#[test]
fn enc_mmx_pabsw2909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x08", "pabsw mm1, [rax]");
}



#[test]
fn enc_mmx_pabsw2910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x00", "pabsw mm0, [rax]");
}



#[test]
fn enc_mmx_pabsw2911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0xE8", "pabsw mm5, mm0");
}



#[test]
fn enc_mmx_pabsw2912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pabsw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x1D, 0x28", "pabsw mm5, [rax]");
}



#[test]
fn enc_mmx_packssdw2913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x00", "packssdw mm0, [rax]");
}



#[test]
fn enc_mmx_packssdw2914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xC8", "packssdw mm1, mm0");
}



#[test]
fn enc_mmx_packssdw2915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0xE8", "packssdw mm5, mm0");
}



#[test]
fn enc_mmx_packssdw2916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6B, 0x02", "packssdw mm0, [rdx]");
}



#[test]
fn enc_mmx_packsswb2917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x00", "packsswb mm0, [rax]");
}



#[test]
fn enc_mmx_packsswb2918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x10", "packsswb mm2, [rax]");
}



#[test]
fn enc_mmx_packsswb2919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x20", "packsswb mm4, [rax]");
}



#[test]
fn enc_mmx_packsswb2920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x1A", "packsswb mm3, [rdx]");
}



#[test]
fn enc_mmx_packsswb2921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x63, 0x02", "packsswb mm0, [rdx]");
}



#[test]
fn enc_mmx_packuswb2922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x10", "packuswb mm2, [rax]");
}



#[test]
fn enc_mmx_packuswb2923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x08", "packuswb mm1, [rax]");
}



#[test]
fn enc_mmx_packuswb2924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x00", "packuswb mm0, [rax]");
}



#[test]
fn enc_mmx_packuswb2925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x28", "packuswb mm5, [rax]");
}



#[test]
fn enc_mmx_packuswb2926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x67, 0x18", "packuswb mm3, [rax]");
}



#[test]
fn enc_mmx_paddb2927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xD0", "paddb mm2, mm0");
}



#[test]
fn enc_mmx_paddb2928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0x02", "paddb mm0, [rdx]");
}



#[test]
fn enc_mmx_paddb2929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xE0", "paddb mm4, mm0");
}



#[test]
fn enc_mmx_paddb2930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFC, 0xD8", "paddb mm3, mm0");
}



#[test]
fn enc_mmx_paddd2931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x12", "paddd mm2, [rdx]");
}



#[test]
fn enc_mmx_paddd2932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x08", "paddd mm1, [rax]");
}



#[test]
fn enc_mmx_paddd2933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x2A", "paddd mm5, [rdx]");
}



#[test]
fn enc_mmx_paddd2934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x22", "paddd mm4, [rdx]");
}



#[test]
fn enc_mmx_paddd2935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFE, 0x28", "paddd mm5, [rax]");
}



#[test]
fn enc_mmx_paddq2936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x18", "paddq mm3, [rax]");
}



#[test]
fn enc_mmx_paddq2937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x08", "paddq mm1, [rax]");
}



#[test]
fn enc_mmx_paddq2938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x2A", "paddq mm5, [rdx]");
}



#[test]
fn enc_mmx_paddq2939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0x0A", "paddq mm1, [rdx]");
}



#[test]
fn enc_mmx_paddq2940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD4, 0xE8", "paddq mm5, mm0");
}



#[test]
fn enc_mmx_paddsb2941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x28", "paddsb mm5, [rax]");
}



#[test]
fn enc_mmx_paddsb2942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xC8", "paddsb mm1, mm0");
}



#[test]
fn enc_mmx_paddsb2943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x18", "paddsb mm3, [rax]");
}



#[test]
fn enc_mmx_paddsb2944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0xE8", "paddsb mm5, mm0");
}



#[test]
fn enc_mmx_paddsb2945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEC, 0x0A", "paddsb mm1, [rdx]");
}



#[test]
fn enc_mmx_paddsiw2946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xD0", "paddsiw mm2, mm0");
}



#[test]
fn enc_mmx_paddsiw2947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x02", "paddsiw mm0, [rdx]");
}



#[test]
fn enc_mmx_paddsiw2948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x00", "paddsiw mm0, [rax]");
}



#[test]
fn enc_mmx_paddsiw2949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x18", "paddsiw mm3, [rax]");
}



#[test]
fn enc_mmx_paddsiw2950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsiw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0x2A", "paddsiw mm5, [rdx]");
}



#[test]
fn enc_mmx_paddsw2951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xE0", "paddsw mm4, mm0");
}



#[test]
fn enc_mmx_paddsw2952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x18", "paddsw mm3, [rax]");
}



#[test]
fn enc_mmx_paddsw2953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0x00", "paddsw mm0, [rax]");
}



#[test]
fn enc_mmx_paddsw2954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xED, 0xE8", "paddsw mm5, mm0");
}



#[test]
fn enc_mmx_paddusb2955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0x20", "paddusb mm4, [rax]");
}



#[test]
fn enc_mmx_paddusb2956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0xE0", "paddusb mm4, mm0");
}



#[test]
fn enc_mmx_paddusb2957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDC, 0xC0", "paddusb mm0, mm0");
}



#[test]
fn enc_mmx_paddusw2958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x0A", "paddusw mm1, [rdx]");
}



#[test]
fn enc_mmx_paddusw2959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x12", "paddusw mm2, [rdx]");
}



#[test]
fn enc_mmx_paddusw2960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x28", "paddusw mm5, [rax]");
}



#[test]
fn enc_mmx_paddusw2961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x08", "paddusw mm1, [rax]");
}



#[test]
fn enc_mmx_paddusw2962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDD, 0x10", "paddusw mm2, [rax]");
}



#[test]
fn enc_mmx_paddw2963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0xE8", "paddw mm5, mm0");
}



#[test]
fn enc_mmx_paddw2964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x12", "paddw mm2, [rdx]");
}



#[test]
fn enc_mmx_paddw2965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFD, 0x18", "paddw mm3, [rax]");
}



#[test]
fn enc_mmx_palignr2966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm0, [rdx], 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x02, 0x23", "palignr mm0, [rdx], 35");
}



#[test]
fn enc_mmx_palignr2967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm2, [rax], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x10, 0x56", "palignr mm2, [rax], 86");
}



#[test]
fn enc_mmx_palignr2968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm0, mm0, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0xC0, 0x26", "palignr mm0, mm0, 38");
}



#[test]
fn enc_mmx_palignr2969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm0, [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x00, 0x52", "palignr mm0, [rax], 82");
}



#[test]
fn enc_mmx_palignr2970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; palignr mm3, [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0x0F, 0x18, 0x43", "palignr mm3, [rax], 67");
}



#[test]
fn enc_mmx_pand2971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x20", "pand mm4, [rax]");
}



#[test]
fn enc_mmx_pand2972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0xE0", "pand mm4, mm0");
}



#[test]
fn enc_mmx_pand2973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x12", "pand mm2, [rdx]");
}



#[test]
fn enc_mmx_pand2974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDB, 0x08", "pand mm1, [rax]");
}



#[test]
fn enc_mmx_pandn2975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x18", "pandn mm3, [rax]");
}



#[test]
fn enc_mmx_pandn2976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x12", "pandn mm2, [rdx]");
}



#[test]
fn enc_mmx_pandn2977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0xC8", "pandn mm1, mm0");
}



#[test]
fn enc_mmx_pandn2978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDF, 0x0A", "pandn mm1, [rdx]");
}



#[test]
fn enc_mmx_paveb2979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x1A", "paveb mm3, [rdx]");
}



#[test]
fn enc_mmx_paveb2980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x12", "paveb mm2, [rdx]");
}



#[test]
fn enc_mmx_paveb2981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x2A", "paveb mm5, [rdx]");
}



#[test]
fn enc_mmx_paveb2982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x10", "paveb mm2, [rax]");
}



#[test]
fn enc_mmx_paveb2983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paveb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0x28", "paveb mm5, [rax]");
}



#[test]
fn enc_mmx_pavgb2984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xE0", "pavgb mm4, mm0");
}



#[test]
fn enc_mmx_pavgb2985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0xC0", "pavgb mm0, mm0");
}



#[test]
fn enc_mmx_pavgb2986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x12", "pavgb mm2, [rdx]");
}



#[test]
fn enc_mmx_pavgb2987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x08", "pavgb mm1, [rax]");
}



#[test]
fn enc_mmx_pavgb2988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE0, 0x22", "pavgb mm4, [rdx]");
}



#[test]
fn enc_mmx_pavgw2989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0xE0", "pavgw mm4, mm0");
}



#[test]
fn enc_mmx_pavgw2990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0xE8", "pavgw mm5, mm0");
}



#[test]
fn enc_mmx_pavgw2991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x02", "pavgw mm0, [rdx]");
}



#[test]
fn enc_mmx_pavgw2992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE3, 0x12", "pavgw mm2, [rdx]");
}



#[test]
fn enc_mmx_pdistib2993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x0C, 0x42", "pdistib mm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pdistib2994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x00", "pdistib mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_pdistib2995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x60, 0x10", "pdistib mm4, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pdistib2996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x1C, 0x42", "pdistib mm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pdistib2997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pdistib mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x18", "pdistib mm3, QWORD [rax]");
}



#[test]
fn enc_mmx_pextrw2998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, mm1, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC1, 0x6C", "pextrw eax, mm1, 108");
}



#[test]
fn enc_mmx_pextrw2999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, mm2, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC2, 0x1B", "pextrw eax, mm2, 27");
}



#[test]
fn enc_mmx_pextrw3000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, mm5, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xC5, 0x09", "pextrw eax, mm5, 9");
}



#[test]
fn enc_mmx_pextrw3001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm5, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xCD, 0x0F", "pextrw ecx, mm5, 15");
}



#[test]
fn enc_mmx_pextrw3002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, mm2, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC5, 0xCA, 0x33", "pextrw ecx, mm2, 51");
}



#[test]
fn enc_mmx_phaddd3003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xC0", "phaddd mm0, mm0");
}



#[test]
fn enc_mmx_phaddd3004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xC8", "phaddd mm1, mm0");
}



#[test]
fn enc_mmx_phaddd3005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0xE8", "phaddd mm5, mm0");
}



#[test]
fn enc_mmx_phaddd3006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x22", "phaddd mm4, [rdx]");
}



#[test]
fn enc_mmx_phaddd3007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x02, 0x10", "phaddd mm2, [rax]");
}



#[test]
fn enc_mmx_phaddsw3008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x08", "phaddsw mm1, [rax]");
}



#[test]
fn enc_mmx_phaddsw3009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0xD8", "phaddsw mm3, mm0");
}



#[test]
fn enc_mmx_phaddsw3010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x10", "phaddsw mm2, [rax]");
}



#[test]
fn enc_mmx_phaddsw3011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0x00", "phaddsw mm0, [rax]");
}



#[test]
fn enc_mmx_phaddsw3012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddsw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x03, 0xD0", "phaddsw mm2, mm0");
}



#[test]
fn enc_mmx_phaddw3013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xE0", "phaddw mm4, mm0");
}



#[test]
fn enc_mmx_phaddw3014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xC0", "phaddw mm0, mm0");
}



#[test]
fn enc_mmx_phaddw3015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0x08", "phaddw mm1, [rax]");
}



#[test]
fn enc_mmx_phaddw3016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phaddw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x01, 0xE8", "phaddw mm5, mm0");
}



#[test]
fn enc_mmx_phsubd3017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xE0", "phsubd mm4, mm0");
}



#[test]
fn enc_mmx_phsubd3018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xC8", "phsubd mm1, mm0");
}



#[test]
fn enc_mmx_phsubd3019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x20", "phsubd mm4, [rax]");
}



#[test]
fn enc_mmx_phsubd3020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0x28", "phsubd mm5, [rax]");
}



#[test]
fn enc_mmx_phsubd3021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x06, 0xD0", "phsubd mm2, mm0");
}



#[test]
fn enc_mmx_phsubsw3022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xE0", "phsubsw mm4, mm0");
}



#[test]
fn enc_mmx_phsubsw3023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x2A", "phsubsw mm5, [rdx]");
}



#[test]
fn enc_mmx_phsubsw3024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0xC0", "phsubsw mm0, mm0");
}



#[test]
fn enc_mmx_phsubsw3025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x07, 0x20", "phsubsw mm4, [rax]");
}



#[test]
fn enc_mmx_phsubw3026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x10", "phsubw mm2, [rax]");
}



#[test]
fn enc_mmx_phsubw3027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0xE8", "phsubw mm5, mm0");
}



#[test]
fn enc_mmx_phsubw3028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x12", "phsubw mm2, [rdx]");
}



#[test]
fn enc_mmx_phsubw3029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phsubw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x05, 0x28", "phsubw mm5, [rax]");
}



#[test]
fn enc_mmx_pinsrw3030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, [rax], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x5E", "pinsrw mm0, [rax], 94");
}



#[test]
fn enc_mmx_pinsrw3031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, [rax], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x28, 0x20", "pinsrw mm5, [rax], 32");
}



#[test]
fn enc_mmx_pinsrw3032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x18, 0x1E", "pinsrw mm3, [rax], 30");
}



#[test]
fn enc_mmx_pinsrw3033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm4, [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x20, 0x3E", "pinsrw mm4, [rax], 62");
}



#[test]
fn enc_mmx_pinsrw3034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x05", "pinsrw mm0, [rax], 5");
}



#[test]
fn enc_mmx_pinsrw3035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, WORD [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x6C", "pinsrw mm2, WORD [rax], 108");
}



#[test]
fn enc_mmx_pinsrw3036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, WORD [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x3E", "pinsrw mm2, WORD [rax], 62");
}



#[test]
fn enc_mmx_pinsrw3037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm0, WORD [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x00, 0x14", "pinsrw mm0, WORD [rax], 20");
}



#[test]
fn enc_mmx_pinsrw3038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, WORD [rax], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x08, 0x27", "pinsrw mm1, WORD [rax], 39");
}



#[test]
fn enc_mmx_pinsrw3039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm2, WORD [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0x10, 0x25", "pinsrw mm2, WORD [rax], 37");
}



#[test]
fn enc_mmx_pinsrw3040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, eax, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC8, 0x73", "pinsrw mm1, eax, 115");
}



#[test]
fn enc_mmx_pinsrw3041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm4, eax, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE0, 0x0F", "pinsrw mm4, eax, 15");
}



#[test]
fn enc_mmx_pinsrw3042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm1, ecx, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xC9, 0x46", "pinsrw mm1, ecx, 70");
}



#[test]
fn enc_mmx_pinsrw3043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm3, ecx, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xD9, 0x20", "pinsrw mm3, ecx, 32");
}



#[test]
fn enc_mmx_pinsrw3044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw mm5, ecx, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC4, 0xE9, 0x64", "pinsrw mm5, ecx, 100");
}



#[test]
fn enc_mmx_pmachriw3045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm5, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x68, 0x10", "pmachriw mm5, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmachriw3046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x08", "pmachriw mm1, QWORD [rax]");
}



#[test]
fn enc_mmx_pmachriw3047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x14, 0x42", "pmachriw mm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmachriw3048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmachriw mm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x24, 0x42", "pmachriw mm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmaddubsw3049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x08", "pmaddubsw mm1, [rax]");
}



#[test]
fn enc_mmx_pmaddubsw3050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x28", "pmaddubsw mm5, [rax]");
}



#[test]
fn enc_mmx_pmaddubsw3051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0x10", "pmaddubsw mm2, [rax]");
}



#[test]
fn enc_mmx_pmaddubsw3052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddubsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x04, 0xE8", "pmaddubsw mm5, mm0");
}



#[test]
fn enc_mmx_pmaddwd3053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x1A", "pmaddwd mm3, [rdx]");
}



#[test]
fn enc_mmx_pmaddwd3054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF5, 0x12", "pmaddwd mm2, [rdx]");
}



#[test]
fn enc_mmx_pmagw3055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x0A", "pmagw mm1, [rdx]");
}



#[test]
fn enc_mmx_pmagw3056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x1A", "pmagw mm3, [rdx]");
}



#[test]
fn enc_mmx_pmagw3057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xE8", "pmagw mm5, mm0");
}



#[test]
fn enc_mmx_pmagw3058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x22", "pmagw mm4, [rdx]");
}



#[test]
fn enc_mmx_pmagw3059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmagw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x10", "pmagw mm2, [rax]");
}



#[test]
fn enc_mmx_pmaxsw3060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x22", "pmaxsw mm4, [rdx]");
}



#[test]
fn enc_mmx_pmaxsw3061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x00", "pmaxsw mm0, [rax]");
}



#[test]
fn enc_mmx_pmaxsw3062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x18", "pmaxsw mm3, [rax]");
}



#[test]
fn enc_mmx_pmaxsw3063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEE, 0x1A", "pmaxsw mm3, [rdx]");
}



#[test]
fn enc_mmx_pmaxub3064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0xE0", "pmaxub mm4, mm0");
}



#[test]
fn enc_mmx_pmaxub3065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0xE8", "pmaxub mm5, mm0");
}



#[test]
fn enc_mmx_pmaxub3066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x28", "pmaxub mm5, [rax]");
}



#[test]
fn enc_mmx_pmaxub3067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x20", "pmaxub mm4, [rax]");
}



#[test]
fn enc_mmx_pmaxub3068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDE, 0x10", "pmaxub mm2, [rax]");
}



#[test]
fn enc_mmx_pminsw3069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0xE0", "pminsw mm4, mm0");
}



#[test]
fn enc_mmx_pminsw3070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x0A", "pminsw mm1, [rdx]");
}



#[test]
fn enc_mmx_pminsw3071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x2A", "pminsw mm5, [rdx]");
}



#[test]
fn enc_mmx_pminsw3072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0x1A", "pminsw mm3, [rdx]");
}



#[test]
fn enc_mmx_pminsw3073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEA, 0xC0", "pminsw mm0, mm0");
}



#[test]
fn enc_mmx_pminub3074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x12", "pminub mm2, [rdx]");
}



#[test]
fn enc_mmx_pminub3075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0xC0", "pminub mm0, mm0");
}



#[test]
fn enc_mmx_pminub3076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x10", "pminub mm2, [rax]");
}



#[test]
fn enc_mmx_pminub3077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x22", "pminub mm4, [rdx]");
}



#[test]
fn enc_mmx_pminub3078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xDA, 0x02", "pminub mm0, [rdx]");
}



#[test]
fn enc_mmx_pmovmskb3079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC3", "pmovmskb eax, mm3");
}



#[test]
fn enc_mmx_pmovmskb3080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC9", "pmovmskb ecx, mm1");
}



#[test]
fn enc_mmx_pmovmskb3081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC1", "pmovmskb eax, mm1");
}



#[test]
fn enc_mmx_pmovmskb3082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD7, 0xC5", "pmovmskb eax, mm5");
}



#[test]
fn enc_mmx_pmulhriw3083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x0A", "pmulhriw mm1, [rdx]");
}



#[test]
fn enc_mmx_pmulhriw3084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xC8", "pmulhriw mm1, mm0");
}



#[test]
fn enc_mmx_pmulhriw3085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xC0", "pmulhriw mm0, mm0");
}



#[test]
fn enc_mmx_pmulhriw3086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x10", "pmulhriw mm2, [rax]");
}



#[test]
fn enc_mmx_pmulhriw3087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhriw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x20", "pmulhriw mm4, [rax]");
}



#[test]
fn enc_mmx_pmulhrsw3088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xC0", "pmulhrsw mm0, mm0");
}



#[test]
fn enc_mmx_pmulhrsw3089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0xE8", "pmulhrsw mm5, mm0");
}



#[test]
fn enc_mmx_pmulhrsw3090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrsw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0B, 0x20", "pmulhrsw mm4, [rax]");
}



#[test]
fn enc_mmx_pmulhrwc3091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x08", "pmulhrwc mm1, [rax]");
}



#[test]
fn enc_mmx_pmulhrwc3092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x22", "pmulhrwc mm4, [rdx]");
}



#[test]
fn enc_mmx_pmulhrwc3093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xC8", "pmulhrwc mm1, mm0");
}



#[test]
fn enc_mmx_pmulhrwc3094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xD8", "pmulhrwc mm3, mm0");
}



#[test]
fn enc_mmx_pmulhrwc3095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwc mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x20", "pmulhrwc mm4, [rax]");
}



#[test]
fn enc_mmx_pmulhuw3096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0x0A", "pmulhuw mm1, [rdx]");
}



#[test]
fn enc_mmx_pmulhuw3097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xD0", "pmulhuw mm2, mm0");
}



#[test]
fn enc_mmx_pmulhuw3098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xD8", "pmulhuw mm3, mm0");
}



#[test]
fn enc_mmx_pmulhuw3099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE4, 0xC8", "pmulhuw mm1, mm0");
}



#[test]
fn enc_mmx_pmulhw3100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0xE8", "pmulhw mm5, mm0");
}



#[test]
fn enc_mmx_pmulhw3101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x08", "pmulhw mm1, [rax]");
}



#[test]
fn enc_mmx_pmulhw3102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x02", "pmulhw mm0, [rdx]");
}



#[test]
fn enc_mmx_pmulhw3103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE5, 0x10", "pmulhw mm2, [rax]");
}



#[test]
fn enc_mmx_pmullw3104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x22", "pmullw mm4, [rdx]");
}



#[test]
fn enc_mmx_pmullw3105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0xE8", "pmullw mm5, mm0");
}



#[test]
fn enc_mmx_pmullw3106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x1A", "pmullw mm3, [rdx]");
}



#[test]
fn enc_mmx_pmullw3107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD5, 0x28", "pmullw mm5, [rax]");
}



#[test]
fn enc_mmx_pmvgezb3108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x48, 0x10", "pmvgezb mm1, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvgezb3109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x1C, 0x42", "pmvgezb mm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvgezb3110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm5, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x68, 0x10", "pmvgezb mm5, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvgezb3111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x00", "pmvgezb mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvgezb3112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvgezb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x08", "pmvgezb mm1, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvlzb3113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x20", "pmvlzb mm4, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvlzb3114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x10", "pmvlzb mm2, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvlzb3115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x24, 0x42", "pmvlzb mm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvlzb3116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm5, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x28", "pmvlzb mm5, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvlzb3117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvlzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x00", "pmvlzb mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvnzb3118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x08", "pmvnzb mm1, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvnzb3119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x00", "pmvnzb mm0, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvnzb3120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x18", "pmvnzb mm3, QWORD [rax]");
}



#[test]
fn enc_mmx_pmvnzb3121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvnzb mm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x58, 0x10", "pmvnzb mm3, QWORD [rax + 16]");
}



#[test]
fn enc_mmx_pmvzb3122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x24, 0x42", "pmvzb mm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvzb3123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x14, 0x42", "pmvzb mm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvzb3124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x04, 0x42", "pmvzb mm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_pmvzb3125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmvzb mm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x1C, 0x42", "pmvzb mm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_mmx_por3126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xD0", "por mm2, mm0");
}



#[test]
fn enc_mmx_por3127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x2A", "por mm5, [rdx]");
}



#[test]
fn enc_mmx_por3128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x28", "por mm5, [rax]");
}



#[test]
fn enc_mmx_por3129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0x00", "por mm0, [rax]");
}



#[test]
fn enc_mmx_por3130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEB, 0xE8", "por mm5, mm0");
}



#[test]
fn enc_mmx_psadbw3131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0xC8", "psadbw mm1, mm0");
}



#[test]
fn enc_mmx_psadbw3132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0xE8", "psadbw mm5, mm0");
}



#[test]
fn enc_mmx_psadbw3133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x2A", "psadbw mm5, [rdx]");
}



#[test]
fn enc_mmx_psadbw3134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x0A", "psadbw mm1, [rdx]");
}



#[test]
fn enc_mmx_psadbw3135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF6, 0x1A", "psadbw mm3, [rdx]");
}



#[test]
fn enc_mmx_pshufb3136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0xD8", "pshufb mm3, mm0");
}



#[test]
fn enc_mmx_pshufb3137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x10", "pshufb mm2, [rax]");
}



#[test]
fn enc_mmx_pshufb3138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x00, 0x1A", "pshufb mm3, [rdx]");
}



#[test]
fn enc_mmx_pshufw3139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm3, [rax], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x18, 0x4A", "pshufw mm3, [rax], 74");
}



#[test]
fn enc_mmx_pshufw3140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm1, mm0, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0xC8, 0x47", "pshufw mm1, mm0, 71");
}



#[test]
fn enc_mmx_pshufw3141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm1, [rdx], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0x0A, 0x11", "pshufw mm1, [rdx], 17");
}



#[test]
fn enc_mmx_pshufw3142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm5, mm0, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0xE8, 0x11", "pshufw mm5, mm0, 17");
}



#[test]
fn enc_mmx_pshufw3143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufw mm4, mm0, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x70, 0xE0, 0x23", "pshufw mm4, mm0, 35");
}



#[test]
fn enc_mmx_psignb3144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xD8", "psignb mm3, mm0");
}



#[test]
fn enc_mmx_psignb3145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x22", "psignb mm4, [rdx]");
}



#[test]
fn enc_mmx_psignb3146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0xE0", "psignb mm4, mm0");
}



#[test]
fn enc_mmx_psignb3147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x08, 0x2A", "psignb mm5, [rdx]");
}



#[test]
fn enc_mmx_psignd3148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0xD8", "psignd mm3, mm0");
}



#[test]
fn enc_mmx_psignd3149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0xC0", "psignd mm0, mm0");
}



#[test]
fn enc_mmx_psignd3150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x18", "psignd mm3, [rax]");
}



#[test]
fn enc_mmx_psignd3151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0x12", "psignd mm2, [rdx]");
}



#[test]
fn enc_mmx_psignd3152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignd mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x0A, 0xE0", "psignd mm4, mm0");
}



#[test]
fn enc_mmx_psignw3153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x1A", "psignw mm3, [rdx]");
}



#[test]
fn enc_mmx_psignw3154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0xD0", "psignw mm2, mm0");
}



#[test]
fn enc_mmx_psignw3155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x00", "psignw mm0, [rax]");
}



#[test]
fn enc_mmx_psignw3156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psignw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0x09, 0x22", "psignw mm4, [rdx]");
}



#[test]
fn enc_mmx_pslld3157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xE8", "pslld mm5, mm0");
}



#[test]
fn enc_mmx_pslld3158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0xC8", "pslld mm1, mm0");
}



#[test]
fn enc_mmx_pslld3159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x00", "pslld mm0, [rax]");
}



#[test]
fn enc_mmx_pslld3160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x0A", "pslld mm1, [rdx]");
}



#[test]
fn enc_mmx_pslld3161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF2, 0x2A", "pslld mm5, [rdx]");
}



#[test]
fn enc_mmx_pslld3162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm1, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF1, 0x63", "pslld mm1, 99");
}



#[test]
fn enc_mmx_pslld3163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm5, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF5, 0x0A", "pslld mm5, 10");
}



#[test]
fn enc_mmx_pslld3164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm0, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF0, 0x45", "pslld mm0, 69");
}



#[test]
fn enc_mmx_pslld3165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm4, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF4, 0x54", "pslld mm4, 84");
}



#[test]
fn enc_mmx_pslld3166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld mm2, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xF2, 0x5D", "pslld mm2, 93");
}



#[test]
fn enc_mmx_psllq3167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm1, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF1, 0x2B", "psllq mm1, 43");
}



#[test]
fn enc_mmx_psllq3168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm1, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF1, 0x3C", "psllq mm1, 60");
}



#[test]
fn enc_mmx_psllq3169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm4, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF4, 0x61", "psllq mm4, 97");
}



#[test]
fn enc_mmx_psllq3170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF2, 0x3E", "psllq mm2, 62");
}



#[test]
fn enc_mmx_psllq3171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xF5, 0x13", "psllq mm5, 19");
}



#[test]
fn enc_mmx_psllq3172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xE8", "psllq mm5, mm0");
}



#[test]
fn enc_mmx_psllq3173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0x2A", "psllq mm5, [rdx]");
}



#[test]
fn enc_mmx_psllq3174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xD0", "psllq mm2, mm0");
}



#[test]
fn enc_mmx_psllq3175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF3, 0xC8", "psllq mm1, mm0");
}



#[test]
fn enc_mmx_psllw3176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm5, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF5, 0x23", "psllw mm5, 35");
}



#[test]
fn enc_mmx_psllw3177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm5, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF5, 0x18", "psllw mm5, 24");
}



#[test]
fn enc_mmx_psllw3178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm5, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF5, 0x39", "psllw mm5, 57");
}



#[test]
fn enc_mmx_psllw3179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm4, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF4, 0x39", "psllw mm4, 57");
}



#[test]
fn enc_mmx_psllw3180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm0, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xF0, 0x70", "psllw mm0, 112");
}



#[test]
fn enc_mmx_psllw3181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x1A", "psllw mm3, [rdx]");
}



#[test]
fn enc_mmx_psllw3182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x08", "psllw mm1, [rax]");
}



#[test]
fn enc_mmx_psllw3183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF1, 0x00", "psllw mm0, [rax]");
}



#[test]
fn enc_mmx_psrad3184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0xC8", "psrad mm1, mm0");
}



#[test]
fn enc_mmx_psrad3185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x0A", "psrad mm1, [rdx]");
}



#[test]
fn enc_mmx_psrad3186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x08", "psrad mm1, [rax]");
}



#[test]
fn enc_mmx_psrad3187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x1A", "psrad mm3, [rdx]");
}



#[test]
fn enc_mmx_psrad3188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE2, 0x18", "psrad mm3, [rax]");
}



#[test]
fn enc_mmx_psrad3189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm5, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE5, 0x0F", "psrad mm5, 15");
}



#[test]
fn enc_mmx_psrad3190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE0, 0x08", "psrad mm0, 8");
}



#[test]
fn enc_mmx_psrad3191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm0, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE0, 0x50", "psrad mm0, 80");
}



#[test]
fn enc_mmx_psrad3192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm5, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE5, 0x69", "psrad mm5, 105");
}



#[test]
fn enc_mmx_psrad3193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad mm5, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xE5, 0x1C", "psrad mm5, 28");
}



#[test]
fn enc_mmx_psraw3194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE3, 0x28", "psraw mm3, 40");
}



#[test]
fn enc_mmx_psraw3195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm0, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE0, 0x3E", "psraw mm0, 62");
}



#[test]
fn enc_mmx_psraw3196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm5, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE5, 0x31", "psraw mm5, 49");
}



#[test]
fn enc_mmx_psraw3197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE4, 0x74", "psraw mm4, 116");
}



#[test]
fn enc_mmx_psraw3198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm0, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xE0, 0x5F", "psraw mm0, 95");
}



#[test]
fn enc_mmx_psraw3199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x20", "psraw mm4, [rax]");
}



#[test]
fn enc_mmx_psraw3200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x1A", "psraw mm3, [rdx]");
}



#[test]
fn enc_mmx_psraw3201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0xD0", "psraw mm2, mm0");
}



#[test]
fn enc_mmx_psraw3202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x22", "psraw mm4, [rdx]");
}



#[test]
fn enc_mmx_psraw3203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE1, 0x08", "psraw mm1, [rax]");
}



#[test]
fn enc_mmx_psrld3204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x10", "psrld mm2, [rax]");
}



#[test]
fn enc_mmx_psrld3205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x00", "psrld mm0, [rax]");
}



#[test]
fn enc_mmx_psrld3206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x12", "psrld mm2, [rdx]");
}



#[test]
fn enc_mmx_psrld3207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0xE8", "psrld mm5, mm0");
}



#[test]
fn enc_mmx_psrld3208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD2, 0x22", "psrld mm4, [rdx]");
}



#[test]
fn enc_mmx_psrld3209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm1, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD1, 0x23", "psrld mm1, 35");
}



#[test]
fn enc_mmx_psrld3210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD0, 0x62", "psrld mm0, 98");
}



#[test]
fn enc_mmx_psrld3211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD5, 0x3B", "psrld mm5, 59");
}



#[test]
fn enc_mmx_psrld3212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm0, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD0, 0x09", "psrld mm0, 9");
}



#[test]
fn enc_mmx_psrld3213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld mm5, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x72, 0xD5, 0x69", "psrld mm5, 105");
}



#[test]
fn enc_mmx_psrlq3214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x28", "psrlq mm5, [rax]");
}



#[test]
fn enc_mmx_psrlq3215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x00", "psrlq mm0, [rax]");
}



#[test]
fn enc_mmx_psrlq3216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x0A", "psrlq mm1, [rdx]");
}



#[test]
fn enc_mmx_psrlq3217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD3, 0x12", "psrlq mm2, [rdx]");
}



#[test]
fn enc_mmx_psrlq3218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm4, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD4, 0x43", "psrlq mm4, 67");
}



#[test]
fn enc_mmx_psrlq3219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm2, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD2, 0x12", "psrlq mm2, 18");
}



#[test]
fn enc_mmx_psrlq3220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm2, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD2, 0x04", "psrlq mm2, 4");
}



#[test]
fn enc_mmx_psrlq3221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD5, 0x54", "psrlq mm5, 84");
}



#[test]
fn enc_mmx_psrlq3222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq mm5, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x73, 0xD5, 0x5B", "psrlq mm5, 91");
}



#[test]
fn enc_mmx_psrlw3223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm2, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD2, 0x7A", "psrlw mm2, 122");
}



#[test]
fn enc_mmx_psrlw3224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD3, 0x48", "psrlw mm3, 72");
}



#[test]
fn enc_mmx_psrlw3225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD0, 0x2A", "psrlw mm0, 42");
}



#[test]
fn enc_mmx_psrlw3226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm4, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD4, 0x60", "psrlw mm4, 96");
}



#[test]
fn enc_mmx_psrlw3227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm0, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x71, 0xD0, 0x5C", "psrlw mm0, 92");
}



#[test]
fn enc_mmx_psrlw3228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xD8", "psrlw mm3, mm0");
}



#[test]
fn enc_mmx_psrlw3229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xE0", "psrlw mm4, mm0");
}



#[test]
fn enc_mmx_psrlw3230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x28", "psrlw mm5, [rax]");
}



#[test]
fn enc_mmx_psrlw3231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0x18", "psrlw mm3, [rax]");
}



#[test]
fn enc_mmx_psrlw3232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD1, 0xE8", "psrlw mm5, mm0");
}



#[test]
fn enc_mmx_psubb3233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x02", "psubb mm0, [rdx]");
}



#[test]
fn enc_mmx_psubb3234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x1A", "psubb mm3, [rdx]");
}



#[test]
fn enc_mmx_psubb3235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0xE8", "psubb mm5, mm0");
}



#[test]
fn enc_mmx_psubb3236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0xC0", "psubb mm0, mm0");
}



#[test]
fn enc_mmx_psubb3237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF8, 0x10", "psubb mm2, [rax]");
}



#[test]
fn enc_mmx_psubd3238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x2A", "psubd mm5, [rdx]");
}



#[test]
fn enc_mmx_psubd3239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x18", "psubd mm3, [rax]");
}



#[test]
fn enc_mmx_psubd3240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x02", "psubd mm0, [rdx]");
}



#[test]
fn enc_mmx_psubd3241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0xC8", "psubd mm1, mm0");
}



#[test]
fn enc_mmx_psubd3242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFA, 0x12", "psubd mm2, [rdx]");
}



#[test]
fn enc_mmx_psubsb3243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x08", "psubsb mm1, [rax]");
}



#[test]
fn enc_mmx_psubsb3244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x10", "psubsb mm2, [rax]");
}



#[test]
fn enc_mmx_psubsb3245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0x20", "psubsb mm4, [rax]");
}



#[test]
fn enc_mmx_psubsb3246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE8, 0xD8", "psubsb mm3, mm0");
}



#[test]
fn enc_mmx_psubsiw3247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x18", "psubsiw mm3, [rax]");
}



#[test]
fn enc_mmx_psubsiw3248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x2A", "psubsiw mm5, [rdx]");
}



#[test]
fn enc_mmx_psubsiw3249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsiw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xC0", "psubsiw mm0, mm0");
}



#[test]
fn enc_mmx_psubsw3250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x2A", "psubsw mm5, [rdx]");
}



#[test]
fn enc_mmx_psubsw3251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0xC0", "psubsw mm0, mm0");
}



#[test]
fn enc_mmx_psubsw3252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x08", "psubsw mm1, [rax]");
}



#[test]
fn enc_mmx_psubsw3253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0xE0", "psubsw mm4, mm0");
}



#[test]
fn enc_mmx_psubsw3254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xE9, 0x18", "psubsw mm3, [rax]");
}



#[test]
fn enc_mmx_psubusb3255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x08", "psubusb mm1, [rax]");
}



#[test]
fn enc_mmx_psubusb3256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x28", "psubusb mm5, [rax]");
}



#[test]
fn enc_mmx_psubusb3257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0xC8", "psubusb mm1, mm0");
}



#[test]
fn enc_mmx_psubusb3258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x22", "psubusb mm4, [rdx]");
}



#[test]
fn enc_mmx_psubusb3259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD8, 0x20", "psubusb mm4, [rax]");
}



#[test]
fn enc_mmx_psubusw3260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x12", "psubusw mm2, [rdx]");
}



#[test]
fn enc_mmx_psubusw3261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0xE8", "psubusw mm5, mm0");
}



#[test]
fn enc_mmx_psubusw3262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x28", "psubusw mm5, [rax]");
}



#[test]
fn enc_mmx_psubusw3263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xD9, 0x02", "psubusw mm0, [rdx]");
}



#[test]
fn enc_mmx_psubw3264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x12", "psubw mm2, [rdx]");
}



#[test]
fn enc_mmx_psubw3265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xC8", "psubw mm1, mm0");
}



#[test]
fn enc_mmx_psubw3266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xD8", "psubw mm3, mm0");
}



#[test]
fn enc_mmx_psubw3267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0xE8", "psubw mm5, mm0");
}



#[test]
fn enc_mmx_psubw3268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF9, 0x10", "psubw mm2, [rax]");
}



#[test]
fn enc_mmx_punpckhbw3269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x1A", "punpckhbw mm3, [rdx]");
}



#[test]
fn enc_mmx_punpckhbw3270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0xC0", "punpckhbw mm0, mm0");
}



#[test]
fn enc_mmx_punpckhbw3271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x68, 0x18", "punpckhbw mm3, [rax]");
}



#[test]
fn enc_mmx_punpckhdq3272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0xD0", "punpckhdq mm2, mm0");
}



#[test]
fn enc_mmx_punpckhdq3273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x10", "punpckhdq mm2, [rax]");
}



#[test]
fn enc_mmx_punpckhdq3274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x22", "punpckhdq mm4, [rdx]");
}



#[test]
fn enc_mmx_punpckhdq3275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x6A, 0x2A", "punpckhdq mm5, [rdx]");
}



#[test]
fn enc_mmx_punpckhwd3276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x20", "punpckhwd mm4, [rax]");
}



#[test]
fn enc_mmx_punpckhwd3277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x28", "punpckhwd mm5, [rax]");
}



#[test]
fn enc_mmx_punpckhwd3278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x12", "punpckhwd mm2, [rdx]");
}



#[test]
fn enc_mmx_punpckhwd3279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0xE8", "punpckhwd mm5, mm0");
}



#[test]
fn enc_mmx_punpckhwd3280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x69, 0x2A", "punpckhwd mm5, [rdx]");
}



#[test]
fn enc_mmx_punpcklbw3281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x0A", "punpcklbw mm1, [rdx]");
}



#[test]
fn enc_mmx_punpcklbw3282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x18", "punpcklbw mm3, [rax]");
}



#[test]
fn enc_mmx_punpcklbw3283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x60, 0x00", "punpcklbw mm0, [rax]");
}



#[test]
fn enc_mmx_punpckldq3284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xD0", "punpckldq mm2, mm0");
}



#[test]
fn enc_mmx_punpckldq3285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xD8", "punpckldq mm3, mm0");
}



#[test]
fn enc_mmx_punpckldq3286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x02", "punpckldq mm0, [rdx]");
}



#[test]
fn enc_mmx_punpckldq3287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0x28", "punpckldq mm5, [rax]");
}



#[test]
fn enc_mmx_punpckldq3288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x62, 0xC0", "punpckldq mm0, mm0");
}



#[test]
fn enc_mmx_punpcklwd3289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0xC8", "punpcklwd mm1, mm0");
}



#[test]
fn enc_mmx_punpcklwd3290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x10", "punpcklwd mm2, [rax]");
}



#[test]
fn enc_mmx_punpcklwd3291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x0A", "punpcklwd mm1, [rdx]");
}



#[test]
fn enc_mmx_punpcklwd3292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x61, 0x12", "punpcklwd mm2, [rdx]");
}



#[test]
fn enc_mmx_pxor3293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x18", "pxor mm3, [rax]");
}



#[test]
fn enc_mmx_pxor3294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x00", "pxor mm0, [rax]");
}



#[test]
fn enc_mmx_pxor3295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x2A", "pxor mm5, [rdx]");
}



#[test]
fn enc_mmx_pxor3296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0xD8", "pxor mm3, mm0");
}



#[test]
fn enc_mmx_pxor3297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xEF, 0x10", "pxor mm2, [rax]");
}


