
#[test]
fn enc_rtm_xabort5918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x4B", "xabort 75");
}



#[test]
fn enc_rtm_xabort5919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x37", "xabort 55");
}



#[test]
fn enc_rtm_xabort5920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x4F", "xabort 79");
}



#[test]
fn enc_rtm_xabort5921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x58", "xabort 88");
}



#[test]
fn enc_rtm_xabort5922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x45", "xabort 69");
}



#[test]
fn enc_rtm_xend5923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xend
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD5", "xend");
}



#[test]
fn enc_rtm_xtest5924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xtest
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD6", "xtest");
}


