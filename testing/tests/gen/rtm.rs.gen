
#[test]
fn enc_rtm_xabort5792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x05", "xabort 5");
}



#[test]
fn enc_rtm_xabort5793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x24", "xabort 36");
}



#[test]
fn enc_rtm_xabort5794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x23", "xabort 35");
}



#[test]
fn enc_rtm_xabort5795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xabort 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC6, 0xF8, 0x58", "xabort 88");
}



#[test]
fn enc_rtm_xend5796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xend
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD5", "xend");
}



#[test]
fn enc_rtm_xtest5797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xtest
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD6", "xtest");
}


