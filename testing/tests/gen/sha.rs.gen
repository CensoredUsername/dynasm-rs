
#[test]
fn enc_sha_sha1msg15254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC9, 0xD7", "sha1msg1 xmm2, xmm15");
}



#[test]
fn enc_sha_sha1msg15255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC9, 0xFC", "sha1msg1 xmm15, xmm12");
}



#[test]
fn enc_sha_sha1msg15256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xC9, 0xFB", "sha1msg1 xmm15, xmm3");
}



#[test]
fn enc_sha_sha1msg15257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0xD3", "sha1msg1 xmm2, xmm3");
}



#[test]
fn enc_sha_sha1msg15258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC9, 0xFF", "sha1msg1 xmm15, xmm15");
}



#[test]
fn enc_sha_sha1msg25259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xD4", "sha1msg2 xmm2, xmm12");
}



#[test]
fn enc_sha_sha1msg25260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0x22", "sha1msg2 xmm4, OWORD [rdx]");
}



#[test]
fn enc_sha_sha1msg25261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0xE3", "sha1msg2 xmm12, xmm3");
}



#[test]
fn enc_sha_sha1msg25262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0x3A", "sha1msg2 xmm15, OWORD [rdx]");
}



#[test]
fn enc_sha_sha1msg25263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0xE0", "sha1msg2 xmm12, xmm0");
}



#[test]
fn enc_sha_sha1nexte5264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC8, 0xD4", "sha1nexte xmm2, xmm12");
}



#[test]
fn enc_sha_sha1nexte5265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0x14, 0x42", "sha1nexte xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha1nexte5266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC8, 0xDC", "sha1nexte xmm11, xmm12");
}



#[test]
fn enc_sha_sha1nexte5267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC8, 0xFB", "sha1nexte xmm15, xmm11");
}



#[test]
fn enc_sha_sha1nexte5268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0x0C, 0x42", "sha1nexte xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha1rnds45269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm11, xmm4, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x3A, 0xCC, 0xDC, 0x2B", "sha1rnds4 xmm11, xmm4, 43");
}



#[test]
fn enc_sha_sha1rnds45270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm1, xmm0, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xC8, 0x23", "sha1rnds4 xmm1, xmm0, 35");
}



#[test]
fn enc_sha_sha1rnds45271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm1, xmm12, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x3A, 0xCC, 0xCC, 0x27", "sha1rnds4 xmm1, xmm12, 39");
}



#[test]
fn enc_sha_sha1rnds45272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm12, xmm15, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x3A, 0xCC, 0xE7, 0x0B", "sha1rnds4 xmm12, xmm15, 11");
}



#[test]
fn enc_sha_sha1rnds45273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm0, xmm1, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xC1, 0x76", "sha1rnds4 xmm0, xmm1, 118");
}



#[test]
fn enc_sha_sha256msg15274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x22", "sha256msg1 xmm4, OWORD [rdx]");
}



#[test]
fn enc_sha_sha256msg15275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCC, 0xE2", "sha256msg1 xmm12, xmm2");
}



#[test]
fn enc_sha_sha256msg15276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xC2", "sha256msg1 xmm0, xmm2");
}



#[test]
fn enc_sha_sha256msg15277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0x14, 0x42", "sha256msg1 xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha256msg15278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xD8", "sha256msg1 xmm3, xmm0");
}



#[test]
fn enc_sha_sha256msg25279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xCF", "sha256msg2 xmm1, xmm15");
}



#[test]
fn enc_sha_sha256msg25280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCD, 0xE4", "sha256msg2 xmm4, xmm4");
}



#[test]
fn enc_sha_sha256msg25281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xCB", "sha256msg2 xmm1, xmm11");
}



#[test]
fn enc_sha_sha256msg25282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xCD, 0xFC", "sha256msg2 xmm15, xmm12");
}



#[test]
fn enc_sha_sha256msg25283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xF8", "sha256msg2 xmm15, xmm0");
}



#[test]
fn enc_sha_sha256rnds25284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xE2", "sha256rnds2 xmm4, xmm2");
}



#[test]
fn enc_sha_sha256rnds25285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xCF", "sha256rnds2 xmm1, xmm15");
}



#[test]
fn enc_sha_sha256rnds25286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCB, 0x3C, 0x42", "sha256rnds2 xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sha_sha256rnds25287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xCB, 0xFB", "sha256rnds2 xmm15, xmm11");
}



#[test]
fn enc_sha_sha256rnds25288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCB, 0xE2", "sha256rnds2 xmm12, xmm2");
}


