
#[test]
fn enc_sha1msg13702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0xD0", "sha1msg1 xmm2, xmm0");
}



#[test]
fn enc_sha1msg13703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC9, 0xD4", "sha1msg1 xmm2, xmm12");
}



#[test]
fn enc_sha1msg13704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0xDC", "sha1msg1 xmm3, xmm4");
}



#[test]
fn enc_sha1msg13705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC9, 0xE4", "sha1msg1 xmm4, xmm12");
}



#[test]
fn enc_sha1msg13706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg1 xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC9, 0x12", "sha1msg1 xmm2, OWORD [rdx]");
}



#[test]
fn enc_sha1msg23707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCA, 0xE4", "sha1msg2 xmm4, xmm12");
}



#[test]
fn enc_sha1msg23708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0xD9", "sha1msg2 xmm3, xmm1");
}



#[test]
fn enc_sha1msg23709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0xE4", "sha1msg2 xmm4, xmm4");
}



#[test]
fn enc_sha1msg23710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCA, 0xE2", "sha1msg2 xmm4, xmm2");
}



#[test]
fn enc_sha1msg23711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1msg2 xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCA, 0xDA", "sha1msg2 xmm11, xmm2");
}



#[test]
fn enc_sha1nexte3712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC8, 0xC4", "sha1nexte xmm0, xmm12");
}



#[test]
fn enc_sha1nexte3713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0x1A", "sha1nexte xmm3, OWORD [rdx]");
}



#[test]
fn enc_sha1nexte3714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xC8, 0xDB", "sha1nexte xmm3, xmm11");
}



#[test]
fn enc_sha1nexte3715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xC8, 0xC3", "sha1nexte xmm0, xmm3");
}



#[test]
fn enc_sha1nexte3716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1nexte xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xC8, 0xDC", "sha1nexte xmm11, xmm12");
}



#[test]
fn enc_sha1rnds43717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm1, xmm11, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x3A, 0xCC, 0xCB, 0x5F", "sha1rnds4 xmm1, xmm11, 95");
}



#[test]
fn enc_sha1rnds43718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm2, xmm2, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xD2, 0x31", "sha1rnds4 xmm2, xmm2, 49");
}



#[test]
fn enc_sha1rnds43719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm0, xmm0, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xC0, 0x26", "sha1rnds4 xmm0, xmm0, 38");
}



#[test]
fn enc_sha1rnds43720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm2, xmm12, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x3A, 0xCC, 0xD4, 0x02", "sha1rnds4 xmm2, xmm12, 2");
}



#[test]
fn enc_sha1rnds43721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha1rnds4 xmm3, xmm4, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x3A, 0xCC, 0xDC, 0x44", "sha1rnds4 xmm3, xmm4, 68");
}



#[test]
fn enc_sha256msg13722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xCC, 0xE7", "sha256msg1 xmm12, xmm15");
}



#[test]
fn enc_sha256msg13723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xE1", "sha256msg1 xmm4, xmm1");
}



#[test]
fn enc_sha256msg13724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCC, 0xCA", "sha256msg1 xmm1, xmm2");
}



#[test]
fn enc_sha256msg13725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCC, 0xDF", "sha256msg1 xmm3, xmm15");
}



#[test]
fn enc_sha256msg13726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg1 xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x38, 0xCC, 0xFF", "sha256msg1 xmm15, xmm15");
}



#[test]
fn enc_sha256msg23727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCD, 0xDB", "sha256msg2 xmm11, xmm3");
}



#[test]
fn enc_sha256msg23728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCD, 0x22", "sha256msg2 xmm4, OWORD [rdx]");
}



#[test]
fn enc_sha256msg23729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xDF", "sha256msg2 xmm3, xmm15");
}



#[test]
fn enc_sha256msg23730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256msg2 xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCD, 0xCC", "sha256msg2 xmm1, xmm12");
}



#[test]
fn enc_sha256rnds23731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0xCB", "sha256rnds2 xmm1, xmm3");
}



#[test]
fn enc_sha256rnds23732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0x18", "sha256rnds2 xmm3, OWORD [rax]");
}



#[test]
fn enc_sha256rnds23733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x38, 0xCB, 0xE3", "sha256rnds2 xmm4, xmm11");
}



#[test]
fn enc_sha256rnds23734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x38, 0xCB, 0x0A", "sha256rnds2 xmm1, OWORD [rdx]");
}



#[test]
fn enc_sha256rnds23735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sha256rnds2 xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x38, 0xCB, 0xD9", "sha256rnds2 xmm11, xmm1");
}


