
#[test]
fn enc_sse_addps4256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x58, 0xDB", "addps xmm11, xmm3");
}



#[test]
fn enc_sse_addps4257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x02", "addps xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse_addps4258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0xC9", "addps xmm1, xmm1");
}



#[test]
fn enc_sse_addps4259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0xDB", "addps xmm3, xmm3");
}



#[test]
fn enc_sse_addps4260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x58, 0x00", "addps xmm0, OWORD [rax]");
}



#[test]
fn enc_sse_addss4261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0xE2", "addss xmm12, xmm2");
}



#[test]
fn enc_sse_addss4262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x58, 0xFC", "addss xmm15, xmm12");
}



#[test]
fn enc_sse_addss4263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x58, 0xE3", "addss xmm4, xmm11");
}



#[test]
fn enc_sse_addss4264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x58, 0xDC", "addss xmm11, xmm12");
}



#[test]
fn enc_sse_addss4265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xD2", "addss xmm2, xmm2");
}



#[test]
fn enc_sse_addss4266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0x20", "addss xmm4, DWORD [rax]");
}



#[test]
fn enc_sse_addss4267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0x1C, 0x42", "addss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_addss4268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0x78, 0x10", "addss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_addss4269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0x24, 0x42", "addss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_addss4270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0x3C, 0x42", "addss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesdec4271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDE, 0xE4", "aesdec xmm4, xmm12");
}



#[test]
fn enc_sse_aesdec4272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDE, 0xCC", "aesdec xmm1, xmm12");
}



#[test]
fn enc_sse_aesdec4273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDE, 0x1A", "aesdec xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse_aesdec4274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDE, 0xDF", "aesdec xmm11, xmm15");
}



#[test]
fn enc_sse_aesdeclast4275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0x0C, 0x42", "aesdeclast xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesdeclast4276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDF, 0xE3", "aesdeclast xmm12, xmm3");
}



#[test]
fn enc_sse_aesdeclast4277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0xC4", "aesdeclast xmm0, xmm4");
}



#[test]
fn enc_sse_aesdeclast4278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDF, 0xE4", "aesdeclast xmm4, xmm12");
}



#[test]
fn enc_sse_aesdeclast4279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDF, 0xDF", "aesdeclast xmm11, xmm15");
}



#[test]
fn enc_sse_aesenc4280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDC, 0xDB", "aesenc xmm3, xmm11");
}



#[test]
fn enc_sse_aesenc4281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xDC", "aesenc xmm3, xmm4");
}



#[test]
fn enc_sse_aesenc4282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0x04, 0x42", "aesenc xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesenc4283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0x1C, 0x42", "aesenc xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesenc4284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDC, 0xF8", "aesenc xmm15, xmm0");
}



#[test]
fn enc_sse_aesenclast4285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDD, 0x3A", "aesenclast xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse_aesenclast4286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xC3", "aesenclast xmm0, xmm3");
}



#[test]
fn enc_sse_aesenclast4287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDD, 0xCC", "aesenclast xmm1, xmm12");
}



#[test]
fn enc_sse_aesenclast4288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDD, 0xDA", "aesenclast xmm11, xmm2");
}



#[test]
fn enc_sse_aesenclast4289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xD1", "aesenclast xmm2, xmm1");
}



#[test]
fn enc_sse_aesimc4290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xD2", "aesimc xmm2, xmm2");
}



#[test]
fn enc_sse_aesimc4291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDB, 0xFB", "aesimc xmm15, xmm11");
}



#[test]
fn enc_sse_aesimc4292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0x02", "aesimc xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse_aesimc4293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDB, 0x22", "aesimc xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse_aesimc4294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDB, 0xDB", "aesimc xmm11, xmm3");
}



#[test]
fn enc_sse_aeskeygenassist4295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm3, xmm15, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0xDF, 0xDF, 0x7B", "aeskeygenassist xmm3, xmm15, 123");
}



#[test]
fn enc_sse_aeskeygenassist4296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm12, xmm15, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0xDF, 0xE7, 0x58", "aeskeygenassist xmm12, xmm15, 88");
}



#[test]
fn enc_sse_aeskeygenassist4297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm15, xmm11, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0xDF, 0xFB, 0x12", "aeskeygenassist xmm15, xmm11, 18");
}



#[test]
fn enc_sse_aeskeygenassist4298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm0, OWORD [rdx], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0x02, 0x33", "aeskeygenassist xmm0, OWORD [rdx], 51");
}



#[test]
fn enc_sse_aeskeygenassist4299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm3, xmm11, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0xDF, 0xDB, 0x50", "aeskeygenassist xmm3, xmm11, 80");
}



#[test]
fn enc_sse_andnps4300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0xD8", "andnps xmm11, xmm0");
}



#[test]
fn enc_sse_andnps4301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0x24, 0x42", "andnps xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_andnps4302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0x1A", "andnps xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse_andnps4303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0x1A", "andnps xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse_andnps4304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x55, 0xD7", "andnps xmm2, xmm15");
}



#[test]
fn enc_sse_andps4305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x18", "andps xmm3, OWORD [rax]");
}



#[test]
fn enc_sse_andps4306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x54, 0xDB", "andps xmm11, xmm3");
}



#[test]
fn enc_sse_andps4307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x0A", "andps xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse_andps4308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x54, 0xDC", "andps xmm3, xmm12");
}



#[test]
fn enc_sse_comiss4309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xC4", "comiss xmm0, xmm4");
}



#[test]
fn enc_sse_comiss4310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0xDC", "comiss xmm11, xmm4");
}



#[test]
fn enc_sse_comiss4311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2F, 0xD7", "comiss xmm2, xmm15");
}



#[test]
fn enc_sse_comiss4312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0xE3", "comiss xmm12, xmm3");
}



#[test]
fn enc_sse_comiss4313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0xD8", "comiss xmm11, xmm0");
}



#[test]
fn enc_sse_comiss4314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x1C, 0x42", "comiss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_comiss4315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0x18", "comiss xmm11, DWORD [rax]");
}



#[test]
fn enc_sse_comiss4316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x40, 0x10", "comiss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_comiss4317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x24, 0x42", "comiss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_comiss4318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x48, 0x10", "comiss xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvtsi2ss4319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0xC8", "cvtsi2ss xmm1, rax");
}



#[test]
fn enc_sse_cvtsi2ss4320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x00", "cvtsi2ss xmm0, [rax]");
}



#[test]
fn enc_sse_cvtsi2ss4321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm12, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0xE0", "cvtsi2ss xmm12, rax");
}



#[test]
fn enc_sse_cvtsi2ss4322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2A, 0x38", "cvtsi2ss xmm15, [rax]");
}



#[test]
fn enc_sse_cvtsi2ss4323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm2, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0xD0", "cvtsi2ss xmm2, rax");
}



#[test]
fn enc_sse_cvtsi2ss4324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2A, 0x18", "cvtsi2ss xmm11, DWORD [rax]");
}



#[test]
fn enc_sse_cvtsi2ss4325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm3, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0xD8", "cvtsi2ss xmm3, eax");
}



#[test]
fn enc_sse_cvtsi2ss4326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x00", "cvtsi2ss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_cvtsi2ss4327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm12, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2A, 0xE0", "cvtsi2ss xmm12, eax");
}



#[test]
fn enc_sse_cvtsi2ss4328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x10", "cvtsi2ss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si4329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xCA", "cvtss2si rcx, xmm2");
}



#[test]
fn enc_sse_cvtss2si4330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2D, 0xCF", "cvtss2si rcx, xmm15");
}



#[test]
fn enc_sse_cvtss2si4331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xCC", "cvtss2si rcx, xmm4");
}



#[test]
fn enc_sse_cvtss2si4332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD2", "cvtss2si rdx, xmm2");
}



#[test]
fn enc_sse_cvtss2si4333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD0", "cvtss2si rdx, xmm0");
}



#[test]
fn enc_sse_cvtss2si4334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rax, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x40, 0x10", "cvtss2si rax, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvtss2si4335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x14, 0x42", "cvtss2si rdx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvtss2si4336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x0C, 0x42", "cvtss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvtss2si4337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x10", "cvtss2si rdx, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si4338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xD2", "cvtss2si edx, xmm2");
}



#[test]
fn enc_sse_cvtss2si4339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2D, 0xC3", "cvtss2si eax, xmm11");
}



#[test]
fn enc_sse_cvtss2si4340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xD4", "cvtss2si edx, xmm4");
}



#[test]
fn enc_sse_cvtss2si4341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xD1", "cvtss2si edx, xmm1");
}



#[test]
fn enc_sse_cvtss2si4342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2D, 0xC7", "cvtss2si eax, xmm15");
}



#[test]
fn enc_sse_cvtss2si4343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si ecx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x0C, 0x42", "cvtss2si ecx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvtss2si4344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x00", "cvtss2si eax, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si4345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x10", "cvtss2si edx, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si4346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x04, 0x42", "cvtss2si eax, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvttss2si4347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2C, 0xCC", "cvttss2si rcx, xmm12");
}



#[test]
fn enc_sse_cvttss2si4348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2C, 0xD4", "cvttss2si rdx, xmm12");
}



#[test]
fn enc_sse_cvttss2si4349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD2", "cvttss2si rdx, xmm2");
}



#[test]
fn enc_sse_cvttss2si4350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD3", "cvttss2si rdx, xmm3");
}



#[test]
fn enc_sse_cvttss2si4351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xC1", "cvttss2si rax, xmm1");
}



#[test]
fn enc_sse_cvttss2si4352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x0C, 0x42", "cvttss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvttss2si4353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x10", "cvttss2si rdx, DWORD [rax]");
}



#[test]
fn enc_sse_cvttss2si4354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x50, 0x10", "cvttss2si rdx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si4355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x48, 0x10", "cvttss2si rcx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si4356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x08", "cvttss2si rcx, DWORD [rax]");
}



#[test]
fn enc_sse_cvttss2si4357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si ecx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0xCC", "cvttss2si ecx, xmm4");
}



#[test]
fn enc_sse_cvttss2si4358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2C, 0xD4", "cvttss2si edx, xmm12");
}



#[test]
fn enc_sse_cvttss2si4359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2C, 0xC7", "cvttss2si eax, xmm15");
}



#[test]
fn enc_sse_cvttss2si4360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2C, 0xC3", "cvttss2si eax, xmm11");
}



#[test]
fn enc_sse_cvttss2si4361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0xCB", "cvttss2si ecx, xmm3");
}



#[test]
fn enc_sse_cvttss2si4362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x50, 0x10", "cvttss2si edx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si4363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si ecx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x48, 0x10", "cvttss2si ecx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si4364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si eax, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x40, 0x10", "cvttss2si eax, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si4365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si eax, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x04, 0x42", "cvttss2si eax, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_divps4366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5E, 0xE3", "divps xmm12, xmm11");
}



#[test]
fn enc_sse_divps4367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5E, 0xDC", "divps xmm11, xmm12");
}



#[test]
fn enc_sse_divps4368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0xE3", "divps xmm12, xmm3");
}



#[test]
fn enc_sse_divps4369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0xF9", "divps xmm15, xmm1");
}



#[test]
fn enc_sse_divps4370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5E, 0xD7", "divps xmm2, xmm15");
}



#[test]
fn enc_sse_divss4371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5E, 0xFC", "divss xmm15, xmm12");
}



#[test]
fn enc_sse_divss4372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0xE3", "divss xmm12, xmm3");
}



#[test]
fn enc_sse_divss4373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xDC", "divss xmm3, xmm4");
}



#[test]
fn enc_sse_divss4374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xDA", "divss xmm3, xmm2");
}



#[test]
fn enc_sse_divss4375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0xF9", "divss xmm15, xmm1");
}



#[test]
fn enc_sse_divss4376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0x48, 0x10", "divss xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse_divss4377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0x08", "divss xmm1, DWORD [rax]");
}



#[test]
fn enc_sse_divss4378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0x20", "divss xmm4, DWORD [rax]");
}



#[test]
fn enc_sse_divss4379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0x24, 0x42", "divss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ldmxcsr4380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x10", "ldmxcsr DWORD [rax]");
}



#[test]
fn enc_sse_ldmxcsr4381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x50, 0x10", "ldmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_sse_ldmxcsr4382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x14, 0x42", "ldmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxps4383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0xC8", "maxps xmm1, xmm0");
}



#[test]
fn enc_sse_maxps4384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0xD8", "maxps xmm11, xmm0");
}



#[test]
fn enc_sse_maxps4385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0x1C, 0x42", "maxps xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxps4386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0xDC", "maxps xmm3, xmm4");
}



#[test]
fn enc_sse_maxps4387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0x24, 0x42", "maxps xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxss4388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xD2", "maxss xmm2, xmm2");
}



#[test]
fn enc_sse_maxss4389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xC9", "maxss xmm1, xmm1");
}



#[test]
fn enc_sse_maxss4390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xDB", "maxss xmm3, xmm3");
}



#[test]
fn enc_sse_maxss4391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xC3", "maxss xmm0, xmm3");
}



#[test]
fn enc_sse_maxss4392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xD8", "maxss xmm3, xmm0");
}



#[test]
fn enc_sse_maxss4393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x50, 0x10", "maxss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse_maxss4394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x08", "maxss xmm1, DWORD [rax]");
}



#[test]
fn enc_sse_maxss4395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x0C, 0x42", "maxss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxss4396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x24, 0x42", "maxss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxss4397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x10", "maxss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_minps4398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5D, 0xE4", "minps xmm12, xmm4");
}



#[test]
fn enc_sse_minps4399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0x00", "minps xmm0, OWORD [rax]");
}



#[test]
fn enc_sse_minps4400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xDC", "minps xmm3, xmm4");
}



#[test]
fn enc_sse_minps4401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5D, 0xE3", "minps xmm12, xmm11");
}



#[test]
fn enc_sse_minps4402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5D, 0xCA", "minps xmm1, xmm2");
}



#[test]
fn enc_sse_minss4403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0xE4", "minss xmm4, xmm4");
}



#[test]
fn enc_sse_minss4404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0xFA", "minss xmm15, xmm2");
}



#[test]
fn enc_sse_minss4405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0xFB", "minss xmm15, xmm3");
}



#[test]
fn enc_sse_minss4406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xDF", "minss xmm3, xmm15");
}



#[test]
fn enc_sse_minss4407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0xFC", "minss xmm15, xmm4");
}



#[test]
fn enc_sse_minss4408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0x24, 0x42", "minss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_minss4409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0x50, 0x10", "minss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse_minss4410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0x18", "minss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_minss4411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0x78, 0x10", "minss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_minss4412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0x0C, 0x42", "minss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movaps4413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xCA", "movaps xmm1, xmm2");
}



#[test]
fn enc_sse_movaps4414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xD9", "movaps xmm3, xmm1");
}



#[test]
fn enc_sse_movaps4415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x28, 0xC7", "movaps xmm0, xmm15");
}



#[test]
fn enc_sse_movaps4416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xD1", "movaps xmm2, xmm1");
}



#[test]
fn enc_sse_movaps4417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xD2", "movaps xmm2, xmm2");
}



#[test]
fn enc_sse_movaps4418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x28, 0xDB", "movaps xmm3, xmm11");
}



#[test]
fn enc_sse_movaps4419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xCA", "movaps xmm1, xmm2");
}



#[test]
fn enc_sse_movaps4420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x28, 0xE4", "movaps xmm4, xmm12");
}



#[test]
fn enc_sse_movaps4421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xC1", "movaps xmm0, xmm1");
}



#[test]
fn enc_sse_movhlps4422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0xC9", "movhlps xmm1, xmm1");
}



#[test]
fn enc_sse_movhlps4423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x12, 0xDC", "movhlps xmm11, xmm12");
}



#[test]
fn enc_sse_movhlps4424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0xDB", "movhlps xmm11, xmm3");
}



#[test]
fn enc_sse_movhlps4425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x12, 0xE4", "movhlps xmm12, xmm12");
}



#[test]
fn enc_sse_movhlps4426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0xDC", "movhlps xmm3, xmm4");
}



#[test]
fn enc_sse_movhps4427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x60, 0x10", "movhps xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse_movhps4428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x04, 0x42", "movhps xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movhps4429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0x3C, 0x42", "movhps xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movhps4430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x0C, 0x42", "movhps xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movhps4431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x00", "movhps xmm0, QWORD [rax]");
}



#[test]
fn enc_sse_movhps4432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm12");
}



#[test]
fn enc_sse_movhps4433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x00", "movhps QWORD [rax], xmm0");
}



#[test]
fn enc_sse_movhps4434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x38", "movhps QWORD [rax], xmm15");
}



#[test]
fn enc_sse_movhps4435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x14, 0x42", "movhps QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse_movhps4436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x04, 0x42", "movhps QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_sse_movlhps4437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0xCA", "movlhps xmm1, xmm2");
}



#[test]
fn enc_sse_movlhps4438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xF8", "movlhps xmm15, xmm0");
}



#[test]
fn enc_sse_movlhps4439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x16, 0xDC", "movlhps xmm3, xmm12");
}



#[test]
fn enc_sse_movlhps4440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x16, 0xFC", "movlhps xmm15, xmm12");
}



#[test]
fn enc_sse_movlhps4441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x16, 0xCF", "movlhps xmm1, xmm15");
}



#[test]
fn enc_sse_movlps4442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x20", "movlps QWORD [rax], xmm4");
}



#[test]
fn enc_sse_movlps4443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x0C, 0x42", "movlps QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse_movlps4444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x13, 0x3C, 0x42", "movlps QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse_movlps4445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x13, 0x18", "movlps QWORD [rax], xmm11");
}



#[test]
fn enc_sse_movlps4446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x00", "movlps xmm0, QWORD [rax]");
}



#[test]
fn enc_sse_movlps4447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x0C, 0x42", "movlps xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movlps4448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x60, 0x10", "movlps xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse_movlps4449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x20", "movlps xmm4, QWORD [rax]");
}



#[test]
fn enc_sse_movmskps4450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xC7", "movmskps rax, xmm15");
}



#[test]
fn enc_sse_movmskps4451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xC4", "movmskps rax, xmm12");
}



#[test]
fn enc_sse_movmskps4452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC2", "movmskps rax, xmm2");
}



#[test]
fn enc_sse_movmskps4453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rdx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xD3", "movmskps rdx, xmm3");
}



#[test]
fn enc_sse_movmskps4454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xD4", "movmskps rdx, xmm12");
}



#[test]
fn enc_sse_movmskps4455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps edx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xD2", "movmskps edx, xmm2");
}



#[test]
fn enc_sse_movmskps4456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xC3", "movmskps eax, xmm3");
}



#[test]
fn enc_sse_movmskps4457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps eax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xC2", "movmskps eax, xmm2");
}



#[test]
fn enc_sse_movmskps4458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps eax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xC1", "movmskps eax, xmm1");
}



#[test]
fn enc_sse_movntps4459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x60, 0x10", "movntps OWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse_movntps4460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x58, 0x10", "movntps OWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse_movntps4461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x58, 0x10", "movntps OWORD [rax + 16], xmm3");
}



#[test]
fn enc_sse_movntps4462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x78, 0x10", "movntps OWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse_movntps4463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x10", "movntps OWORD [rax], xmm2");
}



#[test]
fn enc_sse_movss4464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x60, 0x10", "movss DWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse_movss4465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x11, 0x48, 0x10", "movss DWORD [rax + 16], xmm1");
}



#[test]
fn enc_sse_movss4466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x78, 0x10", "movss DWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse_movss4467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x60, 0x10", "movss DWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse_movss4468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xD8", "movss xmm11, xmm0");
}



#[test]
fn enc_sse_movss4469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xD9", "movss xmm3, xmm1");
}



#[test]
fn enc_sse_movss4470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xCB", "movss xmm1, xmm3");
}



#[test]
fn enc_sse_movss4471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xF8", "movss xmm15, xmm0");
}



#[test]
fn enc_sse_movss4472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xFB", "movss xmm15, xmm3");
}



#[test]
fn enc_sse_movss4473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0x00", "movss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_movss4474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0x1C, 0x42", "movss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movss4475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0x24, 0x42", "movss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movss4476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0x58, 0x10", "movss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_movups4477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups OWORD [rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x11, 0x22", "movups OWORD [rdx], xmm12");
}



#[test]
fn enc_sse_movups4478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x10, 0xE4", "movups xmm4, xmm12");
}



#[test]
fn enc_sse_movups4479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xCC", "movups xmm1, xmm4");
}



#[test]
fn enc_sse_movups4480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x10, 0xCC", "movups xmm1, xmm12");
}



#[test]
fn enc_sse_movups4481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x11, 0x1C, 0x42", "movups OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse_movups4482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xD8", "movups xmm3, xmm0");
}



#[test]
fn enc_sse_movups4483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0x3C, 0x42", "movups xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movups4484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xD8", "movups xmm11, xmm0");
}



#[test]
fn enc_sse_movups4485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x10, 0xFF", "movups xmm15, xmm15");
}



#[test]
fn enc_sse_movups4486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0x1A", "movups xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse_mulps4487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xC9", "mulps xmm1, xmm1");
}



#[test]
fn enc_sse_mulps4488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x59, 0xD4", "mulps xmm2, xmm12");
}



#[test]
fn enc_sse_mulps4489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x59, 0xE3", "mulps xmm12, xmm3");
}



#[test]
fn enc_sse_mulps4490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x59, 0xE4", "mulps xmm4, xmm12");
}



#[test]
fn enc_sse_mulps4491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x59, 0x20", "mulps xmm12, OWORD [rax]");
}



#[test]
fn enc_sse_mulss4492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x59, 0xD7", "mulss xmm2, xmm15");
}



#[test]
fn enc_sse_mulss4493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x59, 0xE4", "mulss xmm4, xmm12");
}



#[test]
fn enc_sse_mulss4494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xD4", "mulss xmm2, xmm4");
}



#[test]
fn enc_sse_mulss4495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0xDA", "mulss xmm11, xmm2");
}



#[test]
fn enc_sse_mulss4496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x59, 0xE3", "mulss xmm4, xmm11");
}



#[test]
fn enc_sse_mulss4497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0x78, 0x10", "mulss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_mulss4498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0x18", "mulss xmm11, DWORD [rax]");
}



#[test]
fn enc_sse_mulss4499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0x18", "mulss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_mulss4500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0x48, 0x10", "mulss xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse_mulss4501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0x24, 0x42", "mulss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_orps4502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xDA", "orps xmm3, xmm2");
}



#[test]
fn enc_sse_orps4503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x56, 0x3C, 0x42", "orps xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_orps4504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xD2", "orps xmm2, xmm2");
}



#[test]
fn enc_sse_orps4505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x56, 0xE3", "orps xmm12, xmm11");
}



#[test]
fn enc_sse_orps4506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x56, 0xDA", "orps xmm11, xmm2");
}



#[test]
fn enc_sse_pclmulhqhqdq4507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x1C, 0x42, 0x11", "pclmulhqhqdq xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_pclmulhqhqdq4508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xFB, 0x11", "pclmulhqhqdq xmm15, xmm3");
}



#[test]
fn enc_sse_pclmulhqhqdq4509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x18, 0x11", "pclmulhqhqdq xmm3, OWORD [rax]");
}



#[test]
fn enc_sse_pclmulhqhqdq4510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xC4, 0x11", "pclmulhqhqdq xmm0, xmm12");
}



#[test]
fn enc_sse_pclmulhqhqdq4511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x1A, 0x11", "pclmulhqhqdq xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse_pclmulhqlqdq4512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xD9, 0x01", "pclmulhqlqdq xmm11, xmm1");
}



#[test]
fn enc_sse_pclmulhqlqdq4513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xDC, 0x01", "pclmulhqlqdq xmm11, xmm12");
}



#[test]
fn enc_sse_pclmulhqlqdq4514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x10, 0x01", "pclmulhqlqdq xmm2, OWORD [rax]");
}



#[test]
fn enc_sse_pclmulhqlqdq4515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xFB, 0x01", "pclmulhqlqdq xmm15, xmm3");
}



#[test]
fn enc_sse_pclmulhqlqdq4516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xFB, 0x01", "pclmulhqlqdq xmm15, xmm11");
}



#[test]
fn enc_sse_pclmullqhqdq4517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xF8, 0x10", "pclmullqhqdq xmm15, xmm0");
}



#[test]
fn enc_sse_pclmullqhqdq4518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x1A, 0x10", "pclmullqhqdq xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse_pclmullqhqdq4519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x1C, 0x42, 0x10", "pclmullqhqdq xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_pclmullqhqdq4520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x12, 0x10", "pclmullqhqdq xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse_pclmullqhqdq4521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xCC, 0x10", "pclmullqhqdq xmm1, xmm4");
}



#[test]
fn enc_sse_pclmullqlqdq4522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x0C, 0x42, 0x00", "pclmullqlqdq xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_pclmullqlqdq4523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x00, 0x00", "pclmullqlqdq xmm0, OWORD [rax]");
}



#[test]
fn enc_sse_pclmullqlqdq4524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCC, 0x00", "pclmullqlqdq xmm1, xmm12");
}



#[test]
fn enc_sse_pclmullqlqdq4525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xC0, 0x00", "pclmullqlqdq xmm0, xmm0");
}



#[test]
fn enc_sse_pclmullqlqdq4526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x20, 0x00", "pclmullqlqdq xmm4, OWORD [rax]");
}



#[test]
fn enc_sse_pclmulqdq4527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm0, xmm4, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xC4, 0x32", "pclmulqdq xmm0, xmm4, 50");
}



#[test]
fn enc_sse_pclmulqdq4528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm1, xmm4, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xCC, 0x63", "pclmulqdq xmm1, xmm4, 99");
}



#[test]
fn enc_sse_pclmulqdq4529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm0, xmm0, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xC0, 0x26", "pclmulqdq xmm0, xmm0, 38");
}



#[test]
fn enc_sse_pclmulqdq4530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm11, xmm15, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xDF, 0x1E", "pclmulqdq xmm11, xmm15, 30");
}



#[test]
fn enc_sse_pclmulqdq4531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm11, xmm11, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xDB, 0x53", "pclmulqdq xmm11, xmm11, 83");
}



#[test]
fn enc_sse_rcpps4532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xDB", "rcpps xmm3, xmm11");
}



#[test]
fn enc_sse_rcpps4533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0xE2", "rcpps xmm4, xmm2");
}



#[test]
fn enc_sse_rcpps4534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xD7", "rcpps xmm2, xmm15");
}



#[test]
fn enc_sse_rcpps4535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0xE0", "rcpps xmm4, xmm0");
}



#[test]
fn enc_sse_rcpps4536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x53, 0xE2", "rcpps xmm12, xmm2");
}



#[test]
fn enc_sse_rcpss4537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x53, 0xDF", "rcpss xmm11, xmm15");
}



#[test]
fn enc_sse_rcpss4538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x53, 0xE3", "rcpss xmm12, xmm11");
}



#[test]
fn enc_sse_rcpss4539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xE4", "rcpss xmm4, xmm4");
}



#[test]
fn enc_sse_rcpss4540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xD8", "rcpss xmm3, xmm0");
}



#[test]
fn enc_sse_rcpss4541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x53, 0xE4", "rcpss xmm4, xmm12");
}



#[test]
fn enc_sse_rcpss4542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0x40, 0x10", "rcpss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rcpss4543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0x24, 0x42", "rcpss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rcpss4544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x53, 0x24, 0x42", "rcpss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rcpss4545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0x0C, 0x42", "rcpss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rcpss4546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x53, 0x60, 0x10", "rcpss xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rsqrtps4547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x20", "rsqrtps xmm4, OWORD [rax]");
}



#[test]
fn enc_sse_rsqrtps4548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xD2", "rsqrtps xmm2, xmm2");
}



#[test]
fn enc_sse_rsqrtps4549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x52, 0xC4", "rsqrtps xmm0, xmm12");
}



#[test]
fn enc_sse_rsqrtps4550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x52, 0xE7", "rsqrtps xmm12, xmm15");
}



#[test]
fn enc_sse_rsqrtps4551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x52, 0xE4", "rsqrtps xmm12, xmm12");
}



#[test]
fn enc_sse_rsqrtss4552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xD4", "rsqrtss xmm2, xmm4");
}



#[test]
fn enc_sse_rsqrtss4553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xD3", "rsqrtss xmm2, xmm3");
}



#[test]
fn enc_sse_rsqrtss4554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0xDA", "rsqrtss xmm11, xmm2");
}



#[test]
fn enc_sse_rsqrtss4555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xE1", "rsqrtss xmm4, xmm1");
}



#[test]
fn enc_sse_rsqrtss4556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0xE3", "rsqrtss xmm12, xmm3");
}



#[test]
fn enc_sse_rsqrtss4557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0x58, 0x10", "rsqrtss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rsqrtss4558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0x40, 0x10", "rsqrtss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rsqrtss4559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0x78, 0x10", "rsqrtss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rsqrtss4560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0x04, 0x42", "rsqrtss xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rsqrtss4561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0x38", "rsqrtss xmm15, DWORD [rax]");
}



#[test]
fn enc_sse_shufps4562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm3, OWORD [rdx], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0x1A, 0x1D", "shufps xmm3, OWORD [rdx], 29");
}



#[test]
fn enc_sse_shufps4563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm4, xmm12, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC6, 0xE4, 0x57", "shufps xmm4, xmm12, 87");
}



#[test]
fn enc_sse_shufps4564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm3, xmm1, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xD9, 0x43", "shufps xmm3, xmm1, 67");
}



#[test]
fn enc_sse_shufps4565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm11, xmm4, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC6, 0xDC, 0x07", "shufps xmm11, xmm4, 7");
}



#[test]
fn enc_sse_shufps4566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm12, xmm1, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC6, 0xE1, 0x60", "shufps xmm12, xmm1, 96");
}



#[test]
fn enc_sse_sqrtps4567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xE4", "sqrtps xmm4, xmm4");
}



#[test]
fn enc_sse_sqrtps4568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x51, 0xDC", "sqrtps xmm11, xmm4");
}



#[test]
fn enc_sse_sqrtps4569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x51, 0xE0", "sqrtps xmm12, xmm0");
}



#[test]
fn enc_sse_sqrtps4570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x51, 0xE4", "sqrtps xmm12, xmm12");
}



#[test]
fn enc_sse_sqrtps4571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x51, 0xE3", "sqrtps xmm12, xmm11");
}



#[test]
fn enc_sse_sqrtss4572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x51, 0xE7", "sqrtss xmm4, xmm15");
}



#[test]
fn enc_sse_sqrtss4573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0xC0", "sqrtss xmm0, xmm0");
}



#[test]
fn enc_sse_sqrtss4574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x51, 0xDC", "sqrtss xmm11, xmm12");
}



#[test]
fn enc_sse_sqrtss4575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0xFA", "sqrtss xmm15, xmm2");
}



#[test]
fn enc_sse_sqrtss4576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0xD8", "sqrtss xmm11, xmm0");
}



#[test]
fn enc_sse_sqrtss4577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0x58, 0x10", "sqrtss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_sqrtss4578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0x78, 0x10", "sqrtss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_sqrtss4579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0x38", "sqrtss xmm15, DWORD [rax]");
}



#[test]
fn enc_sse_sqrtss4580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0x20", "sqrtss xmm12, DWORD [rax]");
}



#[test]
fn enc_sse_stmxcsr4581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x58, 0x10", "stmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_sse_stmxcsr4582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x1C, 0x42", "stmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_stmxcsr4583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn enc_sse_subps4584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0xCC", "subps xmm1, xmm4");
}



#[test]
fn enc_sse_subps4585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5C, 0xFA", "subps xmm15, xmm2");
}



#[test]
fn enc_sse_subps4586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0xD2", "subps xmm2, xmm2");
}



#[test]
fn enc_sse_subps4587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5C, 0xDB", "subps xmm3, xmm11");
}



#[test]
fn enc_sse_subps4588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5C, 0xCC", "subps xmm1, xmm12");
}



#[test]
fn enc_sse_subss4589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0xF8", "subss xmm15, xmm0");
}



#[test]
fn enc_sse_subss4590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xCA", "subss xmm1, xmm2");
}



#[test]
fn enc_sse_subss4591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0xFA", "subss xmm15, xmm2");
}



#[test]
fn enc_sse_subss4592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xE0", "subss xmm4, xmm0");
}



#[test]
fn enc_sse_subss4593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5C, 0xCF", "subss xmm1, xmm15");
}



#[test]
fn enc_sse_subss4594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0x1C, 0x42", "subss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subss4595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0x3C, 0x42", "subss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subss4596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0x24, 0x42", "subss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subss4597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0x78, 0x10", "subss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_subss4598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0x50, 0x10", "subss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse_ucomiss4599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xD3", "ucomiss xmm2, xmm3");
}



#[test]
fn enc_sse_ucomiss4600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xCB", "ucomiss xmm1, xmm3");
}



#[test]
fn enc_sse_ucomiss4601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0xDC", "ucomiss xmm11, xmm4");
}



#[test]
fn enc_sse_ucomiss4602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2E, 0xC3", "ucomiss xmm0, xmm11");
}



#[test]
fn enc_sse_ucomiss4603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x2E, 0xE7", "ucomiss xmm12, xmm15");
}



#[test]
fn enc_sse_ucomiss4604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0x1C, 0x42", "ucomiss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ucomiss4605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x1C, 0x42", "ucomiss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ucomiss4606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x58, 0x10", "ucomiss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse_ucomiss4607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x18", "ucomiss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_ucomiss4608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x08", "ucomiss xmm1, DWORD [rax]");
}



#[test]
fn enc_sse_unpckhps4609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x15, 0xE3", "unpckhps xmm12, xmm3");
}



#[test]
fn enc_sse_unpckhps4610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x15, 0x22", "unpckhps xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse_unpckhps4611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x15, 0xE3", "unpckhps xmm12, xmm11");
}



#[test]
fn enc_sse_unpckhps4612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x15, 0xCF", "unpckhps xmm1, xmm15");
}



#[test]
fn enc_sse_unpckhps4613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0x20", "unpckhps xmm4, OWORD [rax]");
}



#[test]
fn enc_sse_unpcklps4614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0x10", "unpcklps xmm2, OWORD [rax]");
}



#[test]
fn enc_sse_unpcklps4615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0x18", "unpcklps xmm11, OWORD [rax]");
}



#[test]
fn enc_sse_unpcklps4616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0xE3", "unpcklps xmm4, xmm3");
}



#[test]
fn enc_sse_unpcklps4617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x14, 0xCC", "unpcklps xmm1, xmm12");
}



#[test]
fn enc_sse_unpcklps4618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x14, 0xCB", "unpcklps xmm1, xmm11");
}



#[test]
fn enc_sse_xorps4619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0x08", "xorps xmm1, OWORD [rax]");
}



#[test]
fn enc_sse_xorps4620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0xE0", "xorps xmm4, xmm0");
}



#[test]
fn enc_sse_xorps4621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0x1C, 0x42", "xorps xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_xorps4622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0x0C, 0x42", "xorps xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_xorps4623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0x3A", "xorps xmm15, OWORD [rdx]");
}


