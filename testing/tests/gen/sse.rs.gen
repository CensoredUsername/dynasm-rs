
#[test]
fn enc_sse_addps5648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x58, 0xE7", "addps xmm12, xmm15");
}



#[test]
fn enc_sse_addps5649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x58, 0xDB", "addps xmm11, xmm3");
}



#[test]
fn enc_sse_addps5650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x58, 0xCB", "addps xmm1, xmm11");
}



#[test]
fn enc_sse_addps5651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x58, 0xE7", "addps xmm4, xmm15");
}



#[test]
fn enc_sse_addss5652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xDC", "addss xmm3, xmm4");
}



#[test]
fn enc_sse_addss5653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x58, 0xDC", "addss xmm11, xmm12");
}



#[test]
fn enc_sse_addss5654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0xF9", "addss xmm15, xmm1");
}



#[test]
fn enc_sse_addss5655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x58, 0xC7", "addss xmm0, xmm15");
}



#[test]
fn enc_sse_addss5656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0xE2", "addss xmm4, xmm2");
}



#[test]
fn enc_sse_addss5657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0x18", "addss xmm11, DWORD [rax]");
}



#[test]
fn enc_sse_addss5658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x58, 0x3C, 0x42", "addss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_addss5659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0x14, 0x42", "addss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_addss5660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x58, 0x00", "addss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_aesdec5661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0x0A", "aesdec xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse_aesdec5662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0xE3", "aesdec xmm4, xmm3");
}



#[test]
fn enc_sse_aesdec5663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDE, 0xC7", "aesdec xmm0, xmm15");
}



#[test]
fn enc_sse_aesdec5664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDE, 0xC4", "aesdec xmm0, xmm12");
}



#[test]
fn enc_sse_aesdec5665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdec xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDE, 0xDB", "aesdec xmm3, xmm3");
}



#[test]
fn enc_sse_aesdeclast5666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0x1C, 0x42", "aesdeclast xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesdeclast5667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDF, 0x1C, 0x42", "aesdeclast xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesdeclast5668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDF, 0xDB", "aesdeclast xmm11, xmm11");
}



#[test]
fn enc_sse_aesdeclast5669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDF, 0xC7", "aesdeclast xmm0, xmm15");
}



#[test]
fn enc_sse_aesdeclast5670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesdeclast xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDF, 0xD0", "aesdeclast xmm2, xmm0");
}



#[test]
fn enc_sse_aesenc5671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDC, 0xCB", "aesenc xmm1, xmm11");
}



#[test]
fn enc_sse_aesenc5672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xD8", "aesenc xmm3, xmm0");
}



#[test]
fn enc_sse_aesenc5673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDC, 0xDC", "aesenc xmm11, xmm12");
}



#[test]
fn enc_sse_aesenc5674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDC, 0xE0", "aesenc xmm12, xmm0");
}



#[test]
fn enc_sse_aesenc5675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenc xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDC, 0xE3", "aesenc xmm4, xmm3");
}



#[test]
fn enc_sse_aesenclast5676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDD, 0xCF", "aesenclast xmm1, xmm15");
}



#[test]
fn enc_sse_aesenclast5677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDD, 0xD8", "aesenclast xmm11, xmm0");
}



#[test]
fn enc_sse_aesenclast5678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0xE1", "aesenclast xmm4, xmm1");
}



#[test]
fn enc_sse_aesenclast5679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDD, 0x04, 0x42", "aesenclast xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_aesenclast5680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesenclast xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0xDD, 0xFF", "aesenclast xmm15, xmm15");
}



#[test]
fn enc_sse_aesimc5681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDB, 0xCC", "aesimc xmm1, xmm12");
}



#[test]
fn enc_sse_aesimc5682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDB, 0xE3", "aesimc xmm12, xmm3");
}



#[test]
fn enc_sse_aesimc5683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0xDB, 0xE3", "aesimc xmm4, xmm3");
}



#[test]
fn enc_sse_aesimc5684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0xDB, 0xE2", "aesimc xmm12, xmm2");
}



#[test]
fn enc_sse_aesimc5685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aesimc xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0xDB, 0xCF", "aesimc xmm1, xmm15");
}



#[test]
fn enc_sse_aeskeygenassist5686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm0, OWORD [rax * 2 + rdx], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0x04, 0x42, 0x76", "aeskeygenassist xmm0, OWORD [rax * 2 + rdx], 118");
}



#[test]
fn enc_sse_aeskeygenassist5687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm0, xmm0, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0xC0, 0x29", "aeskeygenassist xmm0, xmm0, 41");
}



#[test]
fn enc_sse_aeskeygenassist5688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm2, xmm4, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0xD4, 0x7C", "aeskeygenassist xmm2, xmm4, 124");
}



#[test]
fn enc_sse_aeskeygenassist5689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm0, OWORD [rax], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0xDF, 0x00, 0x1D", "aeskeygenassist xmm0, OWORD [rax], 29");
}



#[test]
fn enc_sse_aeskeygenassist5690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; aeskeygenassist xmm11, OWORD [rax], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0xDF, 0x18, 0x5E", "aeskeygenassist xmm11, OWORD [rax], 94");
}



#[test]
fn enc_sse_andnps5691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xC1", "andnps xmm0, xmm1");
}



#[test]
fn enc_sse_andnps5692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x55, 0x20", "andnps xmm12, OWORD [rax]");
}



#[test]
fn enc_sse_andnps5693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xE1", "andnps xmm4, xmm1");
}



#[test]
fn enc_sse_andnps5694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnps xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x55, 0xD9", "andnps xmm3, xmm1");
}



#[test]
fn enc_sse_andps5695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x54, 0xDB", "andps xmm11, xmm11");
}



#[test]
fn enc_sse_andps5696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0xCA", "andps xmm1, xmm2");
}



#[test]
fn enc_sse_andps5697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x54, 0xC4", "andps xmm0, xmm12");
}



#[test]
fn enc_sse_andps5698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0xE3", "andps xmm4, xmm3");
}



#[test]
fn enc_sse_andps5699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andps xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x54, 0x24, 0x42", "andps xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpeqps5700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqps xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xE4, 0x00", "cmpeqps xmm4, xmm12");
}



#[test]
fn enc_sse_cmpeqps5701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC2, 0xDF, 0x00", "cmpeqps xmm11, xmm15");
}



#[test]
fn enc_sse_cmpeqps5702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqps xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x00", "cmpeqps xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpeqps5703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqps xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x24, 0x42, 0x00", "cmpeqps xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpeqss5704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xDB, 0x00", "cmpeqss xmm3, xmm11");
}



#[test]
fn enc_sse_cmpeqss5705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xC4, 0x00", "cmpeqss xmm0, xmm12");
}



#[test]
fn enc_sse_cmpeqss5706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xD8, 0x00", "cmpeqss xmm3, xmm0");
}



#[test]
fn enc_sse_cmpeqss5707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xE4, 0x00", "cmpeqss xmm12, xmm4");
}



#[test]
fn enc_sse_cmpeqss5708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xDC, 0x00", "cmpeqss xmm11, xmm4");
}



#[test]
fn enc_sse_cmpeqss5709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x00, 0x00", "cmpeqss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_cmpeqss5710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x78, 0x10, 0x00", "cmpeqss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpeqss5711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x10, 0x00", "cmpeqss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_cmpeqss5712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqss xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x48, 0x10, 0x00", "cmpeqss xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpleps5713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpleps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xD1, 0x02", "cmpleps xmm2, xmm1");
}



#[test]
fn enc_sse_cmpleps5714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpleps xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x14, 0x42, 0x02", "cmpleps xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpleps5715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpleps xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x12, 0x02", "cmpleps xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse_cmpleps5716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpleps xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xC7, 0x02", "cmpleps xmm0, xmm15");
}



#[test]
fn enc_sse_cmpless5717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xE0, 0x02", "cmpless xmm12, xmm0");
}



#[test]
fn enc_sse_cmpless5718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xD3, 0x02", "cmpless xmm2, xmm3");
}



#[test]
fn enc_sse_cmpless5719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xE0, 0x02", "cmpless xmm4, xmm0");
}



#[test]
fn enc_sse_cmpless5720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xD4, 0x02", "cmpless xmm2, xmm12");
}



#[test]
fn enc_sse_cmpless5721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xF9, 0x02", "cmpless xmm15, xmm1");
}



#[test]
fn enc_sse_cmpless5722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x24, 0x42, 0x02", "cmpless xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpless5723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x14, 0x42, 0x02", "cmpless xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpless5724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x08, 0x02", "cmpless xmm1, DWORD [rax]");
}



#[test]
fn enc_sse_cmpless5725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x24, 0x42, 0x02", "cmpless xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpless5726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpless xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x04, 0x42, 0x02", "cmpless xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpltps5727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltps xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x1C, 0x42, 0x01", "cmpltps xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpltps5728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC2, 0xE4, 0x01", "cmpltps xmm12, xmm12");
}



#[test]
fn enc_sse_cmpltps5729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltps xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0x1A, 0x01", "cmpltps xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse_cmpltps5730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xD4, 0x01", "cmpltps xmm2, xmm12");
}



#[test]
fn enc_sse_cmpltps5731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xC8, 0x01", "cmpltps xmm1, xmm0");
}



#[test]
fn enc_sse_cmpltss5732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xCA, 0x01", "cmpltss xmm1, xmm2");
}



#[test]
fn enc_sse_cmpltss5733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xC4, 0x01", "cmpltss xmm0, xmm12");
}



#[test]
fn enc_sse_cmpltss5734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xD9, 0x01", "cmpltss xmm3, xmm1");
}



#[test]
fn enc_sse_cmpltss5735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xE0, 0x01", "cmpltss xmm4, xmm0");
}



#[test]
fn enc_sse_cmpltss5736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xD4, 0x01", "cmpltss xmm2, xmm4");
}



#[test]
fn enc_sse_cmpltss5737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x04, 0x42, 0x01", "cmpltss xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpltss5738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x60, 0x10, 0x01", "cmpltss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpltss5739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x01", "cmpltss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpltss5740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltss xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x38, 0x01", "cmpltss xmm15, DWORD [rax]");
}



#[test]
fn enc_sse_cmpneqps5741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xC0, 0x04", "cmpneqps xmm0, xmm0");
}



#[test]
fn enc_sse_cmpneqps5742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x08, 0x04", "cmpneqps xmm1, OWORD [rax]");
}



#[test]
fn enc_sse_cmpneqps5743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xE4, 0x04", "cmpneqps xmm12, xmm4");
}



#[test]
fn enc_sse_cmpneqps5744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xE1, 0x04", "cmpneqps xmm12, xmm1");
}



#[test]
fn enc_sse_cmpneqps5745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqps xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xFB, 0x04", "cmpneqps xmm15, xmm3");
}



#[test]
fn enc_sse_cmpneqss5746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xFC, 0x04", "cmpneqss xmm15, xmm12");
}



#[test]
fn enc_sse_cmpneqss5747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xE1, 0x04", "cmpneqss xmm4, xmm1");
}



#[test]
fn enc_sse_cmpneqss5748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xE3, 0x04", "cmpneqss xmm12, xmm3");
}



#[test]
fn enc_sse_cmpneqss5749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xFF, 0x04", "cmpneqss xmm15, xmm15");
}



#[test]
fn enc_sse_cmpneqss5750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xDB, 0x04", "cmpneqss xmm3, xmm11");
}



#[test]
fn enc_sse_cmpneqss5751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x50, 0x10, 0x04", "cmpneqss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpneqss5752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x1C, 0x42, 0x04", "cmpneqss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpneqss5753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x24, 0x42, 0x04", "cmpneqss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpneqss5754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x58, 0x10, 0x04", "cmpneqss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpneqss5755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x40, 0x10, 0x04", "cmpneqss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpnleps5756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnleps xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xDC, 0x06", "cmpnleps xmm3, xmm4");
}



#[test]
fn enc_sse_cmpnleps5757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnleps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xE3, 0x06", "cmpnleps xmm4, xmm11");
}



#[test]
fn enc_sse_cmpnleps5758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnleps xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x10, 0x06", "cmpnleps xmm2, OWORD [rax]");
}



#[test]
fn enc_sse_cmpnleps5759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnleps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xD1, 0x06", "cmpnleps xmm2, xmm1");
}



#[test]
fn enc_sse_cmpnleps5760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnleps xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x04, 0x42, 0x06", "cmpnleps xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpnless5761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xE3, 0x06", "cmpnless xmm12, xmm11");
}



#[test]
fn enc_sse_cmpnless5762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xDC, 0x06", "cmpnless xmm11, xmm12");
}



#[test]
fn enc_sse_cmpnless5763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC0, 0x06", "cmpnless xmm0, xmm0");
}



#[test]
fn enc_sse_cmpnless5764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xE4, 0x06", "cmpnless xmm4, xmm4");
}



#[test]
fn enc_sse_cmpnless5765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xDA, 0x06", "cmpnless xmm11, xmm2");
}



#[test]
fn enc_sse_cmpnless5766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x1C, 0x42, 0x06", "cmpnless xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpnless5767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x06", "cmpnless xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpnless5768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x60, 0x10, 0x06", "cmpnless xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpnless5769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x00, 0x06", "cmpnless xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_cmpnless5770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnless xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x48, 0x10, 0x06", "cmpnless xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpnltps5771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltps xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0x3C, 0x42, 0x05", "cmpnltps xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpnltps5772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC2, 0xDB, 0x05", "cmpnltps xmm11, xmm11");
}



#[test]
fn enc_sse_cmpnltps5773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xDB, 0x05", "cmpnltps xmm11, xmm3");
}



#[test]
fn enc_sse_cmpnltps5774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltps xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xD9, 0x05", "cmpnltps xmm11, xmm1");
}



#[test]
fn enc_sse_cmpnltps5775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltps xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xC3, 0x05", "cmpnltps xmm0, xmm11");
}



#[test]
fn enc_sse_cmpnltss5776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC8, 0x05", "cmpnltss xmm1, xmm0");
}



#[test]
fn enc_sse_cmpnltss5777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xFA, 0x05", "cmpnltss xmm15, xmm2");
}



#[test]
fn enc_sse_cmpnltss5778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xE7, 0x05", "cmpnltss xmm12, xmm15");
}



#[test]
fn enc_sse_cmpnltss5779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC9, 0x05", "cmpnltss xmm1, xmm1");
}



#[test]
fn enc_sse_cmpnltss5780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xCB, 0x05", "cmpnltss xmm1, xmm11");
}



#[test]
fn enc_sse_cmpnltss5781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x3C, 0x42, 0x05", "cmpnltss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpnltss5782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x60, 0x10, 0x05", "cmpnltss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpnltss5783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x58, 0x10, 0x05", "cmpnltss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cmpnltss5784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x05", "cmpnltss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpnltss5785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x0C, 0x42, 0x05", "cmpnltss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpordps5786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordps xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC2, 0xE3, 0x07", "cmpordps xmm12, xmm11");
}



#[test]
fn enc_sse_cmpordps5787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordps xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0x1A, 0x07", "cmpordps xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse_cmpordps5788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xDB, 0x07", "cmpordps xmm3, xmm3");
}



#[test]
fn enc_sse_cmpordps5789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xDC, 0x07", "cmpordps xmm3, xmm12");
}



#[test]
fn enc_sse_cmpordps5790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xE3, 0x07", "cmpordps xmm4, xmm11");
}



#[test]
fn enc_sse_cmpordss5791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xF9, 0x07", "cmpordss xmm15, xmm1");
}



#[test]
fn enc_sse_cmpordss5792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xFB, 0x07", "cmpordss xmm15, xmm11");
}



#[test]
fn enc_sse_cmpordss5793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC1, 0x07", "cmpordss xmm0, xmm1");
}



#[test]
fn enc_sse_cmpordss5794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xE4, 0x07", "cmpordss xmm4, xmm4");
}



#[test]
fn enc_sse_cmpordss5795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC9, 0x07", "cmpordss xmm1, xmm1");
}



#[test]
fn enc_sse_cmpordss5796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x0C, 0x42, 0x07", "cmpordss xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpordss5797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x24, 0x42, 0x07", "cmpordss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpordss5798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x07", "cmpordss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpordss5799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x18, 0x07", "cmpordss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_cmpordss5800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x3C, 0x42, 0x07", "cmpordss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpps5801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm0, [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x00, 0x02", "cmpps xmm0, [rax], 2");
}



#[test]
fn enc_sse_cmpps5802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm4, [rax], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x20, 0x49", "cmpps xmm4, [rax], 73");
}



#[test]
fn enc_sse_cmpps5803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm15, [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0x38, 0x3E", "cmpps xmm15, [rax], 62");
}



#[test]
fn enc_sse_cmpps5804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm1, [rax], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x08, 0x2A", "cmpps xmm1, [rax], 42");
}



#[test]
fn enc_sse_cmpps5805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm11, [rax], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0x18, 0x26", "cmpps xmm11, [rax], 38");
}



#[test]
fn enc_sse_cmpps5806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm3, xmm0, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xD8, 0x08", "cmpps xmm3, xmm0, 8");
}



#[test]
fn enc_sse_cmpps5807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm11, xmm15, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC2, 0xDF, 0x45", "cmpps xmm11, xmm15, 69");
}



#[test]
fn enc_sse_cmpps5808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm4, xmm11, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xE3, 0x36", "cmpps xmm4, xmm11, 54");
}



#[test]
fn enc_sse_cmpps5809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm4, xmm4, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xE4, 0x31", "cmpps xmm4, xmm4, 49");
}



#[test]
fn enc_sse_cmpps5810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpps xmm15, xmm3, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xFB, 0x3F", "cmpps xmm15, xmm3, 63");
}



#[test]
fn enc_sse_cmpss5811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm11, [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x18, 0x48", "cmpss xmm11, [rax], 72");
}



#[test]
fn enc_sse_cmpss5812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm4, [rax], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x20, 0x21", "cmpss xmm4, [rax], 33");
}



#[test]
fn enc_sse_cmpss5813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm11, [rax], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x18, 0x37", "cmpss xmm11, [rax], 55");
}



#[test]
fn enc_sse_cmpss5814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm11, [rax], 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x18, 0x3D", "cmpss xmm11, [rax], 61");
}



#[test]
fn enc_sse_cmpss5815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm15, [rax], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x38, 0x7A", "cmpss xmm15, [rax], 122");
}



#[test]
fn enc_sse_cmpss5816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm11, xmm11, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xDB, 0x5F", "cmpss xmm11, xmm11, 95");
}



#[test]
fn enc_sse_cmpss5817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm4, xmm1, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xE1, 0x7E", "cmpss xmm4, xmm1, 126");
}



#[test]
fn enc_sse_cmpss5818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm11, xmm15, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xC2, 0xDF, 0x63", "cmpss xmm11, xmm15, 99");
}



#[test]
fn enc_sse_cmpss5819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm15, xmm2, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0xFA, 0x19", "cmpss xmm15, xmm2, 25");
}



#[test]
fn enc_sse_cmpss5820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpss xmm1, xmm11, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xCB, 0x41", "cmpss xmm1, xmm11, 65");
}



#[test]
fn enc_sse_cmpunordps5821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0xC2, 0xDB, 0x03", "cmpunordps xmm11, xmm11");
}



#[test]
fn enc_sse_cmpunordps5822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC2, 0xDB, 0x03", "cmpunordps xmm11, xmm3");
}



#[test]
fn enc_sse_cmpunordps5823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordps xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0xC2, 0xC3, 0x03", "cmpunordps xmm0, xmm11");
}



#[test]
fn enc_sse_cmpunordps5824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordps xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0x0A, 0x03", "cmpunordps xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse_cmpunordps5825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC2, 0xD1, 0x03", "cmpunordps xmm2, xmm1");
}



#[test]
fn enc_sse_cmpunordss5826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xE7, 0x03", "cmpunordss xmm4, xmm15");
}



#[test]
fn enc_sse_cmpunordss5827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xC7, 0x03", "cmpunordss xmm0, xmm15");
}



#[test]
fn enc_sse_cmpunordss5828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xC2, 0xC3, 0x03", "cmpunordss xmm0, xmm11");
}



#[test]
fn enc_sse_cmpunordss5829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC3, 0x03", "cmpunordss xmm0, xmm3");
}



#[test]
fn enc_sse_cmpunordss5830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0xC1, 0x03", "cmpunordss xmm0, xmm1");
}



#[test]
fn enc_sse_cmpunordss5831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x1C, 0x42, 0x03", "cmpunordss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpunordss5832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x00, 0x03", "cmpunordss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_cmpunordss5833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC2, 0x04, 0x42, 0x03", "cmpunordss xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cmpunordss5834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x18, 0x03", "cmpunordss xmm11, DWORD [rax]");
}



#[test]
fn enc_sse_cmpunordss5835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xC2, 0x78, 0x10, 0x03", "cmpunordss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_comiss5836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2F, 0xD4", "comiss xmm2, xmm12");
}



#[test]
fn enc_sse_comiss5837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xC0", "comiss xmm0, xmm0");
}



#[test]
fn enc_sse_comiss5838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0xC3", "comiss xmm0, xmm3");
}



#[test]
fn enc_sse_comiss5839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0xDC", "comiss xmm11, xmm4");
}



#[test]
fn enc_sse_comiss5840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x2F, 0xE3", "comiss xmm12, xmm11");
}



#[test]
fn enc_sse_comiss5841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2F, 0x78, 0x10", "comiss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_comiss5842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x18", "comiss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_comiss5843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x14, 0x42", "comiss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_comiss5844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comiss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2F, 0x50, 0x10", "comiss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvtsi2ss5845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x20", "cvtsi2ss xmm4, [rax]");
}



#[test]
fn enc_sse_cvtsi2ss5846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm11, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x4C, 0x0F, 0x2A, 0xD8", "cvtsi2ss xmm11, rax");
}



#[test]
fn enc_sse_cvtsi2ss5847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2A, 0xE0", "cvtsi2ss xmm4, rax");
}



#[test]
fn enc_sse_cvtsi2ss5848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x20", "cvtsi2ss xmm4, DWORD [rax]");
}



#[test]
fn enc_sse_cvtsi2ss5849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x08", "cvtsi2ss xmm1, DWORD [rax]");
}



#[test]
fn enc_sse_cvtsi2ss5850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0x10", "cvtsi2ss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_cvtsi2ss5851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm0, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0xC0", "cvtsi2ss xmm0, eax");
}



#[test]
fn enc_sse_cvtsi2ss5852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2ss xmm3, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2A, 0xD8", "cvtsi2ss xmm3, eax");
}



#[test]
fn enc_sse_cvtss2si5853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xC8", "cvtss2si rcx, xmm0");
}



#[test]
fn enc_sse_cvtss2si5854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2D, 0xD7", "cvtss2si rdx, xmm15");
}



#[test]
fn enc_sse_cvtss2si5855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2D, 0xCF", "cvtss2si rcx, xmm15");
}



#[test]
fn enc_sse_cvtss2si5856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0xD2", "cvtss2si rdx, xmm2");
}



#[test]
fn enc_sse_cvtss2si5857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2D, 0xCC", "cvtss2si rcx, xmm12");
}



#[test]
fn enc_sse_cvtss2si5858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rdx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x10", "cvtss2si rdx, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si5859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x48, 0x10", "cvtss2si rcx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvtss2si5860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rax, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x40, 0x10", "cvtss2si rax, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvtss2si5861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2D, 0x0C, 0x42", "cvtss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvtss2si5862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xC1", "cvtss2si eax, xmm1");
}



#[test]
fn enc_sse_cvtss2si5863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xC2", "cvtss2si eax, xmm2");
}



#[test]
fn enc_sse_cvtss2si5864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xD4", "cvtss2si edx, xmm4");
}



#[test]
fn enc_sse_cvtss2si5865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si ecx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0xC8", "cvtss2si ecx, xmm0");
}



#[test]
fn enc_sse_cvtss2si5866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2D, 0xD3", "cvtss2si edx, xmm11");
}



#[test]
fn enc_sse_cvtss2si5867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si ecx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x08", "cvtss2si ecx, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si5868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x50, 0x10", "cvtss2si edx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvtss2si5869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si eax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x00", "cvtss2si eax, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si5870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si edx, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x10", "cvtss2si edx, DWORD [rax]");
}



#[test]
fn enc_sse_cvtss2si5871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2si ecx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2D, 0x48, 0x10", "cvtss2si ecx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si5872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x49, 0x0F, 0x2C, 0xCC", "cvttss2si rcx, xmm12");
}



#[test]
fn enc_sse_cvttss2si5873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xD0", "cvttss2si rdx, xmm0");
}



#[test]
fn enc_sse_cvttss2si5874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xC1", "cvttss2si rax, xmm1");
}



#[test]
fn enc_sse_cvttss2si5875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0xC9", "cvttss2si rcx, xmm1");
}



#[test]
fn enc_sse_cvttss2si5876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x00", "cvttss2si rax, DWORD [rax]");
}



#[test]
fn enc_sse_cvttss2si5877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rax, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x40, 0x10", "cvttss2si rax, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si5878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x0C, 0x42", "cvttss2si rcx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvttss2si5879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si rcx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x48, 0x0F, 0x2C, 0x48, 0x10", "cvttss2si rcx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_cvttss2si5880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2C, 0xD4", "cvttss2si edx, xmm12");
}



#[test]
fn enc_sse_cvttss2si5881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si ecx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0xC9", "cvttss2si ecx, xmm1");
}



#[test]
fn enc_sse_cvttss2si5882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0xD4", "cvttss2si edx, xmm4");
}



#[test]
fn enc_sse_cvttss2si5883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si ecx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2C, 0xCC", "cvttss2si ecx, xmm12");
}



#[test]
fn enc_sse_cvttss2si5884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x2C, 0xD3", "cvttss2si edx, xmm11");
}



#[test]
fn enc_sse_cvttss2si5885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si eax, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x04, 0x42", "cvttss2si eax, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvttss2si5886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x14, 0x42", "cvttss2si edx, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_cvttss2si5887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si eax, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x00", "cvttss2si eax, DWORD [rax]");
}



#[test]
fn enc_sse_cvttss2si5888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttss2si edx, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2C, 0x50, 0x10", "cvttss2si edx, DWORD [rax + 16]");
}



#[test]
fn enc_sse_divps5889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0x12", "divps xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse_divps5890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0x24, 0x42", "divps xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_divps5891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5E, 0xE4", "divps xmm4, xmm4");
}



#[test]
fn enc_sse_divps5892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5E, 0xF8", "divps xmm15, xmm0");
}



#[test]
fn enc_sse_divps5893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5E, 0xC4", "divps xmm0, xmm12");
}



#[test]
fn enc_sse_divss5894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5E, 0xFF", "divss xmm15, xmm15");
}



#[test]
fn enc_sse_divss5895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5E, 0xE4", "divss xmm12, xmm12");
}



#[test]
fn enc_sse_divss5896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xC1", "divss xmm0, xmm1");
}



#[test]
fn enc_sse_divss5897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xD2", "divss xmm2, xmm2");
}



#[test]
fn enc_sse_divss5898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0xC8", "divss xmm1, xmm0");
}



#[test]
fn enc_sse_divss5899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0x58, 0x10", "divss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse_divss5900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5E, 0x24, 0x42", "divss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_divss5901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0x3C, 0x42", "divss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_divss5902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0x24, 0x42", "divss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_divss5903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5E, 0x1C, 0x42", "divss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ldmxcsr5904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x50, 0x10", "ldmxcsr DWORD [rax + 16]");
}



#[test]
fn enc_sse_ldmxcsr5905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ldmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x14, 0x42", "ldmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxps5906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0xE3", "maxps xmm12, xmm3");
}



#[test]
fn enc_sse_maxps5907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0x08", "maxps xmm1, OWORD [rax]");
}



#[test]
fn enc_sse_maxps5908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5F, 0xE0", "maxps xmm4, xmm0");
}



#[test]
fn enc_sse_maxps5909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5F, 0xDF", "maxps xmm11, xmm15");
}



#[test]
fn enc_sse_maxps5910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5F, 0xE4", "maxps xmm12, xmm4");
}



#[test]
fn enc_sse_maxss5911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xC9", "maxss xmm1, xmm1");
}



#[test]
fn enc_sse_maxss5912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0xE1", "maxss xmm4, xmm1");
}



#[test]
fn enc_sse_maxss5913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5F, 0xDF", "maxss xmm3, xmm15");
}



#[test]
fn enc_sse_maxss5914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5F, 0xFC", "maxss xmm15, xmm12");
}



#[test]
fn enc_sse_maxss5915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0xF8", "maxss xmm15, xmm0");
}



#[test]
fn enc_sse_maxss5916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0x20", "maxss xmm12, DWORD [rax]");
}



#[test]
fn enc_sse_maxss5917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0x58, 0x10", "maxss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_maxss5918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x08", "maxss xmm1, DWORD [rax]");
}



#[test]
fn enc_sse_maxss5919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5F, 0x24, 0x42", "maxss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_maxss5920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxss xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5F, 0x60, 0x10", "maxss xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse_minps5921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5D, 0xCB", "minps xmm1, xmm11");
}



#[test]
fn enc_sse_minps5922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5D, 0xE3", "minps xmm12, xmm3");
}



#[test]
fn enc_sse_minps5923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5D, 0xCF", "minps xmm1, xmm15");
}



#[test]
fn enc_sse_minps5924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5D, 0xDC", "minps xmm11, xmm4");
}



#[test]
fn enc_sse_minss5925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xDF", "minss xmm3, xmm15");
}



#[test]
fn enc_sse_minss5926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5D, 0xE3", "minss xmm12, xmm11");
}



#[test]
fn enc_sse_minss5927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xE4", "minss xmm4, xmm12");
}



#[test]
fn enc_sse_minss5928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5D, 0xD4", "minss xmm2, xmm12");
}



#[test]
fn enc_sse_minss5929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x5D, 0xDB", "minss xmm11, xmm11");
}



#[test]
fn enc_sse_minss5930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0x38", "minss xmm15, DWORD [rax]");
}



#[test]
fn enc_sse_minss5931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0x18", "minss xmm11, DWORD [rax]");
}



#[test]
fn enc_sse_minss5932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5D, 0x40, 0x10", "minss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_minss5933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0x3C, 0x42", "minss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_minss5934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5D, 0x1C, 0x42", "minss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movaps5935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps OWORD [rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x29, 0x1A", "movaps OWORD [rdx], xmm3");
}



#[test]
fn enc_sse_movaps5936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xC0", "movaps xmm0, xmm0");
}



#[test]
fn enc_sse_movaps5937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x29, 0x14, 0x42", "movaps OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse_movaps5938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xFC", "movaps xmm15, xmm4");
}



#[test]
fn enc_sse_movaps5939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xE4", "movaps xmm12, xmm4");
}



#[test]
fn enc_sse_movaps5940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x28, 0xCC", "movaps xmm1, xmm4");
}



#[test]
fn enc_sse_movaps5941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0x3C, 0x42", "movaps xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movaps5942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x28, 0xFC", "movaps xmm15, xmm12");
}



#[test]
fn enc_sse_movaps5943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movaps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x28, 0xDC", "movaps xmm11, xmm4");
}



#[test]
fn enc_sse_movhlps5944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x12, 0xE7", "movhlps xmm4, xmm15");
}



#[test]
fn enc_sse_movhlps5945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x12, 0xFB", "movhlps xmm15, xmm11");
}



#[test]
fn enc_sse_movhlps5946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0xFC", "movhlps xmm15, xmm4");
}



#[test]
fn enc_sse_movhlps5947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x12, 0xDB", "movhlps xmm11, xmm11");
}



#[test]
fn enc_sse_movhlps5948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhlps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0xE1", "movhlps xmm12, xmm1");
}



#[test]
fn enc_sse_movhps5949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x08", "movhps QWORD [rax], xmm1");
}



#[test]
fn enc_sse_movhps5950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm4");
}



#[test]
fn enc_sse_movhps5951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x20", "movhps QWORD [rax], xmm12");
}



#[test]
fn enc_sse_movhps5952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x17, 0x1C, 0x42", "movhps QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse_movhps5953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x60, 0x10", "movhps xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse_movhps5954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x58, 0x10", "movhps xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse_movhps5955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x0C, 0x42", "movhps xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movhps5956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x18", "movhps xmm3, QWORD [rax]");
}



#[test]
fn enc_sse_movhps5957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhps xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x16, 0x10", "movhps xmm2, QWORD [rax]");
}



#[test]
fn enc_sse_movlhps5958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xDC", "movlhps xmm11, xmm4");
}



#[test]
fn enc_sse_movlhps5959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x16, 0xFF", "movlhps xmm15, xmm15");
}



#[test]
fn enc_sse_movlhps5960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x16, 0xFB", "movlhps xmm15, xmm11");
}



#[test]
fn enc_sse_movlhps5961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xD8", "movlhps xmm11, xmm0");
}



#[test]
fn enc_sse_movlhps5962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlhps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x16, 0xE4", "movlhps xmm12, xmm4");
}



#[test]
fn enc_sse_movlps5963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax + 16], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x40, 0x10", "movlps QWORD [rax + 16], xmm0");
}



#[test]
fn enc_sse_movlps5964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x1C, 0x42", "movlps QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse_movlps5965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x13, 0x14, 0x42", "movlps QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse_movlps5966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x13, 0x38", "movlps QWORD [rax], xmm15");
}



#[test]
fn enc_sse_movlps5967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x13, 0x20", "movlps QWORD [rax], xmm12");
}



#[test]
fn enc_sse_movlps5968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x10", "movlps xmm2, QWORD [rax]");
}



#[test]
fn enc_sse_movlps5969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x1C, 0x42", "movlps xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movlps5970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x1C, 0x42", "movlps xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movlps5971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x12, 0x24, 0x42", "movlps xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movlps5972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlps xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x12, 0x0C, 0x42", "movlps xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movmskps5973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xCB", "movmskps rcx, xmm3");
}



#[test]
fn enc_sse_movmskps5974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC1", "movmskps rax, xmm1");
}



#[test]
fn enc_sse_movmskps5975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xD1", "movmskps rdx, xmm1");
}



#[test]
fn enc_sse_movmskps5976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x48, 0x0F, 0x50, 0xC3", "movmskps rax, xmm3");
}



#[test]
fn enc_sse_movmskps5977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps rax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x49, 0x0F, 0x50, 0xC7", "movmskps rax, xmm15");
}



#[test]
fn enc_sse_movmskps5978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps ecx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xCA", "movmskps ecx, xmm2");
}



#[test]
fn enc_sse_movmskps5979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps edx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x50, 0xD4", "movmskps edx, xmm12");
}



#[test]
fn enc_sse_movmskps5980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps edx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xD0", "movmskps edx, xmm0");
}



#[test]
fn enc_sse_movmskps5981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps edx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xD3", "movmskps edx, xmm3");
}



#[test]
fn enc_sse_movmskps5982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskps eax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x50, 0xC0", "movmskps eax, xmm0");
}



#[test]
fn enc_sse_movntps5983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2B, 0x08", "movntps OWORD [rax], xmm1");
}



#[test]
fn enc_sse_movntps5984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x58, 0x10", "movntps OWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse_movntps5985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x20", "movntps OWORD [rax], xmm12");
}



#[test]
fn enc_sse_movntps5986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntps OWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2B, 0x24, 0x42", "movntps OWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse_movss5987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xC8", "movss xmm1, xmm0");
}



#[test]
fn enc_sse_movss5988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0xCC", "movss xmm1, xmm4");
}



#[test]
fn enc_sse_movss5989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xDA", "movss xmm11, xmm2");
}



#[test]
fn enc_sse_movss5990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xE1", "movss xmm12, xmm1");
}



#[test]
fn enc_sse_movss5991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0xF9", "movss xmm15, xmm1");
}



#[test]
fn enc_sse_movss5992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0x24, 0x42", "movss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movss5993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0x24, 0x42", "movss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movss5994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x10, 0x78, 0x10", "movss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_movss5995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0x18", "movss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_movss5996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x10, 0x20", "movss xmm4, DWORD [rax]");
}



#[test]
fn enc_sse_movss5997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x38", "movss DWORD [rax], xmm15");
}



#[test]
fn enc_sse_movss5998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x20", "movss DWORD [rax], xmm12");
}



#[test]
fn enc_sse_movss5999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x78, 0x10", "movss DWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse_movss6000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movss DWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x11, 0x60, 0x10", "movss DWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse_movups6001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x11, 0x14, 0x42", "movups OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse_movups6002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xE2", "movups xmm4, xmm2");
}



#[test]
fn enc_sse_movups6003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups OWORD [rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x11, 0x1A", "movups OWORD [rdx], xmm3");
}



#[test]
fn enc_sse_movups6004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x10, 0xDC", "movups xmm11, xmm12");
}



#[test]
fn enc_sse_movups6005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x10, 0xC4", "movups xmm0, xmm12");
}



#[test]
fn enc_sse_movups6006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xE1", "movups xmm4, xmm1");
}



#[test]
fn enc_sse_movups6007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0x1C, 0x42", "movups xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_movups6008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x10, 0xD7", "movups xmm2, xmm15");
}



#[test]
fn enc_sse_movups6009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x10, 0xE2", "movups xmm12, xmm2");
}



#[test]
fn enc_sse_movups6010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movups xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x10, 0xD0", "movups xmm2, xmm0");
}



#[test]
fn enc_sse_mulps6011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0xD4", "mulps xmm2, xmm4");
}



#[test]
fn enc_sse_mulps6012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x59, 0xFB", "mulps xmm15, xmm3");
}



#[test]
fn enc_sse_mulps6013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x59, 0xD3", "mulps xmm2, xmm11");
}



#[test]
fn enc_sse_mulps6014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x59, 0x1A", "mulps xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse_mulps6015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x59, 0xCC", "mulps xmm1, xmm12");
}



#[test]
fn enc_sse_mulss6016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xD3", "mulss xmm2, xmm3");
}



#[test]
fn enc_sse_mulss6017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xC1", "mulss xmm0, xmm1");
}



#[test]
fn enc_sse_mulss6018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xDC", "mulss xmm3, xmm4");
}



#[test]
fn enc_sse_mulss6019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xE4", "mulss xmm4, xmm4");
}



#[test]
fn enc_sse_mulss6020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0xDB", "mulss xmm3, xmm3");
}



#[test]
fn enc_sse_mulss6021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0x10", "mulss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_mulss6022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0x3C, 0x42", "mulss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_mulss6023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x59, 0x14, 0x42", "mulss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_mulss6024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x59, 0x24, 0x42", "mulss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_orps6025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xC1", "orps xmm0, xmm1");
}



#[test]
fn enc_sse_orps6026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x56, 0xDB", "orps xmm3, xmm11");
}



#[test]
fn enc_sse_orps6027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x56, 0xE2", "orps xmm12, xmm2");
}



#[test]
fn enc_sse_orps6028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x56, 0xC4", "orps xmm0, xmm4");
}



#[test]
fn enc_sse_orps6029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orps xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x56, 0xC4", "orps xmm0, xmm12");
}



#[test]
fn enc_sse_pclmulhqhqdq6030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD9, 0x11", "pclmulhqhqdq xmm3, xmm1");
}



#[test]
fn enc_sse_pclmulhqhqdq6031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCC, 0x11", "pclmulhqhqdq xmm1, xmm12");
}



#[test]
fn enc_sse_pclmulhqhqdq6032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xDC, 0x11", "pclmulhqhqdq xmm3, xmm12");
}



#[test]
fn enc_sse_pclmulhqhqdq6033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xDF, 0x11", "pclmulhqhqdq xmm3, xmm15");
}



#[test]
fn enc_sse_pclmulhqhqdq6034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqhqdq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xCA, 0x11", "pclmulhqhqdq xmm1, xmm2");
}



#[test]
fn enc_sse_pclmulhqlqdq6035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD9, 0x01", "pclmulhqlqdq xmm3, xmm1");
}



#[test]
fn enc_sse_pclmulhqlqdq6036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCC, 0x01", "pclmulhqlqdq xmm1, xmm12");
}



#[test]
fn enc_sse_pclmulhqlqdq6037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xDB, 0x01", "pclmulhqlqdq xmm11, xmm11");
}



#[test]
fn enc_sse_pclmulhqlqdq6038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xE4, 0x01", "pclmulhqlqdq xmm12, xmm4");
}



#[test]
fn enc_sse_pclmulhqlqdq6039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulhqlqdq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xCF, 0x01", "pclmulhqlqdq xmm1, xmm15");
}



#[test]
fn enc_sse_pclmullqhqdq6040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xDA, 0x10", "pclmullqhqdq xmm3, xmm2");
}



#[test]
fn enc_sse_pclmullqhqdq6041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xFB, 0x10", "pclmullqhqdq xmm15, xmm3");
}



#[test]
fn enc_sse_pclmullqhqdq6042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x38, 0x10", "pclmullqhqdq xmm15, OWORD [rax]");
}



#[test]
fn enc_sse_pclmullqhqdq6043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x10, 0x10", "pclmullqhqdq xmm2, OWORD [rax]");
}



#[test]
fn enc_sse_pclmullqhqdq6044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqhqdq xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x22, 0x10", "pclmullqhqdq xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse_pclmullqlqdq6045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x44, 0xE4, 0x00", "pclmullqlqdq xmm12, xmm12");
}



#[test]
fn enc_sse_pclmullqlqdq6046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x00, 0x00", "pclmullqlqdq xmm0, OWORD [rax]");
}



#[test]
fn enc_sse_pclmullqlqdq6047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0x24, 0x42, 0x00", "pclmullqlqdq xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_pclmullqlqdq6048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmullqlqdq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0x10, 0x00", "pclmullqlqdq xmm2, OWORD [rax]");
}



#[test]
fn enc_sse_pclmulqdq6049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm2, xmm4, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD4, 0x72", "pclmulqdq xmm2, xmm4, 114");
}



#[test]
fn enc_sse_pclmulqdq6050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm4, xmm11, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xE3, 0x79", "pclmulqdq xmm4, xmm11, 121");
}



#[test]
fn enc_sse_pclmulqdq6051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm4, xmm12, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x44, 0xE4, 0x66", "pclmulqdq xmm4, xmm12, 102");
}



#[test]
fn enc_sse_pclmulqdq6052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm3, xmm0, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x44, 0xD8, 0x06", "pclmulqdq xmm3, xmm0, 6");
}



#[test]
fn enc_sse_pclmulqdq6053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pclmulqdq xmm11, xmm1, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x44, 0xD9, 0x66", "pclmulqdq xmm11, xmm1, 102");
}



#[test]
fn enc_sse_rcpps6054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x53, 0xDB", "rcpps xmm11, xmm11");
}



#[test]
fn enc_sse_rcpps6055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x53, 0xFF", "rcpps xmm15, xmm15");
}



#[test]
fn enc_sse_rcpps6056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x53, 0xD8", "rcpps xmm11, xmm0");
}



#[test]
fn enc_sse_rcpps6057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x53, 0xD3", "rcpps xmm2, xmm11");
}



#[test]
fn enc_sse_rcpps6058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x53, 0x00", "rcpps xmm0, OWORD [rax]");
}



#[test]
fn enc_sse_rcpss6059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xC3", "rcpss xmm0, xmm3");
}



#[test]
fn enc_sse_rcpss6060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xE1", "rcpss xmm4, xmm1");
}



#[test]
fn enc_sse_rcpss6061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x53, 0xC4", "rcpss xmm0, xmm12");
}



#[test]
fn enc_sse_rcpss6062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0xDB", "rcpss xmm3, xmm3");
}



#[test]
fn enc_sse_rcpss6063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x53, 0xDF", "rcpss xmm11, xmm15");
}



#[test]
fn enc_sse_rcpss6064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x53, 0x10", "rcpss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_rcpss6065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x53, 0x20", "rcpss xmm12, DWORD [rax]");
}



#[test]
fn enc_sse_rcpss6066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x53, 0x58, 0x10", "rcpss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rcpss6067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rcpss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x53, 0x78, 0x10", "rcpss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse_rsqrtps6068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x52, 0xDB", "rsqrtps xmm11, xmm3");
}



#[test]
fn enc_sse_rsqrtps6069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x52, 0xFC", "rsqrtps xmm15, xmm12");
}



#[test]
fn enc_sse_rsqrtps6070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x52, 0xC7", "rsqrtps xmm0, xmm15");
}



#[test]
fn enc_sse_rsqrtps6071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0x12", "rsqrtps xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse_rsqrtps6072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x52, 0xE1", "rsqrtps xmm4, xmm1");
}



#[test]
fn enc_sse_rsqrtss6073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x52, 0xFF", "rsqrtss xmm15, xmm15");
}



#[test]
fn enc_sse_rsqrtss6074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xE1", "rsqrtss xmm4, xmm1");
}



#[test]
fn enc_sse_rsqrtss6075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xE2", "rsqrtss xmm4, xmm2");
}



#[test]
fn enc_sse_rsqrtss6076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x52, 0xDF", "rsqrtss xmm3, xmm15");
}



#[test]
fn enc_sse_rsqrtss6077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0xCB", "rsqrtss xmm1, xmm3");
}



#[test]
fn enc_sse_rsqrtss6078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0x20", "rsqrtss xmm4, DWORD [rax]");
}



#[test]
fn enc_sse_rsqrtss6079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0x14, 0x42", "rsqrtss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rsqrtss6080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x52, 0x24, 0x42", "rsqrtss xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rsqrtss6081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0x24, 0x42", "rsqrtss xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_rsqrtss6082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; rsqrtss xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x52, 0x10", "rsqrtss xmm2, DWORD [rax]");
}



#[test]
fn enc_sse_shufps6083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm1, xmm3, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xCB, 0x17", "shufps xmm1, xmm3, 23");
}



#[test]
fn enc_sse_shufps6084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm3, xmm3, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xDB, 0x72", "shufps xmm3, xmm3, 114");
}



#[test]
fn enc_sse_shufps6085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm2, xmm4, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xD4, 0x24", "shufps xmm2, xmm4, 36");
}



#[test]
fn enc_sse_shufps6086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm2, xmm3, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC6, 0xD3, 0x52", "shufps xmm2, xmm3, 82");
}



#[test]
fn enc_sse_shufps6087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufps xmm11, OWORD [rax * 2 + rdx], 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0xC6, 0x1C, 0x42, 0x74", "shufps xmm11, OWORD [rax * 2 + rdx], 116");
}



#[test]
fn enc_sse_sqrtps6088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x51, 0xDC", "sqrtps xmm3, xmm12");
}



#[test]
fn enc_sse_sqrtps6089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x51, 0xE1", "sqrtps xmm12, xmm1");
}



#[test]
fn enc_sse_sqrtps6090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xD1", "sqrtps xmm2, xmm1");
}



#[test]
fn enc_sse_sqrtps6091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x51, 0xD8", "sqrtps xmm3, xmm0");
}



#[test]
fn enc_sse_sqrtps6092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x51, 0xCF", "sqrtps xmm1, xmm15");
}



#[test]
fn enc_sse_sqrtss6093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x51, 0xE3", "sqrtss xmm4, xmm11");
}



#[test]
fn enc_sse_sqrtss6094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x51, 0xCF", "sqrtss xmm1, xmm15");
}



#[test]
fn enc_sse_sqrtss6095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0xE0", "sqrtss xmm12, xmm0");
}



#[test]
fn enc_sse_sqrtss6096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0xE4", "sqrtss xmm4, xmm4");
}



#[test]
fn enc_sse_sqrtss6097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0xC9", "sqrtss xmm1, xmm1");
}



#[test]
fn enc_sse_sqrtss6098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0x60, 0x10", "sqrtss xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse_sqrtss6099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0x40, 0x10", "sqrtss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_sqrtss6100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x51, 0x1C, 0x42", "sqrtss xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_sqrtss6101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0x48, 0x10", "sqrtss xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse_sqrtss6102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtss xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x51, 0x50, 0x10", "sqrtss xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse_stmxcsr6103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x18", "stmxcsr DWORD [rax]");
}



#[test]
fn enc_sse_stmxcsr6104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stmxcsr DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x1C, 0x42", "stmxcsr DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subps6105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x00", "subps xmm0, OWORD [rax]");
}



#[test]
fn enc_sse_subps6106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x1C, 0x42", "subps xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subps6107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5C, 0xDB", "subps xmm3, xmm11");
}



#[test]
fn enc_sse_subps6108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5C, 0x22", "subps xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse_subps6109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subps xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5C, 0x04, 0x42", "subps xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subss6110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0xD9", "subss xmm11, xmm1");
}



#[test]
fn enc_sse_subss6111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xE0", "subss xmm4, xmm0");
}



#[test]
fn enc_sse_subss6112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xC1", "subss xmm0, xmm1");
}



#[test]
fn enc_sse_subss6113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xC8", "subss xmm1, xmm0");
}



#[test]
fn enc_sse_subss6114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0xD9", "subss xmm3, xmm1");
}



#[test]
fn enc_sse_subss6115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0x40, 0x10", "subss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse_subss6116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0x1C, 0x42", "subss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subss6117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0x00", "subss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse_subss6118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5C, 0x3C, 0x42", "subss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_subss6119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subss xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5C, 0x14, 0x42", "subss xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ucomiss6120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0xDA", "ucomiss xmm11, xmm2");
}



#[test]
fn enc_sse_ucomiss6121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0xD0", "ucomiss xmm2, xmm0");
}



#[test]
fn enc_sse_ucomiss6122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x2E, 0xCC", "ucomiss xmm1, xmm12");
}



#[test]
fn enc_sse_ucomiss6123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x2E, 0xE3", "ucomiss xmm12, xmm11");
}



#[test]
fn enc_sse_ucomiss6124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0xE3", "ucomiss xmm12, xmm3");
}



#[test]
fn enc_sse_ucomiss6125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x04, 0x42", "ucomiss xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ucomiss6126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0x58, 0x10", "ucomiss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse_ucomiss6127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x18", "ucomiss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse_ucomiss6128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x2E, 0x1C, 0x42", "ucomiss xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_ucomiss6129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomiss xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x2E, 0x3C, 0x42", "ucomiss xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_unpckhps6130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x15, 0xE0", "unpckhps xmm12, xmm0");
}



#[test]
fn enc_sse_unpckhps6131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0xD0", "unpckhps xmm2, xmm0");
}



#[test]
fn enc_sse_unpckhps6132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x15, 0x1C, 0x42", "unpckhps xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_unpckhps6133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x15, 0xDF", "unpckhps xmm11, xmm15");
}



#[test]
fn enc_sse_unpckhps6134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x15, 0xDB", "unpckhps xmm3, xmm3");
}



#[test]
fn enc_sse_unpcklps6135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0x0C, 0x42", "unpcklps xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_unpcklps6136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0xD1", "unpcklps xmm2, xmm1");
}



#[test]
fn enc_sse_unpcklps6137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x14, 0x38", "unpcklps xmm15, OWORD [rax]");
}



#[test]
fn enc_sse_unpcklps6138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0xD9", "unpcklps xmm3, xmm1");
}



#[test]
fn enc_sse_unpcklps6139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklps xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x14, 0x04, 0x42", "unpcklps xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_xorps6140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x57, 0xC8", "xorps xmm1, xmm0");
}



#[test]
fn enc_sse_xorps6141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0x24, 0x42", "xorps xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse_xorps6142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0xF9", "xorps xmm15, xmm1");
}



#[test]
fn enc_sse_xorps6143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x57, 0xD8", "xorps xmm11, xmm0");
}



#[test]
fn enc_sse_xorps6144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x57, 0xCF", "xorps xmm1, xmm15");
}


