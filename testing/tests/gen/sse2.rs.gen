
#[test]
fn enc_sse2_addpd4486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x58, 0xC3", "addpd xmm0, xmm11");
}



#[test]
fn enc_sse2_addpd4487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0x0A", "addpd xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_addpd4488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x58, 0xDF", "addpd xmm11, xmm15");
}



#[test]
fn enc_sse2_addpd4489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xD1", "addpd xmm2, xmm1");
}



#[test]
fn enc_sse2_addpd4490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x58, 0x3C, 0x42", "addpd xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd4491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xD0", "addsd xmm2, xmm0");
}



#[test]
fn enc_sse2_addsd4492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0xF9", "addsd xmm15, xmm1");
}



#[test]
fn enc_sse2_addsd4493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xC0", "addsd xmm0, xmm0");
}



#[test]
fn enc_sse2_addsd4494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0xE3", "addsd xmm12, xmm3");
}



#[test]
fn enc_sse2_addsd4495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x78, 0x10", "addsd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_addsd4496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x60, 0x10", "addsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_addsd4497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x1C, 0x42", "addsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd4498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x24, 0x42", "addsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_andnpd4499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xC2", "andnpd xmm0, xmm2");
}



#[test]
fn enc_sse2_andnpd4500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xE0", "andnpd xmm4, xmm0");
}



#[test]
fn enc_sse2_andnpd4501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0x10", "andnpd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_andnpd4502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xD4", "andnpd xmm2, xmm4");
}



#[test]
fn enc_sse2_andnpd4503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x55, 0xCF", "andnpd xmm1, xmm15");
}



#[test]
fn enc_sse2_andpd4504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x54, 0xFC", "andpd xmm15, xmm12");
}



#[test]
fn enc_sse2_andpd4505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x54, 0xC4", "andpd xmm0, xmm12");
}



#[test]
fn enc_sse2_andpd4506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0xFA", "andpd xmm15, xmm2");
}



#[test]
fn enc_sse2_andpd4507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0x1A", "andpd xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_andpd4508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0x10", "andpd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_clflush4509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clflush BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x3C, 0x42", "clflush BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_clflush4510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clflush BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x38", "clflush BYTE [rax]");
}



#[test]
fn enc_sse2_cmpeqpd4511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqpd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x14, 0x42, 0x00", "cmpeqpd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpeqpd4512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqpd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x00, 0x00", "cmpeqpd xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_cmpeqpd4513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqpd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC9, 0x00", "cmpeqpd xmm1, xmm1");
}



#[test]
fn enc_sse2_cmpeqpd4514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0xE2, 0x00", "cmpeqpd xmm12, xmm2");
}



#[test]
fn enc_sse2_cmpeqpd4515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqpd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC2, 0xDC, 0x00", "cmpeqpd xmm3, xmm12");
}



#[test]
fn enc_sse2_cmpeqsd4516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xC2, 0x00", "cmpeqsd xmm0, xmm2");
}



#[test]
fn enc_sse2_cmpeqsd4517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xC2, 0xDB, 0x00", "cmpeqsd xmm11, xmm11");
}



#[test]
fn enc_sse2_cmpeqsd4518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xE2, 0x00", "cmpeqsd xmm12, xmm2");
}



#[test]
fn enc_sse2_cmpeqsd4519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xC2, 0xFF, 0x00", "cmpeqsd xmm15, xmm15");
}



#[test]
fn enc_sse2_cmpeqsd4520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xDC, 0x00", "cmpeqsd xmm11, xmm4");
}



#[test]
fn enc_sse2_cmpeqsd4521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x04, 0x42, 0x00", "cmpeqsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpeqsd4522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x08, 0x00", "cmpeqsd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpeqsd4523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x14, 0x42, 0x00", "cmpeqsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpeqsd4524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpeqsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x48, 0x10, 0x00", "cmpeqsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmplepd4525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplepd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0xE1, 0x02", "cmplepd xmm12, xmm1");
}



#[test]
fn enc_sse2_cmplepd4526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplepd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xC2, 0xDB, 0x02", "cmplepd xmm11, xmm11");
}



#[test]
fn enc_sse2_cmplepd4527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplepd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC8, 0x02", "cmplepd xmm1, xmm0");
}



#[test]
fn enc_sse2_cmplepd4528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplepd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xCC, 0x02", "cmplepd xmm1, xmm4");
}



#[test]
fn enc_sse2_cmplepd4529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplepd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xD3, 0x02", "cmplepd xmm2, xmm3");
}



#[test]
fn enc_sse2_cmplesd4530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xCC, 0x02", "cmplesd xmm1, xmm12");
}



#[test]
fn enc_sse2_cmplesd4531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xD4, 0x02", "cmplesd xmm2, xmm4");
}



#[test]
fn enc_sse2_cmplesd4532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xD2, 0x02", "cmplesd xmm2, xmm2");
}



#[test]
fn enc_sse2_cmplesd4533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xD8, 0x02", "cmplesd xmm11, xmm0");
}



#[test]
fn enc_sse2_cmplesd4534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x02", "cmplesd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmplesd4535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x18, 0x02", "cmplesd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_cmplesd4536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x60, 0x10, 0x02", "cmplesd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmplesd4537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x00, 0x02", "cmplesd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_cmplesd4538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmplesd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x48, 0x10, 0x02", "cmplesd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpltpd4539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xC2, 0xE7, 0x01", "cmpltpd xmm12, xmm15");
}



#[test]
fn enc_sse2_cmpltpd4540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltpd xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0x24, 0x42, 0x01", "cmpltpd xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpltpd4541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltpd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x01", "cmpltpd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpltpd4542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltpd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0xD9, 0x01", "cmpltpd xmm11, xmm1");
}



#[test]
fn enc_sse2_cmpltpd4543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xD1, 0x01", "cmpltpd xmm2, xmm1");
}



#[test]
fn enc_sse2_cmpltsd4544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xFB, 0x01", "cmpltsd xmm15, xmm3");
}



#[test]
fn enc_sse2_cmpltsd4545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xD3, 0x01", "cmpltsd xmm2, xmm11");
}



#[test]
fn enc_sse2_cmpltsd4546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xC3, 0x01", "cmpltsd xmm0, xmm11");
}



#[test]
fn enc_sse2_cmpltsd4547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xDC, 0x01", "cmpltsd xmm3, xmm12");
}



#[test]
fn enc_sse2_cmpltsd4548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xD9, 0x01", "cmpltsd xmm3, xmm1");
}



#[test]
fn enc_sse2_cmpltsd4549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x04, 0x42, 0x01", "cmpltsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpltsd4550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x01", "cmpltsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpltsd4551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x3C, 0x42, 0x01", "cmpltsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpltsd4552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpltsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x18, 0x01", "cmpltsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpneqpd4553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqpd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0x18, 0x04", "cmpneqpd xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_cmpneqpd4554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqpd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC2, 0xD7, 0x04", "cmpneqpd xmm2, xmm15");
}



#[test]
fn enc_sse2_cmpneqpd4555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqpd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC2, 0xCF, 0x04", "cmpneqpd xmm1, xmm15");
}



#[test]
fn enc_sse2_cmpneqpd4556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0xDC, 0x04", "cmpneqpd xmm11, xmm4");
}



#[test]
fn enc_sse2_cmpneqpd4557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqpd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC2, 0x04", "cmpneqpd xmm0, xmm2");
}



#[test]
fn enc_sse2_cmpneqsd4558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xFC, 0x04", "cmpneqsd xmm15, xmm4");
}



#[test]
fn enc_sse2_cmpneqsd4559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xC9, 0x04", "cmpneqsd xmm1, xmm1");
}



#[test]
fn enc_sse2_cmpneqsd4560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xCF, 0x04", "cmpneqsd xmm1, xmm15");
}



#[test]
fn enc_sse2_cmpneqsd4561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xDC, 0x04", "cmpneqsd xmm3, xmm12");
}



#[test]
fn enc_sse2_cmpneqsd4562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x00, 0x04", "cmpneqsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpneqsd4563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x58, 0x10, 0x04", "cmpneqsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpneqsd4564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x3C, 0x42, 0x04", "cmpneqsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpneqsd4565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x50, 0x10, 0x04", "cmpneqsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpneqsd4566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpneqsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x10, 0x04", "cmpneqsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpnlepd4567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlepd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC0, 0x06", "cmpnlepd xmm0, xmm0");
}



#[test]
fn enc_sse2_cmpnlepd4568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlepd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x14, 0x42, 0x06", "cmpnlepd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpnlepd4569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlepd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC4, 0x06", "cmpnlepd xmm0, xmm4");
}



#[test]
fn enc_sse2_cmpnlepd4570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlepd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xE1, 0x06", "cmpnlepd xmm4, xmm1");
}



#[test]
fn enc_sse2_cmpnlepd4571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlepd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC8, 0x06", "cmpnlepd xmm1, xmm0");
}



#[test]
fn enc_sse2_cmpnlesd4572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xE4, 0x06", "cmpnlesd xmm12, xmm4");
}



#[test]
fn enc_sse2_cmpnlesd4573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xC4, 0x06", "cmpnlesd xmm0, xmm12");
}



#[test]
fn enc_sse2_cmpnlesd4574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xC9, 0x06", "cmpnlesd xmm1, xmm1");
}



#[test]
fn enc_sse2_cmpnlesd4575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xC2, 0xFB, 0x06", "cmpnlesd xmm15, xmm11");
}



#[test]
fn enc_sse2_cmpnlesd4576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xC2, 0xE7, 0x06", "cmpnlesd xmm12, xmm15");
}



#[test]
fn enc_sse2_cmpnlesd4577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x58, 0x10, 0x06", "cmpnlesd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnlesd4578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x40, 0x10, 0x06", "cmpnlesd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnlesd4579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x58, 0x10, 0x06", "cmpnlesd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnlesd4580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x24, 0x42, 0x06", "cmpnlesd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpnlesd4581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnlesd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x60, 0x10, 0x06", "cmpnlesd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnltpd4582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC1, 0x05", "cmpnltpd xmm0, xmm1");
}



#[test]
fn enc_sse2_cmpnltpd4583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC8, 0x05", "cmpnltpd xmm1, xmm0");
}



#[test]
fn enc_sse2_cmpnltpd4584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xCA, 0x05", "cmpnltpd xmm1, xmm2");
}



#[test]
fn enc_sse2_cmpnltpd4585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltpd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC2, 0xCC, 0x05", "cmpnltpd xmm1, xmm12");
}



#[test]
fn enc_sse2_cmpnltsd4586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xC0, 0x05", "cmpnltsd xmm0, xmm0");
}



#[test]
fn enc_sse2_cmpnltsd4587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xE4, 0x05", "cmpnltsd xmm12, xmm4");
}



#[test]
fn enc_sse2_cmpnltsd4588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xD1, 0x05", "cmpnltsd xmm2, xmm1");
}



#[test]
fn enc_sse2_cmpnltsd4589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xE0, 0x05", "cmpnltsd xmm12, xmm0");
}



#[test]
fn enc_sse2_cmpnltsd4590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xD2, 0x05", "cmpnltsd xmm2, xmm2");
}



#[test]
fn enc_sse2_cmpnltsd4591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x04, 0x42, 0x05", "cmpnltsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpnltsd4592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x60, 0x10, 0x05", "cmpnltsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnltsd4593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x50, 0x10, 0x05", "cmpnltsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnltsd4594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x48, 0x10, 0x05", "cmpnltsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpnltsd4595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpnltsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x18, 0x05", "cmpnltsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpordpd4596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x1A, 0x07", "cmpordpd xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_cmpordpd4597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordpd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xC9, 0x07", "cmpordpd xmm1, xmm1");
}



#[test]
fn enc_sse2_cmpordpd4598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xCB, 0x07", "cmpordpd xmm1, xmm3");
}



#[test]
fn enc_sse2_cmpordpd4599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x18, 0x07", "cmpordpd xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_cmpordpd4600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0xE2, 0x07", "cmpordpd xmm12, xmm2");
}



#[test]
fn enc_sse2_cmpordsd4601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xD1, 0x07", "cmpordsd xmm2, xmm1");
}



#[test]
fn enc_sse2_cmpordsd4602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xDB, 0x07", "cmpordsd xmm3, xmm11");
}



#[test]
fn enc_sse2_cmpordsd4603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xE7, 0x07", "cmpordsd xmm4, xmm15");
}



#[test]
fn enc_sse2_cmpordsd4604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xC2, 0x07", "cmpordsd xmm0, xmm2");
}



#[test]
fn enc_sse2_cmpordsd4605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xD7, 0x07", "cmpordsd xmm2, xmm15");
}



#[test]
fn enc_sse2_cmpordsd4606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x10, 0x07", "cmpordsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpordsd4607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x1C, 0x42, 0x07", "cmpordsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpordsd4608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x20, 0x07", "cmpordsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpordsd4609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpordsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x18, 0x07", "cmpordsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_cmppd4610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmppd xmm2, xmm1, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xD1, 0x38", "cmppd xmm2, xmm1, 56");
}



#[test]
fn enc_sse2_cmppd4611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmppd xmm12, OWORD [rax * 2 + rdx], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0x24, 0x42, 0x44", "cmppd xmm12, OWORD [rax * 2 + rdx], 68");
}



#[test]
fn enc_sse2_cmppd4612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmppd xmm4, xmm4, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xE4, 0x5D", "cmppd xmm4, xmm4, 93");
}



#[test]
fn enc_sse2_cmppd4613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmppd xmm4, xmm3, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xE3, 0x0E", "cmppd xmm4, xmm3, 14");
}



#[test]
fn enc_sse2_cmppd4614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmppd xmm11, xmm1, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC2, 0xD9, 0x23", "cmppd xmm11, xmm1, 35");
}



#[test]
fn enc_sse2_cmpsd4615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsd xmm3, xmm12, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xDC, 0x3A", "cmpsd xmm3, xmm12, 58");
}



#[test]
fn enc_sse2_cmpsd4616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsd xmm0, xmm1, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xC1, 0x1D", "cmpsd xmm0, xmm1, 29");
}



#[test]
fn enc_sse2_cmpsd4617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsd xmm3, xmm4, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xDC, 0x75", "cmpsd xmm3, xmm4, 117");
}



#[test]
fn enc_sse2_cmpsd4618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsd xmm4, OWORD [rax], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x20, 0x79", "cmpsd xmm4, OWORD [rax], 121");
}



#[test]
fn enc_sse2_cmpsd4619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpsd xmm15, OWORD [rdx], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x3A, 0x64", "cmpsd xmm15, OWORD [rdx], 100");
}



#[test]
fn enc_sse2_cmpunordpd4620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordpd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC2, 0xCB, 0x03", "cmpunordpd xmm1, xmm11");
}



#[test]
fn enc_sse2_cmpunordpd4621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordpd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x00, 0x03", "cmpunordpd xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_cmpunordpd4622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0xD0, 0x03", "cmpunordpd xmm2, xmm0");
}



#[test]
fn enc_sse2_cmpunordpd4623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xC2, 0xE4, 0x03", "cmpunordpd xmm12, xmm12");
}



#[test]
fn enc_sse2_cmpunordpd4624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordpd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC2, 0x20, 0x03", "cmpunordpd xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_cmpunordsd4625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xDC, 0x03", "cmpunordsd xmm3, xmm4");
}



#[test]
fn enc_sse2_cmpunordsd4626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xDA, 0x03", "cmpunordsd xmm11, xmm2");
}



#[test]
fn enc_sse2_cmpunordsd4627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0xE2, 0x03", "cmpunordsd xmm4, xmm2");
}



#[test]
fn enc_sse2_cmpunordsd4628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0xFB, 0x03", "cmpunordsd xmm15, xmm3");
}



#[test]
fn enc_sse2_cmpunordsd4629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xC2, 0xE4, 0x03", "cmpunordsd xmm4, xmm12");
}



#[test]
fn enc_sse2_cmpunordsd4630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x3C, 0x42, 0x03", "cmpunordsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpunordsd4631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x14, 0x42, 0x03", "cmpunordsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cmpunordsd4632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xC2, 0x50, 0x10, 0x03", "cmpunordsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cmpunordsd4633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x18, 0x03", "cmpunordsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_cmpunordsd4634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cmpunordsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xC2, 0x60, 0x10, 0x03", "cmpunordsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_comisd4635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xF9", "comisd xmm15, xmm1");
}



#[test]
fn enc_sse2_comisd4636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2F, 0xCC", "comisd xmm1, xmm12");
}



#[test]
fn enc_sse2_comisd4637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2F, 0xCF", "comisd xmm1, xmm15");
}



#[test]
fn enc_sse2_comisd4638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xE4", "comisd xmm4, xmm4");
}



#[test]
fn enc_sse2_comisd4639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x78, 0x10", "comisd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_comisd4640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x58, 0x10", "comisd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_comisd4641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x38", "comisd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_comisd4642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x08", "comisd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_comisd4643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x48, 0x10", "comisd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtdq2pd4644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0xDA", "cvtdq2pd xmm3, xmm2");
}



#[test]
fn enc_sse2_cvtdq2pd4645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xC7", "cvtdq2pd xmm0, xmm15");
}



#[test]
fn enc_sse2_cvtdq2pd4646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xE0", "cvtdq2pd xmm12, xmm0");
}



#[test]
fn enc_sse2_cvtdq2pd4647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xF8", "cvtdq2pd xmm15, xmm0");
}



#[test]
fn enc_sse2_cvtdq2pd4648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0xCB", "cvtdq2pd xmm1, xmm3");
}



#[test]
fn enc_sse2_cvtdq2pd4649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0x1C, 0x42", "cvtdq2pd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2pd4650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x00", "cvtdq2pd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2pd4651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x40, 0x10", "cvtdq2pd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtdq2pd4652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x18", "cvtdq2pd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2ps4653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x04, 0x42", "cvtdq2ps xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2ps4654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xE4", "cvtdq2ps xmm4, xmm4");
}



#[test]
fn enc_sse2_cvtdq2ps4655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xD2", "cvtdq2ps xmm2, xmm2");
}



#[test]
fn enc_sse2_cvtdq2ps4656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5B, 0xE3", "cvtdq2ps xmm4, xmm11");
}



#[test]
fn enc_sse2_cvtdq2ps4657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xCA", "cvtdq2ps xmm1, xmm2");
}



#[test]
fn enc_sse2_cvtpd2dq4658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xF9", "cvtpd2dq xmm15, xmm1");
}



#[test]
fn enc_sse2_cvtpd2dq4659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xE6, 0xE7", "cvtpd2dq xmm12, xmm15");
}



#[test]
fn enc_sse2_cvtpd2dq4660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xFB", "cvtpd2dq xmm15, xmm3");
}



#[test]
fn enc_sse2_cvtpd2dq4661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xE6, 0xC3", "cvtpd2dq xmm0, xmm11");
}



#[test]
fn enc_sse2_cvtpd2dq4662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0x08", "cvtpd2dq xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_cvtpd2pi4663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xD9", "cvtpd2pi mm3, xmm1");
}



#[test]
fn enc_sse2_cvtpd2pi4664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0x1A", "cvtpd2pi mm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtpd2pi4665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xDF", "cvtpd2pi mm3, xmm15");
}



#[test]
fn enc_sse2_cvtpd2pi4666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm5, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xEC", "cvtpd2pi mm5, xmm12");
}



#[test]
fn enc_sse2_cvtpd2pi4667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xC4", "cvtpd2pi mm0, xmm12");
}



#[test]
fn enc_sse2_cvtpd2ps4668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5A, 0xCF", "cvtpd2ps xmm1, xmm15");
}



#[test]
fn enc_sse2_cvtpd2ps4669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0x1C, 0x42", "cvtpd2ps xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtpd2ps4670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5A, 0xE4", "cvtpd2ps xmm12, xmm12");
}



#[test]
fn enc_sse2_cvtpd2ps4671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5A, 0xFF", "cvtpd2ps xmm15, xmm15");
}



#[test]
fn enc_sse2_cvtpd2ps4672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5A, 0xCC", "cvtpd2ps xmm1, xmm12");
}



#[test]
fn enc_sse2_cvtpi2pd4673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0xE0", "cvtpi2pd xmm4, mm0");
}



#[test]
fn enc_sse2_cvtpi2pd4674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm11, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0x1A", "cvtpi2pd xmm11, [rdx]");
}



#[test]
fn enc_sse2_cvtpi2pd4675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm11, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0xD8", "cvtpi2pd xmm11, mm0");
}



#[test]
fn enc_sse2_cvtpi2pd4676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0xD8", "cvtpi2pd xmm3, mm0");
}



#[test]
fn enc_sse2_cvtps2dq4677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5B, 0xDF", "cvtps2dq xmm11, xmm15");
}



#[test]
fn enc_sse2_cvtps2dq4678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xF8", "cvtps2dq xmm15, xmm0");
}



#[test]
fn enc_sse2_cvtps2dq4679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xE0", "cvtps2dq xmm12, xmm0");
}



#[test]
fn enc_sse2_cvtps2dq4680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xDB", "cvtps2dq xmm3, xmm3");
}



#[test]
fn enc_sse2_cvtps2dq4681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xFA", "cvtps2dq xmm15, xmm2");
}



#[test]
fn enc_sse2_cvtps2pd4682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0xE1", "cvtps2pd xmm12, xmm1");
}



#[test]
fn enc_sse2_cvtps2pd4683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xC7", "cvtps2pd xmm0, xmm15");
}



#[test]
fn enc_sse2_cvtps2pd4684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xD4", "cvtps2pd xmm2, xmm4");
}



#[test]
fn enc_sse2_cvtps2pd4685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xDB", "cvtps2pd xmm3, xmm3");
}



#[test]
fn enc_sse2_cvtps2pd4686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x10", "cvtps2pd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtps2pd4687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x20", "cvtps2pd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtps2pd4688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x78, 0x10", "cvtps2pd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtps2pd4689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x1C, 0x42", "cvtps2pd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtps2pd4690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x58, 0x10", "cvtps2pd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si4691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xD3", "cvtsd2si rdx, xmm11");
}



#[test]
fn enc_sse2_cvtsd2si4692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xC8", "cvtsd2si rcx, xmm0");
}



#[test]
fn enc_sse2_cvtsd2si4693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xC4", "cvtsd2si rax, xmm4");
}



#[test]
fn enc_sse2_cvtsd2si4694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD2", "cvtsd2si rdx, xmm2");
}



#[test]
fn enc_sse2_cvtsd2si4695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD4", "cvtsd2si rdx, xmm4");
}



#[test]
fn enc_sse2_cvtsd2si4696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x14, 0x42", "cvtsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si4697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x50, 0x10", "cvtsd2si rdx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si4698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x48, 0x10", "cvtsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si4699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xC7", "cvtsd2si eax, xmm15");
}



#[test]
fn enc_sse2_cvtsd2si4700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0xCB", "cvtsd2si ecx, xmm3");
}



#[test]
fn enc_sse2_cvtsd2si4701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0xD3", "cvtsd2si edx, xmm3");
}



#[test]
fn enc_sse2_cvtsd2si4702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xC4", "cvtsd2si eax, xmm12");
}



#[test]
fn enc_sse2_cvtsd2si4703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0xC8", "cvtsd2si ecx, xmm0");
}



#[test]
fn enc_sse2_cvtsd2si4704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x0C, 0x42", "cvtsd2si ecx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si4705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x00", "cvtsd2si eax, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si4706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x48, 0x10", "cvtsd2si ecx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si4707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x50, 0x10", "cvtsd2si edx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss4708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xE4", "cvtsd2ss xmm4, xmm4");
}



#[test]
fn enc_sse2_cvtsd2ss4709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xE7", "cvtsd2ss xmm4, xmm15");
}



#[test]
fn enc_sse2_cvtsd2ss4710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xC3", "cvtsd2ss xmm0, xmm11");
}



#[test]
fn enc_sse2_cvtsd2ss4711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xCC", "cvtsd2ss xmm1, xmm12");
}



#[test]
fn enc_sse2_cvtsd2ss4712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0xF9", "cvtsd2ss xmm15, xmm1");
}



#[test]
fn enc_sse2_cvtsd2ss4713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x20", "cvtsd2ss xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2ss4714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x60, 0x10", "cvtsd2ss xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss4715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x00", "cvtsd2ss xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2ss4716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x14, 0x42", "cvtsd2ss xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2ss4717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x0C, 0x42", "cvtsd2ss xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsi2sd4718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x00", "cvtsi2sd xmm0, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd4719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x18", "cvtsi2sd xmm3, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd4720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0xC0", "cvtsi2sd xmm0, rax");
}



#[test]
fn enc_sse2_cvtsi2sd4721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm3, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0xD8", "cvtsi2sd xmm3, rax");
}



#[test]
fn enc_sse2_cvtsi2sd4722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x20", "cvtsi2sd xmm4, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd4723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x00", "cvtsi2sd xmm0, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd4724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x10", "cvtsi2sd xmm2, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd4725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm2, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0xD0", "cvtsi2sd xmm2, eax");
}



#[test]
fn enc_sse2_cvtsi2sd4726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0xC0", "cvtsi2sd xmm0, eax");
}



#[test]
fn enc_sse2_cvtss2sd4727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xC4", "cvtss2sd xmm0, xmm12");
}



#[test]
fn enc_sse2_cvtss2sd4728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xC9", "cvtss2sd xmm1, xmm1");
}



#[test]
fn enc_sse2_cvtss2sd4729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xC7", "cvtss2sd xmm0, xmm15");
}



#[test]
fn enc_sse2_cvtss2sd4730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xDB", "cvtss2sd xmm3, xmm3");
}



#[test]
fn enc_sse2_cvtss2sd4731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xE4", "cvtss2sd xmm4, xmm4");
}



#[test]
fn enc_sse2_cvtss2sd4732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5A, 0x38", "cvtss2sd xmm15, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd4733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x1C, 0x42", "cvtss2sd xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtss2sd4734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x04, 0x42", "cvtss2sd xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtss2sd4735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x20", "cvtss2sd xmm4, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd4736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x48, 0x10", "cvtss2sd xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvttpd2dq4737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE6, 0xE4", "cvttpd2dq xmm12, xmm12");
}



#[test]
fn enc_sse2_cvttpd2dq4738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD4", "cvttpd2dq xmm2, xmm12");
}



#[test]
fn enc_sse2_cvttpd2dq4739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD7", "cvttpd2dq xmm2, xmm15");
}



#[test]
fn enc_sse2_cvttpd2dq4740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE6, 0xD8", "cvttpd2dq xmm11, xmm0");
}



#[test]
fn enc_sse2_cvttpd2dq4741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE6, 0xE7", "cvttpd2dq xmm12, xmm15");
}



#[test]
fn enc_sse2_cvttpd2pi4742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2C, 0xE4", "cvttpd2pi mm4, xmm12");
}



#[test]
fn enc_sse2_cvttpd2pi4743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0x0C, 0x42", "cvttpd2pi mm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttpd2pi4744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2C, 0xD7", "cvttpd2pi mm2, xmm15");
}



#[test]
fn enc_sse2_cvttpd2pi4745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xDC", "cvttpd2pi mm3, xmm4");
}



#[test]
fn enc_sse2_cvttpd2pi4746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0x10", "cvttpd2pi mm2, OWORD [rax]");
}



#[test]
fn enc_sse2_cvttps2dq4747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xC1", "cvttps2dq xmm0, xmm1");
}



#[test]
fn enc_sse2_cvttps2dq4748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5B, 0x3C, 0x42", "cvttps2dq xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttps2dq4749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xC2", "cvttps2dq xmm0, xmm2");
}



#[test]
fn enc_sse2_cvttps2dq4750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5B, 0xDF", "cvttps2dq xmm3, xmm15");
}



#[test]
fn enc_sse2_cvttps2dq4751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5B, 0xCF", "cvttps2dq xmm1, xmm15");
}



#[test]
fn enc_sse2_cvttsd2si4752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD2", "cvttsd2si rdx, xmm2");
}



#[test]
fn enc_sse2_cvttsd2si4753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xCB", "cvttsd2si rcx, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si4754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xC4", "cvttsd2si rax, xmm4");
}



#[test]
fn enc_sse2_cvttsd2si4755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xC3", "cvttsd2si rax, xmm11");
}



#[test]
fn enc_sse2_cvttsd2si4756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xD7", "cvttsd2si rdx, xmm15");
}



#[test]
fn enc_sse2_cvttsd2si4757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x14, 0x42", "cvttsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si4758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x0C, 0x42", "cvttsd2si rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si4759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x10", "cvttsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvttsd2si4760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x04, 0x42", "cvttsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si4761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xC4", "cvttsd2si eax, xmm4");
}



#[test]
fn enc_sse2_cvttsd2si4762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xC9", "cvttsd2si ecx, xmm1");
}



#[test]
fn enc_sse2_cvttsd2si4763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xCB", "cvttsd2si ecx, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si4764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si edx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2C, 0xD3", "cvttsd2si edx, xmm11");
}



#[test]
fn enc_sse2_cvttsd2si4765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x08", "cvttsd2si ecx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvttsd2si4766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x04, 0x42", "cvttsd2si eax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si4767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x00", "cvttsd2si eax, QWORD [rax]");
}



#[test]
fn enc_sse2_divpd4768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0x1A", "divpd xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_divpd4769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xFB", "divpd xmm15, xmm3");
}



#[test]
fn enc_sse2_divpd4770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0x1C, 0x42", "divpd xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_divpd4771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xDA", "divpd xmm11, xmm2");
}



#[test]
fn enc_sse2_divpd4772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5E, 0xDB", "divpd xmm11, xmm11");
}



#[test]
fn enc_sse2_divsd4773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xD4", "divsd xmm2, xmm12");
}



#[test]
fn enc_sse2_divsd4774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xD1", "divsd xmm2, xmm1");
}



#[test]
fn enc_sse2_divsd4775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xC4", "divsd xmm0, xmm4");
}



#[test]
fn enc_sse2_divsd4776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xDC", "divsd xmm3, xmm12");
}



#[test]
fn enc_sse2_divsd4777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xC9", "divsd xmm1, xmm1");
}



#[test]
fn enc_sse2_divsd4778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0x18", "divsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_divsd4779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x40, 0x10", "divsd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_divsd4780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x10", "divsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_divsd4781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0x3C, 0x42", "divsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maskmovdqu4782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xD1", "maskmovdqu xmm2, xmm1");
}



#[test]
fn enc_sse2_maskmovdqu4783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF7, 0xC3", "maskmovdqu xmm0, xmm11");
}



#[test]
fn enc_sse2_maskmovdqu4784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF7, 0xE4", "maskmovdqu xmm12, xmm12");
}



#[test]
fn enc_sse2_maskmovdqu4785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xD9", "maskmovdqu xmm11, xmm1");
}



#[test]
fn enc_sse2_maxpd4786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0xE2", "maxpd xmm12, xmm2");
}



#[test]
fn enc_sse2_maxpd4787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0x20", "maxpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_maxpd4788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5F, 0xDF", "maxpd xmm11, xmm15");
}



#[test]
fn enc_sse2_maxpd4789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0xDA", "maxpd xmm11, xmm2");
}



#[test]
fn enc_sse2_maxpd4790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5F, 0xE3", "maxpd xmm12, xmm11");
}



#[test]
fn enc_sse2_maxsd4791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xDA", "maxsd xmm11, xmm2");
}



#[test]
fn enc_sse2_maxsd4792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xF9", "maxsd xmm15, xmm1");
}



#[test]
fn enc_sse2_maxsd4793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xE0", "maxsd xmm12, xmm0");
}



#[test]
fn enc_sse2_maxsd4794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5F, 0xC4", "maxsd xmm0, xmm12");
}



#[test]
fn enc_sse2_maxsd4795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5F, 0xCC", "maxsd xmm1, xmm12");
}



#[test]
fn enc_sse2_maxsd4796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0x60, 0x10", "maxsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_maxsd4797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x14, 0x42", "maxsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maxsd4798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x24, 0x42", "maxsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maxsd4799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x10", "maxsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_maxsd4800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x18", "maxsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_minpd4801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0x20", "minpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_minpd4802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0xFB", "minpd xmm15, xmm3");
}



#[test]
fn enc_sse2_minpd4803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0x18", "minpd xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_minpd4804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0xDA", "minpd xmm3, xmm2");
}



#[test]
fn enc_sse2_minpd4805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xDF", "minpd xmm11, xmm15");
}



#[test]
fn enc_sse2_minsd4806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xD3", "minsd xmm2, xmm3");
}



#[test]
fn enc_sse2_minsd4807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5D, 0xD4", "minsd xmm2, xmm12");
}



#[test]
fn enc_sse2_minsd4808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xDA", "minsd xmm3, xmm2");
}



#[test]
fn enc_sse2_minsd4809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5D, 0xE7", "minsd xmm4, xmm15");
}



#[test]
fn enc_sse2_minsd4810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xFB", "minsd xmm15, xmm3");
}



#[test]
fn enc_sse2_minsd4811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x60, 0x10", "minsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_minsd4812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0x10", "minsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_minsd4813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x38", "minsd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_minsd4814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x58, 0x10", "minsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_minsd4815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0x24, 0x42", "minsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd4816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x48, 0x10", "movapd xmm1, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movapd4817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x40, 0x10", "movapd xmm0, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movapd4818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x14, 0x42", "movapd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd4819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x10", "movapd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_movapd4820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xE3", "movapd xmm4, xmm11");
}



#[test]
fn enc_sse2_movapd4821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xE1", "movapd xmm12, xmm1");
}



#[test]
fn enc_sse2_movapd4822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xC2", "movapd xmm0, xmm2");
}



#[test]
fn enc_sse2_movapd4823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xC9", "movapd xmm1, xmm1");
}



#[test]
fn enc_sse2_movapd4824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x58, 0x10", "movapd OWORD [rax + 16], xmm3");
}



#[test]
fn enc_sse2_movapd4825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x38", "movapd OWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movapd4826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x0C, 0x42", "movapd OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movapd4827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x58, 0x10", "movapd OWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse2_movapd4828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x50, 0x10", "movapd OWORD [rax + 16], xmm2");
}



#[test]
fn enc_sse2_movapd4829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xC7", "movapd xmm0, xmm15");
}



#[test]
fn enc_sse2_movapd4830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xE3", "movapd xmm12, xmm3");
}



#[test]
fn enc_sse2_movapd4831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xE1", "movapd xmm12, xmm1");
}



#[test]
fn enc_sse2_movapd4832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xD2", "movapd xmm2, xmm2");
}



#[test]
fn enc_sse2_movapd4833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xE4", "movapd xmm12, xmm4");
}



#[test]
fn enc_sse2_movd4834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x3C, 0x42", "movd DWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movd4835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x18", "movd DWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movd4836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x24, 0x42", "movd DWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movd4837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x50, 0x10", "movd DWORD [rax + 16], xmm2");
}



#[test]
fn enc_sse2_movd4838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x78, 0x10", "movd DWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse2_movd4839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x24, 0x42", "movd xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd4840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x20", "movd xmm12, DWORD [rax]");
}



#[test]
fn enc_sse2_movd4841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x08", "movd xmm1, DWORD [rax]");
}



#[test]
fn enc_sse2_movd4842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x1C, 0x42", "movd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd4843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm1, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x0C, 0x42", "movd xmm1, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd4844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x38", "movd xmm15, DWORD [rax]");
}



#[test]
fn enc_sse2_movd4845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm1, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0xC8", "movd xmm1, eax");
}



#[test]
fn enc_sse2_movd4846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x18", "movd xmm11, DWORD [rax]");
}



#[test]
fn enc_sse2_movd4847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x10", "movd xmm2, DWORD [rax]");
}



#[test]
fn enc_sse2_movd4848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0xE0", "movd eax, xmm4");
}



#[test]
fn enc_sse2_movd4849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0xD8", "movd eax, xmm11");
}



#[test]
fn enc_sse2_movd4850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x38", "movd DWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movd4851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x18", "movd DWORD [rax], xmm3");
}



#[test]
fn enc_sse2_movd4852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0xD8", "movd eax, xmm3");
}



#[test]
fn enc_sse2_movdq2q4853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xEC", "movdq2q mm5, xmm12");
}



#[test]
fn enc_sse2_movdq2q4854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xEB", "movdq2q mm5, xmm3");
}



#[test]
fn enc_sse2_movdq2q4855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xE7", "movdq2q mm4, xmm15");
}



#[test]
fn enc_sse2_movdq2q4856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xC3", "movdq2q mm0, xmm3");
}



#[test]
fn enc_sse2_movdqa4857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xE7", "movdqa xmm4, xmm15");
}



#[test]
fn enc_sse2_movdqa4858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xE7", "movdqa xmm12, xmm15");
}



#[test]
fn enc_sse2_movdqa4859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xE4", "movdqa xmm12, xmm4");
}



#[test]
fn enc_sse2_movdqa4860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xC1", "movdqa xmm0, xmm1");
}



#[test]
fn enc_sse2_movdqa4861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xF9", "movdqa xmm15, xmm1");
}



#[test]
fn enc_sse2_movdqa4862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x60, 0x10", "movdqa xmm4, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqa4863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x24, 0x42", "movdqa xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqa4864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x3C, 0x42", "movdqa xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqa4865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x18", "movdqa xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqa4866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x50, 0x10", "movdqa xmm2, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqa4867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xDB", "movdqa xmm11, xmm11");
}



#[test]
fn enc_sse2_movdqa4868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xDC", "movdqa xmm3, xmm12");
}



#[test]
fn enc_sse2_movdqa4869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xDC", "movdqa xmm11, xmm4");
}



#[test]
fn enc_sse2_movdqa4870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xE2", "movdqa xmm12, xmm2");
}



#[test]
fn enc_sse2_movdqa4871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xDB", "movdqa xmm11, xmm3");
}



#[test]
fn enc_sse2_movdqa4872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x3C, 0x42", "movdqa OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movdqa4873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x0C, 0x42", "movdqa OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movdqa4874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x1C, 0x42", "movdqa OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movdqa4875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x38", "movdqa OWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movdqa4876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x78, 0x10", "movdqa OWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse2_movdqu4877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xE3", "movdqu xmm12, xmm11");
}



#[test]
fn enc_sse2_movdqu4878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xC0", "movdqu xmm0, xmm0");
}



#[test]
fn enc_sse2_movdqu4879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xD8", "movdqu xmm11, xmm0");
}



#[test]
fn enc_sse2_movdqu4880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xFA", "movdqu xmm15, xmm2");
}



#[test]
fn enc_sse2_movdqu4881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x6F, 0xE7", "movdqu xmm4, xmm15");
}



#[test]
fn enc_sse2_movdqu4882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x20", "movdqu xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqu4883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x1C, 0x42", "movdqu xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqu4884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x58, 0x10", "movdqu xmm3, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqu4885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x38", "movdqu xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqu4886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x60, 0x10", "movdqu xmm12, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqu4887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xE7", "movdqu xmm12, xmm15");
}



#[test]
fn enc_sse2_movdqu4888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD9", "movdqu xmm3, xmm1");
}



#[test]
fn enc_sse2_movdqu4889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xE4", "movdqu xmm12, xmm4");
}



#[test]
fn enc_sse2_movdqu4890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xFC", "movdqu xmm15, xmm12");
}



#[test]
fn enc_sse2_movdqu4891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xD8", "movdqu xmm11, xmm0");
}



#[test]
fn enc_sse2_movdqu4892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x58, 0x10", "movdqu OWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse2_movdqu4893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x78, 0x10", "movdqu OWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse2_movdqu4894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x14, 0x42", "movdqu OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movdqu4895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x1C, 0x42", "movdqu OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse2_movdqu4896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x10", "movdqu OWORD [rax], xmm2");
}



#[test]
fn enc_sse2_movhpd4897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x10", "movhpd [rax], xmm2");
}



#[test]
fn enc_sse2_movhpd4898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x18", "movhpd [rax], xmm3");
}



#[test]
fn enc_sse2_movhpd4899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x20", "movhpd [rax], xmm12");
}



#[test]
fn enc_sse2_movhpd4900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x08", "movhpd [rax], xmm1");
}



#[test]
fn enc_sse2_movhpd4901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x20", "movhpd [rax], xmm4");
}



#[test]
fn enc_sse2_movhpd4902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x00", "movhpd xmm0, [rax]");
}



#[test]
fn enc_sse2_movhpd4903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x20", "movhpd xmm4, [rax]");
}



#[test]
fn enc_sse2_movhpd4904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x20", "movhpd xmm12, [rax]");
}



#[test]
fn enc_sse2_movhpd4905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm11, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x18", "movhpd xmm11, [rax]");
}



#[test]
fn enc_sse2_movlpd4906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x18", "movlpd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_movlpd4907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x58, 0x10", "movlpd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movlpd4908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x04, 0x42", "movlpd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movlpd4909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x50, 0x10", "movlpd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movlpd4910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x12, 0x3C, 0x42", "movlpd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movlpd4911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x24, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movlpd4912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x20", "movlpd QWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movlpd4913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x1C, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movlpd4914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x18", "movlpd QWORD [rax], xmm3");
}



#[test]
fn enc_sse2_movmskpd4915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xC4", "movmskpd rax, xmm4");
}



#[test]
fn enc_sse2_movmskpd4916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xCB", "movmskpd rcx, xmm3");
}



#[test]
fn enc_sse2_movmskpd4917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xC3", "movmskpd rax, xmm11");
}



#[test]
fn enc_sse2_movmskpd4918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xC4", "movmskpd rax, xmm12");
}



#[test]
fn enc_sse2_movmskpd4919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xCC", "movmskpd rcx, xmm4");
}



#[test]
fn enc_sse2_movmskpd4920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd eax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xC0", "movmskpd eax, xmm0");
}



#[test]
fn enc_sse2_movmskpd4921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd edx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xD3", "movmskpd edx, xmm3");
}



#[test]
fn enc_sse2_movmskpd4922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd ecx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xCA", "movmskpd ecx, xmm2");
}



#[test]
fn enc_sse2_movmskpd4923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd edx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xD2", "movmskpd edx, xmm2");
}



#[test]
fn enc_sse2_movmskpd4924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd eax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xC2", "movmskpd eax, xmm2");
}



#[test]
fn enc_sse2_movntdq4925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x20", "movntdq OWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movntdq4926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x18", "movntdq OWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movntdq4927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x1C, 0x42", "movntdq OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse2_movntdq4928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x60, 0x10", "movntdq OWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse2_movntdq4929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x58, 0x10", "movntdq OWORD [rax + 16], xmm3");
}



#[test]
fn enc_sse2_movntpd4930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x20", "movntpd OWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movntpd4931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x60, 0x10", "movntpd OWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse2_movntpd4932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x1C, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movntpd4933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x18", "movntpd OWORD [rax], xmm3");
}



#[test]
fn enc_sse2_movntpd4934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x24, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movq4935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x00", "movq xmm0, [rax]");
}



#[test]
fn enc_sse2_movq4936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x6E, 0xD8", "movq xmm11, rax");
}



#[test]
fn enc_sse2_movq4937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x6E, 0xC8", "movq xmm1, rax");
}



#[test]
fn enc_sse2_movq4938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x6E, 0xE0", "movq xmm12, rax");
}



#[test]
fn enc_sse2_movq4939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC9", "movq xmm1, xmm1");
}



#[test]
fn enc_sse2_movq4940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xC4", "movq xmm0, xmm12");
}



#[test]
fn enc_sse2_movq4941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xCF", "movq xmm1, xmm15");
}



#[test]
fn enc_sse2_movq4942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC3", "movq xmm0, xmm3");
}



#[test]
fn enc_sse2_movq4943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xDA", "movq xmm11, xmm2");
}



#[test]
fn enc_sse2_movq4944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x38", "movq xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_movq4945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x58, 0x10", "movq xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movq4946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x40, 0x10", "movq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movq4947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x04, 0x42", "movq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movq4948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x18", "movq xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_movq4949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x24, 0x42", "movq QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movq4950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x24, 0x42", "movq QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movq4951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x04, 0x42", "movq QWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_sse2_movq4952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x14, 0x42", "movq QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movq4953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x38", "movq [rax], xmm15");
}



#[test]
fn enc_sse2_movq4954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x7E, 0xC8", "movq rax, xmm1");
}



#[test]
fn enc_sse2_movq4955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x20", "movq [rax], xmm12");
}



#[test]
fn enc_sse2_movq4956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x00", "movq [rax], xmm0");
}



#[test]
fn enc_sse2_movq4957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xC7", "movq xmm0, xmm15");
}



#[test]
fn enc_sse2_movq4958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xCC", "movq xmm1, xmm4");
}



#[test]
fn enc_sse2_movq4959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xE1", "movq xmm12, xmm1");
}



#[test]
fn enc_sse2_movq4960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xE3", "movq xmm12, xmm11");
}



#[test]
fn enc_sse2_movq4961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xDB", "movq xmm3, xmm3");
}



#[test]
fn enc_sse2_movq2dq4962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm0, mm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xC4", "movq2dq xmm0, mm4");
}



#[test]
fn enc_sse2_movq2dq4963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm15, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xFA", "movq2dq xmm15, mm2");
}



#[test]
fn enc_sse2_movq2dq4964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm0, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xC1", "movq2dq xmm0, mm1");
}



#[test]
fn enc_sse2_movq2dq4965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm1, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xCB", "movq2dq xmm1, mm3");
}



#[test]
fn enc_sse2_movq2dq4966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm4, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xE3", "movq2dq xmm4, mm3");
}



#[test]
fn enc_sse2_movsd4967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xCB", "movsd xmm1, xmm11");
}



#[test]
fn enc_sse2_movsd4968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD0", "movsd xmm2, xmm0");
}



#[test]
fn enc_sse2_movsd4969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xCA", "movsd xmm1, xmm2");
}



#[test]
fn enc_sse2_movsd4970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x10, 0xDB", "movsd xmm11, xmm11");
}



#[test]
fn enc_sse2_movsd4971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD3", "movsd xmm2, xmm3");
}



#[test]
fn enc_sse2_movsd4972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x3C, 0x42", "movsd QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movsd4973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x78, 0x10", "movsd QWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse2_movsd4974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x08", "movsd QWORD [rax], xmm1");
}



#[test]
fn enc_sse2_movsd4975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x50, 0x10", "movsd QWORD [rax + 16], xmm2");
}



#[test]
fn enc_sse2_movsd4976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x18", "movsd QWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movsd4977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD4", "movsd xmm2, xmm4");
}



#[test]
fn enc_sse2_movsd4978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xE2", "movsd xmm12, xmm2");
}



#[test]
fn enc_sse2_movsd4979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xFB", "movsd xmm15, xmm3");
}



#[test]
fn enc_sse2_movsd4980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x10, 0xFB", "movsd xmm15, xmm11");
}



#[test]
fn enc_sse2_movsd4981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x60, 0x10", "movsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movsd4982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x40, 0x10", "movsd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movsd4983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x10", "movsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_movsd4984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0x20", "movsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_movupd4985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x24, 0x42", "movupd xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movupd4986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x3C, 0x42", "movupd xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movupd4987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x20", "movupd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_movupd4988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x24, 0x42", "movupd xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movupd4989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x3C, 0x42", "movupd OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movupd4990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x20", "movupd OWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movupd4991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x11, 0x0C, 0x42", "movupd OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movupd4992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x60, 0x10", "movupd OWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse2_movupd4993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xDC", "movupd xmm3, xmm12");
}



#[test]
fn enc_sse2_movupd4994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xDB", "movupd xmm11, xmm3");
}



#[test]
fn enc_sse2_movupd4995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xC4", "movupd xmm0, xmm12");
}



#[test]
fn enc_sse2_movupd4996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xE4", "movupd xmm4, xmm4");
}



#[test]
fn enc_sse2_movupd4997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xD3", "movupd xmm2, xmm11");
}



#[test]
fn enc_sse2_movupd4998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xE7", "movupd xmm12, xmm15");
}



#[test]
fn enc_sse2_movupd4999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xD8", "movupd xmm11, xmm0");
}



#[test]
fn enc_sse2_movupd5000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xE3", "movupd xmm12, xmm11");
}



#[test]
fn enc_sse2_movupd5001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC0", "movupd xmm0, xmm0");
}



#[test]
fn enc_sse2_mulpd5002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0xFC", "mulpd xmm15, xmm4");
}



#[test]
fn enc_sse2_mulpd5003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0x20", "mulpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_mulpd5004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x59, 0xDB", "mulpd xmm3, xmm11");
}



#[test]
fn enc_sse2_mulpd5005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0x3A", "mulpd xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_mulpd5006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0x1C, 0x42", "mulpd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_mulsd5007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xD9", "mulsd xmm3, xmm1");
}



#[test]
fn enc_sse2_mulsd5008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0xD8", "mulsd xmm11, xmm0");
}



#[test]
fn enc_sse2_mulsd5009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0xE1", "mulsd xmm12, xmm1");
}



#[test]
fn enc_sse2_mulsd5010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x59, 0xCC", "mulsd xmm1, xmm12");
}



#[test]
fn enc_sse2_mulsd5011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x59, 0xDF", "mulsd xmm11, xmm15");
}



#[test]
fn enc_sse2_mulsd5012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0x50, 0x10", "mulsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_mulsd5013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0x3C, 0x42", "mulsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_mulsd5014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0x04, 0x42", "mulsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_mulsd5015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0x38", "mulsd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_orpd5016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x56, 0xFF", "orpd xmm15, xmm15");
}



#[test]
fn enc_sse2_orpd5017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0x20", "orpd xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_orpd5018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0x20", "orpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_orpd5019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xE3", "orpd xmm12, xmm3");
}



#[test]
fn enc_sse2_packssdw5020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xCA", "packssdw xmm1, xmm2");
}



#[test]
fn enc_sse2_packssdw5021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xC9", "packssdw xmm1, xmm1");
}



#[test]
fn enc_sse2_packssdw5022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6B, 0xE4", "packssdw xmm12, xmm4");
}



#[test]
fn enc_sse2_packssdw5023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xC8", "packssdw xmm1, xmm0");
}



#[test]
fn enc_sse2_packsswb5024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xDA", "packsswb xmm11, xmm2");
}



#[test]
fn enc_sse2_packsswb5025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0xD2", "packsswb xmm2, xmm2");
}



#[test]
fn enc_sse2_packsswb5026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xE3", "packsswb xmm12, xmm3");
}



#[test]
fn enc_sse2_packsswb5027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0x00", "packsswb xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_packsswb5028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0xCA", "packsswb xmm1, xmm2");
}



#[test]
fn enc_sse2_packuswb5029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xC9", "packuswb xmm1, xmm1");
}



#[test]
fn enc_sse2_packuswb5030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x67, 0xCB", "packuswb xmm1, xmm11");
}



#[test]
fn enc_sse2_packuswb5031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xE1", "packuswb xmm4, xmm1");
}



#[test]
fn enc_sse2_packuswb5032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xC3", "packuswb xmm0, xmm3");
}



#[test]
fn enc_sse2_packuswb5033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x67, 0xE1", "packuswb xmm12, xmm1");
}



#[test]
fn enc_sse2_paddb5034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0x14, 0x42", "paddb xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddb5035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFC, 0xDF", "paddb xmm3, xmm15");
}



#[test]
fn enc_sse2_paddb5036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xD1", "paddb xmm2, xmm1");
}



#[test]
fn enc_sse2_paddb5037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFC, 0xE0", "paddb xmm12, xmm0");
}



#[test]
fn enc_sse2_paddb5038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFC, 0xE2", "paddb xmm12, xmm2");
}



#[test]
fn enc_sse2_paddd5039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFE, 0xD7", "paddd xmm2, xmm15");
}



#[test]
fn enc_sse2_paddd5040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0xE2", "paddd xmm12, xmm2");
}



#[test]
fn enc_sse2_paddd5041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFE, 0xC3", "paddd xmm0, xmm11");
}



#[test]
fn enc_sse2_paddd5042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0xD9", "paddd xmm11, xmm1");
}



#[test]
fn enc_sse2_paddd5043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0xE4", "paddd xmm4, xmm4");
}



#[test]
fn enc_sse2_paddq5044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xD8", "paddq xmm3, xmm0");
}



#[test]
fn enc_sse2_paddq5045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xC2", "paddq xmm0, xmm2");
}



#[test]
fn enc_sse2_paddq5046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD4, 0x20", "paddq xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_paddq5047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD4, 0xF9", "paddq xmm15, xmm1");
}



#[test]
fn enc_sse2_paddq5048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xD1", "paddq xmm2, xmm1");
}



#[test]
fn enc_sse2_paddsb5049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0x1A", "paddsb xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddsb5050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0xDC", "paddsb xmm11, xmm4");
}



#[test]
fn enc_sse2_paddsb5051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0xD8", "paddsb xmm3, xmm0");
}



#[test]
fn enc_sse2_paddsb5052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0xE4", "paddsb xmm12, xmm4");
}



#[test]
fn enc_sse2_paddsb5053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0xD4", "paddsb xmm2, xmm4");
}



#[test]
fn enc_sse2_paddsw5054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xE4", "paddsw xmm4, xmm12");
}



#[test]
fn enc_sse2_paddsw5055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xCB", "paddsw xmm1, xmm11");
}



#[test]
fn enc_sse2_paddsw5056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xD3", "paddsw xmm2, xmm11");
}



#[test]
fn enc_sse2_paddsw5057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xCA", "paddsw xmm1, xmm2");
}



#[test]
fn enc_sse2_paddsw5058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0x02", "paddsw xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddusb5059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDC, 0xC8", "paddusb xmm1, xmm0");
}



#[test]
fn enc_sse2_paddusb5060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDC, 0xDC", "paddusb xmm3, xmm4");
}



#[test]
fn enc_sse2_paddusb5061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xD4", "paddusb xmm2, xmm12");
}



#[test]
fn enc_sse2_paddusb5062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xD7", "paddusb xmm2, xmm15");
}



#[test]
fn enc_sse2_paddusb5063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDC, 0xFC", "paddusb xmm15, xmm12");
}



#[test]
fn enc_sse2_paddusw5064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0x18", "paddusw xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_paddusw5065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDD, 0xE4", "paddusw xmm4, xmm12");
}



#[test]
fn enc_sse2_paddusw5066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xC0", "paddusw xmm0, xmm0");
}



#[test]
fn enc_sse2_paddusw5067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0xDB", "paddusw xmm11, xmm3");
}



#[test]
fn enc_sse2_paddusw5068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xC8", "paddusw xmm1, xmm0");
}



#[test]
fn enc_sse2_paddw5069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xC4", "paddw xmm0, xmm4");
}



#[test]
fn enc_sse2_paddw5070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xC9", "paddw xmm1, xmm1");
}



#[test]
fn enc_sse2_paddw5071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xCB", "paddw xmm1, xmm3");
}



#[test]
fn enc_sse2_paddw5072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xC8", "paddw xmm1, xmm0");
}



#[test]
fn enc_sse2_paddw5073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0x0A", "paddw xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_pand5074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDB, 0xDC", "pand xmm11, xmm12");
}



#[test]
fn enc_sse2_pand5075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0x1C, 0x42", "pand xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pand5076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0xD2", "pand xmm2, xmm2");
}



#[test]
fn enc_sse2_pand5077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0xE1", "pand xmm4, xmm1");
}



#[test]
fn enc_sse2_pandn5078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xC8", "pandn xmm1, xmm0");
}



#[test]
fn enc_sse2_pandn5079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x0A", "pandn xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_pandn5080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDF, 0xD4", "pandn xmm2, xmm12");
}



#[test]
fn enc_sse2_pandn5081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x18", "pandn xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_pandn5082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDF, 0xE2", "pandn xmm12, xmm2");
}



#[test]
fn enc_sse2_pavgb5083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0x22", "pavgb xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pavgb5084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE0, 0xD4", "pavgb xmm2, xmm12");
}



#[test]
fn enc_sse2_pavgb5085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0x1C, 0x42", "pavgb xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pavgb5086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0xC4", "pavgb xmm0, xmm4");
}



#[test]
fn enc_sse2_pavgb5087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0x3C, 0x42", "pavgb xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pavgw5088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE3, 0xD8", "pavgw xmm11, xmm0");
}



#[test]
fn enc_sse2_pavgw5089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0x0C, 0x42", "pavgw xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pavgw5090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0xD8", "pavgw xmm3, xmm0");
}



#[test]
fn enc_sse2_pavgw5091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE3, 0xE2", "pavgw xmm12, xmm2");
}



#[test]
fn enc_sse2_pavgw5092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE3, 0xCF", "pavgw xmm1, xmm15");
}



#[test]
fn enc_sse2_pcmpeqb5093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x74, 0xC0", "pcmpeqb xmm0, xmm0");
}



#[test]
fn enc_sse2_pcmpeqb5094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x74, 0xD9", "pcmpeqb xmm11, xmm1");
}



#[test]
fn enc_sse2_pcmpeqb5095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x74, 0xE2", "pcmpeqb xmm12, xmm2");
}



#[test]
fn enc_sse2_pcmpeqb5096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x74, 0x22", "pcmpeqb xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_pcmpeqb5097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x74, 0xE3", "pcmpeqb xmm12, xmm11");
}



#[test]
fn enc_sse2_pcmpeqd5098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x76, 0xC4", "pcmpeqd xmm0, xmm12");
}



#[test]
fn enc_sse2_pcmpeqd5099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x76, 0xCB", "pcmpeqd xmm1, xmm3");
}



#[test]
fn enc_sse2_pcmpeqd5100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x76, 0xDB", "pcmpeqd xmm3, xmm3");
}



#[test]
fn enc_sse2_pcmpeqd5101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x76, 0xFB", "pcmpeqd xmm15, xmm3");
}



#[test]
fn enc_sse2_pcmpeqd5102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x76, 0x08", "pcmpeqd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_pcmpeqw5103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x75, 0x12", "pcmpeqw xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_pcmpeqw5104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x75, 0xC9", "pcmpeqw xmm1, xmm1");
}



#[test]
fn enc_sse2_pcmpeqw5105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x75, 0xDB", "pcmpeqw xmm3, xmm11");
}



#[test]
fn enc_sse2_pcmpeqw5106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x75, 0x0A", "pcmpeqw xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_pcmpeqw5107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x75, 0xDC", "pcmpeqw xmm3, xmm12");
}



#[test]
fn enc_sse2_pcmpgtb5108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x64, 0x08", "pcmpgtb xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_pcmpgtb5109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x64, 0xC0", "pcmpgtb xmm0, xmm0");
}



#[test]
fn enc_sse2_pcmpgtb5110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x64, 0x04, 0x42", "pcmpgtb xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pcmpgtb5111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x64, 0xDC", "pcmpgtb xmm3, xmm4");
}



#[test]
fn enc_sse2_pcmpgtb5112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtb xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x64, 0x14, 0x42", "pcmpgtb xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pcmpgtd5113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x66, 0xDC", "pcmpgtd xmm11, xmm12");
}



#[test]
fn enc_sse2_pcmpgtd5114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x66, 0xE1", "pcmpgtd xmm4, xmm1");
}



#[test]
fn enc_sse2_pcmpgtd5115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x66, 0xC4", "pcmpgtd xmm0, xmm4");
}



#[test]
fn enc_sse2_pcmpgtw5116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x65, 0x22", "pcmpgtw xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pcmpgtw5117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x65, 0xC9", "pcmpgtw xmm1, xmm1");
}



#[test]
fn enc_sse2_pcmpgtw5118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x65, 0x3C, 0x42", "pcmpgtw xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pcmpgtw5119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x65, 0xD7", "pcmpgtw xmm2, xmm15");
}



#[test]
fn enc_sse2_pcmpgtw5120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpgtw xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x65, 0xE2", "pcmpgtw xmm4, xmm2");
}



#[test]
fn enc_sse2_pextrw5121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm12, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCC, 0x5D", "pextrw ecx, xmm12, 93");
}



#[test]
fn enc_sse2_pextrw5122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm0, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD0, 0x48", "pextrw edx, xmm0, 72");
}



#[test]
fn enc_sse2_pextrw5123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm0, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD0, 0x69", "pextrw edx, xmm0, 105");
}



#[test]
fn enc_sse2_pextrw5124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm15, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xC7, 0x69", "pextrw eax, xmm15, 105");
}



#[test]
fn enc_sse2_pextrw5125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm4, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC4, 0x47", "pextrw eax, xmm4, 71");
}



#[test]
fn enc_sse2_pinsrw5126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, ax, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC8, 0x26", "pinsrw xmm1, ax, 38");
}



#[test]
fn enc_sse2_pinsrw5127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, dx, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xFA, 0x54", "pinsrw xmm15, dx, 84");
}



#[test]
fn enc_sse2_pinsrw5128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, cx, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD9, 0x4D", "pinsrw xmm3, cx, 77");
}



#[test]
fn enc_sse2_pinsrw5129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, cx, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE1, 0x1D", "pinsrw xmm12, cx, 29");
}



#[test]
fn enc_sse2_pinsrw5130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, dx, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC2, 0x57", "pinsrw xmm0, dx, 87");
}



#[test]
fn enc_sse2_pinsrw5131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, eax, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE0, 0x3F", "pinsrw xmm12, eax, 63");
}



#[test]
fn enc_sse2_pinsrw5132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, eax, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC0, 0x3C", "pinsrw xmm0, eax, 60");
}



#[test]
fn enc_sse2_pinsrw5133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, ecx, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD9, 0x6D", "pinsrw xmm3, ecx, 109");
}



#[test]
fn enc_sse2_pinsrw5134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, edx, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE2, 0x51", "pinsrw xmm12, edx, 81");
}



#[test]
fn enc_sse2_pinsrw5135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, edx, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xDA, 0x1F", "pinsrw xmm3, edx, 31");
}



#[test]
fn enc_sse2_pinsrw5136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x30", "pinsrw xmm0, [rax], 48");
}



#[test]
fn enc_sse2_pinsrw5137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, [rax], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x46", "pinsrw xmm0, [rax], 70");
}



#[test]
fn enc_sse2_pinsrw5138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x20, 0x3E", "pinsrw xmm12, [rax], 62");
}



#[test]
fn enc_sse2_pinsrw5139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x73", "pinsrw xmm0, [rax], 115");
}



#[test]
fn enc_sse2_pinsrw5140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x38, 0x57", "pinsrw xmm15, [rax], 87");
}



#[test]
fn enc_sse2_pinsrw5141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, WORD [rax], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x18, 0x19", "pinsrw xmm11, WORD [rax], 25");
}



#[test]
fn enc_sse2_pinsrw5142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x55", "pinsrw xmm0, WORD [rax], 85");
}



#[test]
fn enc_sse2_pinsrw5143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, WORD [rax + 16], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x58, 0x10, 0x6A", "pinsrw xmm11, WORD [rax + 16], 106");
}



#[test]
fn enc_sse2_pinsrw5144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, WORD [rax + 16], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x58, 0x10, 0x61", "pinsrw xmm3, WORD [rax + 16], 97");
}



#[test]
fn enc_sse2_pinsrw5145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, WORD [rax * 2 + rdx], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x3C, 0x42, 0x4D", "pinsrw xmm15, WORD [rax * 2 + rdx], 77");
}



#[test]
fn enc_sse2_pmaddwd5146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0x0C, 0x42", "pmaddwd xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmaddwd5147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xE0", "pmaddwd xmm12, xmm0");
}



#[test]
fn enc_sse2_pmaddwd5148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF5, 0xDB", "pmaddwd xmm11, xmm11");
}



#[test]
fn enc_sse2_pmaddwd5149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0xE0", "pmaddwd xmm4, xmm0");
}



#[test]
fn enc_sse2_pmaddwd5150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xFB", "pmaddwd xmm15, xmm3");
}



#[test]
fn enc_sse2_pmaxsw5151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEE, 0x3C, 0x42", "pmaxsw xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmaxsw5152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEE, 0xF9", "pmaxsw xmm15, xmm1");
}



#[test]
fn enc_sse2_pmaxsw5153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEE, 0xDB", "pmaxsw xmm11, xmm3");
}



#[test]
fn enc_sse2_pmaxsw5154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xC0", "pmaxsw xmm0, xmm0");
}



#[test]
fn enc_sse2_pmaxsw5155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0x0A", "pmaxsw xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmaxub5156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDE, 0x1C, 0x42", "pmaxub xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmaxub5157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDE, 0xDA", "pmaxub xmm11, xmm2");
}



#[test]
fn enc_sse2_pmaxub5158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xE1", "pmaxub xmm4, xmm1");
}



#[test]
fn enc_sse2_pmaxub5159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xE2", "pmaxub xmm4, xmm2");
}



#[test]
fn enc_sse2_pminsw5160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEA, 0xDF", "pminsw xmm11, xmm15");
}



#[test]
fn enc_sse2_pminsw5161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEA, 0xD7", "pminsw xmm2, xmm15");
}



#[test]
fn enc_sse2_pminsw5162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0xF8", "pminsw xmm15, xmm0");
}



#[test]
fn enc_sse2_pminsw5163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0xFB", "pminsw xmm15, xmm3");
}



#[test]
fn enc_sse2_pminsw5164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0xF9", "pminsw xmm15, xmm1");
}



#[test]
fn enc_sse2_pminub5165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xD0", "pminub xmm2, xmm0");
}



#[test]
fn enc_sse2_pminub5166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xE1", "pminub xmm4, xmm1");
}



#[test]
fn enc_sse2_pminub5167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDA, 0xE4", "pminub xmm12, xmm4");
}



#[test]
fn enc_sse2_pminub5168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDA, 0xFC", "pminub xmm15, xmm4");
}



#[test]
fn enc_sse2_pminub5169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x14, 0x42", "pminub xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmovmskb5170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xC3", "pmovmskb eax, xmm11");
}



#[test]
fn enc_sse2_pmovmskb5171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xD4", "pmovmskb edx, xmm12");
}



#[test]
fn enc_sse2_pmovmskb5172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xD3", "pmovmskb edx, xmm11");
}



#[test]
fn enc_sse2_pmovmskb5173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xD7", "pmovmskb edx, xmm15");
}



#[test]
fn enc_sse2_pmovmskb5174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xCB", "pmovmskb ecx, xmm3");
}



#[test]
fn enc_sse2_pmulhuw5175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE4, 0xF8", "pmulhuw xmm15, xmm0");
}



#[test]
fn enc_sse2_pmulhuw5176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE4, 0xDA", "pmulhuw xmm11, xmm2");
}



#[test]
fn enc_sse2_pmulhuw5177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE4, 0x20", "pmulhuw xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_pmulhuw5178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xCA", "pmulhuw xmm1, xmm2");
}



#[test]
fn enc_sse2_pmulhuw5179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xC2", "pmulhuw xmm0, xmm2");
}



#[test]
fn enc_sse2_pmulhw5180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0xC9", "pmulhw xmm1, xmm1");
}



#[test]
fn enc_sse2_pmulhw5181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x10", "pmulhw xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_pmulhw5182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x22", "pmulhw xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmulhw5183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0xD0", "pmulhw xmm2, xmm0");
}



#[test]
fn enc_sse2_pmulhw5184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE5, 0xE1", "pmulhw xmm12, xmm1");
}



#[test]
fn enc_sse2_pmullw5185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0x3A", "pmullw xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmullw5186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0xE0", "pmullw xmm12, xmm0");
}



#[test]
fn enc_sse2_pmullw5187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xC9", "pmullw xmm1, xmm1");
}



#[test]
fn enc_sse2_pmullw5188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD5, 0xDC", "pmullw xmm3, xmm12");
}



#[test]
fn enc_sse2_pmullw5189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0xE0", "pmullw xmm4, xmm0");
}



#[test]
fn enc_sse2_pmuludq5190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF4, 0x3C, 0x42", "pmuludq xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmuludq5191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0x0C, 0x42", "pmuludq xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmuludq5192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF4, 0xDB", "pmuludq xmm11, xmm11");
}



#[test]
fn enc_sse2_pmuludq5193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF4, 0xF9", "pmuludq xmm15, xmm1");
}



#[test]
fn enc_sse2_pmuludq5194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x0A", "pmuludq mm1, [rdx]");
}



#[test]
fn enc_sse2_pmuludq5195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x10", "pmuludq mm2, [rax]");
}



#[test]
fn enc_sse2_pmuludq5196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0xD8", "pmuludq mm3, mm0");
}



#[test]
fn enc_sse2_por5197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEB, 0xDB", "por xmm11, xmm11");
}



#[test]
fn enc_sse2_por5198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xC3", "por xmm0, xmm3");
}



#[test]
fn enc_sse2_por5199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEB, 0xFC", "por xmm15, xmm12");
}



#[test]
fn enc_sse2_por5200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0x18", "por xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_por5201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xFC", "por xmm15, xmm4");
}



#[test]
fn enc_sse2_psadbw5202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xD3", "psadbw xmm2, xmm3");
}



#[test]
fn enc_sse2_psadbw5203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xDA", "psadbw xmm3, xmm2");
}



#[test]
fn enc_sse2_psadbw5204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF6, 0xC3", "psadbw xmm0, xmm11");
}



#[test]
fn enc_sse2_psadbw5205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x1C, 0x42", "psadbw xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psadbw5206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x08", "psadbw xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_pshufd5207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm4, xmm12, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x70, 0xE4, 0x09", "pshufd xmm4, xmm12, 9");
}



#[test]
fn enc_sse2_pshufd5208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm12, xmm4, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xE4, 0x21", "pshufd xmm12, xmm4, 33");
}



#[test]
fn enc_sse2_pshufd5209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm2, xmm0, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0xD0, 0x17", "pshufd xmm2, xmm0, 23");
}



#[test]
fn enc_sse2_pshufd5210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm2, OWORD [rax], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0x10, 0x13", "pshufd xmm2, OWORD [rax], 19");
}



#[test]
fn enc_sse2_pshufd5211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm11, xmm12, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x70, 0xDC, 0x36", "pshufd xmm11, xmm12, 54");
}



#[test]
fn enc_sse2_pshufhw5212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm3, xmm12, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xDC, 0x42", "pshufhw xmm3, xmm12, 66");
}



#[test]
fn enc_sse2_pshufhw5213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm1, xmm2, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xCA, 0x0F", "pshufhw xmm1, xmm2, 15");
}



#[test]
fn enc_sse2_pshufhw5214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm15, xmm2, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x70, 0xFA, 0x74", "pshufhw xmm15, xmm2, 116");
}



#[test]
fn enc_sse2_pshufhw5215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm0, xmm15, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xC7, 0x06", "pshufhw xmm0, xmm15, 6");
}



#[test]
fn enc_sse2_pshufhw5216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm11, OWORD [rax], 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x70, 0x18, 0x38", "pshufhw xmm11, OWORD [rax], 56");
}



#[test]
fn enc_sse2_pshuflw5217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm11, xmm4, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x70, 0xDC, 0x7A", "pshuflw xmm11, xmm4, 122");
}



#[test]
fn enc_sse2_pshuflw5218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm11, xmm11, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x70, 0xDB, 0x63", "pshuflw xmm11, xmm11, 99");
}



#[test]
fn enc_sse2_pshuflw5219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm0, xmm0, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xC0, 0x2F", "pshuflw xmm0, xmm0, 47");
}



#[test]
fn enc_sse2_pshuflw5220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm15, xmm0, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x70, 0xF8, 0x47", "pshuflw xmm15, xmm0, 71");
}



#[test]
fn enc_sse2_pshuflw5221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm1, xmm2, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xCA, 0x30", "pshuflw xmm1, xmm2, 48");
}



#[test]
fn enc_sse2_pslld5222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF4, 0x46", "pslld xmm12, 70");
}



#[test]
fn enc_sse2_pslld5223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm3, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF3, 0x74", "pslld xmm3, 116");
}



#[test]
fn enc_sse2_pslld5224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF4, 0x09", "pslld xmm12, 9");
}



#[test]
fn enc_sse2_pslld5225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm0, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF0, 0x6D", "pslld xmm0, 109");
}



#[test]
fn enc_sse2_pslld5226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF4, 0x7A", "pslld xmm4, 122");
}



#[test]
fn enc_sse2_pslld5227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0xDA", "pslld xmm11, xmm2");
}



#[test]
fn enc_sse2_pslld5228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0x22", "pslld xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pslld5229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0x24, 0x42", "pslld xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pslld5230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0xE1", "pslld xmm4, xmm1");
}



#[test]
fn enc_sse2_pslld5231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF2, 0xE4", "pslld xmm4, xmm12");
}



#[test]
fn enc_sse2_pslldq5232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm2, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xFA, 0x50", "pslldq xmm2, 80");
}



#[test]
fn enc_sse2_pslldq5233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm11, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFB, 0x5E", "pslldq xmm11, 94");
}



#[test]
fn enc_sse2_pslldq5234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm12, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFC, 0x57", "pslldq xmm12, 87");
}



#[test]
fn enc_sse2_pslldq5235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm3, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xFB, 0x41", "pslldq xmm3, 65");
}



#[test]
fn enc_sse2_pslldq5236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm12, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFC, 0x06", "pslldq xmm12, 6");
}



#[test]
fn enc_sse2_psllq5237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm12, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF4, 0x77", "psllq xmm12, 119");
}



#[test]
fn enc_sse2_psllq5238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm2, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF2, 0x1E", "psllq xmm2, 30");
}



#[test]
fn enc_sse2_psllq5239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF4, 0x39", "psllq xmm4, 57");
}



#[test]
fn enc_sse2_psllq5240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF3, 0x4C", "psllq xmm3, 76");
}



#[test]
fn enc_sse2_psllq5241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF7, 0x17", "psllq xmm15, 23");
}



#[test]
fn enc_sse2_psllq5242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xE1", "psllq xmm4, xmm1");
}



#[test]
fn enc_sse2_psllq5243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xDF", "psllq xmm3, xmm15");
}



#[test]
fn enc_sse2_psllq5244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xCC", "psllq xmm1, xmm12");
}



#[test]
fn enc_sse2_psllq5245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xC0", "psllq xmm0, xmm0");
}



#[test]
fn enc_sse2_psllq5246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF3, 0x3A", "psllq xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_psllw5247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF1, 0xC7", "psllw xmm0, xmm15");
}



#[test]
fn enc_sse2_psllw5248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF1, 0xFC", "psllw xmm15, xmm12");
}



#[test]
fn enc_sse2_psllw5249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xCB", "psllw xmm1, xmm3");
}



#[test]
fn enc_sse2_psllw5250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xC1", "psllw xmm0, xmm1");
}



#[test]
fn enc_sse2_psllw5251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF1, 0xE7", "psllw xmm12, xmm15");
}



#[test]
fn enc_sse2_psllw5252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm3, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF3, 0x21", "psllw xmm3, 33");
}



#[test]
fn enc_sse2_psllw5253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm2, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF2, 0x19", "psllw xmm2, 25");
}



#[test]
fn enc_sse2_psllw5254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF0, 0x69", "psllw xmm0, 105");
}



#[test]
fn enc_sse2_psllw5255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF4, 0x62", "psllw xmm12, 98");
}



#[test]
fn enc_sse2_psllw5256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm15, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF7, 0x54", "psllw xmm15, 84");
}



#[test]
fn enc_sse2_psrad5257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE2, 0xF9", "psrad xmm15, xmm1");
}



#[test]
fn enc_sse2_psrad5258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xCC", "psrad xmm1, xmm4");
}



#[test]
fn enc_sse2_psrad5259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0x14, 0x42", "psrad xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psrad5260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0x18", "psrad xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_psrad5261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0x1A", "psrad xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrad5262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm1, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE1, 0x55", "psrad xmm1, 85");
}



#[test]
fn enc_sse2_psrad5263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x4D", "psrad xmm15, 77");
}



#[test]
fn enc_sse2_psrad5264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x23", "psrad xmm15, 35");
}



#[test]
fn enc_sse2_psrad5265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x04", "psrad xmm15, 4");
}



#[test]
fn enc_sse2_psrad5266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm0, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE0, 0x1B", "psrad xmm0, 27");
}



#[test]
fn enc_sse2_psraw5267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm0, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE0, 0x06", "psraw xmm0, 6");
}



#[test]
fn enc_sse2_psraw5268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE7, 0x4D", "psraw xmm15, 77");
}



#[test]
fn enc_sse2_psraw5269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE3, 0x61", "psraw xmm3, 97");
}



#[test]
fn enc_sse2_psraw5270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE1, 0x6C", "psraw xmm1, 108");
}



#[test]
fn enc_sse2_psraw5271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE7, 0x1C", "psraw xmm15, 28");
}



#[test]
fn enc_sse2_psraw5272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xDC", "psraw xmm3, xmm4");
}



#[test]
fn enc_sse2_psraw5273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xE2", "psraw xmm4, xmm2");
}



#[test]
fn enc_sse2_psraw5274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xC8", "psraw xmm1, xmm0");
}



#[test]
fn enc_sse2_psraw5275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0x18", "psraw xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_psraw5276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE1, 0xDF", "psraw xmm3, xmm15");
}



#[test]
fn enc_sse2_psrld5277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xD9", "psrld xmm11, xmm1");
}



#[test]
fn enc_sse2_psrld5278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xE2", "psrld xmm12, xmm2");
}



#[test]
fn enc_sse2_psrld5279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0x12", "psrld xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrld5280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0x1A", "psrld xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrld5281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm3, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD3, 0x4A", "psrld xmm3, 74");
}



#[test]
fn enc_sse2_psrld5282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm3, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD3, 0x7D", "psrld xmm3, 125");
}



#[test]
fn enc_sse2_psrld5283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm1, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD1, 0x33", "psrld xmm1, 51");
}



#[test]
fn enc_sse2_psrld5284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD4, 0x41", "psrld xmm4, 65");
}



#[test]
fn enc_sse2_psrld5285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm3, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD3, 0x1C", "psrld xmm3, 28");
}



#[test]
fn enc_sse2_psrldq5286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm0, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD8, 0x06", "psrldq xmm0, 6");
}



#[test]
fn enc_sse2_psrldq5287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm1, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD9, 0x26", "psrldq xmm1, 38");
}



#[test]
fn enc_sse2_psrldq5288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm4, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDC, 0x12", "psrldq xmm4, 18");
}



#[test]
fn enc_sse2_psrldq5289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm15, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDF, 0x18", "psrldq xmm15, 24");
}



#[test]
fn enc_sse2_psrldq5290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm1, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD9, 0x4B", "psrldq xmm1, 75");
}



#[test]
fn enc_sse2_psrlq5291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm15, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xD7, 0x79", "psrlq xmm15, 121");
}



#[test]
fn enc_sse2_psrlq5292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xD4, 0x4C", "psrlq xmm12, 76");
}



#[test]
fn enc_sse2_psrlq5293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD3, 0x13", "psrlq xmm3, 19");
}



#[test]
fn enc_sse2_psrlq5294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm1, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD1, 0x3B", "psrlq xmm1, 59");
}



#[test]
fn enc_sse2_psrlq5295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm1, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD1, 0x03", "psrlq xmm1, 3");
}



#[test]
fn enc_sse2_psrlq5296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD3, 0xFC", "psrlq xmm15, xmm12");
}



#[test]
fn enc_sse2_psrlq5297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0xD9", "psrlq xmm11, xmm1");
}



#[test]
fn enc_sse2_psrlq5298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0xDB", "psrlq xmm11, xmm3");
}



#[test]
fn enc_sse2_psrlq5299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0x02", "psrlq xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrlq5300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0xDC", "psrlq xmm3, xmm4");
}



#[test]
fn enc_sse2_psrlw5301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xE4", "psrlw xmm4, xmm4");
}



#[test]
fn enc_sse2_psrlw5302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xF9", "psrlw xmm15, xmm1");
}



#[test]
fn enc_sse2_psrlw5303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD1, 0xDB", "psrlw xmm11, xmm11");
}



#[test]
fn enc_sse2_psrlw5304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0x1A", "psrlw xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrlw5305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xC4", "psrlw xmm0, xmm4");
}



#[test]
fn enc_sse2_psrlw5306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD3, 0x22", "psrlw xmm11, 34");
}



#[test]
fn enc_sse2_psrlw5307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD2, 0x6A", "psrlw xmm2, 106");
}



#[test]
fn enc_sse2_psrlw5308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD2, 0x55", "psrlw xmm2, 85");
}



#[test]
fn enc_sse2_psrlw5309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD3, 0x7D", "psrlw xmm11, 125");
}



#[test]
fn enc_sse2_psrlw5310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD4, 0x50", "psrlw xmm12, 80");
}



#[test]
fn enc_sse2_psubb5311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF8, 0xE3", "psubb xmm12, xmm11");
}



#[test]
fn enc_sse2_psubb5312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0x0A", "psubb xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubb5313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF8, 0xDC", "psubb xmm11, xmm12");
}



#[test]
fn enc_sse2_psubb5314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0x1A", "psubb xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubb5315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xFC", "psubb xmm15, xmm4");
}



#[test]
fn enc_sse2_psubd5316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0x04, 0x42", "psubd xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubd5317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xDA", "psubd xmm3, xmm2");
}



#[test]
fn enc_sse2_psubd5318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xC4", "psubd xmm0, xmm4");
}



#[test]
fn enc_sse2_psubd5319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFA, 0xE7", "psubd xmm12, xmm15");
}



#[test]
fn enc_sse2_psubq5320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xE8", "psubq mm5, mm0");
}



#[test]
fn enc_sse2_psubq5321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x20", "psubq mm4, [rax]");
}



#[test]
fn enc_sse2_psubq5322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x2A", "psubq mm5, [rdx]");
}



#[test]
fn enc_sse2_psubq5323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xD8", "psubq mm3, mm0");
}



#[test]
fn enc_sse2_psubq5324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xC8", "psubq mm1, mm0");
}



#[test]
fn enc_sse2_psubq5325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xC8", "psubq xmm1, xmm0");
}



#[test]
fn enc_sse2_psubq5326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xC0", "psubq xmm0, xmm0");
}



#[test]
fn enc_sse2_psubq5327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0x20", "psubq xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_psubq5328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFB, 0xC7", "psubq xmm0, xmm15");
}



#[test]
fn enc_sse2_psubq5329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFB, 0xD4", "psubq xmm2, xmm12");
}



#[test]
fn enc_sse2_psubsb5330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE8, 0xE2", "psubsb xmm12, xmm2");
}



#[test]
fn enc_sse2_psubsb5331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0xC0", "psubsb xmm0, xmm0");
}



#[test]
fn enc_sse2_psubsb5332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE8, 0xF8", "psubsb xmm15, xmm0");
}



#[test]
fn enc_sse2_psubsb5333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0xD2", "psubsb xmm2, xmm2");
}



#[test]
fn enc_sse2_psubsb5334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE8, 0xE0", "psubsb xmm12, xmm0");
}



#[test]
fn enc_sse2_psubsw5335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0xFA", "psubsw xmm15, xmm2");
}



#[test]
fn enc_sse2_psubsw5336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xD1", "psubsw xmm2, xmm1");
}



#[test]
fn enc_sse2_psubsw5337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE9, 0xFC", "psubsw xmm15, xmm12");
}



#[test]
fn enc_sse2_psubsw5338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xCB", "psubsw xmm1, xmm3");
}



#[test]
fn enc_sse2_psubsw5339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xDA", "psubsw xmm3, xmm2");
}



#[test]
fn enc_sse2_psubusb5340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD8, 0xD4", "psubusb xmm2, xmm12");
}



#[test]
fn enc_sse2_psubusb5341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD8, 0xDF", "psubusb xmm11, xmm15");
}



#[test]
fn enc_sse2_psubusb5342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0xF9", "psubusb xmm15, xmm1");
}



#[test]
fn enc_sse2_psubusb5343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0x18", "psubusb xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_psubusb5344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD8, 0xE7", "psubusb xmm4, xmm15");
}



#[test]
fn enc_sse2_psubusw5345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xE3", "psubusw xmm12, xmm3");
}



#[test]
fn enc_sse2_psubusw5346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xE2", "psubusw xmm12, xmm2");
}



#[test]
fn enc_sse2_psubusw5347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xFB", "psubusw xmm15, xmm3");
}



#[test]
fn enc_sse2_psubusw5348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD9, 0xE7", "psubusw xmm4, xmm15");
}



#[test]
fn enc_sse2_psubusw5349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xFC", "psubusw xmm15, xmm4");
}



#[test]
fn enc_sse2_psubw5350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xD1", "psubw xmm2, xmm1");
}



#[test]
fn enc_sse2_psubw5351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xDB", "psubw xmm3, xmm3");
}



#[test]
fn enc_sse2_psubw5352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF9, 0xC4", "psubw xmm0, xmm12");
}



#[test]
fn enc_sse2_psubw5353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF9, 0xDC", "psubw xmm11, xmm12");
}



#[test]
fn enc_sse2_punpckhbw5354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0xDB", "punpckhbw xmm11, xmm3");
}



#[test]
fn enc_sse2_punpckhbw5355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x68, 0xDF", "punpckhbw xmm3, xmm15");
}



#[test]
fn enc_sse2_punpckhbw5356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xD2", "punpckhbw xmm2, xmm2");
}



#[test]
fn enc_sse2_punpckhbw5357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0x22", "punpckhbw xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhbw5358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x68, 0xCC", "punpckhbw xmm1, xmm12");
}



#[test]
fn enc_sse2_punpckhdq5359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0x20", "punpckhdq xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_punpckhdq5360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6A, 0xDF", "punpckhdq xmm3, xmm15");
}



#[test]
fn enc_sse2_punpckhdq5361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0x1A", "punpckhdq xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhdq5362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0xE0", "punpckhdq xmm12, xmm0");
}



#[test]
fn enc_sse2_punpckhdq5363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0xD8", "punpckhdq xmm3, xmm0");
}



#[test]
fn enc_sse2_punpckhqdq5364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6D, 0x22", "punpckhqdq xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhqdq5365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xDB", "punpckhqdq xmm3, xmm3");
}



#[test]
fn enc_sse2_punpckhqdq5366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0x02", "punpckhqdq xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhqdq5367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6D, 0xC3", "punpckhqdq xmm0, xmm11");
}



#[test]
fn enc_sse2_punpckhqdq5368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xC2", "punpckhqdq xmm0, xmm2");
}



#[test]
fn enc_sse2_punpckhwd5369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0x02", "punpckhwd xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhwd5370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0x0A", "punpckhwd xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhwd5371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0xE3", "punpckhwd xmm4, xmm3");
}



#[test]
fn enc_sse2_punpckhwd5372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0x24, 0x42", "punpckhwd xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckhwd5373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x69, 0xE7", "punpckhwd xmm4, xmm15");
}



#[test]
fn enc_sse2_punpcklbw5374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x60, 0xDB", "punpcklbw xmm3, xmm11");
}



#[test]
fn enc_sse2_punpcklbw5375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x60, 0x1C, 0x42", "punpcklbw xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpcklbw5376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xD3", "punpcklbw xmm2, xmm3");
}



#[test]
fn enc_sse2_punpcklbw5377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x60, 0x24, 0x42", "punpcklbw xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpcklbw5378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x60, 0xFF", "punpcklbw xmm15, xmm15");
}



#[test]
fn enc_sse2_punpckldq5379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0x1C, 0x42", "punpckldq xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckldq5380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xD3", "punpckldq xmm2, xmm11");
}



#[test]
fn enc_sse2_punpckldq5381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x62, 0xE3", "punpckldq xmm12, xmm11");
}



#[test]
fn enc_sse2_punpckldq5382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xDF", "punpckldq xmm3, xmm15");
}



#[test]
fn enc_sse2_punpckldq5383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xDA", "punpckldq xmm3, xmm2");
}



#[test]
fn enc_sse2_punpcklqdq5384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xC2", "punpcklqdq xmm0, xmm2");
}



#[test]
fn enc_sse2_punpcklqdq5385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xC0", "punpcklqdq xmm0, xmm0");
}



#[test]
fn enc_sse2_punpcklqdq5386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xCC", "punpcklqdq xmm1, xmm4");
}



#[test]
fn enc_sse2_punpcklqdq5387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6C, 0xF9", "punpcklqdq xmm15, xmm1");
}



#[test]
fn enc_sse2_punpcklqdq5388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0x0A", "punpcklqdq xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpcklwd5389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0xE0", "punpcklwd xmm12, xmm0");
}



#[test]
fn enc_sse2_punpcklwd5390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0x08", "punpcklwd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_punpcklwd5391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0x1C, 0x42", "punpcklwd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpcklwd5392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0xDB", "punpcklwd xmm11, xmm3");
}



#[test]
fn enc_sse2_punpcklwd5393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0x10", "punpcklwd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_pxor5394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0xD4", "pxor xmm2, xmm4");
}



#[test]
fn enc_sse2_pxor5395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xE3", "pxor xmm4, xmm11");
}



#[test]
fn enc_sse2_pxor5396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0x22", "pxor xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pxor5397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0xE1", "pxor xmm4, xmm1");
}



#[test]
fn enc_sse2_pxor5398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0xD9", "pxor xmm3, xmm1");
}



#[test]
fn enc_sse2_shufpd5399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm15, xmm12, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xC6, 0xFC, 0x32", "shufpd xmm15, xmm12, 50");
}



#[test]
fn enc_sse2_shufpd5400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm12, xmm11, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xC6, 0xE3, 0x34", "shufpd xmm12, xmm11, 52");
}



#[test]
fn enc_sse2_shufpd5401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm0, OWORD [rdx], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0x02, 0x59", "shufpd xmm0, OWORD [rdx], 89");
}



#[test]
fn enc_sse2_shufpd5402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm12, xmm2, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0xE2, 0x16", "shufpd xmm12, xmm2, 22");
}



#[test]
fn enc_sse2_shufpd5403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm3, xmm11, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC6, 0xDB, 0x18", "shufpd xmm3, xmm11, 24");
}



#[test]
fn enc_sse2_sqrtpd5404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0x0C, 0x42", "sqrtpd xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_sqrtpd5405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xD3", "sqrtpd xmm2, xmm3");
}



#[test]
fn enc_sse2_sqrtpd5406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0xE2", "sqrtpd xmm12, xmm2");
}



#[test]
fn enc_sse2_sqrtpd5407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0xF8", "sqrtpd xmm15, xmm0");
}



#[test]
fn enc_sse2_sqrtpd5408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xE0", "sqrtpd xmm4, xmm0");
}



#[test]
fn enc_sse2_sqrtsd5409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xDF", "sqrtsd xmm3, xmm15");
}



#[test]
fn enc_sse2_sqrtsd5410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xF8", "sqrtsd xmm15, xmm0");
}



#[test]
fn enc_sse2_sqrtsd5411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0xC2", "sqrtsd xmm0, xmm2");
}



#[test]
fn enc_sse2_sqrtsd5412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0xDC", "sqrtsd xmm3, xmm4");
}



#[test]
fn enc_sse2_sqrtsd5413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xD4", "sqrtsd xmm2, xmm12");
}



#[test]
fn enc_sse2_sqrtsd5414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x48, 0x10", "sqrtsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_sqrtsd5415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x14, 0x42", "sqrtsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_sqrtsd5416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x60, 0x10", "sqrtsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_sqrtsd5417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0x58, 0x10", "sqrtsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_subpd5418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5C, 0xE3", "subpd xmm4, xmm11");
}



#[test]
fn enc_sse2_subpd5419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0xCC", "subpd xmm1, xmm4");
}



#[test]
fn enc_sse2_subpd5420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0x38", "subpd xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_subpd5421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0x22", "subpd xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_subpd5422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0xE4", "subpd xmm4, xmm4");
}



#[test]
fn enc_sse2_subsd5423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xD2", "subsd xmm2, xmm2");
}



#[test]
fn enc_sse2_subsd5424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xD0", "subsd xmm2, xmm0");
}



#[test]
fn enc_sse2_subsd5425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0xD9", "subsd xmm11, xmm1");
}



#[test]
fn enc_sse2_subsd5426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xC3", "subsd xmm0, xmm3");
}



#[test]
fn enc_sse2_subsd5427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xD3", "subsd xmm2, xmm3");
}



#[test]
fn enc_sse2_subsd5428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0x00", "subsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_subsd5429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x18", "subsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_subsd5430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x58, 0x10", "subsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_subsd5431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x20", "subsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd5432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x2E, 0xE7", "ucomisd xmm12, xmm15");
}



#[test]
fn enc_sse2_ucomisd5433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xE2", "ucomisd xmm4, xmm2");
}



#[test]
fn enc_sse2_ucomisd5434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xC3", "ucomisd xmm0, xmm3");
}



#[test]
fn enc_sse2_ucomisd5435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0xFA", "ucomisd xmm15, xmm2");
}



#[test]
fn enc_sse2_ucomisd5436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x20", "ucomisd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd5437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x24, 0x42", "ucomisd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_ucomisd5438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x1C, 0x42", "ucomisd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_ucomisd5439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x58, 0x10", "ucomisd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_ucomisd5440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x04, 0x42", "ucomisd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_unpckhpd5441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xFB", "unpckhpd xmm15, xmm11");
}



#[test]
fn enc_sse2_unpckhpd5442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xDA", "unpckhpd xmm3, xmm2");
}



#[test]
fn enc_sse2_unpckhpd5443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xDB", "unpckhpd xmm11, xmm11");
}



#[test]
fn enc_sse2_unpckhpd5444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xE3", "unpckhpd xmm12, xmm11");
}



#[test]
fn enc_sse2_unpckhpd5445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x15, 0xE7", "unpckhpd xmm4, xmm15");
}



#[test]
fn enc_sse2_unpcklpd5446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0xCB", "unpcklpd xmm1, xmm3");
}



#[test]
fn enc_sse2_unpcklpd5447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0x20", "unpcklpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_unpcklpd5448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0xE1", "unpcklpd xmm4, xmm1");
}



#[test]
fn enc_sse2_unpcklpd5449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0x1A", "unpcklpd xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_unpcklpd5450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x14, 0xD3", "unpcklpd xmm2, xmm11");
}



#[test]
fn enc_sse2_xorpd5451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x57, 0x3C, 0x42", "xorpd xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_xorpd5452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x57, 0xFB", "xorpd xmm15, xmm3");
}



#[test]
fn enc_sse2_xorpd5453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xC1", "xorpd xmm0, xmm1");
}



#[test]
fn enc_sse2_xorpd5454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x57, 0xE2", "xorpd xmm12, xmm2");
}



#[test]
fn enc_sse2_xorpd5455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x57, 0xDB", "xorpd xmm11, xmm11");
}


