
#[test]
fn enc_sse2_addpd3179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x58, 0xFF", "addpd xmm15, xmm15");
}



#[test]
fn enc_sse2_addpd3180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xC2", "addpd xmm0, xmm2");
}



#[test]
fn enc_sse2_addpd3181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x58, 0xDF", "addpd xmm3, xmm15");
}



#[test]
fn enc_sse2_addpd3182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x58, 0x3C, 0x42", "addpd xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addpd3183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xD3", "addpd xmm2, xmm3");
}



#[test]
fn enc_sse2_addsd3184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x58, 0xD4", "addsd xmm2, xmm12");
}



#[test]
fn enc_sse2_addsd3185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xC2", "addsd xmm0, xmm2");
}



#[test]
fn enc_sse2_addsd3186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x58, 0xDB", "addsd xmm3, xmm11");
}



#[test]
fn enc_sse2_addsd3187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xE0", "addsd xmm4, xmm0");
}



#[test]
fn enc_sse2_addsd3188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xE1", "addsd xmm4, xmm1");
}



#[test]
fn enc_sse2_addsd3189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x0C, 0x42", "addsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd3190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x24, 0x42", "addsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd3191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x1C, 0x42", "addsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd3192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x08", "addsd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_addsd3193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x78, 0x10", "addsd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_andnpd3194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0x22", "andnpd xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_andnpd3195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x55, 0xFA", "andnpd xmm15, xmm2");
}



#[test]
fn enc_sse2_andnpd3196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xC9", "andnpd xmm1, xmm1");
}



#[test]
fn enc_sse2_andnpd3197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0x0C, 0x42", "andnpd xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_andnpd3198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xCA", "andnpd xmm1, xmm2");
}



#[test]
fn enc_sse2_andpd3199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0xDA", "andpd xmm3, xmm2");
}



#[test]
fn enc_sse2_andpd3200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0xDC", "andpd xmm11, xmm4");
}



#[test]
fn enc_sse2_andpd3201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0xD0", "andpd xmm2, xmm0");
}



#[test]
fn enc_sse2_andpd3202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x54, 0xE7", "andpd xmm12, xmm15");
}



#[test]
fn enc_sse2_clflush3203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clflush BYTE [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x78, 0x10", "clflush BYTE [rax + 16]");
}



#[test]
fn enc_sse2_clflush3204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clflush BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x3C, 0x42", "clflush BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_comisd3205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xE4", "comisd xmm12, xmm4");
}



#[test]
fn enc_sse2_comisd3206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xD3", "comisd xmm2, xmm3");
}



#[test]
fn enc_sse2_comisd3207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xC0", "comisd xmm0, xmm0");
}



#[test]
fn enc_sse2_comisd3208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xC1", "comisd xmm0, xmm1");
}



#[test]
fn enc_sse2_comisd3209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2F, 0xCB", "comisd xmm1, xmm11");
}



#[test]
fn enc_sse2_comisd3210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x40, 0x10", "comisd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_comisd3211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x58, 0x10", "comisd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_comisd3212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x60, 0x10", "comisd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_comisd3213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x20", "comisd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_comisd3214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x08", "comisd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2pd3215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xD7", "cvtdq2pd xmm2, xmm15");
}



#[test]
fn enc_sse2_cvtdq2pd3216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0xCA", "cvtdq2pd xmm1, xmm2");
}



#[test]
fn enc_sse2_cvtdq2pd3217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xFC", "cvtdq2pd xmm15, xmm4");
}



#[test]
fn enc_sse2_cvtdq2pd3218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xD9", "cvtdq2pd xmm11, xmm1");
}



#[test]
fn enc_sse2_cvtdq2pd3219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xE7", "cvtdq2pd xmm4, xmm15");
}



#[test]
fn enc_sse2_cvtdq2pd3220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x08", "cvtdq2pd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2pd3221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x60, 0x10", "cvtdq2pd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtdq2pd3222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x04, 0x42", "cvtdq2pd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2pd3223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0x3C, 0x42", "cvtdq2pd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2ps3224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5B, 0xE7", "cvtdq2ps xmm4, xmm15");
}



#[test]
fn enc_sse2_cvtdq2ps3225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x22", "cvtdq2ps xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtdq2ps3226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5B, 0xD3", "cvtdq2ps xmm2, xmm11");
}



#[test]
fn enc_sse2_cvtdq2ps3227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5B, 0x3A", "cvtdq2ps xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtdq2ps3228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0x18", "cvtdq2ps xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_cvtpd2dq3229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xF9", "cvtpd2dq xmm15, xmm1");
}



#[test]
fn enc_sse2_cvtpd2dq3230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xE6, 0xDB", "cvtpd2dq xmm3, xmm11");
}



#[test]
fn enc_sse2_cvtpd2dq3231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xE6, 0xC3", "cvtpd2dq xmm0, xmm11");
}



#[test]
fn enc_sse2_cvtpd2dq3232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xE1", "cvtpd2dq xmm12, xmm1");
}



#[test]
fn enc_sse2_cvtpd2dq3233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xE6, 0xDF", "cvtpd2dq xmm11, xmm15");
}



#[test]
fn enc_sse2_cvtpd2pi3234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0x0A", "cvtpd2pi mm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtpd2pi3235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xCC", "cvtpd2pi mm1, xmm4");
}



#[test]
fn enc_sse2_cvtpd2pi3236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xD7", "cvtpd2pi mm2, xmm15");
}



#[test]
fn enc_sse2_cvtpd2pi3237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0x22", "cvtpd2pi mm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtpd2pi3238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xC8", "cvtpd2pi mm1, xmm0");
}



#[test]
fn enc_sse2_cvtpd2ps3239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5A, 0xD4", "cvtpd2ps xmm2, xmm12");
}



#[test]
fn enc_sse2_cvtpd2ps3240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0xDB", "cvtpd2ps xmm11, xmm3");
}



#[test]
fn enc_sse2_cvtpd2ps3241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5A, 0xFF", "cvtpd2ps xmm15, xmm15");
}



#[test]
fn enc_sse2_cvtpd2ps3242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0xC8", "cvtpd2ps xmm1, xmm0");
}



#[test]
fn enc_sse2_cvtpd2ps3243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0xD2", "cvtpd2ps xmm2, xmm2");
}



#[test]
fn enc_sse2_cvtpi2pd3244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x20", "cvtpi2pd xmm4, [rax]");
}



#[test]
fn enc_sse2_cvtpi2pd3245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm12, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0x22", "cvtpi2pd xmm12, [rdx]");
}



#[test]
fn enc_sse2_cvtpi2pd3246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm12, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0xE0", "cvtpi2pd xmm12, mm0");
}



#[test]
fn enc_sse2_cvtpi2pd3247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm15, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0xF8", "cvtpi2pd xmm15, mm0");
}



#[test]
fn enc_sse2_cvtps2dq3248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xE0", "cvtps2dq xmm4, xmm0");
}



#[test]
fn enc_sse2_cvtps2dq3249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xE0", "cvtps2dq xmm12, xmm0");
}



#[test]
fn enc_sse2_cvtps2dq3250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5B, 0xFB", "cvtps2dq xmm15, xmm11");
}



#[test]
fn enc_sse2_cvtps2dq3251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xDB", "cvtps2dq xmm3, xmm3");
}



#[test]
fn enc_sse2_cvtps2dq3252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0x1C, 0x42", "cvtps2dq xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtps2pd3253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0xDB", "cvtps2pd xmm11, xmm3");
}



#[test]
fn enc_sse2_cvtps2pd3254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xC7", "cvtps2pd xmm0, xmm15");
}



#[test]
fn enc_sse2_cvtps2pd3255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xC1", "cvtps2pd xmm0, xmm1");
}



#[test]
fn enc_sse2_cvtps2pd3256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5A, 0xFB", "cvtps2pd xmm15, xmm11");
}



#[test]
fn enc_sse2_cvtps2pd3257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xD7", "cvtps2pd xmm2, xmm15");
}



#[test]
fn enc_sse2_cvtps2pd3258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x14, 0x42", "cvtps2pd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtps2pd3259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x20", "cvtps2pd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtps2pd3260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x20", "cvtps2pd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtps2pd3261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x24, 0x42", "cvtps2pd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xCB", "cvtsd2si rcx, xmm11");
}



#[test]
fn enc_sse2_cvtsd2si3263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xD7", "cvtsd2si rdx, xmm15");
}



#[test]
fn enc_sse2_cvtsd2si3264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xC9", "cvtsd2si rcx, xmm1");
}



#[test]
fn enc_sse2_cvtsd2si3265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xCB", "cvtsd2si rcx, xmm3");
}



#[test]
fn enc_sse2_cvtsd2si3266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD4", "cvtsd2si rdx, xmm4");
}



#[test]
fn enc_sse2_cvtsd2si3267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x0C, 0x42", "cvtsd2si rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x48, 0x10", "cvtsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si3269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x10", "cvtsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si3270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x04, 0x42", "cvtsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0xD0", "cvtsd2si edx, xmm0");
}



#[test]
fn enc_sse2_cvtsd2si3272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0xC3", "cvtsd2si eax, xmm3");
}



#[test]
fn enc_sse2_cvtsd2si3273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xCC", "cvtsd2si ecx, xmm12");
}



#[test]
fn enc_sse2_cvtsd2si3274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xCF", "cvtsd2si ecx, xmm15");
}



#[test]
fn enc_sse2_cvtsd2si3275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xD3", "cvtsd2si edx, xmm11");
}



#[test]
fn enc_sse2_cvtsd2si3276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x08", "cvtsd2si ecx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si3277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x0C, 0x42", "cvtsd2si ecx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x14, 0x42", "cvtsd2si edx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x40, 0x10", "cvtsd2si eax, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss3280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0xD8", "cvtsd2ss xmm11, xmm0");
}



#[test]
fn enc_sse2_cvtsd2ss3281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xD4", "cvtsd2ss xmm2, xmm4");
}



#[test]
fn enc_sse2_cvtsd2ss3282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xE1", "cvtsd2ss xmm4, xmm1");
}



#[test]
fn enc_sse2_cvtsd2ss3283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xC4", "cvtsd2ss xmm0, xmm4");
}



#[test]
fn enc_sse2_cvtsd2ss3284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xD2", "cvtsd2ss xmm2, xmm2");
}



#[test]
fn enc_sse2_cvtsd2ss3285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0x3C, 0x42", "cvtsd2ss xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2ss3286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0x60, 0x10", "cvtsd2ss xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss3287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x58, 0x10", "cvtsd2ss xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss3288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x10", "cvtsd2ss xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2ss3289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0x18", "cvtsd2ss xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x18", "cvtsi2sd xmm3, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2A, 0x20", "cvtsi2sd xmm12, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0xC0", "cvtsi2sd xmm0, rax");
}



#[test]
fn enc_sse2_cvtsi2sd3293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x20", "cvtsi2sd xmm4, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x00", "cvtsi2sd xmm0, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x08", "cvtsi2sd xmm1, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm12, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2A, 0xE0", "cvtsi2sd xmm12, eax");
}



#[test]
fn enc_sse2_cvtsi2sd3297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2A, 0xF8", "cvtsi2sd xmm15, eax");
}



#[test]
fn enc_sse2_cvtsi2sd3298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x18", "cvtsi2sd xmm3, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd3299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xD7", "cvtss2sd xmm2, xmm15");
}



#[test]
fn enc_sse2_cvtss2sd3300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xD1", "cvtss2sd xmm2, xmm1");
}



#[test]
fn enc_sse2_cvtss2sd3301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xE1", "cvtss2sd xmm4, xmm1");
}



#[test]
fn enc_sse2_cvtss2sd3302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5A, 0xE3", "cvtss2sd xmm12, xmm3");
}



#[test]
fn enc_sse2_cvtss2sd3303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xC4", "cvtss2sd xmm0, xmm12");
}



#[test]
fn enc_sse2_cvtss2sd3304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x60, 0x10", "cvtss2sd xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtss2sd3305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x10", "cvtss2sd xmm2, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd3306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5A, 0x24, 0x42", "cvtss2sd xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttpd2dq3307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0xC9", "cvttpd2dq xmm1, xmm1");
}



#[test]
fn enc_sse2_cvttpd2dq3308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE6, 0xDF", "cvttpd2dq xmm11, xmm15");
}



#[test]
fn enc_sse2_cvttpd2dq3309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0x00", "cvttpd2dq xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_cvttpd2dq3310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xE7", "cvttpd2dq xmm4, xmm15");
}



#[test]
fn enc_sse2_cvttpd2dq3311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0x1C, 0x42", "cvttpd2dq xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttpd2pi3312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xEB", "cvttpd2pi mm5, xmm3");
}



#[test]
fn enc_sse2_cvttpd2pi3313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm5, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xEC", "cvttpd2pi mm5, xmm4");
}



#[test]
fn enc_sse2_cvttpd2pi3314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xE2", "cvttpd2pi mm4, xmm2");
}



#[test]
fn enc_sse2_cvttpd2pi3315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2C, 0xDB", "cvttpd2pi mm3, xmm11");
}



#[test]
fn enc_sse2_cvttpd2pi3316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0x18", "cvttpd2pi mm3, OWORD [rax]");
}



#[test]
fn enc_sse2_cvttps2dq3317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5B, 0x18", "cvttps2dq xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_cvttps2dq3318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5B, 0xE1", "cvttps2dq xmm12, xmm1");
}



#[test]
fn enc_sse2_cvttps2dq3319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xC4", "cvttps2dq xmm0, xmm4");
}



#[test]
fn enc_sse2_cvttps2dq3320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xCA", "cvttps2dq xmm1, xmm2");
}



#[test]
fn enc_sse2_cvttps2dq3321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5B, 0xE3", "cvttps2dq xmm12, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si3322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xD3", "cvttsd2si rdx, xmm11");
}



#[test]
fn enc_sse2_cvttsd2si3323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xC8", "cvttsd2si rcx, xmm0");
}



#[test]
fn enc_sse2_cvttsd2si3324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xC3", "cvttsd2si rax, xmm11");
}



#[test]
fn enc_sse2_cvttsd2si3325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD0", "cvttsd2si rdx, xmm0");
}



#[test]
fn enc_sse2_cvttsd2si3326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xD7", "cvttsd2si rdx, xmm15");
}



#[test]
fn enc_sse2_cvttsd2si3327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x00", "cvttsd2si rax, QWORD [rax]");
}



#[test]
fn enc_sse2_cvttsd2si3328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x04, 0x42", "cvttsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si3329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x50, 0x10", "cvttsd2si rdx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvttsd2si3330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xC4", "cvttsd2si eax, xmm4");
}



#[test]
fn enc_sse2_cvttsd2si3331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si edx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xD3", "cvttsd2si edx, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si3332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xCB", "cvttsd2si ecx, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si3333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xC9", "cvttsd2si ecx, xmm1");
}



#[test]
fn enc_sse2_cvttsd2si3334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xC3", "cvttsd2si eax, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si3335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si edx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x10", "cvttsd2si edx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvttsd2si3336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x0C, 0x42", "cvttsd2si ecx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si3337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x04, 0x42", "cvttsd2si eax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_divpd3338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0xE0", "divpd xmm4, xmm0");
}



#[test]
fn enc_sse2_divpd3339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0xC9", "divpd xmm1, xmm1");
}



#[test]
fn enc_sse2_divpd3340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5E, 0xDF", "divpd xmm11, xmm15");
}



#[test]
fn enc_sse2_divpd3341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0x08", "divpd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_divpd3342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0x22", "divpd xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_divsd3343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xD4", "divsd xmm2, xmm12");
}



#[test]
fn enc_sse2_divsd3344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5E, 0xDF", "divsd xmm11, xmm15");
}



#[test]
fn enc_sse2_divsd3345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xC4", "divsd xmm0, xmm12");
}



#[test]
fn enc_sse2_divsd3346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xDB", "divsd xmm3, xmm3");
}



#[test]
fn enc_sse2_divsd3347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5E, 0xDC", "divsd xmm11, xmm12");
}



#[test]
fn enc_sse2_divsd3348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0x18", "divsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_divsd3349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x58, 0x10", "divsd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_divsd3350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x40, 0x10", "divsd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_divsd3351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x0C, 0x42", "divsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_divsd3352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x20", "divsd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_maskmovdqu3353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xDA", "maskmovdqu xmm11, xmm2");
}



#[test]
fn enc_sse2_maskmovdqu3354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF7, 0xD4", "maskmovdqu xmm2, xmm12");
}



#[test]
fn enc_sse2_maskmovdqu3355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xD8", "maskmovdqu xmm3, xmm0");
}



#[test]
fn enc_sse2_maskmovdqu3356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xFC", "maskmovdqu xmm15, xmm4");
}



#[test]
fn enc_sse2_maskmovdqu3357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xDB", "maskmovdqu xmm3, xmm3");
}



#[test]
fn enc_sse2_maxpd3358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5F, 0xD4", "maxpd xmm2, xmm12");
}



#[test]
fn enc_sse2_maxpd3359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0x24, 0x42", "maxpd xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maxpd3360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xD0", "maxpd xmm2, xmm0");
}



#[test]
fn enc_sse2_maxpd3361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0x20", "maxpd xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_maxpd3362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0xD8", "maxpd xmm3, xmm0");
}



#[test]
fn enc_sse2_maxsd3363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5F, 0xE7", "maxsd xmm4, xmm15");
}



#[test]
fn enc_sse2_maxsd3364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xCA", "maxsd xmm1, xmm2");
}



#[test]
fn enc_sse2_maxsd3365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5F, 0xE3", "maxsd xmm12, xmm11");
}



#[test]
fn enc_sse2_maxsd3366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xE2", "maxsd xmm12, xmm2");
}



#[test]
fn enc_sse2_maxsd3367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x50, 0x10", "maxsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_maxsd3368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0x60, 0x10", "maxsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_maxsd3369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0x1C, 0x42", "maxsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maxsd3370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x20", "maxsd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_maxsd3371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x10", "maxsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_minpd3372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xFF", "minpd xmm15, xmm15");
}



#[test]
fn enc_sse2_minpd3373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0x20", "minpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_minpd3374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5D, 0xC4", "minpd xmm0, xmm12");
}



#[test]
fn enc_sse2_minpd3375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0xF9", "minpd xmm15, xmm1");
}



#[test]
fn enc_sse2_minpd3376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0xFA", "minpd xmm15, xmm2");
}



#[test]
fn enc_sse2_minsd3377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xD4", "minsd xmm2, xmm4");
}



#[test]
fn enc_sse2_minsd3378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xC1", "minsd xmm0, xmm1");
}



#[test]
fn enc_sse2_minsd3379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xC0", "minsd xmm0, xmm0");
}



#[test]
fn enc_sse2_minsd3380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xE3", "minsd xmm12, xmm3");
}



#[test]
fn enc_sse2_minsd3381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xDC", "minsd xmm11, xmm4");
}



#[test]
fn enc_sse2_minsd3382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x1C, 0x42", "minsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_minsd3383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x20", "minsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_minsd3384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0x00", "minsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_minsd3385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0x1C, 0x42", "minsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd3386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x38", "movapd OWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movapd3387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x14, 0x42", "movapd OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movapd3388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x20", "movapd OWORD [rax], xmm4");
}



#[test]
fn enc_sse2_movapd3389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x48, 0x10", "movapd OWORD [rax + 16], xmm1");
}



#[test]
fn enc_sse2_movapd3390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x29, 0x18", "movapd OWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movapd3391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x28, 0xDB", "movapd xmm11, xmm11");
}



#[test]
fn enc_sse2_movapd3392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xCC", "movapd xmm1, xmm12");
}



#[test]
fn enc_sse2_movapd3393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xDB", "movapd xmm11, xmm3");
}



#[test]
fn enc_sse2_movapd3394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xDA", "movapd xmm11, xmm2");
}



#[test]
fn enc_sse2_movapd3395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xD3", "movapd xmm2, xmm3");
}



#[test]
fn enc_sse2_movapd3396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x10", "movapd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_movapd3397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x60, 0x10", "movapd xmm12, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movapd3398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x08", "movapd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_movapd3399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x14, 0x42", "movapd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd3400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xD3", "movapd xmm2, xmm11");
}



#[test]
fn enc_sse2_movapd3401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xCB", "movapd xmm1, xmm3");
}



#[test]
fn enc_sse2_movapd3402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xCA", "movapd xmm1, xmm2");
}



#[test]
fn enc_sse2_movapd3403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x28, 0xFB", "movapd xmm15, xmm11");
}



#[test]
fn enc_sse2_movapd3404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x28, 0xDF", "movapd xmm11, xmm15");
}



#[test]
fn enc_sse2_movd3405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm0, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0xC0", "movd xmm0, eax");
}



#[test]
fn enc_sse2_movd3406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x20", "movd xmm4, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm2, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0xD0", "movd xmm2, eax");
}



#[test]
fn enc_sse2_movd3408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x20", "movd xmm12, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x18", "movd xmm3, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x1C, 0x42", "movd DWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse2_movd3411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x20", "movd DWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movd3412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x50, 0x10", "movd DWORD [rax + 16], xmm2");
}



#[test]
fn enc_sse2_movd3413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x10", "movd DWORD [rax], xmm2");
}



#[test]
fn enc_sse2_movd3414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x1C, 0x42", "movd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd3415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x1C, 0x42", "movd xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd3416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x18", "movd xmm11, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x10", "movd xmm2, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x08", "movd DWORD [rax], xmm1");
}



#[test]
fn enc_sse2_movd3419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x38", "movd DWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movd3420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x20", "movd DWORD [rax], xmm4");
}



#[test]
fn enc_sse2_movd3421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0xE0", "movd eax, xmm4");
}



#[test]
fn enc_sse2_movdq2q3422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xE9", "movdq2q mm5, xmm1");
}



#[test]
fn enc_sse2_movdq2q3423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xE4", "movdq2q mm4, xmm12");
}



#[test]
fn enc_sse2_movdq2q3424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xE0", "movdq2q mm4, xmm0");
}



#[test]
fn enc_sse2_movdq2q3425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xEF", "movdq2q mm5, xmm15");
}



#[test]
fn enc_sse2_movdq2q3426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xDF", "movdq2q mm3, xmm15");
}



#[test]
fn enc_sse2_movdqa3427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xC4", "movdqa xmm0, xmm12");
}



#[test]
fn enc_sse2_movdqa3428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xE4", "movdqa xmm4, xmm4");
}



#[test]
fn enc_sse2_movdqa3429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xC8", "movdqa xmm1, xmm0");
}



#[test]
fn enc_sse2_movdqa3430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xE0", "movdqa xmm4, xmm0");
}



#[test]
fn enc_sse2_movdqa3431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xF9", "movdqa xmm15, xmm1");
}



#[test]
fn enc_sse2_movdqa3432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xE2", "movdqa xmm4, xmm2");
}



#[test]
fn enc_sse2_movdqa3433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xDB", "movdqa xmm11, xmm11");
}



#[test]
fn enc_sse2_movdqa3434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xE3", "movdqa xmm12, xmm3");
}



#[test]
fn enc_sse2_movdqa3435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xDB", "movdqa xmm3, xmm11");
}



#[test]
fn enc_sse2_movdqa3436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xFB", "movdqa xmm15, xmm3");
}



#[test]
fn enc_sse2_movdqa3437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x58, 0x10", "movdqa xmm3, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqa3438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0x20", "movdqa xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqa3439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x50, 0x10", "movdqa xmm2, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqa3440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x04, 0x42", "movdqa xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqa3441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x1C, 0x42", "movdqa xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqa3442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x3C, 0x42", "movdqa OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movdqa3443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x24, 0x42", "movdqa OWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movdqa3444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x20", "movdqa OWORD [rax], xmm4");
}



#[test]
fn enc_sse2_movdqa3445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x38", "movdqa OWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movdqa3446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x18", "movdqa OWORD [rax], xmm3");
}



#[test]
fn enc_sse2_movdqu3447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xE1", "movdqu xmm12, xmm1");
}



#[test]
fn enc_sse2_movdqu3448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xCC", "movdqu xmm1, xmm4");
}



#[test]
fn enc_sse2_movdqu3449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xC0", "movdqu xmm0, xmm0");
}



#[test]
fn enc_sse2_movdqu3450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xE0", "movdqu xmm4, xmm0");
}



#[test]
fn enc_sse2_movdqu3451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD4", "movdqu xmm2, xmm4");
}



#[test]
fn enc_sse2_movdqu3452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x04, 0x42", "movdqu xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqu3453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x58, 0x10", "movdqu xmm11, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqu3454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x24, 0x42", "movdqu xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqu3455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x78, 0x10", "movdqu xmm15, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqu3456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x14, 0x42", "movdqu OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movdqu3457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x1C, 0x42", "movdqu OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse2_movdqu3458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x18", "movdqu OWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movdqu3459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x00", "movdqu OWORD [rax], xmm0");
}



#[test]
fn enc_sse2_movdqu3460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x20", "movdqu OWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movdqu3461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xE0", "movdqu xmm12, xmm0");
}



#[test]
fn enc_sse2_movdqu3462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xDC", "movdqu xmm3, xmm4");
}



#[test]
fn enc_sse2_movdqu3463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xFB", "movdqu xmm15, xmm3");
}



#[test]
fn enc_sse2_movdqu3464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x6F, 0xDB", "movdqu xmm3, xmm11");
}



#[test]
fn enc_sse2_movdqu3465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xFB", "movdqu xmm15, xmm11");
}



#[test]
fn enc_sse2_movhpd3466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x38", "movhpd [rax], xmm15");
}



#[test]
fn enc_sse2_movhpd3467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x20", "movhpd [rax], xmm12");
}



#[test]
fn enc_sse2_movhpd3468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x18", "movhpd [rax], xmm11");
}



#[test]
fn enc_sse2_movhpd3469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x10", "movhpd [rax], xmm2");
}



#[test]
fn enc_sse2_movhpd3470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x10", "movhpd xmm2, [rax]");
}



#[test]
fn enc_sse2_movhpd3471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x38", "movhpd xmm15, [rax]");
}



#[test]
fn enc_sse2_movhpd3472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x08", "movhpd xmm1, [rax]");
}



#[test]
fn enc_sse2_movhpd3473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x20", "movhpd xmm12, [rax]");
}



#[test]
fn enc_sse2_movlpd3474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x1C, 0x42", "movlpd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movlpd3475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x18", "movlpd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_movlpd3476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x60, 0x10", "movlpd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movlpd3477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x58, 0x10", "movlpd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movlpd3478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x0C, 0x42", "movlpd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movlpd3479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x24, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movlpd3480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x58, 0x10", "movlpd QWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse2_movlpd3481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x1C, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movlpd3482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x38", "movlpd QWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movlpd3483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x78, 0x10", "movlpd QWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse2_movmskpd3484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xC8", "movmskpd rcx, xmm0");
}



#[test]
fn enc_sse2_movmskpd3485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xD4", "movmskpd rdx, xmm4");
}



#[test]
fn enc_sse2_movmskpd3486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xC7", "movmskpd rax, xmm15");
}



#[test]
fn enc_sse2_movmskpd3487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xC4", "movmskpd rax, xmm4");
}



#[test]
fn enc_sse2_movmskpd3488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xC9", "movmskpd rcx, xmm1");
}



#[test]
fn enc_sse2_movmskpd3489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd ecx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xC9", "movmskpd ecx, xmm1");
}



#[test]
fn enc_sse2_movmskpd3490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xC3", "movmskpd eax, xmm3");
}



#[test]
fn enc_sse2_movmskpd3491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd eax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xC0", "movmskpd eax, xmm0");
}



#[test]
fn enc_sse2_movmskpd3492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd ecx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xCC", "movmskpd ecx, xmm4");
}



#[test]
fn enc_sse2_movmskpd3493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd ecx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x50, 0xCB", "movmskpd ecx, xmm11");
}



#[test]
fn enc_sse2_movntdq3494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x3C, 0x42", "movntdq OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movntdq3495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x14, 0x42", "movntdq OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movntdq3496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x18", "movntdq OWORD [rax], xmm3");
}



#[test]
fn enc_sse2_movntdq3497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x20", "movntdq OWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movntdq3498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x48, 0x10", "movntdq OWORD [rax + 16], xmm1");
}



#[test]
fn enc_sse2_movntpd3499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x3C, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movntpd3500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x48, 0x10", "movntpd OWORD [rax + 16], xmm1");
}



#[test]
fn enc_sse2_movntpd3501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x60, 0x10", "movntpd OWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse2_movntpd3502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x14, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movntpd3503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x0C, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movq3504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x38", "movq xmm15, [rax]");
}



#[test]
fn enc_sse2_movq3505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x10", "movq xmm2, [rax]");
}



#[test]
fn enc_sse2_movq3506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x20", "movq xmm12, [rax]");
}



#[test]
fn enc_sse2_movq3507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x6E, 0xE0", "movq xmm4, rax");
}



#[test]
fn enc_sse2_movq3508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xDF", "movq xmm11, xmm15");
}



#[test]
fn enc_sse2_movq3509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xDB", "movq xmm3, xmm11");
}



#[test]
fn enc_sse2_movq3510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xC9", "movq xmm1, xmm1");
}



#[test]
fn enc_sse2_movq3511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xDA", "movq xmm3, xmm2");
}



#[test]
fn enc_sse2_movq3512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x0C, 0x42", "movq QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movq3513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x08", "movq QWORD [rax], xmm1");
}



#[test]
fn enc_sse2_movq3514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x20", "movq QWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movq3515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x60, 0x10", "movq QWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse2_movq3516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x18", "movq QWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movq3517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xDC", "movq xmm11, xmm12");
}



#[test]
fn enc_sse2_movq3518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xDA", "movq xmm3, xmm2");
}



#[test]
fn enc_sse2_movq3519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xD8", "movq xmm3, xmm0");
}



#[test]
fn enc_sse2_movq3520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xDB", "movq xmm3, xmm3");
}



#[test]
fn enc_sse2_movq3521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xDA", "movq xmm11, xmm2");
}



#[test]
fn enc_sse2_movq3522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x20", "movq xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_movq3523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x1C, 0x42", "movq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movq3524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x18", "movq xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_movq3525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x24, 0x42", "movq xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movq3526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x18", "movq [rax], xmm11");
}



#[test]
fn enc_sse2_movq3527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x20", "movq [rax], xmm4");
}



#[test]
fn enc_sse2_movq3528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x7E, 0xC0", "movq rax, xmm0");
}



#[test]
fn enc_sse2_movq3529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x10", "movq [rax], xmm2");
}



#[test]
fn enc_sse2_movq3530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x08", "movq [rax], xmm1");
}



#[test]
fn enc_sse2_movq2dq3531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm0, mm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xC2", "movq2dq xmm0, mm2");
}



#[test]
fn enc_sse2_movq2dq3532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm1, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xCD", "movq2dq xmm1, mm5");
}



#[test]
fn enc_sse2_movq2dq3533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm2, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xD3", "movq2dq xmm2, mm3");
}



#[test]
fn enc_sse2_movq2dq3534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm15, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xFB", "movq2dq xmm15, mm3");
}



#[test]
fn enc_sse2_movq2dq3535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm1, mm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xC9", "movq2dq xmm1, mm1");
}



#[test]
fn enc_sse2_movsd3536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xC0", "movsd xmm0, xmm0");
}



#[test]
fn enc_sse2_movsd3537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xCB", "movsd xmm1, xmm11");
}



#[test]
fn enc_sse2_movsd3538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xDF", "movsd xmm3, xmm15");
}



#[test]
fn enc_sse2_movsd3539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD1", "movsd xmm2, xmm1");
}



#[test]
fn enc_sse2_movsd3540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xE0", "movsd xmm12, xmm0");
}



#[test]
fn enc_sse2_movsd3541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x00", "movsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_movsd3542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x1C, 0x42", "movsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movsd3543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x20", "movsd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_movsd3544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x04, 0x42", "movsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movsd3545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xE2", "movsd xmm4, xmm2");
}



#[test]
fn enc_sse2_movsd3546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xE4", "movsd xmm4, xmm12");
}



#[test]
fn enc_sse2_movsd3547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xCA", "movsd xmm1, xmm2");
}



#[test]
fn enc_sse2_movsd3548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xE0", "movsd xmm12, xmm0");
}



#[test]
fn enc_sse2_movsd3549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xF9", "movsd xmm15, xmm1");
}



#[test]
fn enc_sse2_movsd3550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x0C, 0x42", "movsd QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movsd3551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x24, 0x42", "movsd QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movsd3552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x18", "movsd QWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movsd3553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x24, 0x42", "movsd QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movsd3554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x1C, 0x42", "movsd QWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movupd3555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC1", "movupd xmm0, xmm1");
}



#[test]
fn enc_sse2_movupd3556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC8", "movupd xmm1, xmm0");
}



#[test]
fn enc_sse2_movupd3557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC4", "movupd xmm0, xmm4");
}



#[test]
fn enc_sse2_movupd3558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xE2", "movupd xmm12, xmm2");
}



#[test]
fn enc_sse2_movupd3559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xCC", "movupd xmm1, xmm12");
}



#[test]
fn enc_sse2_movupd3560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xE2", "movupd xmm12, xmm2");
}



#[test]
fn enc_sse2_movupd3561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xE4", "movupd xmm12, xmm4");
}



#[test]
fn enc_sse2_movupd3562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xDF", "movupd xmm11, xmm15");
}



#[test]
fn enc_sse2_movupd3563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x10, 0xFB", "movupd xmm15, xmm11");
}



#[test]
fn enc_sse2_movupd3564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xD4", "movupd xmm2, xmm4");
}



#[test]
fn enc_sse2_movupd3565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x18", "movupd OWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movupd3566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x3C, 0x42", "movupd OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movupd3567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x60, 0x10", "movupd OWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse2_movupd3568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x11, 0x08", "movupd OWORD [rax], xmm1");
}



#[test]
fn enc_sse2_movupd3569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm1, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x48, 0x10", "movupd xmm1, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movupd3570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x24, 0x42", "movupd xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movupd3571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x1C, 0x42", "movupd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movupd3572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm15, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0x78, 0x10", "movupd xmm15, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_mulpd3573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x59, 0xDB", "mulpd xmm11, xmm11");
}



#[test]
fn enc_sse2_mulpd3574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x59, 0xC4", "mulpd xmm0, xmm12");
}



#[test]
fn enc_sse2_mulpd3575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0xE3", "mulpd xmm4, xmm3");
}



#[test]
fn enc_sse2_mulpd3576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0x22", "mulpd xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_mulpd3577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0xE3", "mulpd xmm12, xmm3");
}



#[test]
fn enc_sse2_mulsd3578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x59, 0xC7", "mulsd xmm0, xmm15");
}



#[test]
fn enc_sse2_mulsd3579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xCC", "mulsd xmm1, xmm4");
}



#[test]
fn enc_sse2_mulsd3580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0xD9", "mulsd xmm11, xmm1");
}



#[test]
fn enc_sse2_mulsd3581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xE1", "mulsd xmm4, xmm1");
}



#[test]
fn enc_sse2_mulsd3582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0xF8", "mulsd xmm15, xmm0");
}



#[test]
fn enc_sse2_mulsd3583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0x38", "mulsd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_mulsd3584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0x58, 0x10", "mulsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_mulsd3585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0x24, 0x42", "mulsd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_orpd3586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xF9", "orpd xmm15, xmm1");
}



#[test]
fn enc_sse2_orpd3587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0xCB", "orpd xmm1, xmm3");
}



#[test]
fn enc_sse2_orpd3588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xFA", "orpd xmm15, xmm2");
}



#[test]
fn enc_sse2_orpd3589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0x18", "orpd xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_orpd3590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xE0", "orpd xmm12, xmm0");
}



#[test]
fn enc_sse2_packssdw3591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xC2", "packssdw xmm0, xmm2");
}



#[test]
fn enc_sse2_packssdw3592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6B, 0x3A", "packssdw xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_packssdw3593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xE3", "packssdw xmm4, xmm3");
}



#[test]
fn enc_sse2_packssdw3594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6B, 0xDC", "packssdw xmm3, xmm12");
}



#[test]
fn enc_sse2_packsswb3595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xDA", "packsswb xmm11, xmm2");
}



#[test]
fn enc_sse2_packsswb3596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x63, 0xE0", "packsswb xmm12, xmm0");
}



#[test]
fn enc_sse2_packsswb3597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x63, 0xC7", "packsswb xmm0, xmm15");
}



#[test]
fn enc_sse2_packuswb3598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xD4", "packuswb xmm2, xmm4");
}



#[test]
fn enc_sse2_packuswb3599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x67, 0xFC", "packuswb xmm15, xmm12");
}



#[test]
fn enc_sse2_packuswb3600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x67, 0xDC", "packuswb xmm11, xmm12");
}



#[test]
fn enc_sse2_packuswb3601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0x0C, 0x42", "packuswb xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddb3602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFC, 0xCC", "paddb xmm1, xmm12");
}



#[test]
fn enc_sse2_paddb3603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xCA", "paddb xmm1, xmm2");
}



#[test]
fn enc_sse2_paddb3604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFC, 0xDC", "paddb xmm11, xmm4");
}



#[test]
fn enc_sse2_paddb3605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFC, 0xC4", "paddb xmm0, xmm12");
}



#[test]
fn enc_sse2_paddb3606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFC, 0xFA", "paddb xmm15, xmm2");
}



#[test]
fn enc_sse2_paddd3607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFE, 0xCC", "paddd xmm1, xmm12");
}



#[test]
fn enc_sse2_paddd3608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFE, 0xE3", "paddd xmm12, xmm11");
}



#[test]
fn enc_sse2_paddd3609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0xE0", "paddd xmm4, xmm0");
}



#[test]
fn enc_sse2_paddd3610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0xD9", "paddd xmm3, xmm1");
}



#[test]
fn enc_sse2_paddq3611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xD9", "paddq xmm3, xmm1");
}



#[test]
fn enc_sse2_paddq3612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0x04, 0x42", "paddq xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddq3613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xDC", "paddq xmm3, xmm4");
}



#[test]
fn enc_sse2_paddq3614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0x08", "paddq xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_paddsb3615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0x0C, 0x42", "paddsb xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddsb3616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0xD9", "paddsb xmm3, xmm1");
}



#[test]
fn enc_sse2_paddsb3617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0x1C, 0x42", "paddsb xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddsb3618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEC, 0xD3", "paddsb xmm2, xmm11");
}



#[test]
fn enc_sse2_paddsb3619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0xFB", "paddsb xmm15, xmm3");
}



#[test]
fn enc_sse2_paddsw3620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xED, 0xFB", "paddsw xmm15, xmm3");
}



#[test]
fn enc_sse2_paddsw3621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xC0", "paddsw xmm0, xmm0");
}



#[test]
fn enc_sse2_paddsw3622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xE4", "paddsw xmm4, xmm12");
}



#[test]
fn enc_sse2_paddsw3623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xCC", "paddsw xmm1, xmm12");
}



#[test]
fn enc_sse2_paddsw3624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xED, 0xFA", "paddsw xmm15, xmm2");
}



#[test]
fn enc_sse2_paddusb3625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDC, 0xDC", "paddusb xmm3, xmm4");
}



#[test]
fn enc_sse2_paddusb3626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDC, 0x3A", "paddusb xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddusb3627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xDC", "paddusb xmm3, xmm12");
}



#[test]
fn enc_sse2_paddusb3628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDC, 0x1C, 0x42", "paddusb xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddusb3629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDC, 0x38", "paddusb xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_paddusw3630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDD, 0xCB", "paddusw xmm1, xmm11");
}



#[test]
fn enc_sse2_paddusw3631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xE4", "paddusw xmm4, xmm4");
}



#[test]
fn enc_sse2_paddusw3632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xDA", "paddusw xmm3, xmm2");
}



#[test]
fn enc_sse2_paddusw3633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0xE0", "paddusw xmm12, xmm0");
}



#[test]
fn enc_sse2_paddusw3634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0xE4", "paddusw xmm12, xmm4");
}



#[test]
fn enc_sse2_paddw3635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFD, 0xE3", "paddw xmm12, xmm11");
}



#[test]
fn enc_sse2_paddw3636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFD, 0xE1", "paddw xmm12, xmm1");
}



#[test]
fn enc_sse2_paddw3637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xE0", "paddw xmm4, xmm0");
}



#[test]
fn enc_sse2_paddw3638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xD9", "paddw xmm3, xmm1");
}



#[test]
fn enc_sse2_paddw3639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFD, 0xDB", "paddw xmm11, xmm11");
}



#[test]
fn enc_sse2_pand3640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0xE3", "pand xmm4, xmm3");
}



#[test]
fn enc_sse2_pand3641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0x3A", "pand xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_pand3642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0x08", "pand xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_pand3643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDB, 0xDB", "pand xmm11, xmm11");
}



#[test]
fn enc_sse2_pand3644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0xFA", "pand xmm15, xmm2");
}



#[test]
fn enc_sse2_pandn3645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x24, 0x42", "pandn xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pandn3646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDF, 0xDC", "pandn xmm11, xmm4");
}



#[test]
fn enc_sse2_pandn3647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xE1", "pandn xmm4, xmm1");
}



#[test]
fn enc_sse2_pandn3648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0xC4", "pandn xmm0, xmm4");
}



#[test]
fn enc_sse2_pandn3649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDF, 0xDF", "pandn xmm3, xmm15");
}



#[test]
fn enc_sse2_pavgb3650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0x1A", "pavgb xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_pavgb3651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0xDA", "pavgb xmm11, xmm2");
}



#[test]
fn enc_sse2_pavgb3652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0xF8", "pavgb xmm15, xmm0");
}



#[test]
fn enc_sse2_pavgb3653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE0, 0xDC", "pavgb xmm11, xmm12");
}



#[test]
fn enc_sse2_pavgb3654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE0, 0xFB", "pavgb xmm15, xmm11");
}



#[test]
fn enc_sse2_pavgw3655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0xCA", "pavgw xmm1, xmm2");
}



#[test]
fn enc_sse2_pavgw3656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0x1A", "pavgw xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_pavgw3657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0xD4", "pavgw xmm2, xmm4");
}



#[test]
fn enc_sse2_pavgw3658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE3, 0xD7", "pavgw xmm2, xmm15");
}



#[test]
fn enc_sse2_pavgw3659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0xD0", "pavgw xmm2, xmm0");
}



#[test]
fn enc_sse2_pextrw3660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm12, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xD4, 0x64", "pextrw edx, xmm12, 100");
}



#[test]
fn enc_sse2_pextrw3661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm3, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xCB, 0x7A", "pextrw ecx, xmm3, 122");
}



#[test]
fn enc_sse2_pextrw3662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm11, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCB, 0x12", "pextrw ecx, xmm11, 18");
}



#[test]
fn enc_sse2_pextrw3663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm12, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCC, 0x51", "pextrw ecx, xmm12, 81");
}



#[test]
fn enc_sse2_pextrw3664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm3, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC3, 0x77", "pextrw eax, xmm3, 119");
}



#[test]
fn enc_sse2_pinsrw3665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, dx, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xFA, 0x41", "pinsrw xmm15, dx, 65");
}



#[test]
fn enc_sse2_pinsrw3666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, cx, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC9, 0x0A", "pinsrw xmm1, cx, 10");
}



#[test]
fn enc_sse2_pinsrw3667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, dx, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xE2, 0x76", "pinsrw xmm4, dx, 118");
}



#[test]
fn enc_sse2_pinsrw3668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, dx, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC2, 0x17", "pinsrw xmm0, dx, 23");
}



#[test]
fn enc_sse2_pinsrw3669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, ax, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD8, 0x24", "pinsrw xmm3, ax, 36");
}



#[test]
fn enc_sse2_pinsrw3670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, edx, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xCA, 0x22", "pinsrw xmm1, edx, 34");
}



#[test]
fn enc_sse2_pinsrw3671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, edx, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xE2, 0x0B", "pinsrw xmm4, edx, 11");
}



#[test]
fn enc_sse2_pinsrw3672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, ecx, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD1, 0x2B", "pinsrw xmm2, ecx, 43");
}



#[test]
fn enc_sse2_pinsrw3673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, ecx, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xC9, 0x43", "pinsrw xmm1, ecx, 67");
}



#[test]
fn enc_sse2_pinsrw3674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, edx, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xFA, 0x27", "pinsrw xmm15, edx, 39");
}



#[test]
fn enc_sse2_pinsrw3675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, [rax], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x08, 0x0D", "pinsrw xmm1, [rax], 13");
}



#[test]
fn enc_sse2_pinsrw3676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x58", "pinsrw xmm4, [rax], 88");
}



#[test]
fn enc_sse2_pinsrw3677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x08, 0x52", "pinsrw xmm1, [rax], 82");
}



#[test]
fn enc_sse2_pinsrw3678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x08, 0x2C", "pinsrw xmm1, [rax], 44");
}



#[test]
fn enc_sse2_pinsrw3679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x38, 0x73", "pinsrw xmm15, [rax], 115");
}



#[test]
fn enc_sse2_pinsrw3680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, WORD [rax], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x10, 0x19", "pinsrw xmm2, WORD [rax], 25");
}



#[test]
fn enc_sse2_pinsrw3681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, WORD [rax * 2 + rdx], 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x1C, 0x42, 0x4C", "pinsrw xmm11, WORD [rax * 2 + rdx], 76");
}



#[test]
fn enc_sse2_pinsrw3682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax * 2 + rdx], 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x04, 0x42, 0x39", "pinsrw xmm0, WORD [rax * 2 + rdx], 57");
}



#[test]
fn enc_sse2_pinsrw3683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm3, WORD [rax + 16], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x58, 0x10, 0x76", "pinsrw xmm3, WORD [rax + 16], 118");
}



#[test]
fn enc_sse2_pinsrw3684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, WORD [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x63", "pinsrw xmm4, WORD [rax], 99");
}



#[test]
fn enc_sse2_pmaddwd3685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0xD9", "pmaddwd xmm3, xmm1");
}



#[test]
fn enc_sse2_pmaddwd3686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF5, 0xFB", "pmaddwd xmm15, xmm11");
}



#[test]
fn enc_sse2_pmaddwd3687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0x0C, 0x42", "pmaddwd xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmaddwd3688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0xE0", "pmaddwd xmm4, xmm0");
}



#[test]
fn enc_sse2_pmaddwd3689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xDB", "pmaddwd xmm11, xmm3");
}



#[test]
fn enc_sse2_pmaxsw3690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xD1", "pmaxsw xmm2, xmm1");
}



#[test]
fn enc_sse2_pmaxsw3691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0x12", "pmaxsw xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmaxsw3692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xE1", "pmaxsw xmm4, xmm1");
}



#[test]
fn enc_sse2_pmaxsw3693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0x04, 0x42", "pmaxsw xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmaxsw3694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEE, 0xFB", "pmaxsw xmm15, xmm11");
}



#[test]
fn enc_sse2_pmaxub3695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0x1A", "pmaxub xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmaxub3696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xE7", "pmaxub xmm4, xmm15");
}



#[test]
fn enc_sse2_pmaxub3697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xC8", "pmaxub xmm1, xmm0");
}



#[test]
fn enc_sse2_pmaxub3698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDE, 0xDB", "pmaxub xmm11, xmm3");
}



#[test]
fn enc_sse2_pmaxub3699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDE, 0xFA", "pmaxub xmm15, xmm2");
}



#[test]
fn enc_sse2_pminsw3700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0x04, 0x42", "pminsw xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pminsw3701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0x18", "pminsw xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_pminsw3702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEA, 0xD3", "pminsw xmm2, xmm11");
}



#[test]
fn enc_sse2_pminsw3703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xC8", "pminsw xmm1, xmm0");
}



#[test]
fn enc_sse2_pminsw3704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEA, 0xC7", "pminsw xmm0, xmm15");
}



#[test]
fn enc_sse2_pminub3705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x20", "pminub xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_pminub3706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDA, 0x1C, 0x42", "pminub xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pminub3707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xD8", "pminub xmm3, xmm0");
}



#[test]
fn enc_sse2_pminub3708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x14, 0x42", "pminub xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pminub3709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x0A", "pminub xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmovmskb3710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xC3", "pmovmskb eax, xmm3");
}



#[test]
fn enc_sse2_pmovmskb3711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xCC", "pmovmskb ecx, xmm4");
}



#[test]
fn enc_sse2_pmovmskb3712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xCB", "pmovmskb ecx, xmm3");
}



#[test]
fn enc_sse2_pmovmskb3713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xD4", "pmovmskb edx, xmm12");
}



#[test]
fn enc_sse2_pmovmskb3714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD7, 0xC7", "pmovmskb eax, xmm15");
}



#[test]
fn enc_sse2_pmulhuw3715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xC3", "pmulhuw xmm0, xmm3");
}



#[test]
fn enc_sse2_pmulhuw3716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE4, 0xDC", "pmulhuw xmm11, xmm4");
}



#[test]
fn enc_sse2_pmulhuw3717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0x1C, 0x42", "pmulhuw xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmulhuw3718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xE3", "pmulhuw xmm4, xmm3");
}



#[test]
fn enc_sse2_pmulhuw3719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE4, 0x1A", "pmulhuw xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmulhw3720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0xCC", "pmulhw xmm1, xmm4");
}



#[test]
fn enc_sse2_pmulhw3721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0xE1", "pmulhw xmm4, xmm1");
}



#[test]
fn enc_sse2_pmulhw3722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE5, 0xDC", "pmulhw xmm11, xmm12");
}



#[test]
fn enc_sse2_pmulhw3723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE5, 0xE7", "pmulhw xmm4, xmm15");
}



#[test]
fn enc_sse2_pmulhw3724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE5, 0x1C, 0x42", "pmulhw xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmullw3725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0xE3", "pmullw xmm12, xmm3");
}



#[test]
fn enc_sse2_pmullw3726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0xE2", "pmullw xmm12, xmm2");
}



#[test]
fn enc_sse2_pmullw3727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0xDC", "pmullw xmm11, xmm4");
}



#[test]
fn enc_sse2_pmullw3728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0xE1", "pmullw xmm12, xmm1");
}



#[test]
fn enc_sse2_pmullw3729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD5, 0x22", "pmullw xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmuludq3730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x1A", "pmuludq mm3, [rdx]");
}



#[test]
fn enc_sse2_pmuludq3731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x2A", "pmuludq mm5, [rdx]");
}



#[test]
fn enc_sse2_pmuludq3732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0xE0", "pmuludq mm4, mm0");
}



#[test]
fn enc_sse2_pmuludq3733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0xC0", "pmuludq mm0, mm0");
}



#[test]
fn enc_sse2_pmuludq3734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xD0", "pmuludq xmm2, xmm0");
}



#[test]
fn enc_sse2_pmuludq3735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xC2", "pmuludq xmm0, xmm2");
}



#[test]
fn enc_sse2_pmuludq3736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xDA", "pmuludq xmm3, xmm2");
}



#[test]
fn enc_sse2_pmuludq3737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0x10", "pmuludq xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_pmuludq3738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xE3", "pmuludq xmm4, xmm3");
}



#[test]
fn enc_sse2_por3739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEB, 0xC7", "por xmm0, xmm15");
}



#[test]
fn enc_sse2_por3740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0x1C, 0x42", "por xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_por3741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xC4", "por xmm0, xmm4");
}



#[test]
fn enc_sse2_por3742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0x22", "por xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_por3743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xDB", "por xmm11, xmm3");
}



#[test]
fn enc_sse2_psadbw3744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF6, 0xE7", "psadbw xmm12, xmm15");
}



#[test]
fn enc_sse2_psadbw3745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xD1", "psadbw xmm2, xmm1");
}



#[test]
fn enc_sse2_psadbw3746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF6, 0xFA", "psadbw xmm15, xmm2");
}



#[test]
fn enc_sse2_psadbw3747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF6, 0xDC", "psadbw xmm11, xmm4");
}



#[test]
fn enc_sse2_psadbw3748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x20", "psadbw xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_pshufd3749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm15, xmm15, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x70, 0xFF, 0x07", "pshufd xmm15, xmm15, 7");
}



#[test]
fn enc_sse2_pshufd3750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm12, xmm12, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x70, 0xE4, 0x6A", "pshufd xmm12, xmm12, 106");
}



#[test]
fn enc_sse2_pshufd3751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm2, OWORD [rdx], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0x12, 0x0C", "pshufd xmm2, OWORD [rdx], 12");
}



#[test]
fn enc_sse2_pshufd3752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm15, xmm4, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xFC, 0x4B", "pshufd xmm15, xmm4, 75");
}



#[test]
fn enc_sse2_pshufd3753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm4, OWORD [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0x20, 0x66", "pshufd xmm4, OWORD [rax], 102");
}



#[test]
fn enc_sse2_pshufhw3754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm12, xmm0, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x70, 0xE0, 0x71", "pshufhw xmm12, xmm0, 113");
}



#[test]
fn enc_sse2_pshufhw3755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm0, xmm0, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xC0, 0x4E", "pshufhw xmm0, xmm0, 78");
}



#[test]
fn enc_sse2_pshufhw3756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm3, OWORD [rdx], 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0x1A, 0x03", "pshufhw xmm3, OWORD [rdx], 3");
}



#[test]
fn enc_sse2_pshufhw3757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm4, xmm1, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xE1, 0x50", "pshufhw xmm4, xmm1, 80");
}



#[test]
fn enc_sse2_pshufhw3758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm3, xmm12, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xDC, 0x48", "pshufhw xmm3, xmm12, 72");
}



#[test]
fn enc_sse2_pshuflw3759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm12, xmm15, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x70, 0xE7, 0x4A", "pshuflw xmm12, xmm15, 74");
}



#[test]
fn enc_sse2_pshuflw3760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm3, xmm4, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xDC, 0x6B", "pshuflw xmm3, xmm4, 107");
}



#[test]
fn enc_sse2_pshuflw3761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm2, xmm2, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xD2, 0x22", "pshuflw xmm2, xmm2, 34");
}



#[test]
fn enc_sse2_pshuflw3762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm1, xmm15, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x70, 0xCF, 0x0F", "pshuflw xmm1, xmm15, 15");
}



#[test]
fn enc_sse2_pshuflw3763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm4, xmm11, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x70, 0xE3, 0x2E", "pshuflw xmm4, xmm11, 46");
}



#[test]
fn enc_sse2_pslld3764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm2, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF2, 0x6F", "pslld xmm2, 111");
}



#[test]
fn enc_sse2_pslld3765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm1, 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF1, 0x2B", "pslld xmm1, 43");
}



#[test]
fn enc_sse2_pslld3766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF4, 0x48", "pslld xmm12, 72");
}



#[test]
fn enc_sse2_pslld3767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm15, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF7, 0x19", "pslld xmm15, 25");
}



#[test]
fn enc_sse2_pslld3768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm3, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF3, 0x63", "pslld xmm3, 99");
}



#[test]
fn enc_sse2_pslld3769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0x3A", "pslld xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_pslld3770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF2, 0xFF", "pslld xmm15, xmm15");
}



#[test]
fn enc_sse2_pslld3771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0xE1", "pslld xmm12, xmm1");
}



#[test]
fn enc_sse2_pslld3772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0x38", "pslld xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_pslld3773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0xE3", "pslld xmm12, xmm3");
}



#[test]
fn enc_sse2_pslldq3774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm12, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFC, 0x2D", "pslldq xmm12, 45");
}



#[test]
fn enc_sse2_pslldq3775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm15, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFF, 0x26", "pslldq xmm15, 38");
}



#[test]
fn enc_sse2_pslldq3776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm12, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFC, 0x4B", "pslldq xmm12, 75");
}



#[test]
fn enc_sse2_pslldq3777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm2, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xFA, 0x61", "pslldq xmm2, 97");
}



#[test]
fn enc_sse2_pslldq3778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm15, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFF, 0x6C", "pslldq xmm15, 108");
}



#[test]
fn enc_sse2_psllq3779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xD0", "psllq xmm2, xmm0");
}



#[test]
fn enc_sse2_psllq3780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0x0A", "psllq xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_psllq3781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xDF", "psllq xmm3, xmm15");
}



#[test]
fn enc_sse2_psllq3782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF3, 0xDC", "psllq xmm3, xmm12");
}



#[test]
fn enc_sse2_psllq3783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xD4", "psllq xmm2, xmm4");
}



#[test]
fn enc_sse2_psllq3784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm11, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF3, 0x25", "psllq xmm11, 37");
}



#[test]
fn enc_sse2_psllq3785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF7, 0x24", "psllq xmm15, 36");
}



#[test]
fn enc_sse2_psllq3786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm12, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF4, 0x2D", "psllq xmm12, 45");
}



#[test]
fn enc_sse2_psllq3787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm11, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF3, 0x2C", "psllq xmm11, 44");
}



#[test]
fn enc_sse2_psllq3788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm12, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF4, 0x70", "psllq xmm12, 112");
}



#[test]
fn enc_sse2_psllw3789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm15, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF7, 0x72", "psllw xmm15, 114");
}



#[test]
fn enc_sse2_psllw3790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm3, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF3, 0x33", "psllw xmm3, 51");
}



#[test]
fn enc_sse2_psllw3791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm1, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF1, 0x37", "psllw xmm1, 55");
}



#[test]
fn enc_sse2_psllw3792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF0, 0x52", "psllw xmm0, 82");
}



#[test]
fn enc_sse2_psllw3793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm2, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF2, 0x69", "psllw xmm2, 105");
}



#[test]
fn enc_sse2_psllw3794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xC3", "psllw xmm0, xmm3");
}



#[test]
fn enc_sse2_psllw3795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0x24, 0x42", "psllw xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psllw3796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF1, 0xE7", "psllw xmm12, xmm15");
}



#[test]
fn enc_sse2_psllw3797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF1, 0x20", "psllw xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_psllw3798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF1, 0x3A", "psllw xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrad3799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xCB", "psrad xmm1, xmm3");
}



#[test]
fn enc_sse2_psrad3800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xDC", "psrad xmm3, xmm4");
}



#[test]
fn enc_sse2_psrad3801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xD4", "psrad xmm2, xmm4");
}



#[test]
fn enc_sse2_psrad3802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE2, 0xC3", "psrad xmm0, xmm11");
}



#[test]
fn enc_sse2_psrad3803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0x18", "psrad xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_psrad3804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm12, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE4, 0x37", "psrad xmm12, 55");
}



#[test]
fn enc_sse2_psrad3805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm11, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE3, 0x44", "psrad xmm11, 68");
}



#[test]
fn enc_sse2_psrad3806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm12, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE4, 0x04", "psrad xmm12, 4");
}



#[test]
fn enc_sse2_psrad3807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE3, 0x12", "psrad xmm3, 18");
}



#[test]
fn enc_sse2_psrad3808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE7, 0x5C", "psrad xmm15, 92");
}



#[test]
fn enc_sse2_psraw3809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE4, 0x7D", "psraw xmm12, 125");
}



#[test]
fn enc_sse2_psraw3810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE4, 0x7A", "psraw xmm12, 122");
}



#[test]
fn enc_sse2_psraw3811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE7, 0x34", "psraw xmm15, 52");
}



#[test]
fn enc_sse2_psraw3812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE3, 0x1E", "psraw xmm3, 30");
}



#[test]
fn enc_sse2_psraw3813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm11, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE3, 0x1C", "psraw xmm11, 28");
}



#[test]
fn enc_sse2_psraw3814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0x38", "psraw xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_psraw3815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0xE4", "psraw xmm4, xmm4");
}



#[test]
fn enc_sse2_psraw3816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE1, 0x1A", "psraw xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_psraw3817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE1, 0xDF", "psraw xmm11, xmm15");
}



#[test]
fn enc_sse2_psraw3818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0x3A", "psraw xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrld3819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD3, 0x34", "psrld xmm11, 52");
}



#[test]
fn enc_sse2_psrld3820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD3, 0x75", "psrld xmm11, 117");
}



#[test]
fn enc_sse2_psrld3821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD3, 0x10", "psrld xmm11, 16");
}



#[test]
fn enc_sse2_psrld3822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD2, 0x3B", "psrld xmm2, 59");
}



#[test]
fn enc_sse2_psrld3823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm1, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD1, 0x02", "psrld xmm1, 2");
}



#[test]
fn enc_sse2_psrld3824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD2, 0xD3", "psrld xmm2, xmm11");
}



#[test]
fn enc_sse2_psrld3825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0x18", "psrld xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_psrld3826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD2, 0xD7", "psrld xmm2, xmm15");
}



#[test]
fn enc_sse2_psrld3827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0xD4", "psrld xmm2, xmm4");
}



#[test]
fn enc_sse2_psrldq3828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm4, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDC, 0x47", "psrldq xmm4, 71");
}



#[test]
fn enc_sse2_psrldq3829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm11, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDB, 0x1B", "psrldq xmm11, 27");
}



#[test]
fn enc_sse2_psrldq3830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm3, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDB, 0x58", "psrldq xmm3, 88");
}



#[test]
fn enc_sse2_psrldq3831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm1, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD9, 0x2D", "psrldq xmm1, 45");
}



#[test]
fn enc_sse2_psrldq3832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm11, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDB, 0x63", "psrldq xmm11, 99");
}



#[test]
fn enc_sse2_psrlq3833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm2, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD2, 0x5C", "psrlq xmm2, 92");
}



#[test]
fn enc_sse2_psrlq3834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD4, 0x76", "psrlq xmm4, 118");
}



#[test]
fn enc_sse2_psrlq3835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xD4, 0x59", "psrlq xmm12, 89");
}



#[test]
fn enc_sse2_psrlq3836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm4, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD4, 0x6E", "psrlq xmm4, 110");
}



#[test]
fn enc_sse2_psrlq3837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xD4, 0x3A", "psrlq xmm12, 58");
}



#[test]
fn enc_sse2_psrlq3838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0x1C, 0x42", "psrlq xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psrlq3839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0x04, 0x42", "psrlq xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psrlq3840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0xDC", "psrlq xmm3, xmm4");
}



#[test]
fn enc_sse2_psrlq3841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0xDB", "psrlq xmm11, xmm3");
}



#[test]
fn enc_sse2_psrlq3842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0x0A", "psrlq xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrlw3843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD4, 0x30", "psrlw xmm12, 48");
}



#[test]
fn enc_sse2_psrlw3844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm4, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD4, 0x56", "psrlw xmm4, 86");
}



#[test]
fn enc_sse2_psrlw3845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD3, 0x44", "psrlw xmm3, 68");
}



#[test]
fn enc_sse2_psrlw3846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD4, 0x26", "psrlw xmm12, 38");
}



#[test]
fn enc_sse2_psrlw3847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD2, 0x35", "psrlw xmm2, 53");
}



#[test]
fn enc_sse2_psrlw3848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD1, 0xFF", "psrlw xmm15, xmm15");
}



#[test]
fn enc_sse2_psrlw3849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xE2", "psrlw xmm4, xmm2");
}



#[test]
fn enc_sse2_psrlw3850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xC2", "psrlw xmm0, xmm2");
}



#[test]
fn enc_sse2_psrlw3851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xE0", "psrlw xmm12, xmm0");
}



#[test]
fn enc_sse2_psrlw3852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0x3C, 0x42", "psrlw xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubb3853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF8, 0xC7", "psubb xmm0, xmm15");
}



#[test]
fn enc_sse2_psubb3854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xD4", "psubb xmm2, xmm4");
}



#[test]
fn enc_sse2_psubb3855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xFB", "psubb xmm15, xmm3");
}



#[test]
fn enc_sse2_psubb3856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xD1", "psubb xmm2, xmm1");
}



#[test]
fn enc_sse2_psubb3857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xDA", "psubb xmm3, xmm2");
}



#[test]
fn enc_sse2_psubd3858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFA, 0xCF", "psubd xmm1, xmm15");
}



#[test]
fn enc_sse2_psubd3859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xD3", "psubd xmm2, xmm3");
}



#[test]
fn enc_sse2_psubd3860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0x3A", "psubd xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubd3861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFA, 0xDB", "psubd xmm11, xmm11");
}



#[test]
fn enc_sse2_psubd3862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xE4", "psubd xmm4, xmm4");
}



#[test]
fn enc_sse2_psubq3863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0xDB", "psubq xmm11, xmm3");
}



#[test]
fn enc_sse2_psubq3864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0x18", "psubq xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_psubq3865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xCC", "psubq xmm1, xmm4");
}



#[test]
fn enc_sse2_psubq3866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0x3C, 0x42", "psubq xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubq3867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0xDA", "psubq xmm11, xmm2");
}



#[test]
fn enc_sse2_psubq3868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x00", "psubq mm0, [rax]");
}



#[test]
fn enc_sse2_psubq3869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xE8", "psubq mm5, mm0");
}



#[test]
fn enc_sse2_psubq3870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x02", "psubq mm0, [rdx]");
}



#[test]
fn enc_sse2_psubq3871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x10", "psubq mm2, [rax]");
}



#[test]
fn enc_sse2_psubq3872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xD0", "psubq mm2, mm0");
}



#[test]
fn enc_sse2_psubsb3873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0x1A", "psubsb xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubsb3874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE8, 0xE3", "psubsb xmm12, xmm3");
}



#[test]
fn enc_sse2_psubsb3875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0xD0", "psubsb xmm2, xmm0");
}



#[test]
fn enc_sse2_psubsb3876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0x00", "psubsb xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_psubsw3877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0xE4", "psubsw xmm12, xmm4");
}



#[test]
fn enc_sse2_psubsw3878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0x0A", "psubsw xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubsw3879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0x20", "psubsw xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_psubsw3880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xE1", "psubsw xmm4, xmm1");
}



#[test]
fn enc_sse2_psubsw3881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE9, 0xE3", "psubsw xmm12, xmm3");
}



#[test]
fn enc_sse2_psubusb3882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0xFB", "psubusb xmm15, xmm3");
}



#[test]
fn enc_sse2_psubusb3883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0xCC", "psubusb xmm1, xmm4");
}



#[test]
fn enc_sse2_psubusb3884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0x10", "psubusb xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_psubusb3885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0xD3", "psubusb xmm2, xmm3");
}



#[test]
fn enc_sse2_psubusb3886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0xDA", "psubusb xmm3, xmm2");
}



#[test]
fn enc_sse2_psubusw3887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0x24, 0x42", "psubusw xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubusw3888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xE0", "psubusw xmm4, xmm0");
}



#[test]
fn enc_sse2_psubusw3889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0xDA", "psubusw xmm11, xmm2");
}



#[test]
fn enc_sse2_psubusw3890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD9, 0xE7", "psubusw xmm4, xmm15");
}



#[test]
fn enc_sse2_psubusw3891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD9, 0x3C, 0x42", "psubusw xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubw3892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0x1A", "psubw xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubw3893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xD3", "psubw xmm2, xmm3");
}



#[test]
fn enc_sse2_psubw3894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF9, 0xC4", "psubw xmm0, xmm12");
}



#[test]
fn enc_sse2_psubw3895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xCC", "psubw xmm1, xmm4");
}



#[test]
fn enc_sse2_psubw3896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF9, 0xCB", "psubw xmm1, xmm11");
}



#[test]
fn enc_sse2_punpckhbw3897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0x18", "punpckhbw xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_punpckhbw3898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0xD9", "punpckhbw xmm11, xmm1");
}



#[test]
fn enc_sse2_punpckhbw3899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0xFA", "punpckhbw xmm15, xmm2");
}



#[test]
fn enc_sse2_punpckhbw3900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x68, 0xE7", "punpckhbw xmm12, xmm15");
}



#[test]
fn enc_sse2_punpckhbw3901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0x20", "punpckhbw xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_punpckhdq3902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6A, 0xDB", "punpckhdq xmm3, xmm11");
}



#[test]
fn enc_sse2_punpckhdq3903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6A, 0xE7", "punpckhdq xmm12, xmm15");
}



#[test]
fn enc_sse2_punpckhdq3904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6A, 0xD3", "punpckhdq xmm2, xmm11");
}



#[test]
fn enc_sse2_punpckhdq3905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6A, 0xFF", "punpckhdq xmm15, xmm15");
}



#[test]
fn enc_sse2_punpckhdq3906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0xC2", "punpckhdq xmm0, xmm2");
}



#[test]
fn enc_sse2_punpckhqdq3907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xE3", "punpckhqdq xmm4, xmm3");
}



#[test]
fn enc_sse2_punpckhqdq3908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6D, 0xE4", "punpckhqdq xmm12, xmm4");
}



#[test]
fn enc_sse2_punpckhqdq3909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xC4", "punpckhqdq xmm0, xmm4");
}



#[test]
fn enc_sse2_punpckhqdq3910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6D, 0xFA", "punpckhqdq xmm15, xmm2");
}



#[test]
fn enc_sse2_punpckhqdq3911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0x12", "punpckhqdq xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhwd3912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0xDB", "punpckhwd xmm3, xmm3");
}



#[test]
fn enc_sse2_punpckhwd3913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x69, 0xC3", "punpckhwd xmm0, xmm11");
}



#[test]
fn enc_sse2_punpckhwd3914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0xE3", "punpckhwd xmm12, xmm3");
}



#[test]
fn enc_sse2_punpckhwd3915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0x38", "punpckhwd xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_punpckhwd3916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0x1C, 0x42", "punpckhwd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpcklbw3917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x60, 0xC7", "punpcklbw xmm0, xmm15");
}



#[test]
fn enc_sse2_punpcklbw3918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x60, 0xDF", "punpcklbw xmm3, xmm15");
}



#[test]
fn enc_sse2_punpcklbw3919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0x04, 0x42", "punpcklbw xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpcklbw3920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x60, 0xE4", "punpcklbw xmm12, xmm4");
}



#[test]
fn enc_sse2_punpcklbw3921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0x1C, 0x42", "punpcklbw xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckldq3922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xDF", "punpckldq xmm3, xmm15");
}



#[test]
fn enc_sse2_punpckldq3923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xE4", "punpckldq xmm4, xmm12");
}



#[test]
fn enc_sse2_punpckldq3924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xD2", "punpckldq xmm2, xmm2");
}



#[test]
fn enc_sse2_punpckldq3925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x62, 0x18", "punpckldq xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_punpckldq3926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xD7", "punpckldq xmm2, xmm15");
}



#[test]
fn enc_sse2_punpcklqdq3927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6C, 0x38", "punpcklqdq xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_punpcklqdq3928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xC4", "punpcklqdq xmm0, xmm4");
}



#[test]
fn enc_sse2_punpcklqdq3929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6C, 0xFB", "punpcklqdq xmm15, xmm3");
}



#[test]
fn enc_sse2_punpcklqdq3930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6C, 0xDF", "punpcklqdq xmm3, xmm15");
}



#[test]
fn enc_sse2_punpcklwd3931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0xD9", "punpcklwd xmm3, xmm1");
}



#[test]
fn enc_sse2_punpcklwd3932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x61, 0xDC", "punpcklwd xmm11, xmm12");
}



#[test]
fn enc_sse2_punpcklwd3933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x61, 0xE7", "punpcklwd xmm12, xmm15");
}



#[test]
fn enc_sse2_punpcklwd3934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0x22", "punpcklwd xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpcklwd3935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0x24, 0x42", "punpcklwd xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pxor3936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0xC1", "pxor xmm0, xmm1");
}



#[test]
fn enc_sse2_pxor3937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xDB", "pxor xmm3, xmm11");
}



#[test]
fn enc_sse2_pxor3938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xE4", "pxor xmm4, xmm12");
}



#[test]
fn enc_sse2_pxor3939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0xC9", "pxor xmm1, xmm1");
}



#[test]
fn enc_sse2_pxor3940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xDC", "pxor xmm3, xmm12");
}



#[test]
fn enc_sse2_shufpd3941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm2, xmm15, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC6, 0xD7, 0x13", "shufpd xmm2, xmm15, 19");
}



#[test]
fn enc_sse2_shufpd3942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm11, OWORD [rax * 2 + rdx], 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC6, 0x1C, 0x42, 0x49", "shufpd xmm11, OWORD [rax * 2 + rdx], 73");
}



#[test]
fn enc_sse2_shufpd3943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm1, xmm2, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xCA, 0x24", "shufpd xmm1, xmm2, 36");
}



#[test]
fn enc_sse2_shufpd3944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm11, xmm11, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xC6, 0xDB, 0x0E", "shufpd xmm11, xmm11, 14");
}



#[test]
fn enc_sse2_shufpd3945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm1, xmm2, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xCA, 0x13", "shufpd xmm1, xmm2, 19");
}



#[test]
fn enc_sse2_sqrtpd3946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0xE0", "sqrtpd xmm12, xmm0");
}



#[test]
fn enc_sse2_sqrtpd3947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xE2", "sqrtpd xmm4, xmm2");
}



#[test]
fn enc_sse2_sqrtpd3948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0x08", "sqrtpd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_sqrtpd3949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x51, 0xC4", "sqrtpd xmm0, xmm12");
}



#[test]
fn enc_sse2_sqrtpd3950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x51, 0xDB", "sqrtpd xmm11, xmm11");
}



#[test]
fn enc_sse2_sqrtsd3951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xF9", "sqrtsd xmm15, xmm1");
}



#[test]
fn enc_sse2_sqrtsd3952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xDB", "sqrtsd xmm3, xmm11");
}



#[test]
fn enc_sse2_sqrtsd3953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xFB", "sqrtsd xmm15, xmm3");
}



#[test]
fn enc_sse2_sqrtsd3954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x51, 0xE3", "sqrtsd xmm4, xmm11");
}



#[test]
fn enc_sse2_sqrtsd3955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xDB", "sqrtsd xmm11, xmm3");
}



#[test]
fn enc_sse2_sqrtsd3956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0x18", "sqrtsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_sqrtsd3957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x00", "sqrtsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_sqrtsd3958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x18", "sqrtsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_sqrtsd3959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0x20", "sqrtsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_sqrtsd3960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0x38", "sqrtsd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_subpd3961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5C, 0x1A", "subpd xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_subpd3962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5C, 0xFF", "subpd xmm15, xmm15");
}



#[test]
fn enc_sse2_subpd3963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0xD9", "subpd xmm11, xmm1");
}



#[test]
fn enc_sse2_subpd3964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0x22", "subpd xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_subpd3965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0xE0", "subpd xmm12, xmm0");
}



#[test]
fn enc_sse2_subsd3966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xC1", "subsd xmm0, xmm1");
}



#[test]
fn enc_sse2_subsd3967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5C, 0xD7", "subsd xmm2, xmm15");
}



#[test]
fn enc_sse2_subsd3968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0xE3", "subsd xmm12, xmm3");
}



#[test]
fn enc_sse2_subsd3969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xE3", "subsd xmm4, xmm3");
}



#[test]
fn enc_sse2_subsd3970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xFF", "subsd xmm15, xmm15");
}



#[test]
fn enc_sse2_subsd3971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x60, 0x10", "subsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_subsd3972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0x14, 0x42", "subsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_subsd3973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0x08", "subsd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_subsd3974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x3C, 0x42", "subsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_subsd3975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x18", "subsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd3976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2E, 0xE4", "ucomisd xmm4, xmm12");
}



#[test]
fn enc_sse2_ucomisd3977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0xFA", "ucomisd xmm15, xmm2");
}



#[test]
fn enc_sse2_ucomisd3978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2E, 0xC3", "ucomisd xmm0, xmm11");
}



#[test]
fn enc_sse2_ucomisd3979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xE3", "ucomisd xmm4, xmm3");
}



#[test]
fn enc_sse2_ucomisd3980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x1C, 0x42", "ucomisd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_ucomisd3981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x38", "ucomisd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd3982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x20", "ucomisd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd3983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x14, 0x42", "ucomisd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_ucomisd3984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x60, 0x10", "ucomisd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_unpckhpd3985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xDC", "unpckhpd xmm11, xmm12");
}



#[test]
fn enc_sse2_unpckhpd3986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xD0", "unpckhpd xmm2, xmm0");
}



#[test]
fn enc_sse2_unpckhpd3987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x15, 0x1C, 0x42", "unpckhpd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_unpckhpd3988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xE4", "unpckhpd xmm12, xmm12");
}



#[test]
fn enc_sse2_unpckhpd3989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x15, 0xE3", "unpckhpd xmm12, xmm11");
}



#[test]
fn enc_sse2_unpcklpd3990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x14, 0xCB", "unpcklpd xmm1, xmm11");
}



#[test]
fn enc_sse2_unpcklpd3991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0xF8", "unpcklpd xmm15, xmm0");
}



#[test]
fn enc_sse2_unpcklpd3992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0x18", "unpcklpd xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_unpcklpd3993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0xE0", "unpcklpd xmm12, xmm0");
}



#[test]
fn enc_sse2_unpcklpd3994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x14, 0xC7", "unpcklpd xmm0, xmm15");
}



#[test]
fn enc_sse2_xorpd3995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x57, 0xCB", "xorpd xmm1, xmm11");
}



#[test]
fn enc_sse2_xorpd3996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x57, 0x20", "xorpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_xorpd3997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xC1", "xorpd xmm0, xmm1");
}



#[test]
fn enc_sse2_xorpd3998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xCC", "xorpd xmm1, xmm4");
}



#[test]
fn enc_sse2_xorpd3999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0x24, 0x42", "xorpd xmm4, OWORD [rax * 2 + rdx]");
}


