
#[test]
fn enc_sse2_addpd3300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0x18", "addpd xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_addpd3301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xD1", "addpd xmm2, xmm1");
}



#[test]
fn enc_sse2_addpd3302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xE2", "addpd xmm4, xmm2");
}



#[test]
fn enc_sse2_addpd3303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0xCC", "addpd xmm1, xmm4");
}



#[test]
fn enc_sse2_addpd3304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addpd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x58, 0x00", "addpd xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_addsd3305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xD2", "addsd xmm2, xmm2");
}



#[test]
fn enc_sse2_addsd3306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x58, 0xCF", "addsd xmm1, xmm15");
}



#[test]
fn enc_sse2_addsd3307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x58, 0xE7", "addsd xmm4, xmm15");
}



#[test]
fn enc_sse2_addsd3308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0xD4", "addsd xmm2, xmm4");
}



#[test]
fn enc_sse2_addsd3309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0xD8", "addsd xmm11, xmm0");
}



#[test]
fn enc_sse2_addsd3310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x18", "addsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_addsd3311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x1C, 0x42", "addsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd3312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x78, 0x10", "addsd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_addsd3313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x58, 0x0C, 0x42", "addsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_addsd3314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x58, 0x3C, 0x42", "addsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_andnpd3315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xD0", "andnpd xmm2, xmm0");
}



#[test]
fn enc_sse2_andnpd3316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x55, 0x20", "andnpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_andnpd3317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xC1", "andnpd xmm0, xmm1");
}



#[test]
fn enc_sse2_andnpd3318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x55, 0xD4", "andnpd xmm2, xmm4");
}



#[test]
fn enc_sse2_andnpd3319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andnpd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x55, 0xD9", "andnpd xmm11, xmm1");
}



#[test]
fn enc_sse2_andpd3320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0xFA", "andpd xmm15, xmm2");
}



#[test]
fn enc_sse2_andpd3321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0xE4", "andpd xmm12, xmm4");
}



#[test]
fn enc_sse2_andpd3322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x54, 0x1C, 0x42", "andpd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_andpd3323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0x14, 0x42", "andpd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_andpd3324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; andpd xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x54, 0x24, 0x42", "andpd xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_clflush3325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clflush BYTE [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x38", "clflush BYTE [rax]");
}



#[test]
fn enc_sse2_clflush3326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clflush BYTE [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xAE, 0x3C, 0x42", "clflush BYTE [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_comisd3327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xD2", "comisd xmm2, xmm2");
}



#[test]
fn enc_sse2_comisd3328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x2F, 0xE3", "comisd xmm12, xmm11");
}



#[test]
fn enc_sse2_comisd3329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xDB", "comisd xmm11, xmm3");
}



#[test]
fn enc_sse2_comisd3330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0xDA", "comisd xmm11, xmm2");
}



#[test]
fn enc_sse2_comisd3331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0xE4", "comisd xmm4, xmm4");
}



#[test]
fn enc_sse2_comisd3332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x38", "comisd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse2_comisd3333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x18", "comisd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_comisd3334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2F, 0x1C, 0x42", "comisd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_comisd3335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; comisd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2F, 0x60, 0x10", "comisd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtdq2pd3336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0xE6, 0xE4", "cvtdq2pd xmm4, xmm12");
}



#[test]
fn enc_sse2_cvtdq2pd3337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0xE6, 0xDC", "cvtdq2pd xmm11, xmm12");
}



#[test]
fn enc_sse2_cvtdq2pd3338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0xC1", "cvtdq2pd xmm0, xmm1");
}



#[test]
fn enc_sse2_cvtdq2pd3339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0xE1", "cvtdq2pd xmm12, xmm1");
}



#[test]
fn enc_sse2_cvtdq2pd3340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0xE3", "cvtdq2pd xmm4, xmm3");
}



#[test]
fn enc_sse2_cvtdq2pd3341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x14, 0x42", "cvtdq2pd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2pd3342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0x20", "cvtdq2pd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2pd3343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x24, 0x42", "cvtdq2pd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2pd3344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xE6, 0x24, 0x42", "cvtdq2pd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtdq2pd3345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2pd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xE6, 0x18", "cvtdq2pd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2ps3346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5B, 0xC9", "cvtdq2ps xmm1, xmm1");
}



#[test]
fn enc_sse2_cvtdq2ps3347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5B, 0x20", "cvtdq2ps xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_cvtdq2ps3348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x45, 0x0F, 0x5B, 0xFB", "cvtdq2ps xmm15, xmm11");
}



#[test]
fn enc_sse2_cvtdq2ps3349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5B, 0xFC", "cvtdq2ps xmm15, xmm4");
}



#[test]
fn enc_sse2_cvtdq2ps3350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtdq2ps xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5B, 0x24, 0x42", "cvtdq2ps xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtpd2dq3351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0xE0", "cvtpd2dq xmm4, xmm0");
}



#[test]
fn enc_sse2_cvtpd2dq3352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xE6, 0xC3", "cvtpd2dq xmm0, xmm3");
}



#[test]
fn enc_sse2_cvtpd2dq3353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0xE3", "cvtpd2dq xmm12, xmm3");
}



#[test]
fn enc_sse2_cvtpd2dq3354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xE6, 0xE3", "cvtpd2dq xmm4, xmm11");
}



#[test]
fn enc_sse2_cvtpd2dq3355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2dq xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xE6, 0x1A", "cvtpd2dq xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtpd2pi3356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xDA", "cvtpd2pi mm3, xmm2");
}



#[test]
fn enc_sse2_cvtpd2pi3357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0x0A", "cvtpd2pi mm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvtpd2pi3358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0xEB", "cvtpd2pi mm5, xmm3");
}



#[test]
fn enc_sse2_cvtpd2pi3359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm5, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2D, 0x2C, 0x42", "cvtpd2pi mm5, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtpd2pi3360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2pi mm5, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2D, 0xEB", "cvtpd2pi mm5, xmm11");
}



#[test]
fn enc_sse2_cvtpd2ps3361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0xD4", "cvtpd2ps xmm2, xmm4");
}



#[test]
fn enc_sse2_cvtpd2ps3362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0x20", "cvtpd2ps xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_cvtpd2ps3363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5A, 0xF8", "cvtpd2ps xmm15, xmm0");
}



#[test]
fn enc_sse2_cvtpd2ps3364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5A, 0x08", "cvtpd2ps xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_cvtpd2ps3365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpd2ps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5A, 0xD7", "cvtpd2ps xmm2, xmm15");
}



#[test]
fn enc_sse2_cvtpi2pd3366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x0A", "cvtpi2pd xmm1, [rdx]");
}



#[test]
fn enc_sse2_cvtpi2pd3367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2A, 0x10", "cvtpi2pd xmm2, [rax]");
}



#[test]
fn enc_sse2_cvtpi2pd3368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0x20", "cvtpi2pd xmm12, [rax]");
}



#[test]
fn enc_sse2_cvtpi2pd3369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm15, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0x3A", "cvtpi2pd xmm15, [rdx]");
}



#[test]
fn enc_sse2_cvtpi2pd3370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtpi2pd xmm15, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2A, 0x38", "cvtpi2pd xmm15, [rax]");
}



#[test]
fn enc_sse2_cvtps2dq3371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5B, 0xFC", "cvtps2dq xmm15, xmm4");
}



#[test]
fn enc_sse2_cvtps2dq3372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5B, 0xFB", "cvtps2dq xmm15, xmm11");
}



#[test]
fn enc_sse2_cvtps2dq3373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0xD2", "cvtps2dq xmm2, xmm2");
}



#[test]
fn enc_sse2_cvtps2dq3374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5B, 0xFF", "cvtps2dq xmm15, xmm15");
}



#[test]
fn enc_sse2_cvtps2dq3375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2dq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5B, 0x08", "cvtps2dq xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_cvtps2pd3376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0xDA", "cvtps2pd xmm11, xmm2");
}



#[test]
fn enc_sse2_cvtps2pd3377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xC0", "cvtps2pd xmm0, xmm0");
}



#[test]
fn enc_sse2_cvtps2pd3378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x41, 0x0F, 0x5A, 0xC3", "cvtps2pd xmm0, xmm11");
}



#[test]
fn enc_sse2_cvtps2pd3379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xC3", "cvtps2pd xmm0, xmm3");
}



#[test]
fn enc_sse2_cvtps2pd3380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0xCB", "cvtps2pd xmm1, xmm3");
}



#[test]
fn enc_sse2_cvtps2pd3381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x50, 0x10", "cvtps2pd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtps2pd3382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x58, 0x10", "cvtps2pd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtps2pd3383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x44, 0x0F, 0x5A, 0x18", "cvtps2pd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtps2pd3384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtps2pd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x5A, 0x08", "cvtps2pd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si3385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD2", "cvtsd2si rdx, xmm2");
}



#[test]
fn enc_sse2_cvtsd2si3386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xD4", "cvtsd2si rdx, xmm12");
}



#[test]
fn enc_sse2_cvtsd2si3387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xC0", "cvtsd2si rax, xmm0");
}



#[test]
fn enc_sse2_cvtsd2si3388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0xD4", "cvtsd2si rdx, xmm4");
}



#[test]
fn enc_sse2_cvtsd2si3389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2D, 0xC3", "cvtsd2si rax, xmm11");
}



#[test]
fn enc_sse2_cvtsd2si3390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x10", "cvtsd2si rdx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si3391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x40, 0x10", "cvtsd2si rax, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si3392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x48, 0x10", "cvtsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si3393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x04, 0x42", "cvtsd2si rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2D, 0x14, 0x42", "cvtsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2si3395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xC3", "cvtsd2si eax, xmm11");
}



#[test]
fn enc_sse2_cvtsd2si3396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0xD4", "cvtsd2si edx, xmm4");
}



#[test]
fn enc_sse2_cvtsd2si3397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xC7", "cvtsd2si eax, xmm15");
}



#[test]
fn enc_sse2_cvtsd2si3398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2D, 0xD3", "cvtsd2si edx, xmm11");
}



#[test]
fn enc_sse2_cvtsd2si3399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x48, 0x10", "cvtsd2si ecx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si3400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x00", "cvtsd2si eax, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si3401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si eax, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x40, 0x10", "cvtsd2si eax, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2si3402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si ecx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x08", "cvtsd2si ecx, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2si3403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2si edx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2D, 0x50, 0x10", "cvtsd2si edx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss3404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xDB", "cvtsd2ss xmm3, xmm3");
}



#[test]
fn enc_sse2_cvtsd2ss3405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0xD1", "cvtsd2ss xmm2, xmm1");
}



#[test]
fn enc_sse2_cvtsd2ss3406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xDF", "cvtsd2ss xmm3, xmm15");
}



#[test]
fn enc_sse2_cvtsd2ss3407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0xD9", "cvtsd2ss xmm11, xmm1");
}



#[test]
fn enc_sse2_cvtsd2ss3408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5A, 0xCF", "cvtsd2ss xmm1, xmm15");
}



#[test]
fn enc_sse2_cvtsd2ss3409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0x18", "cvtsd2ss xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2ss3410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0x78, 0x10", "cvtsd2ss xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsd2ss3411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x0C, 0x42", "cvtsd2ss xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtsd2ss3412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5A, 0x00", "cvtsd2ss xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_cvtsd2ss3413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsd2ss xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5A, 0x60, 0x10", "cvtsd2ss xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtsi2sd3414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x08", "cvtsi2sd xmm1, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x4C, 0x0F, 0x2A, 0xF8", "cvtsi2sd xmm15, rax");
}



#[test]
fn enc_sse2_cvtsi2sd3416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x10", "cvtsi2sd xmm2, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm4, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2A, 0xE0", "cvtsi2sd xmm4, rax");
}



#[test]
fn enc_sse2_cvtsi2sd3418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x20", "cvtsi2sd xmm4, [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0x18", "cvtsi2sd xmm3, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtsi2sd3420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm15, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2A, 0xF8", "cvtsi2sd xmm15, eax");
}



#[test]
fn enc_sse2_cvtsi2sd3421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm4, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0xE0", "cvtsi2sd xmm4, eax");
}



#[test]
fn enc_sse2_cvtsi2sd3422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm0, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2A, 0xC0", "cvtsi2sd xmm0, eax");
}



#[test]
fn enc_sse2_cvtsi2sd3423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtsi2sd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2A, 0x18", "cvtsi2sd xmm11, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd3424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xDC", "cvtss2sd xmm3, xmm4");
}



#[test]
fn enc_sse2_cvtss2sd3425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xCB", "cvtss2sd xmm1, xmm11");
}



#[test]
fn enc_sse2_cvtss2sd3426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xD3", "cvtss2sd xmm2, xmm11");
}



#[test]
fn enc_sse2_cvtss2sd3427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0xCC", "cvtss2sd xmm1, xmm4");
}



#[test]
fn enc_sse2_cvtss2sd3428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x5A, 0xE7", "cvtss2sd xmm4, xmm15");
}



#[test]
fn enc_sse2_cvtss2sd3429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm2, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x50, 0x10", "cvtss2sd xmm2, DWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvtss2sd3430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5A, 0x18", "cvtss2sd xmm11, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd3431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x18", "cvtss2sd xmm3, DWORD [rax]");
}



#[test]
fn enc_sse2_cvtss2sd3432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm3, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x1C, 0x42", "cvtss2sd xmm3, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvtss2sd3433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvtss2sd xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5A, 0x60, 0x10", "cvtss2sd xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvttpd2dq3434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD3", "cvttpd2dq xmm2, xmm11");
}



#[test]
fn enc_sse2_cvttpd2dq3435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE6, 0xD7", "cvttpd2dq xmm2, xmm15");
}



#[test]
fn enc_sse2_cvttpd2dq3436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0xD4", "cvttpd2dq xmm2, xmm4");
}



#[test]
fn enc_sse2_cvttpd2dq3437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0x08", "cvttpd2dq xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_cvttpd2dq3438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2dq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE6, 0xE4", "cvttpd2dq xmm4, xmm4");
}



#[test]
fn enc_sse2_cvttpd2pi3439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xEB", "cvttpd2pi mm5, xmm3");
}



#[test]
fn enc_sse2_cvttpd2pi3440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xE0", "cvttpd2pi mm4, xmm0");
}



#[test]
fn enc_sse2_cvttpd2pi3441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xDC", "cvttpd2pi mm3, xmm4");
}



#[test]
fn enc_sse2_cvttpd2pi3442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xDB", "cvttpd2pi mm3, xmm3");
}



#[test]
fn enc_sse2_cvttpd2pi3443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttpd2pi mm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2C, 0xCA", "cvttpd2pi mm1, xmm2");
}



#[test]
fn enc_sse2_cvttps2dq3444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5B, 0xFA", "cvttps2dq xmm15, xmm2");
}



#[test]
fn enc_sse2_cvttps2dq3445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0xC3", "cvttps2dq xmm0, xmm3");
}



#[test]
fn enc_sse2_cvttps2dq3446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x5B, 0xFB", "cvttps2dq xmm15, xmm3");
}



#[test]
fn enc_sse2_cvttps2dq3447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttps2dq xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x5B, 0x1A", "cvttps2dq xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_cvttsd2si3448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xCF", "cvttsd2si rcx, xmm15");
}



#[test]
fn enc_sse2_cvttsd2si3449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xC8", "cvttsd2si rcx, xmm0");
}



#[test]
fn enc_sse2_cvttsd2si3450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD1", "cvttsd2si rdx, xmm1");
}



#[test]
fn enc_sse2_cvttsd2si3451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0xD3", "cvttsd2si rdx, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si3452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x49, 0x0F, 0x2C, 0xD3", "cvttsd2si rdx, xmm11");
}



#[test]
fn enc_sse2_cvttsd2si3453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x00", "cvttsd2si rax, QWORD [rax]");
}



#[test]
fn enc_sse2_cvttsd2si3454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x14, 0x42", "cvttsd2si rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si3455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x48, 0x10", "cvttsd2si rcx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvttsd2si3456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x48, 0x0F, 0x2C, 0x0C, 0x42", "cvttsd2si rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si3457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si edx, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2C, 0xD4", "cvttsd2si edx, xmm12");
}



#[test]
fn enc_sse2_cvttsd2si3458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2C, 0xC3", "cvttsd2si eax, xmm11");
}



#[test]
fn enc_sse2_cvttsd2si3459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2C, 0xC7", "cvttsd2si eax, xmm15");
}



#[test]
fn enc_sse2_cvttsd2si3460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0xC3", "cvttsd2si eax, xmm3");
}



#[test]
fn enc_sse2_cvttsd2si3461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x2C, 0xCF", "cvttsd2si ecx, xmm15");
}



#[test]
fn enc_sse2_cvttsd2si3462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si edx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x14, 0x42", "cvttsd2si edx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_cvttsd2si3463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si ecx, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x48, 0x10", "cvttsd2si ecx, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_cvttsd2si3464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; cvttsd2si eax, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2C, 0x40, 0x10", "cvttsd2si eax, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_divpd3465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5E, 0xE3", "divpd xmm4, xmm11");
}



#[test]
fn enc_sse2_divpd3466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0x3A", "divpd xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_divpd3467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xF8", "divpd xmm15, xmm0");
}



#[test]
fn enc_sse2_divpd3468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5E, 0xF9", "divpd xmm15, xmm1");
}



#[test]
fn enc_sse2_divpd3469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5E, 0x18", "divpd xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_divsd3470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xDC", "divsd xmm3, xmm4");
}



#[test]
fn enc_sse2_divsd3471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0xD1", "divsd xmm2, xmm1");
}



#[test]
fn enc_sse2_divsd3472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xDC", "divsd xmm3, xmm12");
}



#[test]
fn enc_sse2_divsd3473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0xFB", "divsd xmm15, xmm3");
}



#[test]
fn enc_sse2_divsd3474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5E, 0xCF", "divsd xmm1, xmm15");
}



#[test]
fn enc_sse2_divsd3475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x40, 0x10", "divsd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_divsd3476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5E, 0x50, 0x10", "divsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_divsd3477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0x18", "divsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_divsd3478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0x1C, 0x42", "divsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_divsd3479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; divsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5E, 0x3C, 0x42", "divsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maskmovdqu3480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xD9", "maskmovdqu xmm3, xmm1");
}



#[test]
fn enc_sse2_maskmovdqu3481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF7, 0xFB", "maskmovdqu xmm15, xmm11");
}



#[test]
fn enc_sse2_maskmovdqu3482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF7, 0xD0", "maskmovdqu xmm2, xmm0");
}



#[test]
fn enc_sse2_maskmovdqu3483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xE3", "maskmovdqu xmm12, xmm3");
}



#[test]
fn enc_sse2_maskmovdqu3484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maskmovdqu xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF7, 0xE1", "maskmovdqu xmm12, xmm1");
}



#[test]
fn enc_sse2_maxpd3485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5F, 0xFF", "maxpd xmm15, xmm15");
}



#[test]
fn enc_sse2_maxpd3486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5F, 0x18", "maxpd xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_maxpd3487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0x1A", "maxpd xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_maxpd3488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0xF9", "maxpd xmm15, xmm1");
}



#[test]
fn enc_sse2_maxpd3489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxpd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5F, 0x3A", "maxpd xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_maxsd3490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xC1", "maxsd xmm0, xmm1");
}



#[test]
fn enc_sse2_maxsd3491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xD4", "maxsd xmm2, xmm4");
}



#[test]
fn enc_sse2_maxsd3492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0xE1", "maxsd xmm4, xmm1");
}



#[test]
fn enc_sse2_maxsd3493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xFC", "maxsd xmm15, xmm4");
}



#[test]
fn enc_sse2_maxsd3494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5F, 0xE0", "maxsd xmm12, xmm0");
}



#[test]
fn enc_sse2_maxsd3495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x04, 0x42", "maxsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maxsd3496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x60, 0x10", "maxsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_maxsd3497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x20", "maxsd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_maxsd3498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x24, 0x42", "maxsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_maxsd3499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; maxsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5F, 0x1C, 0x42", "maxsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_minpd3500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xDF", "minpd xmm11, xmm15");
}



#[test]
fn enc_sse2_minpd3501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0xE0", "minpd xmm12, xmm0");
}



#[test]
fn enc_sse2_minpd3502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5D, 0xFB", "minpd xmm15, xmm11");
}



#[test]
fn enc_sse2_minpd3503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x5D, 0x1A", "minpd xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_minpd3504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minpd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5D, 0xDB", "minpd xmm11, xmm3");
}



#[test]
fn enc_sse2_minsd3505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xE0", "minsd xmm4, xmm0");
}



#[test]
fn enc_sse2_minsd3506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0xE4", "minsd xmm4, xmm4");
}



#[test]
fn enc_sse2_minsd3507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5D, 0xE4", "minsd xmm4, xmm12");
}



#[test]
fn enc_sse2_minsd3508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0xE2", "minsd xmm12, xmm2");
}



#[test]
fn enc_sse2_minsd3509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5D, 0xE7", "minsd xmm12, xmm15");
}



#[test]
fn enc_sse2_minsd3510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x1C, 0x42", "minsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_minsd3511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5D, 0x58, 0x10", "minsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_minsd3512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0x04, 0x42", "minsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_minsd3513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; minsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5D, 0x24, 0x42", "minsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd3514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x10", "movapd OWORD [rax], xmm2");
}



#[test]
fn enc_sse2_movapd3515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x1C, 0x42", "movapd OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movapd3516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x58, 0x10", "movapd OWORD [rax + 16], xmm3");
}



#[test]
fn enc_sse2_movapd3517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x0C, 0x42", "movapd OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movapd3518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd OWORD [rax + 16], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x29, 0x40, 0x10", "movapd OWORD [rax + 16], xmm0");
}



#[test]
fn enc_sse2_movapd3519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x0C, 0x42", "movapd xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd3520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0x1C, 0x42", "movapd xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd3521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x1C, 0x42", "movapd xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movapd3522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x00", "movapd xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_movapd3523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm3, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0x58, 0x10", "movapd xmm3, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movapd3524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xC3", "movapd xmm0, xmm3");
}



#[test]
fn enc_sse2_movapd3525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xC2", "movapd xmm0, xmm2");
}



#[test]
fn enc_sse2_movapd3526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xE4", "movapd xmm12, xmm4");
}



#[test]
fn enc_sse2_movapd3527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x28, 0xD3", "movapd xmm2, xmm11");
}



#[test]
fn enc_sse2_movapd3528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xD3", "movapd xmm2, xmm3");
}



#[test]
fn enc_sse2_movapd3529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x28, 0xE4", "movapd xmm12, xmm4");
}



#[test]
fn enc_sse2_movapd3530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xCA", "movapd xmm1, xmm2");
}



#[test]
fn enc_sse2_movapd3531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x28, 0xDF", "movapd xmm11, xmm15");
}



#[test]
fn enc_sse2_movapd3532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x28, 0xFC", "movapd xmm15, xmm12");
}



#[test]
fn enc_sse2_movapd3533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movapd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x28, 0xC0", "movapd xmm0, xmm0");
}



#[test]
fn enc_sse2_movd3534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax + 16], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x40, 0x10", "movd DWORD [rax + 16], xmm0");
}



#[test]
fn enc_sse2_movd3535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax + 16], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x50, 0x10", "movd DWORD [rax + 16], xmm2");
}



#[test]
fn enc_sse2_movd3536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x58, 0x10", "movd DWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse2_movd3537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x1C, 0x42", "movd DWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse2_movd3538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd eax, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0xD8", "movd eax, xmm11");
}



#[test]
fn enc_sse2_movd3539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x08", "movd DWORD [rax], xmm1");
}



#[test]
fn enc_sse2_movd3540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x38", "movd DWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movd3541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7E, 0x18", "movd DWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movd3542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd DWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7E, 0x10", "movd DWORD [rax], xmm2");
}



#[test]
fn enc_sse2_movd3543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x24, 0x42", "movd xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd3544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x60, 0x10", "movd xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse2_movd3545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x40, 0x10", "movd xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse2_movd3546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x3C, 0x42", "movd xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movd3547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x20", "movd xmm12, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm3, eax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0xD8", "movd xmm3, eax");
}



#[test]
fn enc_sse2_movd3549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6E, 0x18", "movd xmm11, DWORD [rax]");
}



#[test]
fn enc_sse2_movd3550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6E, 0x18", "movd xmm3, DWORD [rax]");
}



#[test]
fn enc_sse2_movdq2q3551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xC7", "movdq2q mm0, xmm15");
}



#[test]
fn enc_sse2_movdq2q3552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm5, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xEB", "movdq2q mm5, xmm3");
}



#[test]
fn enc_sse2_movdq2q3553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD6, 0xE4", "movdq2q mm4, xmm12");
}



#[test]
fn enc_sse2_movdq2q3554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xD8", "movdq2q mm3, xmm0");
}



#[test]
fn enc_sse2_movdq2q3555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdq2q mm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD6, 0xDB", "movdq2q mm3, xmm3");
}



#[test]
fn enc_sse2_movdqa3556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x0C, 0x42", "movdqa xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqa3557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x10", "movdqa xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqa3558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x20", "movdqa xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqa3559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x14, 0x42", "movdqa xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movdqa3560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0x50, 0x10", "movdqa xmm2, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqa3561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x60, 0x10", "movdqa OWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse2_movdqa3562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x3C, 0x42", "movdqa OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movdqa3563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x78, 0x10", "movdqa OWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse2_movdqa3564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7F, 0x18", "movdqa OWORD [rax], xmm3");
}



#[test]
fn enc_sse2_movdqa3565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7F, 0x18", "movdqa OWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movdqa3566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xD7", "movdqa xmm2, xmm15");
}



#[test]
fn enc_sse2_movdqa3567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6F, 0xC7", "movdqa xmm0, xmm15");
}



#[test]
fn enc_sse2_movdqa3568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xE0", "movdqa xmm12, xmm0");
}



#[test]
fn enc_sse2_movdqa3569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6F, 0xE7", "movdqa xmm12, xmm15");
}



#[test]
fn enc_sse2_movdqa3570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xD9", "movdqa xmm11, xmm1");
}



#[test]
fn enc_sse2_movdqa3571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xF9", "movdqa xmm15, xmm1");
}



#[test]
fn enc_sse2_movdqa3572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xD2", "movdqa xmm2, xmm2");
}



#[test]
fn enc_sse2_movdqa3573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6F, 0xC0", "movdqa xmm0, xmm0");
}



#[test]
fn enc_sse2_movdqa3574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqa xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6F, 0xF8", "movdqa xmm15, xmm0");
}



#[test]
fn enc_sse2_movdqu3575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD0", "movdqu xmm2, xmm0");
}



#[test]
fn enc_sse2_movdqu3576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xE3", "movdqu xmm12, xmm3");
}



#[test]
fn enc_sse2_movdqu3577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xD8", "movdqu xmm3, xmm0");
}



#[test]
fn enc_sse2_movdqu3578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x6F, 0xC4", "movdqu xmm0, xmm12");
}



#[test]
fn enc_sse2_movdqu3579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x6F, 0xE3", "movdqu xmm4, xmm11");
}



#[test]
fn enc_sse2_movdqu3580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0xDB", "movdqu xmm3, xmm3");
}



#[test]
fn enc_sse2_movdqu3581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xDB", "movdqu xmm11, xmm3");
}



#[test]
fn enc_sse2_movdqu3582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x6F, 0xE3", "movdqu xmm12, xmm11");
}



#[test]
fn enc_sse2_movdqu3583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0xE0", "movdqu xmm12, xmm0");
}



#[test]
fn enc_sse2_movdqu3584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x6F, 0xD4", "movdqu xmm2, xmm12");
}



#[test]
fn enc_sse2_movdqu3585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x04, 0x42", "movdqu OWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_sse2_movdqu3586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7F, 0x58, 0x10", "movdqu OWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse2_movdqu3587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x10", "movdqu OWORD [rax], xmm2");
}



#[test]
fn enc_sse2_movdqu3588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7F, 0x20", "movdqu OWORD [rax], xmm4");
}



#[test]
fn enc_sse2_movdqu3589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm0, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x40, 0x10", "movdqu xmm0, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqu3590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm2, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x50, 0x10", "movdqu xmm2, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movdqu3591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x6F, 0x20", "movdqu xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_movdqu3592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movdqu xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x6F, 0x20", "movdqu xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_movhpd3593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm12, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x16, 0x20", "movhpd xmm12, [rax]");
}



#[test]
fn enc_sse2_movhpd3594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x10", "movhpd xmm2, [rax]");
}



#[test]
fn enc_sse2_movhpd3595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd xmm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x16, 0x18", "movhpd xmm3, [rax]");
}



#[test]
fn enc_sse2_movhpd3596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x20", "movhpd [rax], xmm12");
}



#[test]
fn enc_sse2_movhpd3597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x17, 0x38", "movhpd [rax], xmm15");
}



#[test]
fn enc_sse2_movhpd3598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x18", "movhpd [rax], xmm3");
}



#[test]
fn enc_sse2_movhpd3599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movhpd [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x17, 0x20", "movhpd [rax], xmm4");
}



#[test]
fn enc_sse2_movlpd3600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x08", "movlpd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_movlpd3601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x58, 0x10", "movlpd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movlpd3602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x50, 0x10", "movlpd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movlpd3603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x12, 0x0C, 0x42", "movlpd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movlpd3604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x24, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movlpd3605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x13, 0x24, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movlpd3606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x14, 0x42", "movlpd QWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse2_movlpd3607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x60, 0x10", "movlpd QWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse2_movlpd3608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movlpd QWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x13, 0x58, 0x10", "movlpd QWORD [rax + 16], xmm3");
}



#[test]
fn enc_sse2_movmskpd3609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rdx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xD0", "movmskpd rdx, xmm0");
}



#[test]
fn enc_sse2_movmskpd3610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xC8", "movmskpd rcx, xmm0");
}



#[test]
fn enc_sse2_movmskpd3611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rax, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x49, 0x0F, 0x50, 0xC4", "movmskpd rax, xmm12");
}



#[test]
fn enc_sse2_movmskpd3612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rcx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xCC", "movmskpd rcx, xmm4");
}



#[test]
fn enc_sse2_movmskpd3613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd rdx, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x50, 0xD1", "movmskpd rdx, xmm1");
}



#[test]
fn enc_sse2_movmskpd3614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd edx, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x50, 0xD7", "movmskpd edx, xmm15");
}



#[test]
fn enc_sse2_movmskpd3615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd ecx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xCC", "movmskpd ecx, xmm4");
}



#[test]
fn enc_sse2_movmskpd3616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd eax, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xC2", "movmskpd eax, xmm2");
}



#[test]
fn enc_sse2_movmskpd3617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movmskpd edx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x50, 0xD4", "movmskpd edx, xmm4");
}



#[test]
fn enc_sse2_movntdq3618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE7, 0x48, 0x10", "movntdq OWORD [rax + 16], xmm1");
}



#[test]
fn enc_sse2_movntdq3619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x24, 0x42", "movntdq OWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movntdq3620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x18", "movntdq OWORD [rax], xmm11");
}



#[test]
fn enc_sse2_movntdq3621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdq OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE7, 0x38", "movntdq OWORD [rax], xmm15");
}



#[test]
fn enc_sse2_movntpd3622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x3C, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movntpd3623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2B, 0x20", "movntpd OWORD [rax], xmm12");
}



#[test]
fn enc_sse2_movntpd3624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x60, 0x10", "movntpd OWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse2_movntpd3625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntpd OWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2B, 0x24, 0x42", "movntpd OWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movq3626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xE4", "movq xmm12, xmm12");
}



#[test]
fn enc_sse2_movq3627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xD3", "movq xmm2, xmm3");
}



#[test]
fn enc_sse2_movq3628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xC4", "movq xmm0, xmm12");
}



#[test]
fn enc_sse2_movq3629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xD4", "movq xmm2, xmm12");
}



#[test]
fn enc_sse2_movq3630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x7E, 0xCC", "movq xmm1, xmm12");
}



#[test]
fn enc_sse2_movq3631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x04, 0x42", "movq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movq3632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x40, 0x10", "movq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movq3633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x24, 0x42", "movq xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movq3634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x08", "movq xmm1, QWORD [rax]");
}



#[test]
fn enc_sse2_movq3635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0x78, 0x10", "movq xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movq3636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0xCB", "movq xmm1, xmm3");
}



#[test]
fn enc_sse2_movq3637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xE3", "movq xmm12, xmm11");
}



#[test]
fn enc_sse2_movq3638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xE1", "movq xmm12, xmm1");
}



#[test]
fn enc_sse2_movq3639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x7E, 0xE7", "movq xmm12, xmm15");
}



#[test]
fn enc_sse2_movq3640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x7E, 0xFC", "movq xmm15, xmm4");
}



#[test]
fn enc_sse2_movq3641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x1C, 0x42", "movq QWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse2_movq3642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x24, 0x42", "movq QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movq3643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x60, 0x10", "movq QWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse2_movq3644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq QWORD [rax + 16], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x48, 0x10", "movq QWORD [rax + 16], xmm1");
}



#[test]
fn enc_sse2_movq3645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x7E, 0xC0", "movq rax, xmm0");
}



#[test]
fn enc_sse2_movq3646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD6, 0x38", "movq [rax], xmm15");
}



#[test]
fn enc_sse2_movq3647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD6, 0x08", "movq [rax], xmm1");
}



#[test]
fn enc_sse2_movq3648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq rax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x7E, 0xE0", "movq rax, xmm4");
}



#[test]
fn enc_sse2_movq3649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x08", "movq xmm1, [rax]");
}



#[test]
fn enc_sse2_movq3650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm15, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x6E, 0xF8", "movq xmm15, rax");
}



#[test]
fn enc_sse2_movq3651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x7E, 0x20", "movq xmm4, [rax]");
}



#[test]
fn enc_sse2_movq3652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq xmm1, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x6E, 0xC8", "movq xmm1, rax");
}



#[test]
fn enc_sse2_movq2dq3653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm12, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xE0", "movq2dq xmm12, mm0");
}



#[test]
fn enc_sse2_movq2dq3654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm3, mm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xDB", "movq2dq xmm3, mm3");
}



#[test]
fn enc_sse2_movq2dq3655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm0, mm5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xD6, 0xC5", "movq2dq xmm0, mm5");
}



#[test]
fn enc_sse2_movq2dq3656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm11, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xD8", "movq2dq xmm11, mm0");
}



#[test]
fn enc_sse2_movq2dq3657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movq2dq xmm15, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0xD6, 0xF8", "movq2dq xmm15, mm0");
}



#[test]
fn enc_sse2_movsd3658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xDB", "movsd xmm3, xmm3");
}



#[test]
fn enc_sse2_movsd3659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD9", "movsd xmm3, xmm1");
}



#[test]
fn enc_sse2_movsd3660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xE1", "movsd xmm12, xmm1");
}



#[test]
fn enc_sse2_movsd3661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xE2", "movsd xmm4, xmm2");
}



#[test]
fn enc_sse2_movsd3662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xD1", "movsd xmm2, xmm1");
}



#[test]
fn enc_sse2_movsd3663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x24, 0x42", "movsd QWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse2_movsd3664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x24, 0x42", "movsd QWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse2_movsd3665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x11, 0x3C, 0x42", "movsd QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movsd3666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd QWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x11, 0x0C, 0x42", "movsd QWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse2_movsd3667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xCB", "movsd xmm1, xmm3");
}



#[test]
fn enc_sse2_movsd3668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xD7", "movsd xmm2, xmm15");
}



#[test]
fn enc_sse2_movsd3669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0xF8", "movsd xmm15, xmm0");
}



#[test]
fn enc_sse2_movsd3670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0xC8", "movsd xmm1, xmm0");
}



#[test]
fn enc_sse2_movsd3671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x10, 0xE3", "movsd xmm4, xmm11");
}



#[test]
fn enc_sse2_movsd3672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x60, 0x10", "movsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movsd3673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x20", "movsd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_movsd3674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x40, 0x10", "movsd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movsd3675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x10, 0x48, 0x10", "movsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movsd3676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x10, 0x58, 0x10", "movsd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_movupd3677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x14, 0x42", "movupd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_movupd3678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x60, 0x10", "movupd xmm4, OWORD [rax + 16]");
}



#[test]
fn enc_sse2_movupd3679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0x10", "movupd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_movupd3680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC0", "movupd xmm0, xmm0");
}



#[test]
fn enc_sse2_movupd3681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xC3", "movupd xmm0, xmm3");
}



#[test]
fn enc_sse2_movupd3682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xDB", "movupd xmm11, xmm3");
}



#[test]
fn enc_sse2_movupd3683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x10, 0xE4", "movupd xmm12, xmm4");
}



#[test]
fn enc_sse2_movupd3684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xDC", "movupd xmm3, xmm4");
}



#[test]
fn enc_sse2_movupd3685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xE1", "movupd xmm4, xmm1");
}



#[test]
fn enc_sse2_movupd3686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x10, 0xC7", "movupd xmm0, xmm15");
}



#[test]
fn enc_sse2_movupd3687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x10, 0xD0", "movupd xmm2, xmm0");
}



#[test]
fn enc_sse2_movupd3688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x1C, 0x42", "movupd OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse2_movupd3689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x3C, 0x42", "movupd OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse2_movupd3690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax + 16], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x58, 0x10", "movupd OWORD [rax + 16], xmm11");
}



#[test]
fn enc_sse2_movupd3691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax + 16], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x11, 0x60, 0x10", "movupd OWORD [rax + 16], xmm12");
}



#[test]
fn enc_sse2_movupd3692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movupd OWORD [rax + 16], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x11, 0x58, 0x10", "movupd OWORD [rax + 16], xmm3");
}



#[test]
fn enc_sse2_mulpd3693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x59, 0xD4", "mulpd xmm2, xmm12");
}



#[test]
fn enc_sse2_mulpd3694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0xE4", "mulpd xmm4, xmm4");
}



#[test]
fn enc_sse2_mulpd3695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x59, 0xFC", "mulpd xmm15, xmm12");
}



#[test]
fn enc_sse2_mulpd3696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x59, 0x3A", "mulpd xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_mulpd3697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulpd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x59, 0xD9", "mulpd xmm3, xmm1");
}



#[test]
fn enc_sse2_mulsd3698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xE2", "mulsd xmm4, xmm2");
}



#[test]
fn enc_sse2_mulsd3699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x59, 0xC3", "mulsd xmm0, xmm11");
}



#[test]
fn enc_sse2_mulsd3700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0xD8", "mulsd xmm3, xmm0");
}



#[test]
fn enc_sse2_mulsd3701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x59, 0xE7", "mulsd xmm12, xmm15");
}



#[test]
fn enc_sse2_mulsd3702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0x18", "mulsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_mulsd3703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x59, 0x3C, 0x42", "mulsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_mulsd3704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0x1C, 0x42", "mulsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_mulsd3705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0x0C, 0x42", "mulsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_mulsd3706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mulsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x59, 0x00", "mulsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_orpd3707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x56, 0xC4", "orpd xmm0, xmm12");
}



#[test]
fn enc_sse2_orpd3708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0xDC", "orpd xmm11, xmm4");
}



#[test]
fn enc_sse2_orpd3709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x56, 0x14, 0x42", "orpd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_orpd3710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x56, 0x38", "orpd xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_orpd3711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; orpd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x56, 0xE4", "orpd xmm4, xmm12");
}



#[test]
fn enc_sse2_packssdw3712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6B, 0xCA", "packssdw xmm1, xmm2");
}



#[test]
fn enc_sse2_packssdw3713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6B, 0xDC", "packssdw xmm3, xmm12");
}



#[test]
fn enc_sse2_packssdw3714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6B, 0xE4", "packssdw xmm12, xmm4");
}



#[test]
fn enc_sse2_packssdw3715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packssdw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6B, 0xCF", "packssdw xmm1, xmm15");
}



#[test]
fn enc_sse2_packsswb3716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0xD3", "packsswb xmm2, xmm3");
}



#[test]
fn enc_sse2_packsswb3717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0xE4", "packsswb xmm4, xmm4");
}



#[test]
fn enc_sse2_packsswb3718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x63, 0x1C, 0x42", "packsswb xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_packsswb3719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x63, 0xDF", "packsswb xmm11, xmm15");
}



#[test]
fn enc_sse2_packsswb3720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packsswb xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x63, 0xFB", "packsswb xmm15, xmm11");
}



#[test]
fn enc_sse2_packuswb3721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xDB", "packuswb xmm3, xmm3");
}



#[test]
fn enc_sse2_packuswb3722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0x00", "packuswb xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_packuswb3723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x67, 0xE4", "packuswb xmm12, xmm4");
}



#[test]
fn enc_sse2_packuswb3724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x67, 0xD9", "packuswb xmm3, xmm1");
}



#[test]
fn enc_sse2_packuswb3725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packuswb xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x67, 0xFB", "packuswb xmm15, xmm11");
}



#[test]
fn enc_sse2_paddb3726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0x04, 0x42", "paddb xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddb3727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFC, 0xC4", "paddb xmm0, xmm12");
}



#[test]
fn enc_sse2_paddb3728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFC, 0xE3", "paddb xmm4, xmm11");
}



#[test]
fn enc_sse2_paddb3729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xCC", "paddb xmm1, xmm4");
}



#[test]
fn enc_sse2_paddb3730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddb xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFC, 0xE1", "paddb xmm4, xmm1");
}



#[test]
fn enc_sse2_paddd3731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFE, 0xDC", "paddd xmm3, xmm12");
}



#[test]
fn enc_sse2_paddd3732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFE, 0x20", "paddd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_paddd3733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFE, 0x10", "paddd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_paddd3734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFE, 0xC3", "paddd xmm0, xmm11");
}



#[test]
fn enc_sse2_paddd3735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFE, 0xDB", "paddd xmm11, xmm11");
}



#[test]
fn enc_sse2_paddq3736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD4, 0xFB", "paddq xmm15, xmm3");
}



#[test]
fn enc_sse2_paddq3737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD4, 0xCB", "paddq xmm1, xmm11");
}



#[test]
fn enc_sse2_paddq3738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD4, 0xC4", "paddq xmm0, xmm4");
}



#[test]
fn enc_sse2_paddq3739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD4, 0xCF", "paddq xmm1, xmm15");
}



#[test]
fn enc_sse2_paddq3740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD4, 0xD8", "paddq xmm11, xmm0");
}



#[test]
fn enc_sse2_paddsb3741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEC, 0xFC", "paddsb xmm15, xmm12");
}



#[test]
fn enc_sse2_paddsb3742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0xC1", "paddsb xmm0, xmm1");
}



#[test]
fn enc_sse2_paddsb3743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEC, 0x18", "paddsb xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_paddsb3744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEC, 0x1A", "paddsb xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddsb3745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsb xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEC, 0xFF", "paddsb xmm15, xmm15");
}



#[test]
fn enc_sse2_paddsw3746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xDC", "paddsw xmm3, xmm12");
}



#[test]
fn enc_sse2_paddsw3747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xED, 0xC0", "paddsw xmm0, xmm0");
}



#[test]
fn enc_sse2_paddsw3748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xED, 0xFF", "paddsw xmm15, xmm15");
}



#[test]
fn enc_sse2_paddsw3749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xED, 0xE7", "paddsw xmm4, xmm15");
}



#[test]
fn enc_sse2_paddsw3750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddsw xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xED, 0x3A", "paddsw xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddusb3751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDC, 0x3C, 0x42", "paddusb xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_paddusb3752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDC, 0x22", "paddusb xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddusb3753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDC, 0xDB", "paddusb xmm11, xmm11");
}



#[test]
fn enc_sse2_paddusb3754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xDC", "paddusb xmm3, xmm12");
}



#[test]
fn enc_sse2_paddusb3755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusb xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDC, 0xE4", "paddusb xmm4, xmm12");
}



#[test]
fn enc_sse2_paddusw3756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDD, 0xCC", "paddusw xmm1, xmm12");
}



#[test]
fn enc_sse2_paddusw3757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xCB", "paddusw xmm1, xmm3");
}



#[test]
fn enc_sse2_paddusw3758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDD, 0xC4", "paddusw xmm0, xmm12");
}



#[test]
fn enc_sse2_paddusw3759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDD, 0xC4", "paddusw xmm0, xmm4");
}



#[test]
fn enc_sse2_paddusw3760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddusw xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDD, 0x1A", "paddusw xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddw3761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0x12", "paddw xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_paddw3762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFD, 0xE3", "paddw xmm12, xmm11");
}



#[test]
fn enc_sse2_paddw3763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFD, 0xE2", "paddw xmm12, xmm2");
}



#[test]
fn enc_sse2_paddw3764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFD, 0xC9", "paddw xmm1, xmm1");
}



#[test]
fn enc_sse2_paddw3765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; paddw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xFD, 0xD4", "paddw xmm2, xmm12");
}



#[test]
fn enc_sse2_pand3766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0x24, 0x42", "pand xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pand3767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0x20", "pand xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_pand3768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDB, 0xC4", "pand xmm0, xmm12");
}



#[test]
fn enc_sse2_pand3769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDB, 0x02", "pand xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_pand3770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pand xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDB, 0xFA", "pand xmm15, xmm2");
}



#[test]
fn enc_sse2_pandn3771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xDF, 0xFF", "pandn xmm15, xmm15");
}



#[test]
fn enc_sse2_pandn3772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDF, 0x24, 0x42", "pandn xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pandn3773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x18", "pandn xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_pandn3774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDF, 0x08", "pandn xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_pandn3775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pandn xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDF, 0xDB", "pandn xmm3, xmm11");
}



#[test]
fn enc_sse2_pavgb3776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0x22", "pavgb xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_pavgb3777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0xDB", "pavgb xmm11, xmm3");
}



#[test]
fn enc_sse2_pavgb3778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE0, 0xCB", "pavgb xmm1, xmm11");
}



#[test]
fn enc_sse2_pavgb3779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE0, 0x38", "pavgb xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_pavgb3780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgb xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE0, 0xD4", "pavgb xmm2, xmm4");
}



#[test]
fn enc_sse2_pavgw3781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE3, 0xD9", "pavgw xmm11, xmm1");
}



#[test]
fn enc_sse2_pavgw3782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE3, 0xFC", "pavgw xmm15, xmm12");
}



#[test]
fn enc_sse2_pavgw3783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0x08", "pavgw xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_pavgw3784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE3, 0xD0", "pavgw xmm2, xmm0");
}



#[test]
fn enc_sse2_pavgw3785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgw xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE3, 0x3A", "pavgw xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_pextrw3786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm4, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC4, 0x3A", "pextrw eax, xmm4, 58");
}



#[test]
fn enc_sse2_pextrw3787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm12, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xC4, 0x18", "pextrw eax, xmm12, 24");
}



#[test]
fn enc_sse2_pextrw3788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm11, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xC3, 0x4B", "pextrw eax, xmm11, 75");
}



#[test]
fn enc_sse2_pextrw3789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm11, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xD3, 0x13", "pextrw edx, xmm11, 19");
}



#[test]
fn enc_sse2_pextrw3790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm4, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xCC, 0x4B", "pextrw ecx, xmm4, 75");
}



#[test]
fn enc_sse2_pinsrw3791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, cx, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xD9, 0x7E", "pinsrw xmm11, cx, 126");
}



#[test]
fn enc_sse2_pinsrw3792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, dx, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xE2, 0x6B", "pinsrw xmm4, dx, 107");
}



#[test]
fn enc_sse2_pinsrw3793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, cx, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE1, 0x1F", "pinsrw xmm12, cx, 31");
}



#[test]
fn enc_sse2_pinsrw3794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, dx, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD2, 0x38", "pinsrw xmm2, dx, 56");
}



#[test]
fn enc_sse2_pinsrw3795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, dx, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xE2, 0x7E", "pinsrw xmm4, dx, 126");
}



#[test]
fn enc_sse2_pinsrw3796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, edx, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE2, 0x08", "pinsrw xmm12, edx, 8");
}



#[test]
fn enc_sse2_pinsrw3797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, edx, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xCA, 0x23", "pinsrw xmm1, edx, 35");
}



#[test]
fn enc_sse2_pinsrw3798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, edx, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE2, 0x44", "pinsrw xmm12, edx, 68");
}



#[test]
fn enc_sse2_pinsrw3799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, eax, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0xE0, 0x0E", "pinsrw xmm12, eax, 14");
}



#[test]
fn enc_sse2_pinsrw3800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, eax, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0xD0, 0x2F", "pinsrw xmm2, eax, 47");
}



#[test]
fn enc_sse2_pinsrw3801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm1, [rax], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x08, 0x4D", "pinsrw xmm1, [rax], 77");
}



#[test]
fn enc_sse2_pinsrw3802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm4, [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x20, 0x58", "pinsrw xmm4, [rax], 88");
}



#[test]
fn enc_sse2_pinsrw3803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, [rax], 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x38, 0x54", "pinsrw xmm15, [rax], 84");
}



#[test]
fn enc_sse2_pinsrw3804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, [rax], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x10, 0x37", "pinsrw xmm2, [rax], 55");
}



#[test]
fn enc_sse2_pinsrw3805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm11, [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x18, 0x1B", "pinsrw xmm11, [rax], 27");
}



#[test]
fn enc_sse2_pinsrw3806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm2, WORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x10, 0x42", "pinsrw xmm2, WORD [rax], 66");
}



#[test]
fn enc_sse2_pinsrw3807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm12, WORD [rax], 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x20, 0x3B", "pinsrw xmm12, WORD [rax], 59");
}



#[test]
fn enc_sse2_pinsrw3808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm15, WORD [rax + 16], 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xC4, 0x78, 0x10, 0x61", "pinsrw xmm15, WORD [rax + 16], 97");
}



#[test]
fn enc_sse2_pinsrw3809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x00, 0x11", "pinsrw xmm0, WORD [rax], 17");
}



#[test]
fn enc_sse2_pinsrw3810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrw xmm0, WORD [rax + 16], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC4, 0x40, 0x10, 0x44", "pinsrw xmm0, WORD [rax + 16], 68");
}



#[test]
fn enc_sse2_pmaddwd3811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0x10", "pmaddwd xmm2, OWORD [rax]");
}



#[test]
fn enc_sse2_pmaddwd3812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0xC9", "pmaddwd xmm1, xmm1");
}



#[test]
fn enc_sse2_pmaddwd3813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF5, 0xFC", "pmaddwd xmm15, xmm4");
}



#[test]
fn enc_sse2_pmaddwd3814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaddwd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF5, 0x22", "pmaddwd xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmaxsw3815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xC0", "pmaxsw xmm0, xmm0");
}



#[test]
fn enc_sse2_pmaxsw3816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEE, 0xE3", "pmaxsw xmm12, xmm11");
}



#[test]
fn enc_sse2_pmaxsw3817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEE, 0xDB", "pmaxsw xmm11, xmm11");
}



#[test]
fn enc_sse2_pmaxsw3818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xD2", "pmaxsw xmm2, xmm2");
}



#[test]
fn enc_sse2_pmaxsw3819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEE, 0xE3", "pmaxsw xmm4, xmm3");
}



#[test]
fn enc_sse2_pmaxub3820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xE7", "pmaxub xmm4, xmm15");
}



#[test]
fn enc_sse2_pmaxub3821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDE, 0xC4", "pmaxub xmm0, xmm12");
}



#[test]
fn enc_sse2_pmaxub3822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0xDB", "pmaxub xmm3, xmm3");
}



#[test]
fn enc_sse2_pmaxub3823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDE, 0x12", "pmaxub xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmaxub3824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxub xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDE, 0x24, 0x42", "pmaxub xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pminsw3825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xC4", "pminsw xmm0, xmm4");
}



#[test]
fn enc_sse2_pminsw3826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0xDA", "pminsw xmm11, xmm2");
}



#[test]
fn enc_sse2_pminsw3827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEA, 0xCB", "pminsw xmm1, xmm3");
}



#[test]
fn enc_sse2_pminsw3828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0x3C, 0x42", "pminsw xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pminsw3829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsw xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEA, 0x22", "pminsw xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_pminub3830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xDA, 0xCB", "pminub xmm1, xmm11");
}



#[test]
fn enc_sse2_pminub3831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x04, 0x42", "pminub xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pminub3832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xDA, 0x20", "pminub xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_pminub3833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0xD3", "pminub xmm2, xmm3");
}



#[test]
fn enc_sse2_pminub3834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminub xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xDA, 0x24, 0x42", "pminub xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmovmskb3835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xD4", "pmovmskb edx, xmm4");
}



#[test]
fn enc_sse2_pmovmskb3836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb ecx, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xCB", "pmovmskb ecx, xmm3");
}



#[test]
fn enc_sse2_pmovmskb3837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xC0", "pmovmskb eax, xmm0");
}



#[test]
fn enc_sse2_pmovmskb3838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb edx, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xD0", "pmovmskb edx, xmm0");
}



#[test]
fn enc_sse2_pmovmskb3839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovmskb eax, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD7, 0xC4", "pmovmskb eax, xmm4");
}



#[test]
fn enc_sse2_pmulhuw3840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE4, 0xE4", "pmulhuw xmm4, xmm12");
}



#[test]
fn enc_sse2_pmulhuw3841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xC9", "pmulhuw xmm1, xmm1");
}



#[test]
fn enc_sse2_pmulhuw3842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE4, 0xE7", "pmulhuw xmm4, xmm15");
}



#[test]
fn enc_sse2_pmulhuw3843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0x0A", "pmulhuw xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmulhuw3844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhuw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE4, 0xCB", "pmulhuw xmm1, xmm3");
}



#[test]
fn enc_sse2_pmulhw3845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE5, 0x22", "pmulhw xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmulhw3846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x14, 0x42", "pmulhw xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmulhw3847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE5, 0x02", "pmulhw xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmulhw3848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE5, 0xDA", "pmulhw xmm11, xmm2");
}



#[test]
fn enc_sse2_pmulhw3849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhw xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE5, 0xCB", "pmulhw xmm1, xmm11");
}



#[test]
fn enc_sse2_pmullw3850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD5, 0x1A", "pmullw xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_pmullw3851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD5, 0xD3", "pmullw xmm2, xmm11");
}



#[test]
fn enc_sse2_pmullw3852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD5, 0xDF", "pmullw xmm11, xmm15");
}



#[test]
fn enc_sse2_pmullw3853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmullw xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD5, 0xFC", "pmullw xmm15, xmm12");
}



#[test]
fn enc_sse2_pmuludq3854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x18", "pmuludq mm3, [rax]");
}



#[test]
fn enc_sse2_pmuludq3855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x0A", "pmuludq mm1, [rdx]");
}



#[test]
fn enc_sse2_pmuludq3856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x00", "pmuludq mm0, [rax]");
}



#[test]
fn enc_sse2_pmuludq3857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0xD8", "pmuludq mm3, mm0");
}



#[test]
fn enc_sse2_pmuludq3858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xF4, 0x28", "pmuludq mm5, [rax]");
}



#[test]
fn enc_sse2_pmuludq3859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0x0C, 0x42", "pmuludq xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pmuludq3860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF4, 0xE3", "pmuludq xmm12, xmm3");
}



#[test]
fn enc_sse2_pmuludq3861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuludq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF4, 0xD0", "pmuludq xmm2, xmm0");
}



#[test]
fn enc_sse2_por3862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xE3", "por xmm12, xmm3");
}



#[test]
fn enc_sse2_por3863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEB, 0xD9", "por xmm11, xmm1");
}



#[test]
fn enc_sse2_por3864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0x1A", "por xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_por3865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xEB, 0xFF", "por xmm15, xmm15");
}



#[test]
fn enc_sse2_por3866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; por xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEB, 0xD0", "por xmm2, xmm0");
}



#[test]
fn enc_sse2_psadbw3867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0x18", "psadbw xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_psadbw3868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF6, 0xD3", "psadbw xmm2, xmm11");
}



#[test]
fn enc_sse2_psadbw3869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF6, 0xFA", "psadbw xmm15, xmm2");
}



#[test]
fn enc_sse2_psadbw3870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF6, 0xE7", "psadbw xmm12, xmm15");
}



#[test]
fn enc_sse2_psadbw3871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psadbw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF6, 0xD9", "psadbw xmm3, xmm1");
}



#[test]
fn enc_sse2_pshufd3872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm12, xmm15, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x70, 0xE7, 0x1B", "pshufd xmm12, xmm15, 27");
}



#[test]
fn enc_sse2_pshufd3873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm11, xmm12, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x70, 0xDC, 0x14", "pshufd xmm11, xmm12, 20");
}



#[test]
fn enc_sse2_pshufd3874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm15, xmm3, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xFB, 0x54", "pshufd xmm15, xmm3, 84");
}



#[test]
fn enc_sse2_pshufd3875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm12, xmm2, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x70, 0xE2, 0x7A", "pshufd xmm12, xmm2, 122");
}



#[test]
fn enc_sse2_pshufd3876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufd xmm3, xmm2, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x70, 0xDA, 0x57", "pshufd xmm3, xmm2, 87");
}



#[test]
fn enc_sse2_pshufhw3877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm3, xmm12, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xDC, 0x69", "pshufhw xmm3, xmm12, 105");
}



#[test]
fn enc_sse2_pshufhw3878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm2, xmm3, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xD3, 0x31", "pshufhw xmm2, xmm3, 49");
}



#[test]
fn enc_sse2_pshufhw3879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm11, xmm12, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x70, 0xDC, 0x39", "pshufhw xmm11, xmm12, 57");
}



#[test]
fn enc_sse2_pshufhw3880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm1, xmm15, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x70, 0xCF, 0x2E", "pshufhw xmm1, xmm15, 46");
}



#[test]
fn enc_sse2_pshufhw3881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshufhw xmm0, xmm3, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x70, 0xC3, 0x27", "pshufhw xmm0, xmm3, 39");
}



#[test]
fn enc_sse2_pshuflw3882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm3, xmm12, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x70, 0xDC, 0x70", "pshuflw xmm3, xmm12, 112");
}



#[test]
fn enc_sse2_pshuflw3883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm1, xmm15, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x70, 0xCF, 0x71", "pshuflw xmm1, xmm15, 113");
}



#[test]
fn enc_sse2_pshuflw3884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm15, OWORD [rdx], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x70, 0x3A, 0x43", "pshuflw xmm15, OWORD [rdx], 67");
}



#[test]
fn enc_sse2_pshuflw3885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm0, OWORD [rdx], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0x02, 0x34", "pshuflw xmm0, OWORD [rdx], 52");
}



#[test]
fn enc_sse2_pshuflw3886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pshuflw xmm0, xmm3, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x70, 0xC3, 0x08", "pshuflw xmm0, xmm3, 8");
}



#[test]
fn enc_sse2_pslld3887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm0, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF0, 0x57", "pslld xmm0, 87");
}



#[test]
fn enc_sse2_pslld3888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF4, 0x1A", "pslld xmm4, 26");
}



#[test]
fn enc_sse2_pslld3889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xF4, 0x73", "pslld xmm4, 115");
}



#[test]
fn enc_sse2_pslld3890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF4, 0x09", "pslld xmm12, 9");
}



#[test]
fn enc_sse2_pslld3891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xF3, 0x1F", "pslld xmm11, 31");
}



#[test]
fn enc_sse2_pslld3892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF2, 0xE4", "pslld xmm12, xmm12");
}



#[test]
fn enc_sse2_pslld3893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0xD8", "pslld xmm3, xmm0");
}



#[test]
fn enc_sse2_pslld3894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0xE3", "pslld xmm4, xmm3");
}



#[test]
fn enc_sse2_pslld3895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF2, 0xD1", "pslld xmm2, xmm1");
}



#[test]
fn enc_sse2_pslld3896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslld xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF2, 0xDC", "pslld xmm11, xmm4");
}



#[test]
fn enc_sse2_pslldq3897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm12, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFC, 0x4A", "pslldq xmm12, 74");
}



#[test]
fn enc_sse2_pslldq3898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm0, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF8, 0x1B", "pslldq xmm0, 27");
}



#[test]
fn enc_sse2_pslldq3899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm0, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF8, 0x07", "pslldq xmm0, 7");
}



#[test]
fn enc_sse2_pslldq3900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm0, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF8, 0x7C", "pslldq xmm0, 124");
}



#[test]
fn enc_sse2_pslldq3901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pslldq xmm12, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xFC, 0x46", "pslldq xmm12, 70");
}



#[test]
fn enc_sse2_psllq3902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF3, 0xFF", "psllq xmm15, xmm15");
}



#[test]
fn enc_sse2_psllq3903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF3, 0x3A", "psllq xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_psllq3904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xD4", "psllq xmm2, xmm4");
}



#[test]
fn enc_sse2_psllq3905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0xDB", "psllq xmm3, xmm3");
}



#[test]
fn enc_sse2_psllq3906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF3, 0x20", "psllq xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_psllq3907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm15, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xF7, 0x39", "psllq xmm15, 57");
}



#[test]
fn enc_sse2_psllq3908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF3, 0x59", "psllq xmm3, 89");
}



#[test]
fn enc_sse2_psllq3909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm4, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF4, 0x44", "psllq xmm4, 68");
}



#[test]
fn enc_sse2_psllq3910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm2, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF2, 0x5E", "psllq xmm2, 94");
}



#[test]
fn enc_sse2_psllq3911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllq xmm3, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xF3, 0x69", "psllq xmm3, 105");
}



#[test]
fn enc_sse2_psllw3912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF1, 0xD7", "psllw xmm2, xmm15");
}



#[test]
fn enc_sse2_psllw3913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xF1, 0xE4", "psllw xmm4, xmm12");
}



#[test]
fn enc_sse2_psllw3914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0xE3", "psllw xmm4, xmm3");
}



#[test]
fn enc_sse2_psllw3915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF1, 0x04, 0x42", "psllw xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psllw3916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm1, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF1, 0x18", "psllw xmm1, 24");
}



#[test]
fn enc_sse2_psllw3917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm11, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xF3, 0x7C", "psllw xmm11, 124");
}



#[test]
fn enc_sse2_psllw3918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF4, 0x76", "psllw xmm4, 118");
}



#[test]
fn enc_sse2_psllw3919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm3, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF3, 0x0D", "psllw xmm3, 13");
}



#[test]
fn enc_sse2_psllw3920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psllw xmm4, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xF4, 0x72", "psllw xmm4, 114");
}



#[test]
fn enc_sse2_psrad3921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xD9", "psrad xmm3, xmm1");
}



#[test]
fn enc_sse2_psrad3922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0xE4", "psrad xmm4, xmm4");
}



#[test]
fn enc_sse2_psrad3923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE2, 0xF8", "psrad xmm15, xmm0");
}



#[test]
fn enc_sse2_psrad3924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE2, 0xE3", "psrad xmm4, xmm11");
}



#[test]
fn enc_sse2_psrad3925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE2, 0x12", "psrad xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_psrad3926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm11, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE3, 0x1F", "psrad xmm11, 31");
}



#[test]
fn enc_sse2_psrad3927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE2, 0x78", "psrad xmm2, 120");
}



#[test]
fn enc_sse2_psrad3928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm2, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE2, 0x70", "psrad xmm2, 112");
}



#[test]
fn enc_sse2_psrad3929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm1, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xE1, 0x07", "psrad xmm1, 7");
}



#[test]
fn enc_sse2_psrad3930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrad xmm12, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xE4, 0x51", "psrad xmm12, 81");
}



#[test]
fn enc_sse2_psraw3931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xE4, 0x30", "psraw xmm12, 48");
}



#[test]
fn enc_sse2_psraw3932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm3, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE3, 0x44", "psraw xmm3, 68");
}



#[test]
fn enc_sse2_psraw3933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE1, 0x4C", "psraw xmm1, 76");
}



#[test]
fn enc_sse2_psraw3934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE1, 0x52", "psraw xmm1, 82");
}



#[test]
fn enc_sse2_psraw3935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm1, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xE1, 0x18", "psraw xmm1, 24");
}



#[test]
fn enc_sse2_psraw3936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0xE0", "psraw xmm12, xmm0");
}



#[test]
fn enc_sse2_psraw3937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0x18", "psraw xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_psraw3938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0x20", "psraw xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_psraw3939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0x38", "psraw xmm15, OWORD [rax]");
}



#[test]
fn enc_sse2_psraw3940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psraw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xE1, 0xFB", "psraw xmm15, xmm3");
}



#[test]
fn enc_sse2_psrld3941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD3, 0x2C", "psrld xmm11, 44");
}



#[test]
fn enc_sse2_psrld3942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD4, 0x04", "psrld xmm12, 4");
}



#[test]
fn enc_sse2_psrld3943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm1, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD1, 0x2D", "psrld xmm1, 45");
}



#[test]
fn enc_sse2_psrld3944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm1, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x72, 0xD1, 0x6D", "psrld xmm1, 109");
}



#[test]
fn enc_sse2_psrld3945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x72, 0xD4, 0x3B", "psrld xmm12, 59");
}



#[test]
fn enc_sse2_psrld3946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD2, 0xDB", "psrld xmm11, xmm11");
}



#[test]
fn enc_sse2_psrld3947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD2, 0x14, 0x42", "psrld xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psrld3948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD2, 0xE3", "psrld xmm12, xmm3");
}



#[test]
fn enc_sse2_psrld3949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD2, 0xE3", "psrld xmm4, xmm11");
}



#[test]
fn enc_sse2_psrld3950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrld xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xD2, 0xE3", "psrld xmm12, xmm11");
}



#[test]
fn enc_sse2_psrldq3951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm0, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD8, 0x57", "psrldq xmm0, 87");
}



#[test]
fn enc_sse2_psrldq3952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm12, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xDC, 0x07", "psrldq xmm12, 7");
}



#[test]
fn enc_sse2_psrldq3953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm0, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD8, 0x11", "psrldq xmm0, 17");
}



#[test]
fn enc_sse2_psrldq3954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm2, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDA, 0x2E", "psrldq xmm2, 46");
}



#[test]
fn enc_sse2_psrldq3955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrldq xmm2, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xDA, 0x7E", "psrldq xmm2, 126");
}



#[test]
fn enc_sse2_psrlq3956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm1, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD1, 0x31", "psrlq xmm1, 49");
}



#[test]
fn enc_sse2_psrlq3957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, 73
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x73, 0xD4, 0x49", "psrlq xmm12, 73");
}



#[test]
fn enc_sse2_psrlq3958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD3, 0x0E", "psrlq xmm3, 14");
}



#[test]
fn enc_sse2_psrlq3959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD3, 0x31", "psrlq xmm3, 49");
}



#[test]
fn enc_sse2_psrlq3960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x73, 0xD3, 0x64", "psrlq xmm3, 100");
}



#[test]
fn enc_sse2_psrlq3961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0xE4", "psrlq xmm12, xmm4");
}



#[test]
fn enc_sse2_psrlq3962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0xE1", "psrlq xmm12, xmm1");
}



#[test]
fn enc_sse2_psrlq3963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD3, 0xDF", "psrlq xmm3, xmm15");
}



#[test]
fn enc_sse2_psrlq3964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD3, 0x20", "psrlq xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_psrlq3965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlq xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD3, 0x14, 0x42", "psrlq xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psrlw3966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD4, 0x0E", "psrlw xmm12, 14");
}



#[test]
fn enc_sse2_psrlw3967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD7, 0x13", "psrlw xmm15, 19");
}



#[test]
fn enc_sse2_psrlw3968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm3, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD3, 0x66", "psrlw xmm3, 102");
}



#[test]
fn enc_sse2_psrlw3969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm4, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x71, 0xD4, 0x73", "psrlw xmm4, 115");
}



#[test]
fn enc_sse2_psrlw3970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x71, 0xD4, 0x57", "psrlw xmm12, 87");
}



#[test]
fn enc_sse2_psrlw3971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0x00", "psrlw xmm0, OWORD [rax]");
}



#[test]
fn enc_sse2_psrlw3972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0x20", "psrlw xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_psrlw3973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xFC", "psrlw xmm15, xmm4");
}



#[test]
fn enc_sse2_psrlw3974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD1, 0xDA", "psrlw xmm11, xmm2");
}



#[test]
fn enc_sse2_psrlw3975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psrlw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD1, 0xD3", "psrlw xmm2, xmm3");
}



#[test]
fn enc_sse2_psubb3976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0x1A", "psubb xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubb3977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF8, 0xFA", "psubb xmm15, xmm2");
}



#[test]
fn enc_sse2_psubb3978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0xCB", "psubb xmm1, xmm3");
}



#[test]
fn enc_sse2_psubb3979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF8, 0xDC", "psubb xmm11, xmm12");
}



#[test]
fn enc_sse2_psubb3980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubb xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF8, 0x0C, 0x42", "psubb xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubd3981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xD9", "psubd xmm3, xmm1");
}



#[test]
fn enc_sse2_psubd3982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xCA", "psubd xmm1, xmm2");
}



#[test]
fn enc_sse2_psubd3983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFA, 0xE0", "psubd xmm4, xmm0");
}



#[test]
fn enc_sse2_psubd3984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFA, 0xE4", "psubd xmm12, xmm4");
}



#[test]
fn enc_sse2_psubq3985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xFB, 0x24, 0x42", "psubq xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubq3986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x08", "psubq xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_psubq3987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0x1C, 0x42", "psubq xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_psubq3988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xFB, 0xE0", "psubq xmm4, xmm0");
}



#[test]
fn enc_sse2_psubq3989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xFB, 0xDB", "psubq xmm11, xmm11");
}



#[test]
fn enc_sse2_psubq3990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xE8", "psubq mm5, mm0");
}



#[test]
fn enc_sse2_psubq3991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0x28", "psubq mm5, [rax]");
}



#[test]
fn enc_sse2_psubq3992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubq mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xFB, 0xE0", "psubq mm4, mm0");
}



#[test]
fn enc_sse2_psubsb3993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xE8, 0xE4", "psubsb xmm12, xmm12");
}



#[test]
fn enc_sse2_psubsb3994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0xC4", "psubsb xmm0, xmm4");
}



#[test]
fn enc_sse2_psubsb3995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE8, 0xC4", "psubsb xmm0, xmm12");
}



#[test]
fn enc_sse2_psubsb3996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0x1A", "psubsb xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubsb3997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsb xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE8, 0x22", "psubsb xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubsw3998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xE3", "psubsw xmm4, xmm3");
}



#[test]
fn enc_sse2_psubsw3999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE9, 0xCF", "psubsw xmm1, xmm15");
}



#[test]
fn enc_sse2_psubsw4000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xC1", "psubsw xmm0, xmm1");
}



#[test]
fn enc_sse2_psubsw4001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xE9, 0xD4", "psubsw xmm2, xmm4");
}



#[test]
fn enc_sse2_psubsw4002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubsw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xE9, 0xE7", "psubsw xmm4, xmm15");
}



#[test]
fn enc_sse2_psubusb4003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0x3A", "psubusb xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubusb4004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD8, 0x18", "psubusb xmm11, OWORD [rax]");
}



#[test]
fn enc_sse2_psubusb4005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0x18", "psubusb xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_psubusb4006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusb xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD8, 0xC2", "psubusb xmm0, xmm2");
}



#[test]
fn enc_sse2_psubusw4007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD9, 0xCC", "psubusw xmm1, xmm12");
}



#[test]
fn enc_sse2_psubusw4008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0x20", "psubusw xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_psubusw4009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xD2", "psubusw xmm2, xmm2");
}



#[test]
fn enc_sse2_psubusw4010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD9, 0xCC", "psubusw xmm1, xmm4");
}



#[test]
fn enc_sse2_psubusw4011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubusw xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD9, 0xE3", "psubusw xmm4, xmm11");
}



#[test]
fn enc_sse2_psubw4012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xF9, 0x22", "psubw xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubw4013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0xF9, 0xDF", "psubw xmm11, xmm15");
}



#[test]
fn enc_sse2_psubw4014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0x12", "psubw xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_psubw4015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xD8", "psubw xmm3, xmm0");
}



#[test]
fn enc_sse2_psubw4016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; psubw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xF9, 0xD3", "psubw xmm2, xmm3");
}



#[test]
fn enc_sse2_punpckhbw4017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0xE2", "punpckhbw xmm12, xmm2");
}



#[test]
fn enc_sse2_punpckhbw4018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0x24, 0x42", "punpckhbw xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckhbw4019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0xE0", "punpckhbw xmm4, xmm0");
}



#[test]
fn enc_sse2_punpckhbw4020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x68, 0xFA", "punpckhbw xmm15, xmm2");
}



#[test]
fn enc_sse2_punpckhbw4021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhbw xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x68, 0x0C, 0x42", "punpckhbw xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckhdq4022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0xD2", "punpckhdq xmm2, xmm2");
}



#[test]
fn enc_sse2_punpckhdq4023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0xF9", "punpckhdq xmm15, xmm1");
}



#[test]
fn enc_sse2_punpckhdq4024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6A, 0xDC", "punpckhdq xmm11, xmm12");
}



#[test]
fn enc_sse2_punpckhdq4025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x6A, 0x20", "punpckhdq xmm12, OWORD [rax]");
}



#[test]
fn enc_sse2_punpckhdq4026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhdq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6A, 0x12", "punpckhdq xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpckhqdq4027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xD9", "punpckhqdq xmm3, xmm1");
}



#[test]
fn enc_sse2_punpckhqdq4028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x6D, 0xE7", "punpckhqdq xmm4, xmm15");
}



#[test]
fn enc_sse2_punpckhqdq4029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xCC", "punpckhqdq xmm1, xmm4");
}



#[test]
fn enc_sse2_punpckhqdq4030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xD8", "punpckhqdq xmm3, xmm0");
}



#[test]
fn enc_sse2_punpckhqdq4031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhqdq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6D, 0xE0", "punpckhqdq xmm4, xmm0");
}



#[test]
fn enc_sse2_punpckhwd4032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x69, 0xE7", "punpckhwd xmm4, xmm15");
}



#[test]
fn enc_sse2_punpckhwd4033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0xF9", "punpckhwd xmm15, xmm1");
}



#[test]
fn enc_sse2_punpckhwd4034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x69, 0xE3", "punpckhwd xmm12, xmm3");
}



#[test]
fn enc_sse2_punpckhwd4035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0x04, 0x42", "punpckhwd xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckhwd4036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckhwd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x69, 0x08", "punpckhwd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_punpcklbw4037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0x14, 0x42", "punpcklbw xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpcklbw4038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xC8", "punpcklbw xmm1, xmm0");
}



#[test]
fn enc_sse2_punpcklbw4039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xD9", "punpcklbw xmm3, xmm1");
}



#[test]
fn enc_sse2_punpcklbw4040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0x20", "punpcklbw xmm4, OWORD [rax]");
}



#[test]
fn enc_sse2_punpcklbw4041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklbw xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x60, 0xC9", "punpcklbw xmm1, xmm1");
}



#[test]
fn enc_sse2_punpckldq4042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xC9", "punpckldq xmm1, xmm1");
}



#[test]
fn enc_sse2_punpckldq4043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x62, 0xD8", "punpckldq xmm11, xmm0");
}



#[test]
fn enc_sse2_punpckldq4044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x62, 0x24, 0x42", "punpckldq xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_punpckldq4045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x62, 0xCB", "punpckldq xmm1, xmm3");
}



#[test]
fn enc_sse2_punpckldq4046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpckldq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x62, 0xCB", "punpckldq xmm1, xmm11");
}



#[test]
fn enc_sse2_punpcklqdq4047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xC3", "punpcklqdq xmm0, xmm3");
}



#[test]
fn enc_sse2_punpcklqdq4048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0x02", "punpcklqdq xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse2_punpcklqdq4049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x6C, 0xDB", "punpcklqdq xmm11, xmm11");
}



#[test]
fn enc_sse2_punpcklqdq4050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0x18", "punpcklqdq xmm3, OWORD [rax]");
}



#[test]
fn enc_sse2_punpcklqdq4051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklqdq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x6C, 0xD8", "punpcklqdq xmm3, xmm0");
}



#[test]
fn enc_sse2_punpcklwd4052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x61, 0xDF", "punpcklwd xmm11, xmm15");
}



#[test]
fn enc_sse2_punpcklwd4053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x61, 0xD1", "punpcklwd xmm2, xmm1");
}



#[test]
fn enc_sse2_punpcklwd4054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x61, 0xFB", "punpcklwd xmm15, xmm11");
}



#[test]
fn enc_sse2_punpcklwd4055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x61, 0xC3", "punpcklwd xmm0, xmm11");
}



#[test]
fn enc_sse2_punpcklwd4056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; punpcklwd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x61, 0xFA", "punpcklwd xmm15, xmm2");
}



#[test]
fn enc_sse2_pxor4057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xEF, 0xE4", "pxor xmm4, xmm12");
}



#[test]
fn enc_sse2_pxor4058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0x3C, 0x42", "pxor xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_pxor4059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0xF8", "pxor xmm15, xmm0");
}



#[test]
fn enc_sse2_pxor4060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm11, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xEF, 0x1A", "pxor xmm11, OWORD [rdx]");
}



#[test]
fn enc_sse2_pxor4061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pxor xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xEF, 0x04, 0x42", "pxor xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_shufpd4062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm0, xmm1, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0xC1, 0x61", "shufpd xmm0, xmm1, 97");
}



#[test]
fn enc_sse2_shufpd4063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm4, xmm15, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC6, 0xE7, 0x04", "shufpd xmm4, xmm15, 4");
}



#[test]
fn enc_sse2_shufpd4064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm1, OWORD [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0x08, 0x72", "shufpd xmm1, OWORD [rax], 114");
}



#[test]
fn enc_sse2_shufpd4065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm4, OWORD [rax * 2 + rdx], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0x24, 0x42, 0x43", "shufpd xmm4, OWORD [rax * 2 + rdx], 67");
}



#[test]
fn enc_sse2_shufpd4066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; shufpd xmm2, OWORD [rax], 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC6, 0x10, 0x42", "shufpd xmm2, OWORD [rax], 66");
}



#[test]
fn enc_sse2_sqrtpd4067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xC0", "sqrtpd xmm0, xmm0");
}



#[test]
fn enc_sse2_sqrtpd4068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x51, 0xE1", "sqrtpd xmm12, xmm1");
}



#[test]
fn enc_sse2_sqrtpd4069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x51, 0xDC", "sqrtpd xmm3, xmm12");
}



#[test]
fn enc_sse2_sqrtpd4070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xE0", "sqrtpd xmm4, xmm0");
}



#[test]
fn enc_sse2_sqrtpd4071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x51, 0xCA", "sqrtpd xmm1, xmm2");
}



#[test]
fn enc_sse2_sqrtsd4072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0xE3", "sqrtsd xmm12, xmm3");
}



#[test]
fn enc_sse2_sqrtsd4073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x51, 0xFB", "sqrtsd xmm15, xmm11");
}



#[test]
fn enc_sse2_sqrtsd4074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0xC1", "sqrtsd xmm0, xmm1");
}



#[test]
fn enc_sse2_sqrtsd4075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0xC3", "sqrtsd xmm0, xmm3");
}



#[test]
fn enc_sse2_sqrtsd4076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0xD9", "sqrtsd xmm3, xmm1");
}



#[test]
fn enc_sse2_sqrtsd4077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x1C, 0x42", "sqrtsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_sqrtsd4078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x51, 0x18", "sqrtsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_sqrtsd4079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; sqrtsd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x51, 0x78, 0x10", "sqrtsd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_subpd4080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x5C, 0xF9", "subpd xmm15, xmm1");
}



#[test]
fn enc_sse2_subpd4081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5C, 0xC4", "subpd xmm0, xmm12");
}



#[test]
fn enc_sse2_subpd4082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x5C, 0xFF", "subpd xmm15, xmm15");
}



#[test]
fn enc_sse2_subpd4083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subpd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x5C, 0xC3", "subpd xmm0, xmm11");
}



#[test]
fn enc_sse2_subsd4084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5C, 0xCB", "subsd xmm1, xmm11");
}



#[test]
fn enc_sse2_subsd4085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0xDC", "subsd xmm11, xmm4");
}



#[test]
fn enc_sse2_subsd4086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x5C, 0xCF", "subsd xmm1, xmm15");
}



#[test]
fn enc_sse2_subsd4087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x5C, 0xFB", "subsd xmm15, xmm11");
}



#[test]
fn enc_sse2_subsd4088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0xD8", "subsd xmm3, xmm0");
}



#[test]
fn enc_sse2_subsd4089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x60, 0x10", "subsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_subsd4090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0x18", "subsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse2_subsd4091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0x04, 0x42", "subsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_subsd4092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x5C, 0x24, 0x42", "subsd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_subsd4093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; subsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x5C, 0x10", "subsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd4094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xC9", "ucomisd xmm1, xmm1");
}



#[test]
fn enc_sse2_ucomisd4095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xE1", "ucomisd xmm4, xmm1");
}



#[test]
fn enc_sse2_ucomisd4096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0xDB", "ucomisd xmm11, xmm3");
}



#[test]
fn enc_sse2_ucomisd4097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x2E, 0xC3", "ucomisd xmm0, xmm11");
}



#[test]
fn enc_sse2_ucomisd4098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0xC4", "ucomisd xmm0, xmm4");
}



#[test]
fn enc_sse2_ucomisd4099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x00", "ucomisd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd4100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x3C, 0x42", "ucomisd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_ucomisd4101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x78, 0x10", "ucomisd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse2_ucomisd4102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x2E, 0x18", "ucomisd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse2_ucomisd4103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ucomisd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x2E, 0x20", "ucomisd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse2_unpckhpd4104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0x1C, 0x42", "unpckhpd xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_unpckhpd4105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xD8", "unpckhpd xmm3, xmm0");
}



#[test]
fn enc_sse2_unpckhpd4106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xDB", "unpckhpd xmm3, xmm3");
}



#[test]
fn enc_sse2_unpckhpd4107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x15, 0x22", "unpckhpd xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse2_unpckhpd4108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpckhpd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x15, 0xCC", "unpckhpd xmm1, xmm4");
}



#[test]
fn enc_sse2_unpcklpd4109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0xFB", "unpcklpd xmm15, xmm3");
}



#[test]
fn enc_sse2_unpcklpd4110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0xC3", "unpcklpd xmm0, xmm3");
}



#[test]
fn enc_sse2_unpcklpd4111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x14, 0x08", "unpcklpd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse2_unpcklpd4112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; unpcklpd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x14, 0xFC", "unpcklpd xmm15, xmm4");
}



#[test]
fn enc_sse2_xorpd4113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x57, 0xDF", "xorpd xmm11, xmm15");
}



#[test]
fn enc_sse2_xorpd4114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x57, 0xFF", "xorpd xmm15, xmm15");
}



#[test]
fn enc_sse2_xorpd4115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xC1", "xorpd xmm0, xmm1");
}



#[test]
fn enc_sse2_xorpd4116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0x24, 0x42", "xorpd xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse2_xorpd4117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; xorpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x57, 0xDB", "xorpd xmm3, xmm3");
}


