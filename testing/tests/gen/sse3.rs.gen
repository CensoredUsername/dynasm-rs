
#[test]
fn enc_sse3_addsubpd4676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD0, 0xDF", "addsubpd xmm3, xmm15");
}



#[test]
fn enc_sse3_addsubpd4677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0x22", "addsubpd xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse3_addsubpd4678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD0, 0x24, 0x42", "addsubpd xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_addsubpd4679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD0, 0xDC", "addsubpd xmm11, xmm4");
}



#[test]
fn enc_sse3_addsubpd4680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xE3", "addsubpd xmm4, xmm3");
}



#[test]
fn enc_sse3_addsubps4681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD0, 0x0C, 0x42", "addsubps xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_addsubps4682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0xD0, 0xE3", "addsubps xmm4, xmm11");
}



#[test]
fn enc_sse3_addsubps4683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xD0, 0xFB", "addsubps xmm15, xmm11");
}



#[test]
fn enc_sse3_addsubps4684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0x24, 0x42", "addsubps xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_addsubps4685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xDA", "addsubps xmm11, xmm2");
}



#[test]
fn enc_sse3_haddpd4686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7C, 0xC4", "haddpd xmm0, xmm12");
}



#[test]
fn enc_sse3_haddpd4687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7C, 0xDB", "haddpd xmm11, xmm11");
}



#[test]
fn enc_sse3_haddpd4688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7C, 0xE7", "haddpd xmm12, xmm15");
}



#[test]
fn enc_sse3_haddpd4689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0xE4", "haddpd xmm4, xmm4");
}



#[test]
fn enc_sse3_haddpd4690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0xC8", "haddpd xmm1, xmm0");
}



#[test]
fn enc_sse3_haddps4691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xE1", "haddps xmm4, xmm1");
}



#[test]
fn enc_sse3_haddps4692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xC0", "haddps xmm0, xmm0");
}



#[test]
fn enc_sse3_haddps4693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7C, 0xCC", "haddps xmm1, xmm12");
}



#[test]
fn enc_sse3_haddps4694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xDA", "haddps xmm3, xmm2");
}



#[test]
fn enc_sse3_hsubpd4695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0xDA", "hsubpd xmm3, xmm2");
}



#[test]
fn enc_sse3_hsubpd4696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7D, 0xE3", "hsubpd xmm4, xmm11");
}



#[test]
fn enc_sse3_hsubpd4697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7D, 0xC7", "hsubpd xmm0, xmm15");
}



#[test]
fn enc_sse3_hsubpd4698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7D, 0x20", "hsubpd xmm12, OWORD [rax]");
}



#[test]
fn enc_sse3_hsubpd4699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7D, 0xFF", "hsubpd xmm15, xmm15");
}



#[test]
fn enc_sse3_hsubps4700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0x24, 0x42", "hsubps xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_hsubps4701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0xD9", "hsubps xmm11, xmm1");
}



#[test]
fn enc_sse3_hsubps4702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7D, 0xF9", "hsubps xmm15, xmm1");
}



#[test]
fn enc_sse3_hsubps4703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0xCB", "hsubps xmm1, xmm3");
}



#[test]
fn enc_sse3_hsubps4704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7D, 0xE7", "hsubps xmm4, xmm15");
}



#[test]
fn enc_sse3_lddqu4705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x24, 0x42", "lddqu xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_lddqu4706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x38", "lddqu xmm15, OWORD [rax]");
}



#[test]
fn enc_sse3_lddqu4707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x08", "lddqu xmm1, OWORD [rax]");
}



#[test]
fn enc_sse3_lddqu4708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xF0, 0x1C, 0x42", "lddqu xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_lddqu4709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x00", "lddqu xmm0, OWORD [rax]");
}



#[test]
fn enc_sse3_movddup4710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x12, 0xDB", "movddup xmm3, xmm11");
}



#[test]
fn enc_sse3_movddup4711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xE2", "movddup xmm12, xmm2");
}



#[test]
fn enc_sse3_movddup4712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xDB", "movddup xmm3, xmm3");
}



#[test]
fn enc_sse3_movddup4713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xE4", "movddup xmm12, xmm4");
}



#[test]
fn enc_sse3_movddup4714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xCB", "movddup xmm1, xmm3");
}



#[test]
fn enc_sse3_movddup4715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x60, 0x10", "movddup xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movddup4716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0x3C, 0x42", "movddup xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movddup4717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x0C, 0x42", "movddup xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movddup4718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x10", "movddup xmm2, QWORD [rax]");
}



#[test]
fn enc_sse3_movddup4719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x18", "movddup xmm3, QWORD [rax]");
}



#[test]
fn enc_sse3_movshdup4720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0xD9", "movshdup xmm11, xmm1");
}



#[test]
fn enc_sse3_movshdup4721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0xD8", "movshdup xmm11, xmm0");
}



#[test]
fn enc_sse3_movshdup4722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xC4", "movshdup xmm0, xmm4");
}



#[test]
fn enc_sse3_movshdup4723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x16, 0xD7", "movshdup xmm2, xmm15");
}



#[test]
fn enc_sse3_movshdup4724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x16, 0xCC", "movshdup xmm1, xmm12");
}



#[test]
fn enc_sse3_movshdup4725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0x24, 0x42", "movshdup xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movshdup4726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0x24, 0x42", "movshdup xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movshdup4727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0x58, 0x10", "movshdup xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movshdup4728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0x58, 0x10", "movshdup xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movshdup4729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0x00", "movshdup xmm0, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup4730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x12, 0xFC", "movsldup xmm15, xmm12");
}



#[test]
fn enc_sse3_movsldup4731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x12, 0xD3", "movsldup xmm2, xmm11");
}



#[test]
fn enc_sse3_movsldup4732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x12, 0xCF", "movsldup xmm1, xmm15");
}



#[test]
fn enc_sse3_movsldup4733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x12, 0xE7", "movsldup xmm12, xmm15");
}



#[test]
fn enc_sse3_movsldup4734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x12, 0xE4", "movsldup xmm12, xmm12");
}



#[test]
fn enc_sse3_movsldup4735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x50, 0x10", "movsldup xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movsldup4736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x20", "movsldup xmm4, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup4737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x18", "movsldup xmm3, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup4738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x12, 0x38", "movsldup xmm15, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup4739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x14, 0x42", "movsldup xmm2, QWORD [rax * 2 + rdx]");
}


