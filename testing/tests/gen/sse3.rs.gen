
#[test]
fn enc_sse3_addsubpd6328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xD8", "addsubpd xmm3, xmm0");
}



#[test]
fn enc_sse3_addsubpd6329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xD0, 0xCC", "addsubpd xmm1, xmm12");
}



#[test]
fn enc_sse3_addsubpd6330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xD0, 0xC4", "addsubpd xmm0, xmm4");
}



#[test]
fn enc_sse3_addsubpd6331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0xD0, 0xFB", "addsubpd xmm15, xmm3");
}



#[test]
fn enc_sse3_addsubps6332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0xD0, 0xFF", "addsubps xmm15, xmm15");
}



#[test]
fn enc_sse3_addsubps6333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xD8", "addsubps xmm11, xmm0");
}



#[test]
fn enc_sse3_addsubps6334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xD0, 0xDB", "addsubps xmm3, xmm3");
}



#[test]
fn enc_sse3_addsubps6335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0xE1", "addsubps xmm12, xmm1");
}



#[test]
fn enc_sse3_addsubps6336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; addsubps xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0xD0, 0x22", "addsubps xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse3_haddpd6337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0xD1", "haddpd xmm2, xmm1");
}



#[test]
fn enc_sse3_haddpd6338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0x1A", "haddpd xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse3_haddpd6339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0xCA", "haddpd xmm1, xmm2");
}



#[test]
fn enc_sse3_haddpd6340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7C, 0xDB", "haddpd xmm3, xmm3");
}



#[test]
fn enc_sse3_haddpd6341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddpd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7C, 0xFB", "haddpd xmm15, xmm3");
}



#[test]
fn enc_sse3_haddps6342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x7C, 0xFB", "haddps xmm15, xmm11");
}



#[test]
fn enc_sse3_haddps6343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x7C, 0xDB", "haddps xmm11, xmm11");
}



#[test]
fn enc_sse3_haddps6344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7C, 0xE7", "haddps xmm4, xmm15");
}



#[test]
fn enc_sse3_haddps6345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7C, 0xE4", "haddps xmm4, xmm4");
}



#[test]
fn enc_sse3_haddps6346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; haddps xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x7C, 0xFC", "haddps xmm15, xmm4");
}



#[test]
fn enc_sse3_hsubpd6347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x7D, 0xD4", "hsubpd xmm2, xmm4");
}



#[test]
fn enc_sse3_hsubpd6348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7D, 0xDB", "hsubpd xmm3, xmm11");
}



#[test]
fn enc_sse3_hsubpd6349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x7D, 0xE7", "hsubpd xmm12, xmm15");
}



#[test]
fn enc_sse3_hsubpd6350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x7D, 0xE0", "hsubpd xmm12, xmm0");
}



#[test]
fn enc_sse3_hsubpd6351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubpd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x7D, 0xD3", "hsubpd xmm2, xmm11");
}



#[test]
fn enc_sse3_hsubps6352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7D, 0xC7", "hsubps xmm0, xmm15");
}



#[test]
fn enc_sse3_hsubps6353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7D, 0xD4", "hsubps xmm2, xmm12");
}



#[test]
fn enc_sse3_hsubps6354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x7D, 0xFB", "hsubps xmm15, xmm11");
}



#[test]
fn enc_sse3_hsubps6355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x7D, 0xDF", "hsubps xmm3, xmm15");
}



#[test]
fn enc_sse3_hsubps6356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; hsubps xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x7D, 0xDA", "hsubps xmm3, xmm2");
}



#[test]
fn enc_sse3_lddqu6357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x1C, 0x42", "lddqu xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_lddqu6358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm3, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x58, 0x10", "lddqu xmm3, OWORD [rax + 16]");
}



#[test]
fn enc_sse3_lddqu6359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x08", "lddqu xmm1, OWORD [rax]");
}



#[test]
fn enc_sse3_lddqu6360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; lddqu xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0xF0, 0x00", "lddqu xmm0, OWORD [rax]");
}



#[test]
fn enc_sse3_movddup6361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x12, 0xD3", "movddup xmm2, xmm11");
}



#[test]
fn enc_sse3_movddup6362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0xDA", "movddup xmm11, xmm2");
}



#[test]
fn enc_sse3_movddup6363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x12, 0xD4", "movddup xmm2, xmm12");
}



#[test]
fn enc_sse3_movddup6364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x12, 0xCF", "movddup xmm1, xmm15");
}



#[test]
fn enc_sse3_movddup6365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0xDC", "movddup xmm3, xmm4");
}



#[test]
fn enc_sse3_movddup6366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x12, 0x78, 0x10", "movddup xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movddup6367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x14, 0x42", "movddup xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movddup6368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x0C, 0x42", "movddup xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movddup6369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x08", "movddup xmm1, QWORD [rax]");
}



#[test]
fn enc_sse3_movddup6370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movddup xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x12, 0x24, 0x42", "movddup xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movshdup6371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0xE1", "movshdup xmm12, xmm1");
}



#[test]
fn enc_sse3_movshdup6372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xDC", "movshdup xmm3, xmm4");
}



#[test]
fn enc_sse3_movshdup6373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xE4", "movshdup xmm4, xmm4");
}



#[test]
fn enc_sse3_movshdup6374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x16, 0xE7", "movshdup xmm4, xmm15");
}



#[test]
fn enc_sse3_movshdup6375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0xC0", "movshdup xmm0, xmm0");
}



#[test]
fn enc_sse3_movshdup6376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0x18", "movshdup xmm11, QWORD [rax]");
}



#[test]
fn enc_sse3_movshdup6377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0x24, 0x42", "movshdup xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse3_movshdup6378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x16, 0x58, 0x10", "movshdup xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movshdup6379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movshdup xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x16, 0x38", "movshdup xmm15, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup6380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xD1", "movsldup xmm2, xmm1");
}



#[test]
fn enc_sse3_movsldup6381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x41, 0x0F, 0x12, 0xCF", "movsldup xmm1, xmm15");
}



#[test]
fn enc_sse3_movsldup6382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x45, 0x0F, 0x12, 0xDC", "movsldup xmm11, xmm12");
}



#[test]
fn enc_sse3_movsldup6383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x12, 0xE4", "movsldup xmm12, xmm4");
}



#[test]
fn enc_sse3_movsldup6384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0xE0", "movsldup xmm4, xmm0");
}



#[test]
fn enc_sse3_movsldup6385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x12, 0x18", "movsldup xmm11, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup6386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x20", "movsldup xmm4, QWORD [rax]");
}



#[test]
fn enc_sse3_movsldup6387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x60, 0x10", "movsldup xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movsldup6388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x50, 0x10", "movsldup xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse3_movsldup6389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movsldup xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x12, 0x04, 0x42", "movsldup xmm0, QWORD [rax * 2 + rdx]");
}


