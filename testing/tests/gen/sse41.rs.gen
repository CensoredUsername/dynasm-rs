
#[test]
fn enc_sse41_blendpd4789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, xmm0, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0xF8, 0x12", "blendpd xmm15, xmm0, 18");
}



#[test]
fn enc_sse41_blendpd4790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm0, xmm15, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0D, 0xC7, 0x31", "blendpd xmm0, xmm15, 49");
}



#[test]
fn enc_sse41_blendpd4791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, xmm12, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xE4, 0x2E", "blendpd xmm12, xmm12, 46");
}



#[test]
fn enc_sse41_blendpd4792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm0, xmm0, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xC0, 0x69", "blendpd xmm0, xmm0, 105");
}



#[test]
fn enc_sse41_blendpd4793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm1, xmm12, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0D, 0xCC, 0x6A", "blendpd xmm1, xmm12, 106");
}



#[test]
fn enc_sse41_blendpd4794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm0, QWORD [rax], 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x00, 0x7D", "blendpd xmm0, QWORD [rax], 125");
}



#[test]
fn enc_sse41_blendpd4795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm1, QWORD [rax + 16], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x48, 0x10, 0x7E", "blendpd xmm1, QWORD [rax + 16], 126");
}



#[test]
fn enc_sse41_blendpd4796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, QWORD [rax], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x38, 0x68", "blendpd xmm15, QWORD [rax], 104");
}



#[test]
fn enc_sse41_blendpd4797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, QWORD [rax * 2 + rdx], 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x3C, 0x42, 0x1D", "blendpd xmm15, QWORD [rax * 2 + rdx], 29");
}



#[test]
fn enc_sse41_blendpd4798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm4, QWORD [rax * 2 + rdx], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x24, 0x42, 0x2A", "blendpd xmm4, QWORD [rax * 2 + rdx], 42");
}



#[test]
fn enc_sse41_blendps4799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, xmm1, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xD9, 0x7C", "blendps xmm3, xmm1, 124");
}



#[test]
fn enc_sse41_blendps4800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm0, xmm3, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xC3, 0x52", "blendps xmm0, xmm3, 82");
}



#[test]
fn enc_sse41_blendps4801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm4, xmm1, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xE1, 0x2A", "blendps xmm4, xmm1, 42");
}



#[test]
fn enc_sse41_blendps4802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm2, xmm4, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xD4, 0x05", "blendps xmm2, xmm4, 5");
}



#[test]
fn enc_sse41_blendps4803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm0, xmm11, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0C, 0xC3, 0x57", "blendps xmm0, xmm11, 87");
}



#[test]
fn enc_sse41_blendps4804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm12, QWORD [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0x20, 0x58", "blendps xmm12, QWORD [rax], 88");
}



#[test]
fn enc_sse41_blendps4805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, QWORD [rax + 16], 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0x58, 0x10, 0x45", "blendps xmm11, QWORD [rax + 16], 69");
}



#[test]
fn enc_sse41_blendps4806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, QWORD [rax + 16], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0x58, 0x10, 0x05", "blendps xmm11, QWORD [rax + 16], 5");
}



#[test]
fn enc_sse41_blendps4807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm12, QWORD [rax * 2 + rdx], 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0x24, 0x42, 0x2F", "blendps xmm12, QWORD [rax * 2 + rdx], 47");
}



#[test]
fn enc_sse41_blendps4808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, QWORD [rax * 2 + rdx], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0x1C, 0x42, 0x53", "blendps xmm11, QWORD [rax * 2 + rdx], 83");
}



#[test]
fn enc_sse41_blendvpd4809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0xE3", "blendvpd xmm12, xmm3");
}



#[test]
fn enc_sse41_blendvpd4810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x15, 0xE4", "blendvpd xmm4, xmm12");
}



#[test]
fn enc_sse41_blendvpd4811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xC1", "blendvpd xmm0, xmm1");
}



#[test]
fn enc_sse41_blendvpd4812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xCC", "blendvpd xmm1, xmm4");
}



#[test]
fn enc_sse41_blendvpd4813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x14, 0x42", "blendvpd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvpd4814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x58, 0x10", "blendvpd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvpd4815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0x38", "blendvpd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvpd4816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0x3C, 0x42", "blendvpd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvpd4817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0x58, 0x10", "blendvpd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvps4818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x14, 0xD7", "blendvps xmm2, xmm15");
}



#[test]
fn enc_sse41_blendvps4819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x14, 0xDF", "blendvps xmm11, xmm15");
}



#[test]
fn enc_sse41_blendvps4820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xCB", "blendvps xmm1, xmm3");
}



#[test]
fn enc_sse41_blendvps4821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0xF9", "blendvps xmm15, xmm1");
}



#[test]
fn enc_sse41_blendvps4822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x14, 0xFF", "blendvps xmm15, xmm15");
}



#[test]
fn enc_sse41_blendvps4823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x10", "blendvps xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvps4824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0x20", "blendvps xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvps4825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x04, 0x42", "blendvps xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvps4826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x00", "blendvps xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_dppd4827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm1, xmm0, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xC8, 0x1A", "dppd xmm1, xmm0, 26");
}



#[test]
fn enc_sse41_dppd4828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm3, xmm11, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x41, 0xDB, 0x60", "dppd xmm3, xmm11, 96");
}



#[test]
fn enc_sse41_dppd4829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, xmm1, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0xF9, 0x5D", "dppd xmm15, xmm1, 93");
}



#[test]
fn enc_sse41_dppd4830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm3, xmm4, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xDC, 0x13", "dppd xmm3, xmm4, 19");
}



#[test]
fn enc_sse41_dppd4831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, xmm1, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0xF9, 0x2D", "dppd xmm15, xmm1, 45");
}



#[test]
fn enc_sse41_dppd4832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm4, QWORD [rax], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x20, 0x65", "dppd xmm4, QWORD [rax], 101");
}



#[test]
fn enc_sse41_dppd4833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm2, QWORD [rax * 2 + rdx], 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x14, 0x42, 0x4C", "dppd xmm2, QWORD [rax * 2 + rdx], 76");
}



#[test]
fn enc_sse41_dppd4834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, QWORD [rax + 16], 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x78, 0x10, 0x09", "dppd xmm15, QWORD [rax + 16], 9");
}



#[test]
fn enc_sse41_dppd4835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, QWORD [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x38, 0x3F", "dppd xmm15, QWORD [rax], 63");
}



#[test]
fn enc_sse41_dppd4836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, QWORD [rax + 16], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x78, 0x10, 0x21", "dppd xmm15, QWORD [rax + 16], 33");
}



#[test]
fn enc_sse41_dpps4837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm12, xmm15, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x40, 0xE7, 0x5C", "dpps xmm12, xmm15, 92");
}



#[test]
fn enc_sse41_dpps4838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm0, xmm3, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xC3, 0x50", "dpps xmm0, xmm3, 80");
}



#[test]
fn enc_sse41_dpps4839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm11, xmm1, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xD9, 0x6F", "dpps xmm11, xmm1, 111");
}



#[test]
fn enc_sse41_dpps4840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm12, xmm0, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xE0, 0x1C", "dpps xmm12, xmm0, 28");
}



#[test]
fn enc_sse41_dpps4841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm1, xmm3, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xCB, 0x2A", "dpps xmm1, xmm3, 42");
}



#[test]
fn enc_sse41_dpps4842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm15, QWORD [rax], 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0x38, 0x1A", "dpps xmm15, QWORD [rax], 26");
}



#[test]
fn enc_sse41_dpps4843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm12, QWORD [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0x20, 0x3E", "dpps xmm12, QWORD [rax], 62");
}



#[test]
fn enc_sse41_dpps4844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm2, QWORD [rax * 2 + rdx], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x14, 0x42, 0x1E", "dpps xmm2, QWORD [rax * 2 + rdx], 30");
}



#[test]
fn enc_sse41_dpps4845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, QWORD [rax + 16], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x60, 0x10, 0x2B", "dpps xmm4, QWORD [rax + 16], 43");
}



#[test]
fn enc_sse41_dpps4846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm0, QWORD [rax], 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x00, 0x3C", "dpps xmm0, QWORD [rax], 60");
}



#[test]
fn enc_sse41_extractps4847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rcx, xmm12, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x17, 0xE1, 0x78", "extractps rcx, xmm12, 120");
}



#[test]
fn enc_sse41_extractps4848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rdx, xmm15, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x17, 0xFA, 0x0B", "extractps rdx, xmm15, 11");
}



#[test]
fn enc_sse41_extractps4849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rcx, xmm3, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xD9, 0x53", "extractps rcx, xmm3, 83");
}



#[test]
fn enc_sse41_extractps4850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm2, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xD0, 0x16", "extractps rax, xmm2, 22");
}



#[test]
fn enc_sse41_extractps4851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm2, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xD0, 0x05", "extractps rax, xmm2, 5");
}



#[test]
fn enc_sse41_extractps4852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm11, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x18, 0x74", "extractps DWORD [rax], xmm11, 116");
}



#[test]
fn enc_sse41_extractps4853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm12, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x20, 0x3B", "extractps DWORD [rax], xmm12, 59");
}



#[test]
fn enc_sse41_extractps4854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm11, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0xD8, 0x02", "extractps eax, xmm11, 2");
}



#[test]
fn enc_sse41_extractps4855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm4, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0xE0, 0x79", "extractps eax, xmm4, 121");
}



#[test]
fn enc_sse41_extractps4856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm12, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x20, 0x5C", "extractps DWORD [rax], xmm12, 92");
}



#[test]
fn enc_sse41_insertps4857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm4, xmm11, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x21, 0xE3, 0x59", "insertps xmm4, xmm11, 89");
}



#[test]
fn enc_sse41_insertps4858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm3, xmm4, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xDC, 0x1E", "insertps xmm3, xmm4, 30");
}



#[test]
fn enc_sse41_insertps4859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm1, xmm3, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xCB, 0x64", "insertps xmm1, xmm3, 100");
}



#[test]
fn enc_sse41_insertps4860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm4, xmm12, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x21, 0xE4, 0x47", "insertps xmm4, xmm12, 71");
}



#[test]
fn enc_sse41_insertps4861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, xmm11, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x21, 0xDB, 0x1F", "insertps xmm11, xmm11, 31");
}



#[test]
fn enc_sse41_insertps4862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm0, DWORD [rax * 2 + rdx], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x04, 0x42, 0x4E", "insertps xmm0, DWORD [rax * 2 + rdx], 78");
}



#[test]
fn enc_sse41_insertps4863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm2, DWORD [rax + 16], 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x50, 0x10, 0x77", "insertps xmm2, DWORD [rax + 16], 119");
}



#[test]
fn enc_sse41_insertps4864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, DWORD [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0x18, 0x1B", "insertps xmm11, DWORD [rax], 27");
}



#[test]
fn enc_sse41_insertps4865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm0, DWORD [rax * 2 + rdx], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x04, 0x42, 0x55", "insertps xmm0, DWORD [rax * 2 + rdx], 85");
}



#[test]
fn enc_sse41_insertps4866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, DWORD [rax], 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0x38, 0x78", "insertps xmm15, DWORD [rax], 120");
}



#[test]
fn enc_sse41_movntdqa4867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x0C, 0x42", "movntdqa xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa4868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x20", "movntdqa xmm12, OWORD [rax]");
}



#[test]
fn enc_sse41_movntdqa4869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x24, 0x42", "movntdqa xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa4870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x04, 0x42", "movntdqa xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa4871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm4, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x60, 0x10", "movntdqa xmm4, OWORD [rax + 16]");
}



#[test]
fn enc_sse41_mpsadbw4872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm12, xmm15, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x42, 0xE7, 0x3E", "mpsadbw xmm12, xmm15, 62");
}



#[test]
fn enc_sse41_mpsadbw4873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm11, xmm3, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0xDB, 0x3F", "mpsadbw xmm11, xmm3, 63");
}



#[test]
fn enc_sse41_mpsadbw4874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm15, xmm11, 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x42, 0xFB, 0x41", "mpsadbw xmm15, xmm11, 65");
}



#[test]
fn enc_sse41_mpsadbw4875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm11, xmm0, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0xD8, 0x6D", "mpsadbw xmm11, xmm0, 109");
}



#[test]
fn enc_sse41_mpsadbw4876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, xmm2, 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xE2, 0x0E", "mpsadbw xmm4, xmm2, 14");
}



#[test]
fn enc_sse41_mpsadbw4877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm2, QWORD [rax + 16], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x50, 0x10, 0x5E", "mpsadbw xmm2, QWORD [rax + 16], 94");
}



#[test]
fn enc_sse41_mpsadbw4878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm2, QWORD [rax + 16], 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x50, 0x10, 0x78", "mpsadbw xmm2, QWORD [rax + 16], 120");
}



#[test]
fn enc_sse41_mpsadbw4879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm0, QWORD [rax], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x00, 0x59", "mpsadbw xmm0, QWORD [rax], 89");
}



#[test]
fn enc_sse41_mpsadbw4880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm12, QWORD [rax * 2 + rdx], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0x24, 0x42, 0x5B", "mpsadbw xmm12, QWORD [rax * 2 + rdx], 91");
}



#[test]
fn enc_sse41_mpsadbw4881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm15, QWORD [rax + 16], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0x78, 0x10, 0x19", "mpsadbw xmm15, QWORD [rax + 16], 25");
}



#[test]
fn enc_sse41_packusdw4882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x2B, 0xE4", "packusdw xmm12, xmm12");
}



#[test]
fn enc_sse41_packusdw4883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x2B, 0xDC", "packusdw xmm3, xmm12");
}



#[test]
fn enc_sse41_packusdw4884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xD8", "packusdw xmm3, xmm0");
}



#[test]
fn enc_sse41_packusdw4885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xD1", "packusdw xmm2, xmm1");
}



#[test]
fn enc_sse41_packusdw4886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xD9", "packusdw xmm11, xmm1");
}



#[test]
fn enc_sse41_packusdw4887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x40, 0x10", "packusdw xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_packusdw4888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0x38", "packusdw xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_packusdw4889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x08", "packusdw xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_packusdw4890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x04, 0x42", "packusdw xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pblendvb4891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xE0", "pblendvb xmm4, xmm0");
}



#[test]
fn enc_sse41_pblendvb4892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xD0", "pblendvb xmm2, xmm0");
}



#[test]
fn enc_sse41_pblendvb4893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xD9", "pblendvb xmm3, xmm1");
}



#[test]
fn enc_sse41_pblendvb4894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x10, 0xDB", "pblendvb xmm11, xmm11");
}



#[test]
fn enc_sse41_pblendvb4895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xCB", "pblendvb xmm1, xmm3");
}



#[test]
fn enc_sse41_pblendvb4896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0x20", "pblendvb xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pblendvb4897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0x20", "pblendvb xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pblendvb4898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0x24, 0x42", "pblendvb xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pblendw4899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, xmm3, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xCB, 0x1E", "pblendw xmm1, xmm3, 30");
}



#[test]
fn enc_sse41_pblendw4900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, xmm15, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0E, 0xCF, 0x45", "pblendw xmm1, xmm15, 69");
}



#[test]
fn enc_sse41_pblendw4901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm4, xmm1, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xE1, 0x36", "pblendw xmm4, xmm1, 54");
}



#[test]
fn enc_sse41_pblendw4902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm12, xmm0, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0xE0, 0x2C", "pblendw xmm12, xmm0, 44");
}



#[test]
fn enc_sse41_pblendw4903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm4, xmm11, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0E, 0xE3, 0x48", "pblendw xmm4, xmm11, 72");
}



#[test]
fn enc_sse41_pblendw4904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, QWORD [rax * 2 + rdx], 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x0C, 0x42, 0x6B", "pblendw xmm1, QWORD [rax * 2 + rdx], 107");
}



#[test]
fn enc_sse41_pblendw4905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm3, QWORD [rax + 16], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x58, 0x10, 0x31", "pblendw xmm3, QWORD [rax + 16], 49");
}



#[test]
fn enc_sse41_pblendw4906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm2, QWORD [rax], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x10, 0x27", "pblendw xmm2, QWORD [rax], 39");
}



#[test]
fn enc_sse41_pblendw4907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, QWORD [rax * 2 + rdx], 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0x3C, 0x42, 0x16", "pblendw xmm15, QWORD [rax * 2 + rdx], 22");
}



#[test]
fn enc_sse41_pblendw4908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm2, QWORD [rax * 2 + rdx], 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x14, 0x42, 0x75", "pblendw xmm2, QWORD [rax * 2 + rdx], 117");
}



#[test]
fn enc_sse41_pextrb4909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm4, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xE0, 0x18", "pextrb rax, xmm4, 24");
}



#[test]
fn enc_sse41_pextrb4910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm11, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xD8, 0x13", "pextrb rax, xmm11, 19");
}



#[test]
fn enc_sse41_pextrb4911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm11, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xDA, 0x55", "pextrb rdx, xmm11, 85");
}



#[test]
fn enc_sse41_pextrb4912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm2, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD2, 0x08", "pextrb rdx, xmm2, 8");
}



#[test]
fn enc_sse41_pextrb4913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm3, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD8, 0x37", "pextrb rax, xmm3, 55");
}



#[test]
fn enc_sse41_pextrb4914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm0, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC1, 0x42", "pextrb ecx, xmm0, 66");
}



#[test]
fn enc_sse41_pextrb4915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm2, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xD0, 0x6E", "pextrb eax, xmm2, 110");
}



#[test]
fn enc_sse41_pextrb4916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm1, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC8, 0x0D", "pextrb eax, xmm1, 13");
}



#[test]
fn enc_sse41_pextrb4917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm15, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xFA, 0x2C", "pextrb edx, xmm15, 44");
}



#[test]
fn enc_sse41_pextrb4918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm0, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC1, 0x75", "pextrb ecx, xmm0, 117");
}



#[test]
fn enc_sse41_pextrb4919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm12, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x60, 0x10, 0x18", "pextrb BYTE [rax + 16], xmm12, 24");
}



#[test]
fn enc_sse41_pextrb4920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm12, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x60, 0x10, 0x1B", "pextrb BYTE [rax + 16], xmm12, 27");
}



#[test]
fn enc_sse41_pextrb4921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm3, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x18, 0x26", "pextrb BYTE [rax], xmm3, 38");
}



#[test]
fn enc_sse41_pextrb4922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm4, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x60, 0x10, 0x55", "pextrb BYTE [rax + 16], xmm4, 85");
}



#[test]
fn enc_sse41_pextrb4923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm15, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x78, 0x10, 0x16", "pextrb BYTE [rax + 16], xmm15, 22");
}



#[test]
fn enc_sse41_pextrd4924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm12, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0x20, 0x06", "pextrd DWORD [rax], xmm12, 6");
}



#[test]
fn enc_sse41_pextrd4925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm2, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x10, 0x55", "pextrd DWORD [rax], xmm2, 85");
}



#[test]
fn enc_sse41_pextrd4926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm4, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xE0, 0x76", "pextrd eax, xmm4, 118");
}



#[test]
fn enc_sse41_pextrd4927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm1, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xC8, 0x25", "pextrd eax, xmm1, 37");
}



#[test]
fn enc_sse41_pextrd4928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm0, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x00, 0x46", "pextrd DWORD [rax], xmm0, 70");
}



#[test]
fn enc_sse41_pextrq4929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm2, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x10, 0x72", "pextrq [rax], xmm2, 114");
}



#[test]
fn enc_sse41_pextrq4930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm2, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x10, 0x2F", "pextrq [rax], xmm2, 47");
}



#[test]
fn enc_sse41_pextrq4931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm1, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x08, 0x42", "pextrq [rax], xmm1, 66");
}



#[test]
fn enc_sse41_pextrq4932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm1, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x08, 0x55", "pextrq [rax], xmm1, 85");
}



#[test]
fn enc_sse41_pextrq4933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm12, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x20, 0x5F", "pextrq [rax], xmm12, 95");
}



#[test]
fn enc_sse41_pextrw4934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm0, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC0, 0x44", "pextrw rax, xmm0, 68");
}



#[test]
fn enc_sse41_pextrw4935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm2, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xD2, 0x67", "pextrw rdx, xmm2, 103");
}



#[test]
fn enc_sse41_pextrw4936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rcx, xmm0, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC1, 0x36", "pextrw rcx, xmm0, 54");
}



#[test]
fn enc_sse41_pextrw4937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rcx, xmm3, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xD9, 0x45", "pextrw rcx, xmm3, 69");
}



#[test]
fn enc_sse41_pextrw4938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm4, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xE0, 0x54", "pextrw rax, xmm4, 84");
}



#[test]
fn enc_sse41_pextrw4939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm3, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC3, 0x47", "pextrw eax, xmm3, 71");
}



#[test]
fn enc_sse41_pextrw4940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm15, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCF, 0x19", "pextrw ecx, xmm15, 25");
}



#[test]
fn enc_sse41_pextrw4941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm11, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xD3, 0x34", "pextrw edx, xmm11, 52");
}



#[test]
fn enc_sse41_pextrw4942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm2, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xCA, 0x7D", "pextrw ecx, xmm2, 125");
}



#[test]
fn enc_sse41_pextrw4943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm2, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD2, 0x5D", "pextrw edx, xmm2, 93");
}



#[test]
fn enc_sse41_pextrw4944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm3, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x18, 0x35", "pextrw WORD [rax], xmm3, 53");
}



#[test]
fn enc_sse41_pextrw4945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax * 2 + rdx], xmm3, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x1C, 0x42, 0x15", "pextrw WORD [rax * 2 + rdx], xmm3, 21");
}



#[test]
fn enc_sse41_pextrw4946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax + 16], xmm1, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x48, 0x10, 0x2C", "pextrw WORD [rax + 16], xmm1, 44");
}



#[test]
fn enc_sse41_pextrw4947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax * 2 + rdx], xmm1, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x0C, 0x42, 0x58", "pextrw WORD [rax * 2 + rdx], xmm1, 88");
}



#[test]
fn enc_sse41_pextrw4948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax + 16], xmm15, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x78, 0x10, 0x5F", "pextrw WORD [rax + 16], xmm15, 95");
}



#[test]
fn enc_sse41_phminposuw4949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x41, 0xE3", "phminposuw xmm12, xmm11");
}



#[test]
fn enc_sse41_phminposuw4950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xC4", "phminposuw xmm0, xmm4");
}



#[test]
fn enc_sse41_phminposuw4951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xE3", "phminposuw xmm12, xmm3");
}



#[test]
fn enc_sse41_phminposuw4952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xC0", "phminposuw xmm0, xmm0");
}



#[test]
fn enc_sse41_phminposuw4953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x41, 0xE7", "phminposuw xmm12, xmm15");
}



#[test]
fn enc_sse41_phminposuw4954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x1C, 0x42", "phminposuw xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_phminposuw4955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x38", "phminposuw xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_phminposuw4956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x24, 0x42", "phminposuw xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_phminposuw4957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x1C, 0x42", "phminposuw xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_phminposuw4958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x58, 0x10", "phminposuw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pinsrb4959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, [rax], 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x20, 0x32", "pinsrb xmm12, [rax], 50");
}



#[test]
fn enc_sse41_pinsrb4960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, [rax], 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x20, 0x3E", "pinsrb xmm12, [rax], 62");
}



#[test]
fn enc_sse41_pinsrb4961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, [rax], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x18, 0x2B", "pinsrb xmm11, [rax], 43");
}



#[test]
fn enc_sse41_pinsrb4962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x18, 0x2C", "pinsrb xmm11, [rax], 44");
}



#[test]
fn enc_sse41_pinsrb4963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, [rax], 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x20, 0x2D", "pinsrb xmm12, [rax], 45");
}



#[test]
fn enc_sse41_pinsrb4964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, al, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xD8, 0x7C", "pinsrb xmm11, al, 124");
}



#[test]
fn enc_sse41_pinsrb4965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, al, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD8, 0x4F", "pinsrb xmm3, al, 79");
}



#[test]
fn enc_sse41_pinsrb4966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, al, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xD8, 0x72", "pinsrb xmm11, al, 114");
}



#[test]
fn enc_sse41_pinsrb4967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, BYTE [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x20, 0x06", "pinsrb xmm4, BYTE [rax], 6");
}



#[test]
fn enc_sse41_pinsrb4968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, BYTE [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x20, 0x67", "pinsrb xmm12, BYTE [rax], 103");
}



#[test]
fn enc_sse41_pinsrb4969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, ecx, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE1, 0x29", "pinsrb xmm12, ecx, 41");
}



#[test]
fn enc_sse41_pinsrb4970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, ecx, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD1, 0x65", "pinsrb xmm2, ecx, 101");
}



#[test]
fn enc_sse41_pinsrb4971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, edx, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xDA, 0x5F", "pinsrb xmm3, edx, 95");
}



#[test]
fn enc_sse41_pinsrb4972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, ecx, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE1, 0x14", "pinsrb xmm12, ecx, 20");
}



#[test]
fn enc_sse41_pinsrb4973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, eax, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xE0, 0x08", "pinsrb xmm4, eax, 8");
}



#[test]
fn enc_sse41_pinsrd4974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm11, [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x18, 0x10", "pinsrd xmm11, [rax], 16");
}



#[test]
fn enc_sse41_pinsrd4975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm12, [rax], 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x20, 0x3B", "pinsrd xmm12, [rax], 59");
}



#[test]
fn enc_sse41_pinsrd4976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm0, [rax], 14
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x00, 0x0E", "pinsrd xmm0, [rax], 14");
}



#[test]
fn enc_sse41_pinsrd4977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm3, [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x18, 0x57", "pinsrd xmm3, [rax], 87");
}



#[test]
fn enc_sse41_pinsrd4978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm11, [rax], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x18, 0x2A", "pinsrd xmm11, [rax], 42");
}



#[test]
fn enc_sse41_pinsrd4979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm12, eax, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0xE0, 0x26", "pinsrd xmm12, eax, 38");
}



#[test]
fn enc_sse41_pinsrd4980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm11, eax, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0xD8, 0x1C", "pinsrd xmm11, eax, 28");
}



#[test]
fn enc_sse41_pinsrd4981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm2, DWORD [rax], 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x10, 0x73", "pinsrd xmm2, DWORD [rax], 115");
}



#[test]
fn enc_sse41_pinsrd4982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm4, DWORD [rax], 43
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x20, 0x2B", "pinsrd xmm4, DWORD [rax], 43");
}



#[test]
fn enc_sse41_pinsrd4983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, eax, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0xF8, 0x43", "pinsrd xmm15, eax, 67");
}



#[test]
fn enc_sse41_pinsrq4984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x3F", "pinsrq xmm11, [rax], 63");
}



#[test]
fn enc_sse41_pinsrq4985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x31", "pinsrq xmm11, [rax], 49");
}



#[test]
fn enc_sse41_pinsrq4986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm1, [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x08, 0x6D", "pinsrq xmm1, [rax], 109");
}



#[test]
fn enc_sse41_pinsrq4987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm2, [rax], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x10, 0x64", "pinsrq xmm2, [rax], 100");
}



#[test]
fn enc_sse41_pinsrq4988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x5F", "pinsrq xmm15, [rax], 95");
}



#[test]
fn enc_sse41_pinsrq4989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm2, [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x10, 0x31", "pinsrq xmm2, [rax], 49");
}



#[test]
fn enc_sse41_pinsrq4990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm12, [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x20, 0x57", "pinsrq xmm12, [rax], 87");
}



#[test]
fn enc_sse41_pinsrq4991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, rax, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0xF8, 0x32", "pinsrq xmm15, rax, 50");
}



#[test]
fn enc_sse41_pinsrq4992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x02", "pinsrq xmm11, [rax], 2");
}



#[test]
fn enc_sse41_pinsrq4993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm0, [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x00, 0x3F", "pinsrq xmm0, [rax], 63");
}



#[test]
fn enc_sse41_pmaxsb4994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xCA", "pmaxsb xmm1, xmm2");
}



#[test]
fn enc_sse41_pmaxsb4995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0xD9", "pmaxsb xmm11, xmm1");
}



#[test]
fn enc_sse41_pmaxsb4996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xCB", "pmaxsb xmm1, xmm3");
}



#[test]
fn enc_sse41_pmaxsb4997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0xE3", "pmaxsb xmm12, xmm3");
}



#[test]
fn enc_sse41_pmaxsb4998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x00", "pmaxsb xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsb4999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x1C, 0x42", "pmaxsb xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsb5000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0x38", "pmaxsb xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsb5001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x50, 0x10", "pmaxsb xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsb5002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x60, 0x10", "pmaxsb xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsd5003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xD1", "pmaxsd xmm2, xmm1");
}



#[test]
fn enc_sse41_pmaxsd5004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3D, 0xCF", "pmaxsd xmm1, xmm15");
}



#[test]
fn enc_sse41_pmaxsd5005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3D, 0xFB", "pmaxsd xmm15, xmm11");
}



#[test]
fn enc_sse41_pmaxsd5006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xC0", "pmaxsd xmm0, xmm0");
}



#[test]
fn enc_sse41_pmaxsd5007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xD2", "pmaxsd xmm2, xmm2");
}



#[test]
fn enc_sse41_pmaxsd5008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x3C, 0x42", "pmaxsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd5009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x1C, 0x42", "pmaxsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd5010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x60, 0x10", "pmaxsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsd5011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0x10", "pmaxsd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsd5012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0x00", "pmaxsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxud5013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xD0", "pmaxud xmm2, xmm0");
}



#[test]
fn enc_sse41_pmaxud5014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xC3", "pmaxud xmm0, xmm11");
}



#[test]
fn enc_sse41_pmaxud5015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xE3", "pmaxud xmm4, xmm3");
}



#[test]
fn enc_sse41_pmaxud5016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xD9", "pmaxud xmm11, xmm1");
}



#[test]
fn enc_sse41_pmaxud5017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xC8", "pmaxud xmm1, xmm0");
}



#[test]
fn enc_sse41_pmaxud5018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x1C, 0x42", "pmaxud xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud5019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x3C, 0x42", "pmaxud xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud5020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0x18", "pmaxud xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxud5021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0x24, 0x42", "pmaxud xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud5022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0x48, 0x10", "pmaxud xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxuw5023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3E, 0xFB", "pmaxuw xmm15, xmm11");
}



#[test]
fn enc_sse41_pmaxuw5024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xCC", "pmaxuw xmm1, xmm4");
}



#[test]
fn enc_sse41_pmaxuw5025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0xE4", "pmaxuw xmm12, xmm4");
}



#[test]
fn enc_sse41_pmaxuw5026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xDF", "pmaxuw xmm3, xmm15");
}



#[test]
fn enc_sse41_pmaxuw5027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xCB", "pmaxuw xmm1, xmm3");
}



#[test]
fn enc_sse41_pmaxuw5028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x18", "pmaxuw xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxuw5029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x08", "pmaxuw xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxuw5030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x00", "pmaxuw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxuw5031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x24, 0x42", "pmaxuw xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb5032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x38, 0xC7", "pminsb xmm0, xmm15");
}



#[test]
fn enc_sse41_pminsb5033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xD8", "pminsb xmm3, xmm0");
}



#[test]
fn enc_sse41_pminsb5034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0xE1", "pminsb xmm12, xmm1");
}



#[test]
fn enc_sse41_pminsb5035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0xD8", "pminsb xmm11, xmm0");
}



#[test]
fn enc_sse41_pminsb5036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x38, 0xE7", "pminsb xmm4, xmm15");
}



#[test]
fn enc_sse41_pminsb5037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x04, 0x42", "pminsb xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb5038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0x18", "pminsb xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsb5039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x18", "pminsb xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsb5040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0x38", "pminsb xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsd5041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xF9", "pminsd xmm15, xmm1");
}



#[test]
fn enc_sse41_pminsd5042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xFC", "pminsd xmm15, xmm4");
}



#[test]
fn enc_sse41_pminsd5043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xD3", "pminsd xmm2, xmm11");
}



#[test]
fn enc_sse41_pminsd5044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xDB", "pminsd xmm11, xmm3");
}



#[test]
fn enc_sse41_pminsd5045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x39, 0xE3", "pminsd xmm4, xmm11");
}



#[test]
fn enc_sse41_pminsd5046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x04, 0x42", "pminsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsd5047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0x18", "pminsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsd5048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0x78, 0x10", "pminsd xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsd5049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0x3C, 0x42", "pminsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminud5050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xDC", "pminud xmm3, xmm4");
}



#[test]
fn enc_sse41_pminud5051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xD4", "pminud xmm2, xmm12");
}



#[test]
fn enc_sse41_pminud5052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xD0", "pminud xmm2, xmm0");
}



#[test]
fn enc_sse41_pminud5053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xE3", "pminud xmm4, xmm11");
}



#[test]
fn enc_sse41_pminud5054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3B, 0xDB", "pminud xmm11, xmm11");
}



#[test]
fn enc_sse41_pminud5055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3B, 0x18", "pminud xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud5056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x18", "pminud xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud5057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x58, 0x10", "pminud xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminud5058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x00", "pminud xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw5059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0xDC", "pminuw xmm11, xmm4");
}



#[test]
fn enc_sse41_pminuw5060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xD4", "pminuw xmm2, xmm12");
}



#[test]
fn enc_sse41_pminuw5061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xDC", "pminuw xmm3, xmm12");
}



#[test]
fn enc_sse41_pminuw5062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0xC4", "pminuw xmm0, xmm4");
}



#[test]
fn enc_sse41_pminuw5063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xC4", "pminuw xmm0, xmm12");
}



#[test]
fn enc_sse41_pminuw5064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x00", "pminuw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw5065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x58, 0x10", "pminuw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminuw5066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x20", "pminuw xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw5067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x38", "pminuw xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw5068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x3C, 0x42", "pminuw xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbd5069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0xDB", "pmovsxbd xmm11, xmm3");
}



#[test]
fn enc_sse41_pmovsxbd5070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x21, 0xE3", "pmovsxbd xmm4, xmm11");
}



#[test]
fn enc_sse41_pmovsxbd5071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x21, 0xFC", "pmovsxbd xmm15, xmm12");
}



#[test]
fn enc_sse41_pmovsxbd5072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0xDC", "pmovsxbd xmm11, xmm4");
}



#[test]
fn enc_sse41_pmovsxbd5073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xE1", "pmovsxbd xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovsxbd5074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x20", "pmovsxbd xmm12, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbd5075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x20", "pmovsxbd xmm4, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbd5076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x78, 0x10", "pmovsxbd xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd5077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x04, 0x42", "pmovsxbd xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbd5078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x40, 0x10", "pmovsxbd xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbq5079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xE4", "pmovsxbq xmm4, xmm4");
}



#[test]
fn enc_sse41_pmovsxbq5080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x22, 0xC3", "pmovsxbq xmm0, xmm11");
}



#[test]
fn enc_sse41_pmovsxbq5081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x22, 0xF8", "pmovsxbq xmm15, xmm0");
}



#[test]
fn enc_sse41_pmovsxbq5082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xD0", "pmovsxbq xmm2, xmm0");
}



#[test]
fn enc_sse41_pmovsxbq5083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x22, 0xFA", "pmovsxbq xmm15, xmm2");
}



#[test]
fn enc_sse41_pmovsxbq5084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x40, 0x10", "pmovsxbq xmm0, WORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbq5085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x04, 0x42", "pmovsxbq xmm0, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbq5086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x00", "pmovsxbq xmm0, WORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbq5087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm4, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x20", "pmovsxbq xmm4, WORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbw5088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xE1", "pmovsxbw xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovsxbw5089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0xD9", "pmovsxbw xmm11, xmm1");
}



#[test]
fn enc_sse41_pmovsxbw5090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xE3", "pmovsxbw xmm4, xmm3");
}



#[test]
fn enc_sse41_pmovsxbw5091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xDC", "pmovsxbw xmm3, xmm4");
}



#[test]
fn enc_sse41_pmovsxbw5092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0x50, 0x10", "pmovsxbw xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbw5093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0x10", "pmovsxbw xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbw5094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0x00", "pmovsxbw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbw5095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0x40, 0x10", "pmovsxbw xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbw5096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0x04, 0x42", "pmovsxbw xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxdq5097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x25, 0xFC", "pmovsxdq xmm15, xmm12");
}



#[test]
fn enc_sse41_pmovsxdq5098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xC4", "pmovsxdq xmm0, xmm4");
}



#[test]
fn enc_sse41_pmovsxdq5099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xDF", "pmovsxdq xmm3, xmm15");
}



#[test]
fn enc_sse41_pmovsxdq5100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x25, 0xE7", "pmovsxdq xmm12, xmm15");
}



#[test]
fn enc_sse41_pmovsxdq5101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x60, 0x10", "pmovsxdq xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxdq5102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x20", "pmovsxdq xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq5103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x20", "pmovsxdq xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq5104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x00", "pmovsxdq xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq5105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x40, 0x10", "pmovsxdq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xE1", "pmovsxwd xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovsxwd5107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xD9", "pmovsxwd xmm3, xmm1");
}



#[test]
fn enc_sse41_pmovsxwd5108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xD0", "pmovsxwd xmm2, xmm0");
}



#[test]
fn enc_sse41_pmovsxwd5109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xD1", "pmovsxwd xmm2, xmm1");
}



#[test]
fn enc_sse41_pmovsxwd5110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x23, 0xFF", "pmovsxwd xmm15, xmm15");
}



#[test]
fn enc_sse41_pmovsxwd5111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0x58, 0x10", "pmovsxwd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x48, 0x10", "pmovsxwd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x60, 0x10", "pmovsxwd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x50, 0x10", "pmovsxwd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x14, 0x42", "pmovsxwd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxwq5116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xD4", "pmovsxwq xmm2, xmm4");
}



#[test]
fn enc_sse41_pmovsxwq5117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x24, 0xC7", "pmovsxwq xmm0, xmm15");
}



#[test]
fn enc_sse41_pmovsxwq5118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xCC", "pmovsxwq xmm1, xmm4");
}



#[test]
fn enc_sse41_pmovsxwq5119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x24, 0xE4", "pmovsxwq xmm4, xmm12");
}



#[test]
fn enc_sse41_pmovsxwq5120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xF8", "pmovsxwq xmm15, xmm0");
}



#[test]
fn enc_sse41_pmovsxwq5121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x1C, 0x42", "pmovsxwq xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxwq5122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x20", "pmovsxwq xmm12, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwq5123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x60, 0x10", "pmovsxwq xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwq5124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x18", "pmovsxwq xmm11, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwq5125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x14, 0x42", "pmovsxwq xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbd5126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x31, 0xDF", "pmovzxbd xmm11, xmm15");
}



#[test]
fn enc_sse41_pmovzxbd5127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xCC", "pmovzxbd xmm1, xmm12");
}



#[test]
fn enc_sse41_pmovzxbd5128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0xE3", "pmovzxbd xmm4, xmm3");
}



#[test]
fn enc_sse41_pmovzxbd5129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x31, 0xE4", "pmovzxbd xmm12, xmm12");
}



#[test]
fn enc_sse41_pmovzxbd5130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x31, 0xE3", "pmovzxbd xmm12, xmm11");
}



#[test]
fn enc_sse41_pmovzxbd5131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x1C, 0x42", "pmovzxbd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbd5132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x24, 0x42", "pmovzxbd xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbd5133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x20", "pmovzxbd xmm4, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbd5134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x78, 0x10", "pmovzxbd xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbd5135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x60, 0x10", "pmovzxbd xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbq5136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xD9", "pmovzxbq xmm3, xmm1");
}



#[test]
fn enc_sse41_pmovzxbq5137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xDB", "pmovzxbq xmm3, xmm3");
}



#[test]
fn enc_sse41_pmovzxbq5138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x32, 0xC7", "pmovzxbq xmm0, xmm15");
}



#[test]
fn enc_sse41_pmovzxbq5139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xD4", "pmovzxbq xmm2, xmm4");
}



#[test]
fn enc_sse41_pmovzxbq5140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0xD8", "pmovzxbq xmm11, xmm0");
}



#[test]
fn enc_sse41_pmovzxbq5141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm11, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x1C, 0x42", "pmovzxbq xmm11, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbq5142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm4, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0x24, 0x42", "pmovzxbq xmm4, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbq5143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm2, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0x10", "pmovzxbq xmm2, WORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbq5144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm3, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0x58, 0x10", "pmovzxbq xmm3, WORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbw5145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xD4", "pmovzxbw xmm2, xmm4");
}



#[test]
fn enc_sse41_pmovzxbw5146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xC2", "pmovzxbw xmm0, xmm2");
}



#[test]
fn enc_sse41_pmovzxbw5147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0xE3", "pmovzxbw xmm12, xmm3");
}



#[test]
fn enc_sse41_pmovzxbw5148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0xE0", "pmovzxbw xmm12, xmm0");
}



#[test]
fn enc_sse41_pmovzxbw5149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xC4", "pmovzxbw xmm0, xmm12");
}



#[test]
fn enc_sse41_pmovzxbw5150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0x3C, 0x42", "pmovzxbw xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw5151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x14, 0x42", "pmovzxbw xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw5152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0x24, 0x42", "pmovzxbw xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw5153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0x58, 0x10", "pmovzxbw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbw5154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x10", "pmovzxbw xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq5155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xD9", "pmovzxdq xmm3, xmm1");
}



#[test]
fn enc_sse41_pmovzxdq5156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xCA", "pmovzxdq xmm1, xmm2");
}



#[test]
fn enc_sse41_pmovzxdq5157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0xE1", "pmovzxdq xmm12, xmm1");
}



#[test]
fn enc_sse41_pmovzxdq5158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x35, 0xFF", "pmovzxdq xmm15, xmm15");
}



#[test]
fn enc_sse41_pmovzxdq5159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0xD9", "pmovzxdq xmm11, xmm1");
}



#[test]
fn enc_sse41_pmovzxdq5160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x04, 0x42", "pmovzxdq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxdq5161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x20", "pmovzxdq xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq5162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0x60, 0x10", "pmovzxdq xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxdq5163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0x3C, 0x42", "pmovzxdq xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd5164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xC4", "pmovzxwd xmm0, xmm12");
}



#[test]
fn enc_sse41_pmovzxwd5165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xE7", "pmovzxwd xmm4, xmm15");
}



#[test]
fn enc_sse41_pmovzxwd5166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xDC", "pmovzxwd xmm3, xmm12");
}



#[test]
fn enc_sse41_pmovzxwd5167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xD8", "pmovzxwd xmm3, xmm0");
}



#[test]
fn enc_sse41_pmovzxwd5168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xC8", "pmovzxwd xmm1, xmm0");
}



#[test]
fn enc_sse41_pmovzxwd5169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x18", "pmovzxwd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwd5170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x24, 0x42", "pmovzxwd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd5171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x20", "pmovzxwd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwd5172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x04, 0x42", "pmovzxwd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd5173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x24, 0x42", "pmovzxwd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwq5174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xDC", "pmovzxwq xmm11, xmm12");
}



#[test]
fn enc_sse41_pmovzxwq5175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0xE4", "pmovzxwq xmm12, xmm4");
}



#[test]
fn enc_sse41_pmovzxwq5176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xE1", "pmovzxwq xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovzxwq5177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xE7", "pmovzxwq xmm12, xmm15");
}



#[test]
fn enc_sse41_pmovzxwq5178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x34, 0xE4", "pmovzxwq xmm4, xmm12");
}



#[test]
fn enc_sse41_pmovzxwq5179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm0, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x04, 0x42", "pmovzxwq xmm0, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwq5180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x78, 0x10", "pmovzxwq xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxwq5181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x60, 0x10", "pmovzxwq xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxwq5182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x20", "pmovzxwq xmm12, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq5183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x1C, 0x42", "pmovzxwq xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmuldq5184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xDA", "pmuldq xmm3, xmm2");
}



#[test]
fn enc_sse41_pmuldq5185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0xD9", "pmuldq xmm11, xmm1");
}



#[test]
fn enc_sse41_pmuldq5186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xC2", "pmuldq xmm0, xmm2");
}



#[test]
fn enc_sse41_pmuldq5187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0xF9", "pmuldq xmm15, xmm1");
}



#[test]
fn enc_sse41_pmuldq5188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xC4", "pmuldq xmm0, xmm4");
}



#[test]
fn enc_sse41_pmuldq5189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x60, 0x10", "pmuldq xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmuldq5190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x40, 0x10", "pmuldq xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmuldq5191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0x38", "pmuldq xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pmuldq5192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0x78, 0x10", "pmuldq xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmuldq5193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x0C, 0x42", "pmuldq xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld5194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xDA", "pmulld xmm11, xmm2");
}



#[test]
fn enc_sse41_pmulld5195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xF9", "pmulld xmm15, xmm1");
}



#[test]
fn enc_sse41_pmulld5196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x40, 0xCB", "pmulld xmm1, xmm11");
}



#[test]
fn enc_sse41_pmulld5197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x40, 0xDF", "pmulld xmm3, xmm15");
}



#[test]
fn enc_sse41_pmulld5198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x40, 0xE3", "pmulld xmm12, xmm11");
}



#[test]
fn enc_sse41_pmulld5199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0x18", "pmulld xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmulld5200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x24, 0x42", "pmulld xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld5201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0x3C, 0x42", "pmulld xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld5202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x20", "pmulld xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmulld5203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0x20", "pmulld xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_ptest5204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xD4", "ptest xmm2, xmm4");
}



#[test]
fn enc_sse41_ptest5205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x17, 0xC7", "ptest xmm0, xmm15");
}



#[test]
fn enc_sse41_ptest5206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x17, 0xD7", "ptest xmm2, xmm15");
}



#[test]
fn enc_sse41_ptest5207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xE1", "ptest xmm4, xmm1");
}



#[test]
fn enc_sse41_ptest5208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xFC", "ptest xmm15, xmm4");
}



#[test]
fn enc_sse41_ptest5209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x3C, 0x42", "ptest xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_ptest5210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x38", "ptest xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_ptest5211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x04, 0x42", "ptest xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_ptest5212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x40, 0x10", "ptest xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_ptest5213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x18", "ptest xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_roundpd5214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm15, xmm15, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x09, 0xFF, 0x54", "roundpd xmm15, xmm15, 84");
}



#[test]
fn enc_sse41_roundpd5215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm3, xmm12, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xDC, 0x36", "roundpd xmm3, xmm12, 54");
}



#[test]
fn enc_sse41_roundpd5216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, xmm11, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xC3, 0x5E", "roundpd xmm0, xmm11, 94");
}



#[test]
fn enc_sse41_roundpd5217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm11, xmm2, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0xDA, 0x25", "roundpd xmm11, xmm2, 37");
}



#[test]
fn enc_sse41_roundpd5218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, xmm12, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xD4, 0x17", "roundpd xmm2, xmm12, 23");
}



#[test]
fn enc_sse41_roundpd5219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, QWORD [rax * 2 + rdx], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x14, 0x42, 0x7C", "roundpd xmm2, QWORD [rax * 2 + rdx], 124");
}



#[test]
fn enc_sse41_roundpd5220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, QWORD [rax * 2 + rdx], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x04, 0x42, 0x04", "roundpd xmm0, QWORD [rax * 2 + rdx], 4");
}



#[test]
fn enc_sse41_roundpd5221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm12, QWORD [rax + 16], 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0x60, 0x10, 0x24", "roundpd xmm12, QWORD [rax + 16], 36");
}



#[test]
fn enc_sse41_roundpd5222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, QWORD [rax], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x00, 0x64", "roundpd xmm0, QWORD [rax], 100");
}



#[test]
fn enc_sse41_roundpd5223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm12, QWORD [rax], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0x20, 0x13", "roundpd xmm12, QWORD [rax], 19");
}



#[test]
fn enc_sse41_roundps5224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm0, xmm0, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xC0, 0x53", "roundps xmm0, xmm0, 83");
}



#[test]
fn enc_sse41_roundps5225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm3, xmm4, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xDC, 0x7A", "roundps xmm3, xmm4, 122");
}



#[test]
fn enc_sse41_roundps5226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, xmm0, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0xD8, 0x0F", "roundps xmm11, xmm0, 15");
}



#[test]
fn enc_sse41_roundps5227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm2, xmm2, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xD2, 0x5C", "roundps xmm2, xmm2, 92");
}



#[test]
fn enc_sse41_roundps5228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, xmm4, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0xDC, 0x20", "roundps xmm11, xmm4, 32");
}



#[test]
fn enc_sse41_roundps5229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm0, QWORD [rax], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x00, 0x2A", "roundps xmm0, QWORD [rax], 42");
}



#[test]
fn enc_sse41_roundps5230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm15, QWORD [rax * 2 + rdx], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x3C, 0x42, 0x55", "roundps xmm15, QWORD [rax * 2 + rdx], 85");
}



#[test]
fn enc_sse41_roundps5231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm15, QWORD [rax + 16], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x78, 0x10, 0x14", "roundps xmm15, QWORD [rax + 16], 20");
}



#[test]
fn enc_sse41_roundps5232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm2, QWORD [rax], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x10, 0x76", "roundps xmm2, QWORD [rax], 118");
}



#[test]
fn enc_sse41_roundps5233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm4, QWORD [rax + 16], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x60, 0x10, 0x1E", "roundps xmm4, QWORD [rax + 16], 30");
}



#[test]
fn enc_sse41_roundsd5234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, xmm11, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0B, 0xE3, 0x21", "roundsd xmm12, xmm11, 33");
}



#[test]
fn enc_sse41_roundsd5235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm2, xmm4, 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xD4, 0x1C", "roundsd xmm2, xmm4, 28");
}



#[test]
fn enc_sse41_roundsd5236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, xmm2, 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0xE2, 0x2A", "roundsd xmm12, xmm2, 42");
}



#[test]
fn enc_sse41_roundsd5237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm0, xmm2, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xC2, 0x54", "roundsd xmm0, xmm2, 84");
}



#[test]
fn enc_sse41_roundsd5238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm1, xmm4, 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xCC, 0x13", "roundsd xmm1, xmm4, 19");
}



#[test]
fn enc_sse41_roundsd5239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, QWORD [rax + 16], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0x60, 0x10, 0x29", "roundsd xmm12, QWORD [rax + 16], 41");
}



#[test]
fn enc_sse41_roundsd5240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm1, QWORD [rax + 16], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x48, 0x10, 0x4E", "roundsd xmm1, QWORD [rax + 16], 78");
}



#[test]
fn enc_sse41_roundsd5241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm11, QWORD [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0x18, 0x67", "roundsd xmm11, QWORD [rax], 103");
}



#[test]
fn enc_sse41_roundsd5242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm2, QWORD [rax], 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x10, 0x29", "roundsd xmm2, QWORD [rax], 41");
}



#[test]
fn enc_sse41_roundsd5243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm1, QWORD [rax * 2 + rdx], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x0C, 0x42, 0x51", "roundsd xmm1, QWORD [rax * 2 + rdx], 81");
}



#[test]
fn enc_sse41_roundss5244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, xmm4, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xE4, 0x72", "roundss xmm4, xmm4, 114");
}



#[test]
fn enc_sse41_roundss5245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, xmm12, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xE4, 0x1E", "roundss xmm4, xmm12, 30");
}



#[test]
fn enc_sse41_roundss5246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, xmm11, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xE3, 0x6C", "roundss xmm4, xmm11, 108");
}



#[test]
fn enc_sse41_roundss5247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm3, xmm12, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xDC, 0x26", "roundss xmm3, xmm12, 38");
}



#[test]
fn enc_sse41_roundss5248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm3, xmm2, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xDA, 0x6C", "roundss xmm3, xmm2, 108");
}



#[test]
fn enc_sse41_roundss5249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, QWORD [rax * 2 + rdx], 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x24, 0x42, 0x03", "roundss xmm4, QWORD [rax * 2 + rdx], 3");
}



#[test]
fn enc_sse41_roundss5250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, QWORD [rax + 16], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x60, 0x10, 0x37", "roundss xmm4, QWORD [rax + 16], 55");
}



#[test]
fn enc_sse41_roundss5251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm0, QWORD [rax + 16], 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x40, 0x10, 0x15", "roundss xmm0, QWORD [rax + 16], 21");
}



#[test]
fn enc_sse41_roundss5252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm4, QWORD [rax], 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x20, 0x3F", "roundss xmm4, QWORD [rax], 63");
}



#[test]
fn enc_sse41_roundss5253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm2, QWORD [rax], 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x10, 0x62", "roundss xmm2, QWORD [rax], 98");
}


