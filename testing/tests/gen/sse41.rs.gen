
#[test]
fn enc_sse41_blendpd6440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, xmm11, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xFB, 0x0A", "blendpd xmm15, xmm11, 10");
}



#[test]
fn enc_sse41_blendpd6441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, xmm11, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xE3, 0x34", "blendpd xmm12, xmm11, 52");
}



#[test]
fn enc_sse41_blendpd6442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, xmm15, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0D, 0xFF, 0x7A", "blendpd xmm15, xmm15, 122");
}



#[test]
fn enc_sse41_blendpd6443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, xmm2, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0xE2, 0x23", "blendpd xmm12, xmm2, 35");
}



#[test]
fn enc_sse41_blendpd6444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, xmm3, 125
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0xE3, 0x7D", "blendpd xmm12, xmm3, 125");
}



#[test]
fn enc_sse41_blendpd6445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm11, QWORD [rax + 16], 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x58, 0x10, 0x12", "blendpd xmm11, QWORD [rax + 16], 18");
}



#[test]
fn enc_sse41_blendpd6446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, QWORD [rax * 2 + rdx], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x24, 0x42, 0x1F", "blendpd xmm12, QWORD [rax * 2 + rdx], 31");
}



#[test]
fn enc_sse41_blendpd6447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, QWORD [rax + 16], 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x78, 0x10, 0x3D", "blendpd xmm15, QWORD [rax + 16], 61");
}



#[test]
fn enc_sse41_blendpd6448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm3, QWORD [rax], 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x18, 0x52", "blendpd xmm3, QWORD [rax], 82");
}



#[test]
fn enc_sse41_blendpd6449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm3, QWORD [rax + 16], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x58, 0x10, 0x25", "blendpd xmm3, QWORD [rax + 16], 37");
}



#[test]
fn enc_sse41_blendps6450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm1, xmm15, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0C, 0xCF, 0x4C", "blendps xmm1, xmm15, 76");
}



#[test]
fn enc_sse41_blendps6451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm12, xmm2, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xE2, 0x21", "blendps xmm12, xmm2, 33");
}



#[test]
fn enc_sse41_blendps6452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, xmm0, 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xD8, 0x21", "blendps xmm11, xmm0, 33");
}



#[test]
fn enc_sse41_blendps6453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm0, xmm11, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0C, 0xC3, 0x1E", "blendps xmm0, xmm11, 30");
}



#[test]
fn enc_sse41_blendps6454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, xmm4, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xDC, 0x57", "blendps xmm11, xmm4, 87");
}



#[test]
fn enc_sse41_blendps6455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, QWORD [rax], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x18, 0x47", "blendps xmm3, QWORD [rax], 71");
}



#[test]
fn enc_sse41_blendps6456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, QWORD [rax * 2 + rdx], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x1C, 0x42, 0x64", "blendps xmm3, QWORD [rax * 2 + rdx], 100");
}



#[test]
fn enc_sse41_blendps6457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm1, QWORD [rax + 16], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x48, 0x10, 0x7E", "blendps xmm1, QWORD [rax + 16], 126");
}



#[test]
fn enc_sse41_blendps6458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, QWORD [rax + 16], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x58, 0x10, 0x0C", "blendps xmm3, QWORD [rax + 16], 12");
}



#[test]
fn enc_sse41_blendps6459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm4, QWORD [rax], 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x20, 0x2E", "blendps xmm4, QWORD [rax], 46");
}



#[test]
fn enc_sse41_blendvpd6460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0xE2", "blendvpd xmm12, xmm2");
}



#[test]
fn enc_sse41_blendvpd6461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x15, 0xE3", "blendvpd xmm4, xmm11");
}



#[test]
fn enc_sse41_blendvpd6462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xDB", "blendvpd xmm3, xmm3");
}



#[test]
fn enc_sse41_blendvpd6463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x15, 0xC7", "blendvpd xmm0, xmm15");
}



#[test]
fn enc_sse41_blendvpd6464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0xE3", "blendvpd xmm12, xmm3");
}



#[test]
fn enc_sse41_blendvpd6465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x40, 0x10", "blendvpd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvpd6466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x04, 0x42", "blendvpd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvpd6467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x00", "blendvpd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvpd6468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x1C, 0x42", "blendvpd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvpd6469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0x3C, 0x42", "blendvpd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvps6470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0xDA", "blendvps xmm11, xmm2");
}



#[test]
fn enc_sse41_blendvps6471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0xF8", "blendvps xmm15, xmm0");
}



#[test]
fn enc_sse41_blendvps6472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x14, 0xDB", "blendvps xmm11, xmm11");
}



#[test]
fn enc_sse41_blendvps6473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0xE4", "blendvps xmm12, xmm4");
}



#[test]
fn enc_sse41_blendvps6474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xD3", "blendvps xmm2, xmm3");
}



#[test]
fn enc_sse41_blendvps6475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0x78, 0x10", "blendvps xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvps6476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0x24, 0x42", "blendvps xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvps6477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0x60, 0x10", "blendvps xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvps6478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x04, 0x42", "blendvps xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvps6479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x00", "blendvps xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_dppd6480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm3, xmm4, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xDC, 0x77", "dppd xmm3, xmm4, 119");
}



#[test]
fn enc_sse41_dppd6481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm1, xmm15, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x41, 0xCF, 0x0D", "dppd xmm1, xmm15, 13");
}



#[test]
fn enc_sse41_dppd6482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm3, xmm12, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x41, 0xDC, 0x09", "dppd xmm3, xmm12, 9");
}



#[test]
fn enc_sse41_dppd6483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm2, xmm4, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xD4, 0x42", "dppd xmm2, xmm4, 66");
}



#[test]
fn enc_sse41_dppd6484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm4, xmm4, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xE4, 0x6B", "dppd xmm4, xmm4, 107");
}



#[test]
fn enc_sse41_dppd6485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm2, QWORD [rax + 16], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x50, 0x10, 0x7B", "dppd xmm2, QWORD [rax + 16], 123");
}



#[test]
fn enc_sse41_dppd6486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm2, QWORD [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x10, 0x4F", "dppd xmm2, QWORD [rax], 79");
}



#[test]
fn enc_sse41_dppd6487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm4, QWORD [rax * 2 + rdx], 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x24, 0x42, 0x76", "dppd xmm4, QWORD [rax * 2 + rdx], 118");
}



#[test]
fn enc_sse41_dppd6488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, QWORD [rax + 16], 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x78, 0x10, 0x4C", "dppd xmm15, QWORD [rax + 16], 76");
}



#[test]
fn enc_sse41_dppd6489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm11, QWORD [rax * 2 + rdx], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x1C, 0x42, 0x10", "dppd xmm11, QWORD [rax * 2 + rdx], 16");
}



#[test]
fn enc_sse41_dpps6490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm15, xmm1, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xF9, 0x71", "dpps xmm15, xmm1, 113");
}



#[test]
fn enc_sse41_dpps6491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm2, xmm11, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x40, 0xD3, 0x3D", "dpps xmm2, xmm11, 61");
}



#[test]
fn enc_sse41_dpps6492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm12, xmm3, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xE3, 0x2E", "dpps xmm12, xmm3, 46");
}



#[test]
fn enc_sse41_dpps6493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm3, xmm1, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xD9, 0x51", "dpps xmm3, xmm1, 81");
}



#[test]
fn enc_sse41_dpps6494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm2, xmm12, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x40, 0xD4, 0x44", "dpps xmm2, xmm12, 68");
}



#[test]
fn enc_sse41_dpps6495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm15, QWORD [rax + 16], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0x78, 0x10, 0x70", "dpps xmm15, QWORD [rax + 16], 112");
}



#[test]
fn enc_sse41_dpps6496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm0, QWORD [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x00, 0x6C", "dpps xmm0, QWORD [rax], 108");
}



#[test]
fn enc_sse41_dpps6497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm3, QWORD [rax], 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x18, 0x2F", "dpps xmm3, QWORD [rax], 47");
}



#[test]
fn enc_sse41_dpps6498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm15, QWORD [rax + 16], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0x78, 0x10, 0x67", "dpps xmm15, QWORD [rax + 16], 103");
}



#[test]
fn enc_sse41_dpps6499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm11, QWORD [rax + 16], 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0x58, 0x10, 0x5E", "dpps xmm11, QWORD [rax + 16], 94");
}



#[test]
fn enc_sse41_extractps6500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm3, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xD8, 0x40", "extractps rax, xmm3, 64");
}



#[test]
fn enc_sse41_extractps6501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm1, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xC8, 0x59", "extractps rax, xmm1, 89");
}



#[test]
fn enc_sse41_extractps6502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rdx, xmm3, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xDA, 0x79", "extractps rdx, xmm3, 121");
}



#[test]
fn enc_sse41_extractps6503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rcx, xmm4, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xE1, 0x44", "extractps rcx, xmm4, 68");
}



#[test]
fn enc_sse41_extractps6504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm15, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x17, 0xF8, 0x6A", "extractps rax, xmm15, 106");
}



#[test]
fn enc_sse41_extractps6505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm0, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x00, 0x10", "extractps DWORD [rax], xmm0, 16");
}



#[test]
fn enc_sse41_extractps6506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm11, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x18, 0x3C", "extractps DWORD [rax], xmm11, 60");
}



#[test]
fn enc_sse41_extractps6507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm1, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0xC8, 0x3E", "extractps eax, xmm1, 62");
}



#[test]
fn enc_sse41_extractps6508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm1, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x08, 0x22", "extractps DWORD [rax], xmm1, 34");
}



#[test]
fn enc_sse41_extractps6509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm15, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0xF8, 0x3B", "extractps eax, xmm15, 59");
}



#[test]
fn enc_sse41_insertps6510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, xmm3, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xDB, 0x29", "insertps xmm11, xmm3, 41");
}



#[test]
fn enc_sse41_insertps6511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm4, xmm4, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xE4, 0x28", "insertps xmm4, xmm4, 40");
}



#[test]
fn enc_sse41_insertps6512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm0, xmm0, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xC0, 0x20", "insertps xmm0, xmm0, 32");
}



#[test]
fn enc_sse41_insertps6513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm0, xmm12, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x21, 0xC4, 0x68", "insertps xmm0, xmm12, 104");
}



#[test]
fn enc_sse41_insertps6514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, xmm12, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x21, 0xDC, 0x1A", "insertps xmm11, xmm12, 26");
}



#[test]
fn enc_sse41_insertps6515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm0, DWORD [rax + 16], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x40, 0x10, 0x7E", "insertps xmm0, DWORD [rax + 16], 126");
}



#[test]
fn enc_sse41_insertps6516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm4, DWORD [rax], 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x20, 0x4D", "insertps xmm4, DWORD [rax], 77");
}



#[test]
fn enc_sse41_insertps6517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm2, DWORD [rax * 2 + rdx], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x14, 0x42, 0x10", "insertps xmm2, DWORD [rax * 2 + rdx], 16");
}



#[test]
fn enc_sse41_insertps6518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm3, DWORD [rax + 16], 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x58, 0x10, 0x69", "insertps xmm3, DWORD [rax + 16], 105");
}



#[test]
fn enc_sse41_insertps6519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, DWORD [rax + 16], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0x58, 0x10, 0x5D", "insertps xmm11, DWORD [rax + 16], 93");
}



#[test]
fn enc_sse41_movntdqa6520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x10", "movntdqa xmm2, OWORD [rax]");
}



#[test]
fn enc_sse41_movntdqa6521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm2, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x50, 0x10", "movntdqa xmm2, OWORD [rax + 16]");
}



#[test]
fn enc_sse41_movntdqa6522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x00", "movntdqa xmm0, OWORD [rax]");
}



#[test]
fn enc_sse41_movntdqa6523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x14, 0x42", "movntdqa xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa6524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x24, 0x42", "movntdqa xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_mpsadbw6525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, xmm15, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xE7, 0x20", "mpsadbw xmm4, xmm15, 32");
}



#[test]
fn enc_sse41_mpsadbw6526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, xmm0, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xE0, 0x2E", "mpsadbw xmm4, xmm0, 46");
}



#[test]
fn enc_sse41_mpsadbw6527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, xmm2, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xE2, 0x74", "mpsadbw xmm4, xmm2, 116");
}



#[test]
fn enc_sse41_mpsadbw6528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm2, xmm12, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xD4, 0x6A", "mpsadbw xmm2, xmm12, 106");
}



#[test]
fn enc_sse41_mpsadbw6529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm11, xmm15, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x42, 0xDF, 0x6A", "mpsadbw xmm11, xmm15, 106");
}



#[test]
fn enc_sse41_mpsadbw6530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm0, QWORD [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x00, 0x1E", "mpsadbw xmm0, QWORD [rax], 30");
}



#[test]
fn enc_sse41_mpsadbw6531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm1, QWORD [rax], 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x08, 0x6C", "mpsadbw xmm1, QWORD [rax], 108");
}



#[test]
fn enc_sse41_mpsadbw6532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm1, QWORD [rax], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x08, 0x19", "mpsadbw xmm1, QWORD [rax], 25");
}



#[test]
fn enc_sse41_mpsadbw6533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, QWORD [rax * 2 + rdx], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x24, 0x42, 0x59", "mpsadbw xmm4, QWORD [rax * 2 + rdx], 89");
}



#[test]
fn enc_sse41_mpsadbw6534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm12, QWORD [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0x20, 0x4F", "mpsadbw xmm12, QWORD [rax], 79");
}



#[test]
fn enc_sse41_packusdw6535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x2B, 0xC4", "packusdw xmm0, xmm12");
}



#[test]
fn enc_sse41_packusdw6536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x2B, 0xE3", "packusdw xmm12, xmm11");
}



#[test]
fn enc_sse41_packusdw6537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x2B, 0xCF", "packusdw xmm1, xmm15");
}



#[test]
fn enc_sse41_packusdw6538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xD9", "packusdw xmm11, xmm1");
}



#[test]
fn enc_sse41_packusdw6539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xC4", "packusdw xmm0, xmm4");
}



#[test]
fn enc_sse41_packusdw6540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0x60, 0x10", "packusdw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_packusdw6541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x00", "packusdw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_packusdw6542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0x20", "packusdw xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_packusdw6543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x24, 0x42", "packusdw xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_packusdw6544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0x58, 0x10", "packusdw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pblendvb6545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x10, 0xC4", "pblendvb xmm0, xmm12");
}



#[test]
fn enc_sse41_pblendvb6546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xC0", "pblendvb xmm0, xmm0");
}



#[test]
fn enc_sse41_pblendvb6547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x10, 0xDB", "pblendvb xmm3, xmm11");
}



#[test]
fn enc_sse41_pblendvb6548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xE2", "pblendvb xmm4, xmm2");
}



#[test]
fn enc_sse41_pblendvb6549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0x58, 0x10", "pblendvb xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pblendvb6550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0x14, 0x42", "pblendvb xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pblendvb6551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0x10", "pblendvb xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pblendvb6552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0x58, 0x10", "pblendvb xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pblendw6553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm3, xmm15, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0E, 0xDF, 0x73", "pblendw xmm3, xmm15, 115");
}



#[test]
fn enc_sse41_pblendw6554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm3, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0xFB, 0x6F", "pblendw xmm15, xmm3, 111");
}



#[test]
fn enc_sse41_pblendw6555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, xmm3, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xCB, 0x20", "pblendw xmm1, xmm3, 32");
}



#[test]
fn enc_sse41_pblendw6556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm3, xmm1, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xD9, 0x3F", "pblendw xmm3, xmm1, 63");
}



#[test]
fn enc_sse41_pblendw6557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm0, xmm4, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xC4, 0x29", "pblendw xmm0, xmm4, 41");
}



#[test]
fn enc_sse41_pblendw6558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, QWORD [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x08, 0x60", "pblendw xmm1, QWORD [rax], 96");
}



#[test]
fn enc_sse41_pblendw6559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm3, QWORD [rax], 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x18, 0x5A", "pblendw xmm3, QWORD [rax], 90");
}



#[test]
fn enc_sse41_pblendw6560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, QWORD [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0x38, 0x57", "pblendw xmm15, QWORD [rax], 87");
}



#[test]
fn enc_sse41_pblendw6561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, QWORD [rax + 16], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x48, 0x10, 0x65", "pblendw xmm1, QWORD [rax + 16], 101");
}



#[test]
fn enc_sse41_pblendw6562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm4, QWORD [rax + 16], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x60, 0x10, 0x66", "pblendw xmm4, QWORD [rax + 16], 102");
}



#[test]
fn enc_sse41_pcmpeqq6563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x29, 0xC1", "pcmpeqq xmm0, xmm1");
}



#[test]
fn enc_sse41_pcmpeqq6564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x29, 0xD7", "pcmpeqq xmm2, xmm15");
}



#[test]
fn enc_sse41_pcmpeqq6565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x29, 0xF8", "pcmpeqq xmm15, xmm0");
}



#[test]
fn enc_sse41_pcmpeqq6566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x29, 0xE1", "pcmpeqq xmm4, xmm1");
}



#[test]
fn enc_sse41_pcmpeqq6567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x29, 0xCA", "pcmpeqq xmm1, xmm2");
}



#[test]
fn enc_sse41_pcmpeqq6568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x29, 0x00", "pcmpeqq xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pcmpeqq6569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x29, 0x14, 0x42", "pcmpeqq xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pcmpeqq6570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x29, 0x60, 0x10", "pcmpeqq xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pcmpeqq6571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pcmpeqq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x29, 0x10", "pcmpeqq xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pextrb6572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm4, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xE2, 0x07", "pextrb rdx, xmm4, 7");
}



#[test]
fn enc_sse41_pextrb6573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm4, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xE0, 0x30", "pextrb rax, xmm4, 48");
}



#[test]
fn enc_sse41_pextrb6574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm12, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xE0, 0x66", "pextrb rax, xmm12, 102");
}



#[test]
fn enc_sse41_pextrb6575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm3, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD9, 0x7B", "pextrb rcx, xmm3, 123");
}



#[test]
fn enc_sse41_pextrb6576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rdx, xmm0, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xC2, 0x53", "pextrb rdx, xmm0, 83");
}



#[test]
fn enc_sse41_pextrb6577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm1, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC8, 0x68", "pextrb eax, xmm1, 104");
}



#[test]
fn enc_sse41_pextrb6578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm15, 66
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xFA, 0x42", "pextrb edx, xmm15, 66");
}



#[test]
fn enc_sse41_pextrb6579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm2, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xD2, 0x18", "pextrb edx, xmm2, 24");
}



#[test]
fn enc_sse41_pextrb6580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm4, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xE0, 0x12", "pextrb eax, xmm4, 18");
}



#[test]
fn enc_sse41_pextrb6581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm0, 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xC2, 0x08", "pextrb edx, xmm0, 8");
}



#[test]
fn enc_sse41_pextrb6582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm12, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x60, 0x10, 0x04", "pextrb BYTE [rax + 16], xmm12, 4");
}



#[test]
fn enc_sse41_pextrb6583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm4, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x20, 0x4D", "pextrb BYTE [rax], xmm4, 77");
}



#[test]
fn enc_sse41_pextrb6584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm11, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x58, 0x10, 0x61", "pextrb BYTE [rax + 16], xmm11, 97");
}



#[test]
fn enc_sse41_pextrb6585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm4, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x60, 0x10, 0x5B", "pextrb BYTE [rax + 16], xmm4, 91");
}



#[test]
fn enc_sse41_pextrb6586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm3, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x58, 0x10, 0x4F", "pextrb BYTE [rax + 16], xmm3, 79");
}



#[test]
fn enc_sse41_pextrd6587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm4, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xE0, 0x66", "pextrd eax, xmm4, 102");
}



#[test]
fn enc_sse41_pextrd6588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm1, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xC8, 0x6D", "pextrd eax, xmm1, 109");
}



#[test]
fn enc_sse41_pextrd6589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm0, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xC0, 0x74", "pextrd eax, xmm0, 116");
}



#[test]
fn enc_sse41_pextrd6590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm3, 82
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xD8, 0x52", "pextrd eax, xmm3, 82");
}



#[test]
fn enc_sse41_pextrd6591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm3, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0xD8, 0x29", "pextrd eax, xmm3, 41");
}



#[test]
fn enc_sse41_pextrq6592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm12, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x20, 0x2F", "pextrq [rax], xmm12, 47");
}



#[test]
fn enc_sse41_pextrq6593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm11, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x18, 0x11", "pextrq [rax], xmm11, 17");
}



#[test]
fn enc_sse41_pextrq6594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm15, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x38, 0x6B", "pextrq [rax], xmm15, 107");
}



#[test]
fn enc_sse41_pextrq6595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm3, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0xD8, 0x5D", "pextrq rax, xmm3, 93");
}



#[test]
fn enc_sse41_pextrq6596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm12, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x20, 0x05", "pextrq [rax], xmm12, 5");
}



#[test]
fn enc_sse41_pextrw6597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm1, 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xCA, 0x45", "pextrw rdx, xmm1, 69");
}



#[test]
fn enc_sse41_pextrw6598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm0, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC0, 0x75", "pextrw rax, xmm0, 117");
}



#[test]
fn enc_sse41_pextrw6599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm3, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xDA, 0x22", "pextrw rdx, xmm3, 34");
}



#[test]
fn enc_sse41_pextrw6600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm1, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC8, 0x17", "pextrw rax, xmm1, 23");
}



#[test]
fn enc_sse41_pextrw6601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm15, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x15, 0xFA, 0x56", "pextrw rdx, xmm15, 86");
}



#[test]
fn enc_sse41_pextrw6602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm0, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xC0, 0x2E", "pextrw eax, xmm0, 46");
}



#[test]
fn enc_sse41_pextrw6603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm4, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD4, 0x36", "pextrw edx, xmm4, 54");
}



#[test]
fn enc_sse41_pextrw6604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm11, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xC3, 0x25", "pextrw eax, xmm11, 37");
}



#[test]
fn enc_sse41_pextrw6605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm1, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD1, 0x43", "pextrw edx, xmm1, 67");
}



#[test]
fn enc_sse41_pextrw6606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw eax, xmm11, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xC3, 0x36", "pextrw eax, xmm11, 54");
}



#[test]
fn enc_sse41_pextrw6607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax + 16], xmm1, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x48, 0x10, 0x33", "pextrw WORD [rax + 16], xmm1, 51");
}



#[test]
fn enc_sse41_pextrw6608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax * 2 + rdx], xmm11, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x1C, 0x42, 0x47", "pextrw WORD [rax * 2 + rdx], xmm11, 71");
}



#[test]
fn enc_sse41_pextrw6609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm15, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x38, 0x0F", "pextrw WORD [rax], xmm15, 15");
}



#[test]
fn enc_sse41_pextrw6610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm0, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x00, 0x0B", "pextrw WORD [rax], xmm0, 11");
}



#[test]
fn enc_sse41_pextrw6611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax * 2 + rdx], xmm0, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x04, 0x42, 0x78", "pextrw WORD [rax * 2 + rdx], xmm0, 120");
}



#[test]
fn enc_sse41_phminposuw6612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x41, 0xC7", "phminposuw xmm0, xmm15");
}



#[test]
fn enc_sse41_phminposuw6613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xDA", "phminposuw xmm3, xmm2");
}



#[test]
fn enc_sse41_phminposuw6614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x41, 0xFF", "phminposuw xmm15, xmm15");
}



#[test]
fn enc_sse41_phminposuw6615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xCB", "phminposuw xmm1, xmm3");
}



#[test]
fn enc_sse41_phminposuw6616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xC2", "phminposuw xmm0, xmm2");
}



#[test]
fn enc_sse41_phminposuw6617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x60, 0x10", "phminposuw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_phminposuw6618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x0C, 0x42", "phminposuw xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_phminposuw6619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x38", "phminposuw xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_phminposuw6620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x14, 0x42", "phminposuw xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_phminposuw6621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x78, 0x10", "phminposuw xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pinsrb6622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, [rax], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x10, 0x5B", "pinsrb xmm2, [rax], 91");
}



#[test]
fn enc_sse41_pinsrb6623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x18, 0x25", "pinsrb xmm3, [rax], 37");
}



#[test]
fn enc_sse41_pinsrb6624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, [rax], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x08, 0x44", "pinsrb xmm1, [rax], 68");
}



#[test]
fn enc_sse41_pinsrb6625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, [rax], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x10, 0x1B", "pinsrb xmm2, [rax], 27");
}



#[test]
fn enc_sse41_pinsrb6626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm15, [rax], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x38, 0x43", "pinsrb xmm15, [rax], 67");
}



#[test]
fn enc_sse41_pinsrb6627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, BYTE [rax], 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x10, 0x1F", "pinsrb xmm2, BYTE [rax], 31");
}



#[test]
fn enc_sse41_pinsrb6628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, BYTE [rax], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x18, 0x7A", "pinsrb xmm3, BYTE [rax], 122");
}



#[test]
fn enc_sse41_pinsrb6629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm0, al, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xC0, 0x09", "pinsrb xmm0, al, 9");
}



#[test]
fn enc_sse41_pinsrb6630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, al, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE0, 0x50", "pinsrb xmm12, al, 80");
}



#[test]
fn enc_sse41_pinsrb6631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, BYTE [rax], 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x18, 0x38", "pinsrb xmm11, BYTE [rax], 56");
}



#[test]
fn enc_sse41_pinsrb6632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, ecx, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD9, 0x7C", "pinsrb xmm3, ecx, 124");
}



#[test]
fn enc_sse41_pinsrb6633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm15, ecx, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xF9, 0x63", "pinsrb xmm15, ecx, 99");
}



#[test]
fn enc_sse41_pinsrb6634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, edx, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xE2, 0x74", "pinsrb xmm4, edx, 116");
}



#[test]
fn enc_sse41_pinsrb6635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm4, eax, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xE0, 0x5B", "pinsrb xmm4, eax, 91");
}



#[test]
fn enc_sse41_pinsrb6636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, edx, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xDA, 0x6B", "pinsrb xmm11, edx, 107");
}



#[test]
fn enc_sse41_pinsrd6637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm11, [rax], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x18, 0x64", "pinsrd xmm11, [rax], 100");
}



#[test]
fn enc_sse41_pinsrd6638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm4, [rax], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x20, 0x5C", "pinsrd xmm4, [rax], 92");
}



#[test]
fn enc_sse41_pinsrd6639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm2, [rax], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x10, 0x7E", "pinsrd xmm2, [rax], 126");
}



#[test]
fn enc_sse41_pinsrd6640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, [rax], 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x38, 0x3A", "pinsrd xmm15, [rax], 58");
}



#[test]
fn enc_sse41_pinsrd6641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, [rax], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x38, 0x55", "pinsrd xmm15, [rax], 85");
}



#[test]
fn enc_sse41_pinsrd6642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm12, DWORD [rax], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x20, 0x05", "pinsrd xmm12, DWORD [rax], 5");
}



#[test]
fn enc_sse41_pinsrd6643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm11, DWORD [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x18, 0x14", "pinsrd xmm11, DWORD [rax], 20");
}



#[test]
fn enc_sse41_pinsrd6644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm12, DWORD [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x20, 0x51", "pinsrd xmm12, DWORD [rax], 81");
}



#[test]
fn enc_sse41_pinsrd6645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, eax, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0xF8, 0x09", "pinsrd xmm15, eax, 9");
}



#[test]
fn enc_sse41_pinsrd6646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm0, eax, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0xC0, 0x07", "pinsrd xmm0, eax, 7");
}



#[test]
fn enc_sse41_pinsrq6647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm2, [rax], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x10, 0x44", "pinsrq xmm2, [rax], 68");
}



#[test]
fn enc_sse41_pinsrq6648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x77", "pinsrq xmm15, [rax], 119");
}



#[test]
fn enc_sse41_pinsrq6649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm4, [rax], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x20, 0x37", "pinsrq xmm4, [rax], 55");
}



#[test]
fn enc_sse41_pinsrq6650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x67", "pinsrq xmm11, [rax], 103");
}



#[test]
fn enc_sse41_pinsrq6651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm4, [rax], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x20, 0x14", "pinsrq xmm4, [rax], 20");
}



#[test]
fn enc_sse41_pinsrq6652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, rax, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0xF8, 0x75", "pinsrq xmm15, rax, 117");
}



#[test]
fn enc_sse41_pinsrq6653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm4, [rax], 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x20, 0x32", "pinsrq xmm4, [rax], 50");
}



#[test]
fn enc_sse41_pinsrq6654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm0, rax, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0xC0, 0x1A", "pinsrq xmm0, rax, 26");
}



#[test]
fn enc_sse41_pinsrq6655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm3, rax, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0xD8, 0x75", "pinsrq xmm3, rax, 117");
}



#[test]
fn enc_sse41_pinsrq6656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm2, [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x10, 0x6F", "pinsrq xmm2, [rax], 111");
}



#[test]
fn enc_sse41_pmaxsb6657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xD1", "pmaxsb xmm2, xmm1");
}



#[test]
fn enc_sse41_pmaxsb6658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xC3", "pmaxsb xmm0, xmm3");
}



#[test]
fn enc_sse41_pmaxsb6659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0xF8", "pmaxsb xmm15, xmm0");
}



#[test]
fn enc_sse41_pmaxsb6660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3C, 0xE4", "pmaxsb xmm4, xmm12");
}



#[test]
fn enc_sse41_pmaxsb6661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xCC", "pmaxsb xmm1, xmm4");
}



#[test]
fn enc_sse41_pmaxsb6662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0x78, 0x10", "pmaxsb xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsb6663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x14, 0x42", "pmaxsb xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsb6664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x00", "pmaxsb xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsb6665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x60, 0x10", "pmaxsb xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsb6666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0x1C, 0x42", "pmaxsb xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd6667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0xE3", "pmaxsd xmm12, xmm3");
}



#[test]
fn enc_sse41_pmaxsd6668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0xDB", "pmaxsd xmm11, xmm3");
}



#[test]
fn enc_sse41_pmaxsd6669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3D, 0xE7", "pmaxsd xmm12, xmm15");
}



#[test]
fn enc_sse41_pmaxsd6670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xE0", "pmaxsd xmm4, xmm0");
}



#[test]
fn enc_sse41_pmaxsd6671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xDC", "pmaxsd xmm3, xmm4");
}



#[test]
fn enc_sse41_pmaxsd6672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0x0C, 0x42", "pmaxsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd6673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x60, 0x10", "pmaxsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsd6674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x24, 0x42", "pmaxsd xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd6675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0x14, 0x42", "pmaxsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud6676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xE0", "pmaxud xmm12, xmm0");
}



#[test]
fn enc_sse41_pmaxud6677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xE3", "pmaxud xmm4, xmm11");
}



#[test]
fn enc_sse41_pmaxud6678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xCC", "pmaxud xmm1, xmm4");
}



#[test]
fn enc_sse41_pmaxud6679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xD9", "pmaxud xmm11, xmm1");
}



#[test]
fn enc_sse41_pmaxud6680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0xD1", "pmaxud xmm2, xmm1");
}



#[test]
fn enc_sse41_pmaxud6681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0x58, 0x10", "pmaxud xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxud6682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x1C, 0x42", "pmaxud xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud6683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x3C, 0x42", "pmaxud xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud6684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x18", "pmaxud xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxuw6685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xCC", "pmaxuw xmm1, xmm4");
}



#[test]
fn enc_sse41_pmaxuw6686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xD3", "pmaxuw xmm2, xmm3");
}



#[test]
fn enc_sse41_pmaxuw6687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xDB", "pmaxuw xmm3, xmm11");
}



#[test]
fn enc_sse41_pmaxuw6688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xC0", "pmaxuw xmm0, xmm0");
}



#[test]
fn enc_sse41_pmaxuw6689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3E, 0xE3", "pmaxuw xmm12, xmm11");
}



#[test]
fn enc_sse41_pmaxuw6690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0x3C, 0x42", "pmaxuw xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxuw6691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x24, 0x42", "pmaxuw xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxuw6692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0x60, 0x10", "pmaxuw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxuw6693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x58, 0x10", "pmaxuw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsb6694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x38, 0xFB", "pminsb xmm15, xmm11");
}



#[test]
fn enc_sse41_pminsb6695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x38, 0xFF", "pminsb xmm15, xmm15");
}



#[test]
fn enc_sse41_pminsb6696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0xFC", "pminsb xmm15, xmm4");
}



#[test]
fn enc_sse41_pminsb6697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x38, 0xFC", "pminsb xmm15, xmm12");
}



#[test]
fn enc_sse41_pminsb6698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xD0", "pminsb xmm2, xmm0");
}



#[test]
fn enc_sse41_pminsb6699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x04, 0x42", "pminsb xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb6700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0x60, 0x10", "pminsb xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsb6701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0x24, 0x42", "pminsb xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb6702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x08", "pminsb xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsb6703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0x18", "pminsb xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsd6704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xDB", "pminsd xmm3, xmm3");
}



#[test]
fn enc_sse41_pminsd6705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xE2", "pminsd xmm4, xmm2");
}



#[test]
fn enc_sse41_pminsd6706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xCA", "pminsd xmm1, xmm2");
}



#[test]
fn enc_sse41_pminsd6707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xD0", "pminsd xmm2, xmm0");
}



#[test]
fn enc_sse41_pminsd6708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x39, 0xDF", "pminsd xmm11, xmm15");
}



#[test]
fn enc_sse41_pminsd6709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x48, 0x10", "pminsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsd6710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x20", "pminsd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsd6711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0x38", "pminsd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsd6712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x0C, 0x42", "pminsd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsd6713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x24, 0x42", "pminsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminud6714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xD0", "pminud xmm2, xmm0");
}



#[test]
fn enc_sse41_pminud6715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xCB", "pminud xmm1, xmm11");
}



#[test]
fn enc_sse41_pminud6716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3B, 0xFB", "pminud xmm15, xmm11");
}



#[test]
fn enc_sse41_pminud6717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3B, 0xE0", "pminud xmm12, xmm0");
}



#[test]
fn enc_sse41_pminud6718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3B, 0xE4", "pminud xmm12, xmm12");
}



#[test]
fn enc_sse41_pminud6719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x24, 0x42", "pminud xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminud6720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x00", "pminud xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud6721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x18", "pminud xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud6722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3B, 0x60, 0x10", "pminud xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminuw6723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3A, 0xE4", "pminuw xmm12, xmm12");
}



#[test]
fn enc_sse41_pminuw6724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3A, 0xDB", "pminuw xmm11, xmm11");
}



#[test]
fn enc_sse41_pminuw6725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0xDA", "pminuw xmm11, xmm2");
}



#[test]
fn enc_sse41_pminuw6726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0xD8", "pminuw xmm11, xmm0");
}



#[test]
fn enc_sse41_pminuw6727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xE7", "pminuw xmm4, xmm15");
}



#[test]
fn enc_sse41_pminuw6728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x20", "pminuw xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw6729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x78, 0x10", "pminuw xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminuw6730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x18", "pminuw xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw6731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x58, 0x10", "pminuw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminuw6732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x1C, 0x42", "pminuw xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbd6733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0xDB", "pmovsxbd xmm11, xmm3");
}



#[test]
fn enc_sse41_pmovsxbd6734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x21, 0xCF", "pmovsxbd xmm1, xmm15");
}



#[test]
fn enc_sse41_pmovsxbd6735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x21, 0xE7", "pmovsxbd xmm12, xmm15");
}



#[test]
fn enc_sse41_pmovsxbd6736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xC2", "pmovsxbd xmm0, xmm2");
}



#[test]
fn enc_sse41_pmovsxbd6737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x21, 0xFC", "pmovsxbd xmm15, xmm12");
}



#[test]
fn enc_sse41_pmovsxbd6738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x20", "pmovsxbd xmm4, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbd6739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x38", "pmovsxbd xmm15, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbd6740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x48, 0x10", "pmovsxbd xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd6741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x78, 0x10", "pmovsxbd xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd6742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x18", "pmovsxbd xmm11, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbq6743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x22, 0xDA", "pmovsxbq xmm11, xmm2");
}



#[test]
fn enc_sse41_pmovsxbq6744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xD0", "pmovsxbq xmm2, xmm0");
}



#[test]
fn enc_sse41_pmovsxbq6745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x22, 0xCF", "pmovsxbq xmm1, xmm15");
}



#[test]
fn enc_sse41_pmovsxbq6746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x22, 0xFB", "pmovsxbq xmm15, xmm11");
}



#[test]
fn enc_sse41_pmovsxbq6747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x22, 0xDC", "pmovsxbq xmm11, xmm12");
}



#[test]
fn enc_sse41_pmovsxbq6748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm1, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x48, 0x10", "pmovsxbq xmm1, WORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbq6749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm2, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x10", "pmovsxbq xmm2, WORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbq6750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x00", "pmovsxbq xmm0, WORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbq6751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x04, 0x42", "pmovsxbq xmm0, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbq6752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm4, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x20", "pmovsxbq xmm4, WORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbw6753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xCB", "pmovsxbw xmm1, xmm3");
}



#[test]
fn enc_sse41_pmovsxbw6754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0xD8", "pmovsxbw xmm11, xmm0");
}



#[test]
fn enc_sse41_pmovsxbw6755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0xFB", "pmovsxbw xmm15, xmm3");
}



#[test]
fn enc_sse41_pmovsxbw6756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x20, 0xE4", "pmovsxbw xmm12, xmm12");
}



#[test]
fn enc_sse41_pmovsxbw6757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x20, 0xFF", "pmovsxbw xmm15, xmm15");
}



#[test]
fn enc_sse41_pmovsxbw6758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x18", "pmovsxbw xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbw6759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0x50, 0x10", "pmovsxbw xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbw6760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x58, 0x10", "pmovsxbw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbw6761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x1C, 0x42", "pmovsxbw xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbw6762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x20", "pmovsxbw xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq6763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xCA", "pmovsxdq xmm1, xmm2");
}



#[test]
fn enc_sse41_pmovsxdq6764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xCB", "pmovsxdq xmm1, xmm11");
}



#[test]
fn enc_sse41_pmovsxdq6765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x25, 0xDC", "pmovsxdq xmm11, xmm12");
}



#[test]
fn enc_sse41_pmovsxdq6766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0xD9", "pmovsxdq xmm11, xmm1");
}



#[test]
fn enc_sse41_pmovsxdq6767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xD0", "pmovsxdq xmm2, xmm0");
}



#[test]
fn enc_sse41_pmovsxdq6768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x60, 0x10", "pmovsxdq xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxdq6769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x50, 0x10", "pmovsxdq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxdq6770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x58, 0x10", "pmovsxdq xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxdq6771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x08", "pmovsxdq xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq6772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x1C, 0x42", "pmovsxdq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxwd6773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x23, 0xFB", "pmovsxwd xmm15, xmm11");
}



#[test]
fn enc_sse41_pmovsxwd6774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xCA", "pmovsxwd xmm1, xmm2");
}



#[test]
fn enc_sse41_pmovsxwd6775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xDA", "pmovsxwd xmm3, xmm2");
}



#[test]
fn enc_sse41_pmovsxwd6776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xD9", "pmovsxwd xmm11, xmm1");
}



#[test]
fn enc_sse41_pmovsxwd6777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xE0", "pmovsxwd xmm12, xmm0");
}



#[test]
fn enc_sse41_pmovsxwd6778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x50, 0x10", "pmovsxwd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd6779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x0C, 0x42", "pmovsxwd xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxwd6780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0x18", "pmovsxwd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwd6781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x24, 0x42", "pmovsxwd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxwd6782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0x20", "pmovsxwd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwq6783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xFA", "pmovsxwq xmm15, xmm2");
}



#[test]
fn enc_sse41_pmovsxwq6784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xDA", "pmovsxwq xmm3, xmm2");
}



#[test]
fn enc_sse41_pmovsxwq6785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x24, 0xDC", "pmovsxwq xmm3, xmm12");
}



#[test]
fn enc_sse41_pmovsxwq6786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xD2", "pmovsxwq xmm2, xmm2");
}



#[test]
fn enc_sse41_pmovsxwq6787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xC9", "pmovsxwq xmm1, xmm1");
}



#[test]
fn enc_sse41_pmovsxwq6788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x08", "pmovsxwq xmm1, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwq6789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x78, 0x10", "pmovsxwq xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwq6790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x38", "pmovsxwq xmm15, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwq6791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x24, 0x42", "pmovsxwq xmm12, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxwq6792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x48, 0x10", "pmovsxwq xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbd6793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0xDB", "pmovzxbd xmm11, xmm3");
}



#[test]
fn enc_sse41_pmovzxbd6794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xCC", "pmovzxbd xmm1, xmm12");
}



#[test]
fn enc_sse41_pmovzxbd6795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0xFB", "pmovzxbd xmm15, xmm3");
}



#[test]
fn enc_sse41_pmovzxbd6796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xC3", "pmovzxbd xmm0, xmm11");
}



#[test]
fn enc_sse41_pmovzxbd6797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xDB", "pmovzxbd xmm3, xmm11");
}



#[test]
fn enc_sse41_pmovzxbd6798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm12, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x20", "pmovzxbd xmm12, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbd6799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x18", "pmovzxbd xmm3, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbd6800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x60, 0x10", "pmovzxbd xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbd6801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x24, 0x42", "pmovzxbd xmm4, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbd6802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x08", "pmovzxbd xmm1, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbq6803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x32, 0xDB", "pmovzxbq xmm11, xmm11");
}



#[test]
fn enc_sse41_pmovzxbq6804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xE4", "pmovzxbq xmm4, xmm4");
}



#[test]
fn enc_sse41_pmovzxbq6805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0xE0", "pmovzxbq xmm12, xmm0");
}



#[test]
fn enc_sse41_pmovzxbq6806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x32, 0xE4", "pmovzxbq xmm12, xmm12");
}



#[test]
fn enc_sse41_pmovzxbq6807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x78, 0x10", "pmovzxbq xmm15, WORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbq6808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm4, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0x20", "pmovzxbq xmm4, WORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbq6809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm0, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0x04, 0x42", "pmovzxbq xmm0, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbq6810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm12, WORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x60, 0x10", "pmovzxbq xmm12, WORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbq6811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x3C, 0x42", "pmovzxbq xmm15, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw6812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x30, 0xE3", "pmovzxbw xmm12, xmm11");
}



#[test]
fn enc_sse41_pmovzxbw6813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xE4", "pmovzxbw xmm4, xmm4");
}



#[test]
fn enc_sse41_pmovzxbw6814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xDF", "pmovzxbw xmm3, xmm15");
}



#[test]
fn enc_sse41_pmovzxbw6815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xE1", "pmovzxbw xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovzxbw6816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0xE0", "pmovzxbw xmm12, xmm0");
}



#[test]
fn enc_sse41_pmovzxbw6817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x1C, 0x42", "pmovzxbw xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw6818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x40, 0x10", "pmovzxbw xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbw6819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x58, 0x10", "pmovzxbw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbw6820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x18", "pmovzxbw xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbw6821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x60, 0x10", "pmovzxbw xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxdq6822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x35, 0xFB", "pmovzxdq xmm15, xmm11");
}



#[test]
fn enc_sse41_pmovzxdq6823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xC1", "pmovzxdq xmm0, xmm1");
}



#[test]
fn enc_sse41_pmovzxdq6824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xDB", "pmovzxdq xmm3, xmm3");
}



#[test]
fn enc_sse41_pmovzxdq6825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x35, 0xE3", "pmovzxdq xmm4, xmm11");
}



#[test]
fn enc_sse41_pmovzxdq6826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x35, 0xDC", "pmovzxdq xmm3, xmm12");
}



#[test]
fn enc_sse41_pmovzxdq6827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0x18", "pmovzxdq xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq6828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x60, 0x10", "pmovzxdq xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxdq6829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x24, 0x42", "pmovzxdq xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxdq6830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x08", "pmovzxdq xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq6831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0x24, 0x42", "pmovzxdq xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd6832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xE3", "pmovzxwd xmm4, xmm11");
}



#[test]
fn enc_sse41_pmovzxwd6833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xE0", "pmovzxwd xmm4, xmm0");
}



#[test]
fn enc_sse41_pmovzxwd6834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xE3", "pmovzxwd xmm4, xmm3");
}



#[test]
fn enc_sse41_pmovzxwd6835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xCF", "pmovzxwd xmm1, xmm15");
}



#[test]
fn enc_sse41_pmovzxwd6836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0xDA", "pmovzxwd xmm11, xmm2");
}



#[test]
fn enc_sse41_pmovzxwd6837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x58, 0x10", "pmovzxwd xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxwd6838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x1C, 0x42", "pmovzxwd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd6839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x10", "pmovzxwd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwd6840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x24, 0x42", "pmovzxwd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd6841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x1C, 0x42", "pmovzxwd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwq6842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xDB", "pmovzxwq xmm3, xmm3");
}



#[test]
fn enc_sse41_pmovzxwq6843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xDB", "pmovzxwq xmm11, xmm11");
}



#[test]
fn enc_sse41_pmovzxwq6844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0xD9", "pmovzxwq xmm11, xmm1");
}



#[test]
fn enc_sse41_pmovzxwq6845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xDA", "pmovzxwq xmm3, xmm2");
}



#[test]
fn enc_sse41_pmovzxwq6846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x34, 0xE7", "pmovzxwq xmm4, xmm15");
}



#[test]
fn enc_sse41_pmovzxwq6847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x38", "pmovzxwq xmm15, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq6848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x10", "pmovzxwq xmm2, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq6849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x00", "pmovzxwq xmm0, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq6850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x58, 0x10", "pmovzxwq xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmuldq6851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0xDB", "pmuldq xmm11, xmm3");
}



#[test]
fn enc_sse41_pmuldq6852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x28, 0xC3", "pmuldq xmm0, xmm11");
}



#[test]
fn enc_sse41_pmuldq6853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x28, 0xCC", "pmuldq xmm1, xmm12");
}



#[test]
fn enc_sse41_pmuldq6854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0xC8", "pmuldq xmm1, xmm0");
}



#[test]
fn enc_sse41_pmuldq6855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x28, 0xFF", "pmuldq xmm15, xmm15");
}



#[test]
fn enc_sse41_pmuldq6856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x18", "pmuldq xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pmuldq6857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x10", "pmuldq xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmuldq6858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0x1C, 0x42", "pmuldq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmuldq6859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0x60, 0x10", "pmuldq xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmuldq6860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x0C, 0x42", "pmuldq xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld6861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xFB", "pmulld xmm15, xmm3");
}



#[test]
fn enc_sse41_pmulld6862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x40, 0xC4", "pmulld xmm0, xmm12");
}



#[test]
fn enc_sse41_pmulld6863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xE3", "pmulld xmm12, xmm3");
}



#[test]
fn enc_sse41_pmulld6864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x40, 0xE7", "pmulld xmm4, xmm15");
}



#[test]
fn enc_sse41_pmulld6865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0x60, 0x10", "pmulld xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmulld6866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x24, 0x42", "pmulld xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld6867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x18", "pmulld xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pmulld6868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x50, 0x10", "pmulld xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmulld6869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x60, 0x10", "pmulld xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_ptest6870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x17, 0xDB", "ptest xmm3, xmm11");
}



#[test]
fn enc_sse41_ptest6871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x17, 0xCF", "ptest xmm1, xmm15");
}



#[test]
fn enc_sse41_ptest6872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xD8", "ptest xmm3, xmm0");
}



#[test]
fn enc_sse41_ptest6873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xD9", "ptest xmm3, xmm1");
}



#[test]
fn enc_sse41_ptest6874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xD8", "ptest xmm11, xmm0");
}



#[test]
fn enc_sse41_ptest6875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x10", "ptest xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_ptest6876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x58, 0x10", "ptest xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_ptest6877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x1C, 0x42", "ptest xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_ptest6878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x48, 0x10", "ptest xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_ptest6879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x58, 0x10", "ptest xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_roundpd6880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm11, xmm4, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0xDC, 0x67", "roundpd xmm11, xmm4, 103");
}



#[test]
fn enc_sse41_roundpd6881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, xmm3, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xC3, 0x77", "roundpd xmm0, xmm3, 119");
}



#[test]
fn enc_sse41_roundpd6882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, xmm12, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xD4, 0x72", "roundpd xmm2, xmm12, 114");
}



#[test]
fn enc_sse41_roundpd6883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm12, xmm0, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0xE0, 0x09", "roundpd xmm12, xmm0, 9");
}



#[test]
fn enc_sse41_roundpd6884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm3, xmm12, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xDC, 0x4E", "roundpd xmm3, xmm12, 78");
}



#[test]
fn enc_sse41_roundpd6885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm12, QWORD [rax * 2 + rdx], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0x24, 0x42, 0x1B", "roundpd xmm12, QWORD [rax * 2 + rdx], 27");
}



#[test]
fn enc_sse41_roundpd6886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm15, QWORD [rax * 2 + rdx], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0x3C, 0x42, 0x7C", "roundpd xmm15, QWORD [rax * 2 + rdx], 124");
}



#[test]
fn enc_sse41_roundpd6887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm3, QWORD [rax + 16], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x58, 0x10, 0x2A", "roundpd xmm3, QWORD [rax + 16], 42");
}



#[test]
fn enc_sse41_roundpd6888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm4, QWORD [rax + 16], 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x60, 0x10, 0x54", "roundpd xmm4, QWORD [rax + 16], 84");
}



#[test]
fn enc_sse41_roundpd6889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm11, QWORD [rax], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0x18, 0x2C", "roundpd xmm11, QWORD [rax], 44");
}



#[test]
fn enc_sse41_roundps6890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm3, xmm15, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x08, 0xDF, 0x4A", "roundps xmm3, xmm15, 74");
}



#[test]
fn enc_sse41_roundps6891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm4, xmm11, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x08, 0xE3, 0x46", "roundps xmm4, xmm11, 70");
}



#[test]
fn enc_sse41_roundps6892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, xmm3, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0xDB, 0x74", "roundps xmm11, xmm3, 116");
}



#[test]
fn enc_sse41_roundps6893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm1, xmm2, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xCA, 0x6A", "roundps xmm1, xmm2, 106");
}



#[test]
fn enc_sse41_roundps6894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm4, xmm12, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x08, 0xE4, 0x36", "roundps xmm4, xmm12, 54");
}



#[test]
fn enc_sse41_roundps6895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm0, QWORD [rax * 2 + rdx], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x04, 0x42, 0x04", "roundps xmm0, QWORD [rax * 2 + rdx], 4");
}



#[test]
fn enc_sse41_roundps6896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm12, QWORD [rax], 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x20, 0x68", "roundps xmm12, QWORD [rax], 104");
}



#[test]
fn enc_sse41_roundps6897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, QWORD [rax], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x18, 0x17", "roundps xmm11, QWORD [rax], 23");
}



#[test]
fn enc_sse41_roundps6898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm0, QWORD [rax], 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x00, 0x36", "roundps xmm0, QWORD [rax], 54");
}



#[test]
fn enc_sse41_roundps6899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm1, QWORD [rax * 2 + rdx], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x0C, 0x42, 0x57", "roundps xmm1, QWORD [rax * 2 + rdx], 87");
}



#[test]
fn enc_sse41_roundsd6900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm3, xmm3, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xDB, 0x1E", "roundsd xmm3, xmm3, 30");
}



#[test]
fn enc_sse41_roundsd6901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, xmm11, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0B, 0xE3, 0x20", "roundsd xmm4, xmm11, 32");
}



#[test]
fn enc_sse41_roundsd6902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, xmm0, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xE0, 0x68", "roundsd xmm4, xmm0, 104");
}



#[test]
fn enc_sse41_roundsd6903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm0, xmm2, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xC2, 0x4E", "roundsd xmm0, xmm2, 78");
}



#[test]
fn enc_sse41_roundsd6904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm2, xmm1, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xD1, 0x75", "roundsd xmm2, xmm1, 117");
}



#[test]
fn enc_sse41_roundsd6905() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm11, QWORD [rax * 2 + rdx], 8
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0x1C, 0x42, 0x08", "roundsd xmm11, QWORD [rax * 2 + rdx], 8");
}



#[test]
fn enc_sse41_roundsd6906() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, QWORD [rax + 16], 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x60, 0x10, 0x19", "roundsd xmm4, QWORD [rax + 16], 25");
}



#[test]
fn enc_sse41_roundsd6907() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm1, QWORD [rax + 16], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x48, 0x10, 0x47", "roundsd xmm1, QWORD [rax + 16], 71");
}



#[test]
fn enc_sse41_roundsd6908() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, QWORD [rax * 2 + rdx], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0x24, 0x42, 0x18", "roundsd xmm12, QWORD [rax * 2 + rdx], 24");
}



#[test]
fn enc_sse41_roundsd6909() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm2, QWORD [rax + 16], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x50, 0x10, 0x79", "roundsd xmm2, QWORD [rax + 16], 121");
}



#[test]
fn enc_sse41_roundss6910() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm12, xmm3, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0xE3, 0x44", "roundss xmm12, xmm3, 68");
}



#[test]
fn enc_sse41_roundss6911() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm15, xmm2, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0xFA, 0x1D", "roundss xmm15, xmm2, 29");
}



#[test]
fn enc_sse41_roundss6912() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm11, xmm12, 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0A, 0xDC, 0x4E", "roundss xmm11, xmm12, 78");
}



#[test]
fn enc_sse41_roundss6913() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm11, xmm12, 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0A, 0xDC, 0x55", "roundss xmm11, xmm12, 85");
}



#[test]
fn enc_sse41_roundss6914() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm3, xmm2, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xDA, 0x0A", "roundss xmm3, xmm2, 10");
}



#[test]
fn enc_sse41_roundss6915() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm11, QWORD [rax * 2 + rdx], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0x1C, 0x42, 0x20", "roundss xmm11, QWORD [rax * 2 + rdx], 32");
}



#[test]
fn enc_sse41_roundss6916() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm2, QWORD [rax * 2 + rdx], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x14, 0x42, 0x6D", "roundss xmm2, QWORD [rax * 2 + rdx], 109");
}



#[test]
fn enc_sse41_roundss6917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, QWORD [rax], 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x08, 0x4F", "roundss xmm1, QWORD [rax], 79");
}



#[test]
fn enc_sse41_roundss6918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm0, QWORD [rax + 16], 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x40, 0x10, 0x6A", "roundss xmm0, QWORD [rax + 16], 106");
}



#[test]
fn enc_sse41_roundss6919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm11, QWORD [rax * 2 + rdx], 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0x1C, 0x42, 0x64", "roundss xmm11, QWORD [rax * 2 + rdx], 100");
}


