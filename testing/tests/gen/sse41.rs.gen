
#[test]
fn enc_sse41_blendpd4917() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm3, xmm4, 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xDC, 0x27", "blendpd xmm3, xmm4, 39");
}



#[test]
fn enc_sse41_blendpd4918() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm12, xmm3, 11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0xE3, 0x0B", "blendpd xmm12, xmm3, 11");
}



#[test]
fn enc_sse41_blendpd4919() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm3, xmm4, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0xDC, 0x09", "blendpd xmm3, xmm4, 9");
}



#[test]
fn enc_sse41_blendpd4920() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm0, xmm15, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0D, 0xC7, 0x10", "blendpd xmm0, xmm15, 16");
}



#[test]
fn enc_sse41_blendpd4921() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm11, xmm2, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0xDA, 0x75", "blendpd xmm11, xmm2, 117");
}



#[test]
fn enc_sse41_blendpd4922() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, QWORD [rax * 2 + rdx], 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x3C, 0x42, 0x79", "blendpd xmm15, QWORD [rax * 2 + rdx], 121");
}



#[test]
fn enc_sse41_blendpd4923() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm2, QWORD [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x10, 0x51", "blendpd xmm2, QWORD [rax], 81");
}



#[test]
fn enc_sse41_blendpd4924() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm2, QWORD [rax * 2 + rdx], 85
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x14, 0x42, 0x55", "blendpd xmm2, QWORD [rax * 2 + rdx], 85");
}



#[test]
fn enc_sse41_blendpd4925() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm15, QWORD [rax * 2 + rdx], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0D, 0x3C, 0x42, 0x13", "blendpd xmm15, QWORD [rax * 2 + rdx], 19");
}



#[test]
fn enc_sse41_blendpd4926() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendpd xmm2, QWORD [rax + 16], 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0D, 0x50, 0x10, 0x77", "blendpd xmm2, QWORD [rax + 16], 119");
}



#[test]
fn enc_sse41_blendps4927() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm2, xmm3, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xD3, 0x3E", "blendps xmm2, xmm3, 62");
}



#[test]
fn enc_sse41_blendps4928() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm11, xmm3, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0C, 0xDB, 0x32", "blendps xmm11, xmm3, 50");
}



#[test]
fn enc_sse41_blendps4929() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm2, xmm12, 115
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0C, 0xD4, 0x73", "blendps xmm2, xmm12, 115");
}



#[test]
fn enc_sse41_blendps4930() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm1, xmm3, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xCB, 0x5C", "blendps xmm1, xmm3, 92");
}



#[test]
fn enc_sse41_blendps4931() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, xmm1, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0xD9, 0x79", "blendps xmm3, xmm1, 121");
}



#[test]
fn enc_sse41_blendps4932() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, QWORD [rax], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x18, 0x56", "blendps xmm3, QWORD [rax], 86");
}



#[test]
fn enc_sse41_blendps4933() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, QWORD [rax + 16], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x58, 0x10, 0x66", "blendps xmm3, QWORD [rax + 16], 102");
}



#[test]
fn enc_sse41_blendps4934() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm3, QWORD [rax], 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x18, 0x33", "blendps xmm3, QWORD [rax], 51");
}



#[test]
fn enc_sse41_blendps4935() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm4, QWORD [rax * 2 + rdx], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x24, 0x42, 0x0D", "blendps xmm4, QWORD [rax * 2 + rdx], 13");
}



#[test]
fn enc_sse41_blendps4936() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendps xmm1, QWORD [rax], 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0C, 0x08, 0x1E", "blendps xmm1, QWORD [rax], 30");
}



#[test]
fn enc_sse41_blendvpd4937() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xD1", "blendvpd xmm2, xmm1");
}



#[test]
fn enc_sse41_blendvpd4938() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0xE4", "blendvpd xmm12, xmm4");
}



#[test]
fn enc_sse41_blendvpd4939() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0xC8", "blendvpd xmm1, xmm0");
}



#[test]
fn enc_sse41_blendvpd4940() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0xDA", "blendvpd xmm11, xmm2");
}



#[test]
fn enc_sse41_blendvpd4941() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x15, 0x20", "blendvpd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvpd4942() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x58, 0x10", "blendvpd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvpd4943() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x40, 0x10", "blendvpd xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvpd4944() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x10", "blendvpd xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvpd4945() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvpd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x15, 0x50, 0x10", "blendvpd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvps4946() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x14, 0xE3", "blendvps xmm4, xmm11");
}



#[test]
fn enc_sse41_blendvps4947() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xE4", "blendvps xmm4, xmm4");
}



#[test]
fn enc_sse41_blendvps4948() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0xE2", "blendvps xmm12, xmm2");
}



#[test]
fn enc_sse41_blendvps4949() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x14, 0xD7", "blendvps xmm2, xmm15");
}



#[test]
fn enc_sse41_blendvps4950() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0xE2", "blendvps xmm4, xmm2");
}



#[test]
fn enc_sse41_blendvps4951() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x04, 0x42", "blendvps xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvps4952() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x08", "blendvps xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_blendvps4953() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0x58, 0x10", "blendvps xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_blendvps4954() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x14, 0x1C, 0x42", "blendvps xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_blendvps4955() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blendvps xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x14, 0x60, 0x10", "blendvps xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_dppd4956() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm0, xmm12, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x41, 0xC4, 0x5E", "dppd xmm0, xmm12, 94");
}



#[test]
fn enc_sse41_dppd4957() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm0, xmm1, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xC1, 0x1E", "dppd xmm0, xmm1, 30");
}



#[test]
fn enc_sse41_dppd4958() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm1, xmm11, 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x41, 0xCB, 0x34", "dppd xmm1, xmm11, 52");
}



#[test]
fn enc_sse41_dppd4959() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm3, xmm1, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0xD9, 0x60", "dppd xmm3, xmm1, 96");
}



#[test]
fn enc_sse41_dppd4960() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm12, xmm11, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x41, 0xE3, 0x78", "dppd xmm12, xmm11, 120");
}



#[test]
fn enc_sse41_dppd4961() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm12, QWORD [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x20, 0x6D", "dppd xmm12, QWORD [rax], 109");
}



#[test]
fn enc_sse41_dppd4962() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm1, QWORD [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x08, 0x66", "dppd xmm1, QWORD [rax], 102");
}



#[test]
fn enc_sse41_dppd4963() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm15, QWORD [rax + 16], 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x78, 0x10, 0x3C", "dppd xmm15, QWORD [rax + 16], 60");
}



#[test]
fn enc_sse41_dppd4964() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm11, QWORD [rax + 16], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x41, 0x58, 0x10, 0x11", "dppd xmm11, QWORD [rax + 16], 17");
}



#[test]
fn enc_sse41_dppd4965() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dppd xmm4, QWORD [rax + 16], 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x41, 0x60, 0x10, 0x71", "dppd xmm4, QWORD [rax + 16], 113");
}



#[test]
fn enc_sse41_dpps4966() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, xmm15, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x40, 0xE7, 0x09", "dpps xmm4, xmm15, 9");
}



#[test]
fn enc_sse41_dpps4967() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, xmm3, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0xE3, 0x67", "dpps xmm4, xmm3, 103");
}



#[test]
fn enc_sse41_dpps4968() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, xmm15, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x40, 0xE7, 0x57", "dpps xmm4, xmm15, 87");
}



#[test]
fn enc_sse41_dpps4969() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm11, xmm2, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0xDA, 0x54", "dpps xmm11, xmm2, 84");
}



#[test]
fn enc_sse41_dpps4970() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm2, xmm15, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x40, 0xD7, 0x4C", "dpps xmm2, xmm15, 76");
}



#[test]
fn enc_sse41_dpps4971() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm12, QWORD [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x40, 0x20, 0x6D", "dpps xmm12, QWORD [rax], 109");
}



#[test]
fn enc_sse41_dpps4972() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, QWORD [rax], 28
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x20, 0x1C", "dpps xmm4, QWORD [rax], 28");
}



#[test]
fn enc_sse41_dpps4973() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm0, QWORD [rax + 16], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x40, 0x10, 0x18", "dpps xmm0, QWORD [rax + 16], 24");
}



#[test]
fn enc_sse41_dpps4974() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm4, QWORD [rax * 2 + rdx], 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x24, 0x42, 0x43", "dpps xmm4, QWORD [rax * 2 + rdx], 67");
}



#[test]
fn enc_sse41_dpps4975() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; dpps xmm1, QWORD [rax * 2 + rdx], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x40, 0x0C, 0x42, 0x0A", "dpps xmm1, QWORD [rax * 2 + rdx], 10");
}



#[test]
fn enc_sse41_extractps4976() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rdx, xmm3, 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xDA, 0x7A", "extractps rdx, xmm3, 122");
}



#[test]
fn enc_sse41_extractps4977() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rcx, xmm11, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x17, 0xD9, 0x68", "extractps rcx, xmm11, 104");
}



#[test]
fn enc_sse41_extractps4978() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rdx, xmm12, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x17, 0xE2, 0x6C", "extractps rdx, xmm12, 108");
}



#[test]
fn enc_sse41_extractps4979() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm3, 3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xD8, 0x03", "extractps rax, xmm3, 3");
}



#[test]
fn enc_sse41_extractps4980() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps rax, xmm2, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x17, 0xD0, 0x10", "extractps rax, xmm2, 16");
}



#[test]
fn enc_sse41_extractps4981() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm15, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0xF8, 0x38", "extractps eax, xmm15, 56");
}



#[test]
fn enc_sse41_extractps4982() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm11, 34
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0x18, 0x22", "extractps DWORD [rax], xmm11, 34");
}



#[test]
fn enc_sse41_extractps4983() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm0, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x00, 0x7B", "extractps DWORD [rax], xmm0, 123");
}



#[test]
fn enc_sse41_extractps4984() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps DWORD [rax], xmm0, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x17, 0x00, 0x36", "extractps DWORD [rax], xmm0, 54");
}



#[test]
fn enc_sse41_extractps4985() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extractps eax, xmm12, 36
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x17, 0xE0, 0x24", "extractps eax, xmm12, 36");
}



#[test]
fn enc_sse41_insertps4986() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, xmm12, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x21, 0xDC, 0x50", "insertps xmm11, xmm12, 80");
}



#[test]
fn enc_sse41_insertps4987() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm2, xmm1, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0xD1, 0x4A", "insertps xmm2, xmm1, 74");
}



#[test]
fn enc_sse41_insertps4988() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, xmm1, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xF9, 0x02", "insertps xmm15, xmm1, 2");
}



#[test]
fn enc_sse41_insertps4989() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm12, xmm1, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xE1, 0x0A", "insertps xmm12, xmm1, 10");
}



#[test]
fn enc_sse41_insertps4990() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, xmm3, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0xFB, 0x6F", "insertps xmm15, xmm3, 111");
}



#[test]
fn enc_sse41_insertps4991() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm1, DWORD [rax * 2 + rdx], 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x0C, 0x42, 0x7C", "insertps xmm1, DWORD [rax * 2 + rdx], 124");
}



#[test]
fn enc_sse41_insertps4992() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm15, DWORD [rax * 2 + rdx], 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0x3C, 0x42, 0x3D", "insertps xmm15, DWORD [rax * 2 + rdx], 61");
}



#[test]
fn enc_sse41_insertps4993() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm3, DWORD [rax], 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x18, 0x59", "insertps xmm3, DWORD [rax], 89");
}



#[test]
fn enc_sse41_insertps4994() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm2, DWORD [rax * 2 + rdx], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x21, 0x14, 0x42, 0x21", "insertps xmm2, DWORD [rax * 2 + rdx], 33");
}



#[test]
fn enc_sse41_insertps4995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertps xmm11, DWORD [rax + 16], 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x21, 0x58, 0x10, 0x0C", "insertps xmm11, DWORD [rax + 16], 12");
}



#[test]
fn enc_sse41_movntdqa4996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm4, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2A, 0x24, 0x42", "movntdqa xmm4, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa4997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x1C, 0x42", "movntdqa xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa4998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x20", "movntdqa xmm12, OWORD [rax]");
}



#[test]
fn enc_sse41_movntdqa4999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm15, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x3C, 0x42", "movntdqa xmm15, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_movntdqa5000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntdqa xmm11, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2A, 0x58, 0x10", "movntdqa xmm11, OWORD [rax + 16]");
}



#[test]
fn enc_sse41_mpsadbw5001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, xmm4, 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xDC, 0x05", "mpsadbw xmm3, xmm4, 5");
}



#[test]
fn enc_sse41_mpsadbw5002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm11, xmm3, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0xDB, 0x57", "mpsadbw xmm11, xmm3, 87");
}



#[test]
fn enc_sse41_mpsadbw5003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm2, xmm3, 12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xD3, 0x0C", "mpsadbw xmm2, xmm3, 12");
}



#[test]
fn enc_sse41_mpsadbw5004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm0, xmm4, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0xC4, 0x3A", "mpsadbw xmm0, xmm4, 58");
}



#[test]
fn enc_sse41_mpsadbw5005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, xmm15, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x42, 0xDF, 0x54", "mpsadbw xmm3, xmm15, 84");
}



#[test]
fn enc_sse41_mpsadbw5006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, QWORD [rax + 16], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x58, 0x10, 0x0A", "mpsadbw xmm3, QWORD [rax + 16], 10");
}



#[test]
fn enc_sse41_mpsadbw5007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm12, QWORD [rax * 2 + rdx], 65
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0x24, 0x42, 0x41", "mpsadbw xmm12, QWORD [rax * 2 + rdx], 65");
}



#[test]
fn enc_sse41_mpsadbw5008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm4, QWORD [rax + 16], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x60, 0x10, 0x63", "mpsadbw xmm4, QWORD [rax + 16], 99");
}



#[test]
fn enc_sse41_mpsadbw5009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm12, QWORD [rax], 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x42, 0x20, 0x7B", "mpsadbw xmm12, QWORD [rax], 123");
}



#[test]
fn enc_sse41_mpsadbw5010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; mpsadbw xmm3, QWORD [rax * 2 + rdx], 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x42, 0x1C, 0x42, 0x26", "mpsadbw xmm3, QWORD [rax * 2 + rdx], 38");
}



#[test]
fn enc_sse41_packusdw5011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xE3", "packusdw xmm4, xmm3");
}



#[test]
fn enc_sse41_packusdw5012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xE1", "packusdw xmm12, xmm1");
}



#[test]
fn enc_sse41_packusdw5013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0xD9", "packusdw xmm11, xmm1");
}



#[test]
fn enc_sse41_packusdw5014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0xCB", "packusdw xmm1, xmm3");
}



#[test]
fn enc_sse41_packusdw5015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x2B, 0xDF", "packusdw xmm11, xmm15");
}



#[test]
fn enc_sse41_packusdw5016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x50, 0x10", "packusdw xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_packusdw5017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x04, 0x42", "packusdw xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_packusdw5018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x2B, 0x58, 0x10", "packusdw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_packusdw5019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x00", "packusdw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_packusdw5020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; packusdw xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x2B, 0x1C, 0x42", "packusdw xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pblendvb5021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xD9", "pblendvb xmm3, xmm1");
}



#[test]
fn enc_sse41_pblendvb5022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0xE0", "pblendvb xmm12, xmm0");
}



#[test]
fn enc_sse41_pblendvb5023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x10, 0xCC", "pblendvb xmm1, xmm12");
}



#[test]
fn enc_sse41_pblendvb5024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0xD1", "pblendvb xmm2, xmm1");
}



#[test]
fn enc_sse41_pblendvb5025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0xFC", "pblendvb xmm15, xmm4");
}



#[test]
fn enc_sse41_pblendvb5026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0x20", "pblendvb xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pblendvb5027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x10, 0x10", "pblendvb xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pblendvb5028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0x58, 0x10", "pblendvb xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pblendvb5029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendvb xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x10, 0x18", "pblendvb xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pblendw5030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm4, xmm1, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xE1, 0x3C", "pblendw xmm4, xmm1, 60");
}



#[test]
fn enc_sse41_pblendw5031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm0, xmm3, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xC3, 0x75", "pblendw xmm0, xmm3, 117");
}



#[test]
fn enc_sse41_pblendw5032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, xmm12, 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0E, 0xFC, 0x10", "pblendw xmm15, xmm12, 16");
}



#[test]
fn enc_sse41_pblendw5033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm4, xmm2, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xE2, 0x5E", "pblendw xmm4, xmm2, 94");
}



#[test]
fn enc_sse41_pblendw5034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, xmm1, 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0xC9, 0x7E", "pblendw xmm1, xmm1, 126");
}



#[test]
fn enc_sse41_pblendw5035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm2, QWORD [rax], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x10, 0x21", "pblendw xmm2, QWORD [rax], 33");
}



#[test]
fn enc_sse41_pblendw5036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, QWORD [rax + 16], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0x78, 0x10, 0x60", "pblendw xmm15, QWORD [rax + 16], 96");
}



#[test]
fn enc_sse41_pblendw5037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm12, QWORD [rax + 16], 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0x60, 0x10, 0x47", "pblendw xmm12, QWORD [rax + 16], 71");
}



#[test]
fn enc_sse41_pblendw5038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm15, QWORD [rax], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0E, 0x38, 0x04", "pblendw xmm15, QWORD [rax], 4");
}



#[test]
fn enc_sse41_pblendw5039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pblendw xmm1, QWORD [rax + 16], 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0E, 0x48, 0x10, 0x07", "pblendw xmm1, QWORD [rax + 16], 7");
}



#[test]
fn enc_sse41_pextrb5040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm12, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xE1, 0x3B", "pextrb rcx, xmm12, 59");
}



#[test]
fn enc_sse41_pextrb5041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm11, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x14, 0xD8, 0x5D", "pextrb rax, xmm11, 93");
}



#[test]
fn enc_sse41_pextrb5042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm2, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD1, 0x06", "pextrb rcx, xmm2, 6");
}



#[test]
fn enc_sse41_pextrb5043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rax, xmm2, 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD0, 0x15", "pextrb rax, xmm2, 21");
}



#[test]
fn enc_sse41_pextrb5044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb rcx, xmm3, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x14, 0xD9, 0x12", "pextrb rcx, xmm3, 18");
}



#[test]
fn enc_sse41_pextrb5045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm15, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xFA, 0x5E", "pextrb edx, xmm15, 94");
}



#[test]
fn enc_sse41_pextrb5046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm15, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xF9, 0x39", "pextrb ecx, xmm15, 57");
}



#[test]
fn enc_sse41_pextrb5047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb edx, xmm4, 119
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0xE2, 0x77", "pextrb edx, xmm4, 119");
}



#[test]
fn enc_sse41_pextrb5048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb eax, xmm12, 80
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xE0, 0x50", "pextrb eax, xmm12, 80");
}



#[test]
fn enc_sse41_pextrb5049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb ecx, xmm12, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0xE1, 0x5C", "pextrb ecx, xmm12, 92");
}



#[test]
fn enc_sse41_pextrb5050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm0, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x00, 0x16", "pextrb BYTE [rax], xmm0, 22");
}



#[test]
fn enc_sse41_pextrb5051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm1, 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x08, 0x35", "pextrb BYTE [rax], xmm1, 53");
}



#[test]
fn enc_sse41_pextrb5052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax * 2 + rdx], xmm11, 95
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x14, 0x1C, 0x42, 0x5F", "pextrb BYTE [rax * 2 + rdx], xmm11, 95");
}



#[test]
fn enc_sse41_pextrb5053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax + 16], xmm0, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x40, 0x10, 0x40", "pextrb BYTE [rax + 16], xmm0, 64");
}



#[test]
fn enc_sse41_pextrb5054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrb BYTE [rax], xmm0, 90
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x14, 0x00, 0x5A", "pextrb BYTE [rax], xmm0, 90");
}



#[test]
fn enc_sse41_pextrd5055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm15, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0xF8, 0x7C", "pextrd eax, xmm15, 124");
}



#[test]
fn enc_sse41_pextrd5056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm1, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x08, 0x4A", "pextrd DWORD [rax], xmm1, 74");
}



#[test]
fn enc_sse41_pextrd5057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm1, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x08, 0x66", "pextrd DWORD [rax], xmm1, 102");
}



#[test]
fn enc_sse41_pextrd5058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd eax, xmm15, 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x16, 0xF8, 0x58", "pextrd eax, xmm15, 88");
}



#[test]
fn enc_sse41_pextrd5059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrd DWORD [rax], xmm2, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x16, 0x10, 0x60", "pextrd DWORD [rax], xmm2, 96");
}



#[test]
fn enc_sse41_pextrq5060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm15, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0x38, 0x4D", "pextrq [rax], xmm15, 77");
}



#[test]
fn enc_sse41_pextrq5061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm3, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0xD8, 0x0F", "pextrq rax, xmm3, 15");
}



#[test]
fn enc_sse41_pextrq5062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq [rax], xmm2, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0x10, 0x64", "pextrq [rax], xmm2, 100");
}



#[test]
fn enc_sse41_pextrq5063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm11, 116
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x16, 0xD8, 0x74", "pextrq rax, xmm11, 116");
}



#[test]
fn enc_sse41_pextrq5064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrq rax, xmm2, 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x16, 0xD0, 0x65", "pextrq rax, xmm2, 101");
}



#[test]
fn enc_sse41_pextrw5065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rcx, xmm1, 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC9, 0x04", "pextrw rcx, xmm1, 4");
}



#[test]
fn enc_sse41_pextrw5066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm2, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xD2, 0x5C", "pextrw rdx, xmm2, 92");
}



#[test]
fn enc_sse41_pextrw5067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm12, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x15, 0xE2, 0x1A", "pextrw rdx, xmm12, 26");
}



#[test]
fn enc_sse41_pextrw5068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rax, xmm1, 57
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xC8, 0x39", "pextrw rax, xmm1, 57");
}



#[test]
fn enc_sse41_pextrw5069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw rdx, xmm4, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x15, 0xE2, 0x46", "pextrw rdx, xmm4, 70");
}



#[test]
fn enc_sse41_pextrw5070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm12, 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCC, 0x46", "pextrw ecx, xmm12, 70");
}



#[test]
fn enc_sse41_pextrw5071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm11, 107
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCB, 0x6B", "pextrw ecx, xmm11, 107");
}



#[test]
fn enc_sse41_pextrw5072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm4, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xCC, 0x0A", "pextrw ecx, xmm4, 10");
}



#[test]
fn enc_sse41_pextrw5073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw edx, xmm1, 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC5, 0xD1, 0x51", "pextrw edx, xmm1, 81");
}



#[test]
fn enc_sse41_pextrw5074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw ecx, xmm12, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0xC5, 0xCC, 0x53", "pextrw ecx, xmm12, 83");
}



#[test]
fn enc_sse41_pextrw5075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm2, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x10, 0x14", "pextrw WORD [rax], xmm2, 20");
}



#[test]
fn enc_sse41_pextrw5076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax * 2 + rdx], xmm0, 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x15, 0x04, 0x42, 0x0A", "pextrw WORD [rax * 2 + rdx], xmm0, 10");
}



#[test]
fn enc_sse41_pextrw5077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm12, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x20, 0x0F", "pextrw WORD [rax], xmm12, 15");
}



#[test]
fn enc_sse41_pextrw5078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax + 16], xmm15, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x78, 0x10, 0x30", "pextrw WORD [rax + 16], xmm15, 48");
}



#[test]
fn enc_sse41_pextrw5079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pextrw WORD [rax], xmm12, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x15, 0x20, 0x3A", "pextrw WORD [rax], xmm12, 58");
}



#[test]
fn enc_sse41_phminposuw5080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0xF8", "phminposuw xmm15, xmm0");
}



#[test]
fn enc_sse41_phminposuw5081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xD2", "phminposuw xmm2, xmm2");
}



#[test]
fn enc_sse41_phminposuw5082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xCA", "phminposuw xmm1, xmm2");
}



#[test]
fn enc_sse41_phminposuw5083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xCB", "phminposuw xmm1, xmm3");
}



#[test]
fn enc_sse41_phminposuw5084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0xE0", "phminposuw xmm4, xmm0");
}



#[test]
fn enc_sse41_phminposuw5085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x24, 0x42", "phminposuw xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_phminposuw5086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x58, 0x10", "phminposuw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_phminposuw5087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x41, 0x60, 0x10", "phminposuw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_phminposuw5088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x18", "phminposuw xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_phminposuw5089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; phminposuw xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x41, 0x40, 0x10", "phminposuw xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pinsrb5090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm15, [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x38, 0x11", "pinsrb xmm15, [rax], 17");
}



#[test]
fn enc_sse41_pinsrb5091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x10, 0x11", "pinsrb xmm2, [rax], 17");
}



#[test]
fn enc_sse41_pinsrb5092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, [rax], 81
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x20, 0x51", "pinsrb xmm12, [rax], 81");
}



#[test]
fn enc_sse41_pinsrb5093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, [rax], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x18, 0x5B", "pinsrb xmm3, [rax], 91");
}



#[test]
fn enc_sse41_pinsrb5094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm0, [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x00, 0x6F", "pinsrb xmm0, [rax], 111");
}



#[test]
fn enc_sse41_pinsrb5095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, BYTE [rax], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x18, 0x56", "pinsrb xmm3, BYTE [rax], 86");
}



#[test]
fn enc_sse41_pinsrb5096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, BYTE [rax], 19
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x18, 0x13", "pinsrb xmm3, BYTE [rax], 19");
}



#[test]
fn enc_sse41_pinsrb5097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, BYTE [rax], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x08, 0x35", "pinsrb xmm1, BYTE [rax], 53");
}



#[test]
fn enc_sse41_pinsrb5098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm2, BYTE [rax], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0x10, 0x66", "pinsrb xmm2, BYTE [rax], 102");
}



#[test]
fn enc_sse41_pinsrb5099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, BYTE [rax], 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0x20, 0x75", "pinsrb xmm12, BYTE [rax], 117");
}



#[test]
fn enc_sse41_pinsrb5100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm1, edx, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xCA, 0x79", "pinsrb xmm1, edx, 121");
}



#[test]
fn enc_sse41_pinsrb5101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm3, eax, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x20, 0xD8, 0x18", "pinsrb xmm3, eax, 24");
}



#[test]
fn enc_sse41_pinsrb5102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm11, ecx, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xD9, 0x3F", "pinsrb xmm11, ecx, 63");
}



#[test]
fn enc_sse41_pinsrb5103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, edx, 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE2, 0x20", "pinsrb xmm12, edx, 32");
}



#[test]
fn enc_sse41_pinsrb5104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrb xmm12, edx, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x20, 0xE2, 0x12", "pinsrb xmm12, edx, 18");
}



#[test]
fn enc_sse41_pinsrd5105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm11, [rax], 21
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x18, 0x15", "pinsrd xmm11, [rax], 21");
}



#[test]
fn enc_sse41_pinsrd5106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm12, [rax], 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x20, 0x57", "pinsrd xmm12, [rax], 87");
}



#[test]
fn enc_sse41_pinsrd5107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm1, [rax], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x08, 0x5D", "pinsrd xmm1, [rax], 93");
}



#[test]
fn enc_sse41_pinsrd5108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm3, [rax], 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x18, 0x31", "pinsrd xmm3, [rax], 49");
}



#[test]
fn enc_sse41_pinsrd5109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm12, [rax], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x20, 0x5D", "pinsrd xmm12, [rax], 93");
}



#[test]
fn enc_sse41_pinsrd5110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm4, eax, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0xE0, 0x53", "pinsrd xmm4, eax, 83");
}



#[test]
fn enc_sse41_pinsrd5111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm4, DWORD [rax], 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x20, 0x11", "pinsrd xmm4, DWORD [rax], 17");
}



#[test]
fn enc_sse41_pinsrd5112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm1, eax, 79
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0xC8, 0x4F", "pinsrd xmm1, eax, 79");
}



#[test]
fn enc_sse41_pinsrd5113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm4, DWORD [rax], 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x22, 0x20, 0x25", "pinsrd xmm4, DWORD [rax], 37");
}



#[test]
fn enc_sse41_pinsrd5114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrd xmm15, DWORD [rax], 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x22, 0x38, 0x63", "pinsrd xmm15, DWORD [rax], 99");
}



#[test]
fn enc_sse41_pinsrq5115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x06", "pinsrq xmm15, [rax], 6");
}



#[test]
fn enc_sse41_pinsrq5116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x6D", "pinsrq xmm15, [rax], 109");
}



#[test]
fn enc_sse41_pinsrq5117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm1, [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x08, 0x60", "pinsrq xmm1, [rax], 96");
}



#[test]
fn enc_sse41_pinsrq5118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm2, [rax], 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x10, 0x0D", "pinsrq xmm2, [rax], 13");
}



#[test]
fn enc_sse41_pinsrq5119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm15, [rax], 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x38, 0x30", "pinsrq xmm15, [rax], 48");
}



#[test]
fn enc_sse41_pinsrq5120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm0, [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x00, 0x48", "pinsrq xmm0, [rax], 72");
}



#[test]
fn enc_sse41_pinsrq5121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm1, rax, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0xC8, 0x14", "pinsrq xmm1, rax, 20");
}



#[test]
fn enc_sse41_pinsrq5122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm4, [rax], 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0x20, 0x16", "pinsrq xmm4, [rax], 22");
}



#[test]
fn enc_sse41_pinsrq5123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm3, rax, 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x48, 0x0F, 0x3A, 0x22, 0xD8, 0x02", "pinsrq xmm3, rax, 2");
}



#[test]
fn enc_sse41_pinsrq5124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pinsrq xmm11, [rax], 4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x4C, 0x0F, 0x3A, 0x22, 0x18, 0x04", "pinsrq xmm11, [rax], 4");
}



#[test]
fn enc_sse41_pmaxsb5125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3C, 0xDC", "pmaxsb xmm3, xmm12");
}



#[test]
fn enc_sse41_pmaxsb5126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xC8", "pmaxsb xmm1, xmm0");
}



#[test]
fn enc_sse41_pmaxsb5127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0xE2", "pmaxsb xmm4, xmm2");
}



#[test]
fn enc_sse41_pmaxsb5128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3C, 0xDB", "pmaxsb xmm3, xmm11");
}



#[test]
fn enc_sse41_pmaxsb5129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x20", "pmaxsb xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsb5130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0x24, 0x42", "pmaxsb xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsb5131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm0, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x40, 0x10", "pmaxsb xmm0, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsb5132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3C, 0x18", "pmaxsb xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsb5133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsb xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3C, 0x1C, 0x42", "pmaxsb xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd5134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xDA", "pmaxsd xmm3, xmm2");
}



#[test]
fn enc_sse41_pmaxsd5135() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0xE3", "pmaxsd xmm4, xmm3");
}



#[test]
fn enc_sse41_pmaxsd5136() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3D, 0xDF", "pmaxsd xmm3, xmm15");
}



#[test]
fn enc_sse41_pmaxsd5137() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3D, 0xC4", "pmaxsd xmm0, xmm12");
}



#[test]
fn enc_sse41_pmaxsd5138() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x20", "pmaxsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxsd5139() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x3C, 0x42", "pmaxsd xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd5140() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x1C, 0x42", "pmaxsd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxsd5141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3D, 0x48, 0x10", "pmaxsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxsd5142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxsd xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3D, 0x18", "pmaxsd xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxud5143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3F, 0xFF", "pmaxud xmm15, xmm15");
}



#[test]
fn enc_sse41_pmaxud5144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xE4", "pmaxud xmm12, xmm4");
}



#[test]
fn enc_sse41_pmaxud5145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x3F, 0xFC", "pmaxud xmm15, xmm12");
}



#[test]
fn enc_sse41_pmaxud5146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3F, 0xC7", "pmaxud xmm0, xmm15");
}



#[test]
fn enc_sse41_pmaxud5147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0xD8", "pmaxud xmm11, xmm0");
}



#[test]
fn enc_sse41_pmaxud5148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x78, 0x10", "pmaxud xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxud5149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x20", "pmaxud xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxud5150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0x10", "pmaxud xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxud5151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3F, 0x3C, 0x42", "pmaxud xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxud5152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxud xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3F, 0x24, 0x42", "pmaxud xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxuw5153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xC4", "pmaxuw xmm0, xmm12");
}



#[test]
fn enc_sse41_pmaxuw5154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xE3", "pmaxuw xmm4, xmm3");
}



#[test]
fn enc_sse41_pmaxuw5155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xE4", "pmaxuw xmm4, xmm12");
}



#[test]
fn enc_sse41_pmaxuw5156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3E, 0xC3", "pmaxuw xmm0, xmm11");
}



#[test]
fn enc_sse41_pmaxuw5157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0xDB", "pmaxuw xmm3, xmm3");
}



#[test]
fn enc_sse41_pmaxuw5158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x00", "pmaxuw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmaxuw5159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0x1C, 0x42", "pmaxuw xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmaxuw5160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3E, 0x78, 0x10", "pmaxuw xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmaxuw5161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmaxuw xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3E, 0x0C, 0x42", "pmaxuw xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb5162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0xE4", "pminsb xmm12, xmm4");
}



#[test]
fn enc_sse41_pminsb5163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xDA", "pminsb xmm3, xmm2");
}



#[test]
fn enc_sse41_pminsb5164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0xDC", "pminsb xmm11, xmm4");
}



#[test]
fn enc_sse41_pminsb5165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xC2", "pminsb xmm0, xmm2");
}



#[test]
fn enc_sse41_pminsb5166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0xE4", "pminsb xmm4, xmm4");
}



#[test]
fn enc_sse41_pminsb5167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x24, 0x42", "pminsb xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb5168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x08", "pminsb xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pminsb5169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x1C, 0x42", "pminsb xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb5170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x38, 0x14, 0x42", "pminsb xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsb5171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsb xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x38, 0x60, 0x10", "pminsb xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsd5172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xCB", "pminsd xmm1, xmm3");
}



#[test]
fn enc_sse41_pminsd5173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xCC", "pminsd xmm1, xmm4");
}



#[test]
fn enc_sse41_pminsd5174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xDA", "pminsd xmm3, xmm2");
}



#[test]
fn enc_sse41_pminsd5175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0xE2", "pminsd xmm12, xmm2");
}



#[test]
fn enc_sse41_pminsd5176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0xC8", "pminsd xmm1, xmm0");
}



#[test]
fn enc_sse41_pminsd5177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x48, 0x10", "pminsd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsd5178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0x60, 0x10", "pminsd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminsd5179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm2, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x14, 0x42", "pminsd xmm2, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsd5180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x39, 0x1C, 0x42", "pminsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminsd5181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x39, 0x20", "pminsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud5182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xC7", "pminud xmm0, xmm15");
}



#[test]
fn enc_sse41_pminud5183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xD9", "pminud xmm3, xmm1");
}



#[test]
fn enc_sse41_pminud5184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xE0", "pminud xmm4, xmm0");
}



#[test]
fn enc_sse41_pminud5185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0xDC", "pminud xmm3, xmm4");
}



#[test]
fn enc_sse41_pminud5186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3B, 0xE3", "pminud xmm4, xmm11");
}



#[test]
fn enc_sse41_pminud5187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3B, 0x18", "pminud xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud5188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x1C, 0x42", "pminud xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminud5189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x08", "pminud xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud5190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x18", "pminud xmm3, QWORD [rax]");
}



#[test]
fn enc_sse41_pminud5191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminud xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3B, 0x04, 0x42", "pminud xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminuw5192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0xDC", "pminuw xmm11, xmm4");
}



#[test]
fn enc_sse41_pminuw5193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0xE0", "pminuw xmm12, xmm0");
}



#[test]
fn enc_sse41_pminuw5194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xE4", "pminuw xmm4, xmm12");
}



#[test]
fn enc_sse41_pminuw5195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0xDB", "pminuw xmm11, xmm3");
}



#[test]
fn enc_sse41_pminuw5196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x3A, 0xDF", "pminuw xmm3, xmm15");
}



#[test]
fn enc_sse41_pminuw5197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x58, 0x10", "pminuw xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminuw5198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x78, 0x10", "pminuw xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pminuw5199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x1C, 0x42", "pminuw xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pminuw5200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x3A, 0x00", "pminuw xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pminuw5201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pminuw xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x3A, 0x58, 0x10", "pminuw xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd5202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xC9", "pmovsxbd xmm1, xmm1");
}



#[test]
fn enc_sse41_pmovsxbd5203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x21, 0xE7", "pmovsxbd xmm4, xmm15");
}



#[test]
fn enc_sse41_pmovsxbd5204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0xDA", "pmovsxbd xmm3, xmm2");
}



#[test]
fn enc_sse41_pmovsxbd5205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0xDB", "pmovsxbd xmm11, xmm3");
}



#[test]
fn enc_sse41_pmovsxbd5206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x1C, 0x42", "pmovsxbd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbd5207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x58, 0x10", "pmovsxbd xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd5208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm12, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x60, 0x10", "pmovsxbd xmm12, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd5209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x21, 0x60, 0x10", "pmovsxbd xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbd5210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbd xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x21, 0x78, 0x10", "pmovsxbd xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbq5211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xC4", "pmovsxbq xmm0, xmm4");
}



#[test]
fn enc_sse41_pmovsxbq5212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xDB", "pmovsxbq xmm3, xmm3");
}



#[test]
fn enc_sse41_pmovsxbq5213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xE0", "pmovsxbq xmm4, xmm0");
}



#[test]
fn enc_sse41_pmovsxbq5214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x22, 0xD4", "pmovsxbq xmm2, xmm12");
}



#[test]
fn enc_sse41_pmovsxbq5215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0xC2", "pmovsxbq xmm0, xmm2");
}



#[test]
fn enc_sse41_pmovsxbq5216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm3, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x18", "pmovsxbq xmm3, WORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbq5217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm15, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x22, 0x3C, 0x42", "pmovsxbq xmm15, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbq5218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm0, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x04, 0x42", "pmovsxbq xmm0, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbq5219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbq xmm2, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x22, 0x14, 0x42", "pmovsxbq xmm2, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbw5220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xC3", "pmovsxbw xmm0, xmm3");
}



#[test]
fn enc_sse41_pmovsxbw5221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x20, 0xE4", "pmovsxbw xmm12, xmm12");
}



#[test]
fn enc_sse41_pmovsxbw5222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xCA", "pmovsxbw xmm1, xmm2");
}



#[test]
fn enc_sse41_pmovsxbw5223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x20, 0xCB", "pmovsxbw xmm1, xmm3");
}



#[test]
fn enc_sse41_pmovsxbw5224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x20, 0xDB", "pmovsxbw xmm3, xmm11");
}



#[test]
fn enc_sse41_pmovsxbw5225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x24, 0x42", "pmovsxbw xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxbw5226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm15, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x78, 0x10", "pmovsxbw xmm15, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbw5227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x20", "pmovsxbw xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxbw5228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x60, 0x10", "pmovsxbw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxbw5229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxbw xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x20, 0x18", "pmovsxbw xmm11, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq5230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xE7", "pmovsxdq xmm4, xmm15");
}



#[test]
fn enc_sse41_pmovsxdq5231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0xDC", "pmovsxdq xmm11, xmm4");
}



#[test]
fn enc_sse41_pmovsxdq5232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0xD0", "pmovsxdq xmm2, xmm0");
}



#[test]
fn enc_sse41_pmovsxdq5233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0xFA", "pmovsxdq xmm15, xmm2");
}



#[test]
fn enc_sse41_pmovsxdq5234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x25, 0xC3", "pmovsxdq xmm0, xmm11");
}



#[test]
fn enc_sse41_pmovsxdq5235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x38", "pmovsxdq xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq5236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x08", "pmovsxdq xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxdq5237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x3C, 0x42", "pmovsxdq xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovsxdq5238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x25, 0x60, 0x10", "pmovsxdq xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxdq5239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxdq xmm11, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x25, 0x58, 0x10", "pmovsxdq xmm11, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x23, 0xE7", "pmovsxwd xmm4, xmm15");
}



#[test]
fn enc_sse41_pmovsxwd5241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0xD4", "pmovsxwd xmm2, xmm4");
}



#[test]
fn enc_sse41_pmovsxwd5242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x23, 0xDC", "pmovsxwd xmm11, xmm12");
}



#[test]
fn enc_sse41_pmovsxwd5243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0xDC", "pmovsxwd xmm11, xmm4");
}



#[test]
fn enc_sse41_pmovsxwd5244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x48, 0x10", "pmovsxwd xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwd5245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x23, 0x38", "pmovsxwd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwd5246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x08", "pmovsxwd xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwd5247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwd xmm3, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x23, 0x58, 0x10", "pmovsxwd xmm3, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwq5248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xDC", "pmovsxwq xmm3, xmm4");
}



#[test]
fn enc_sse41_pmovsxwq5249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x24, 0xE3", "pmovsxwq xmm12, xmm11");
}



#[test]
fn enc_sse41_pmovsxwq5250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0xC1", "pmovsxwq xmm0, xmm1");
}



#[test]
fn enc_sse41_pmovsxwq5251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x24, 0xFB", "pmovsxwq xmm15, xmm11");
}



#[test]
fn enc_sse41_pmovsxwq5252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0xE1", "pmovsxwq xmm12, xmm1");
}



#[test]
fn enc_sse41_pmovsxwq5253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x24, 0x58, 0x10", "pmovsxwq xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwq5254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x58, 0x10", "pmovsxwq xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwq5255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm4, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x60, 0x10", "pmovsxwq xmm4, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovsxwq5256() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x10", "pmovsxwq xmm2, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovsxwq5257() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovsxwq xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x24, 0x18", "pmovsxwq xmm3, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbd5258() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xC3", "pmovzxbd xmm0, xmm11");
}



#[test]
fn enc_sse41_pmovzxbd5259() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xD7", "pmovzxbd xmm2, xmm15");
}



#[test]
fn enc_sse41_pmovzxbd5260() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x31, 0xE7", "pmovzxbd xmm4, xmm15");
}



#[test]
fn enc_sse41_pmovzxbd5261() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0xE1", "pmovzxbd xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovzxbd5262() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0xDC", "pmovzxbd xmm3, xmm4");
}



#[test]
fn enc_sse41_pmovzxbd5263() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x08", "pmovzxbd xmm1, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbd5264() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x58, 0x10", "pmovzxbd xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbd5265() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x1C, 0x42", "pmovzxbd xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbd5266() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x31, 0x3C, 0x42", "pmovzxbd xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbd5267() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbd xmm2, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x31, 0x14, 0x42", "pmovzxbd xmm2, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbq5268() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xC2", "pmovzxbq xmm0, xmm2");
}



#[test]
fn enc_sse41_pmovzxbq5269() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x32, 0xFB", "pmovzxbq xmm15, xmm11");
}



#[test]
fn enc_sse41_pmovzxbq5270() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xC9", "pmovzxbq xmm1, xmm1");
}



#[test]
fn enc_sse41_pmovzxbq5271() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x32, 0xCF", "pmovzxbq xmm1, xmm15");
}



#[test]
fn enc_sse41_pmovzxbq5272() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0xCC", "pmovzxbq xmm1, xmm4");
}



#[test]
fn enc_sse41_pmovzxbq5273() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm12, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x24, 0x42", "pmovzxbq xmm12, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbq5274() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm11, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x18", "pmovzxbq xmm11, WORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbq5275() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x3C, 0x42", "pmovzxbq xmm15, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbq5276() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm15, WORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x32, 0x38", "pmovzxbq xmm15, WORD [rax]");
}



#[test]
fn enc_sse41_pmovzxbq5277() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbq xmm2, WORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x32, 0x14, 0x42", "pmovzxbq xmm2, WORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw5278() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xCF", "pmovzxbw xmm1, xmm15");
}



#[test]
fn enc_sse41_pmovzxbw5279() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x30, 0xD3", "pmovzxbw xmm2, xmm11");
}



#[test]
fn enc_sse41_pmovzxbw5280() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xD8", "pmovzxbw xmm3, xmm0");
}



#[test]
fn enc_sse41_pmovzxbw5281() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xD3", "pmovzxbw xmm2, xmm3");
}



#[test]
fn enc_sse41_pmovzxbw5282() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0xC1", "pmovzxbw xmm0, xmm1");
}



#[test]
fn enc_sse41_pmovzxbw5283() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0x3C, 0x42", "pmovzxbw xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw5284() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x30, 0x60, 0x10", "pmovzxbw xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxbw5285() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm1, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x0C, 0x42", "pmovzxbw xmm1, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxbw5286() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxbw xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x30, 0x20", "pmovzxbw xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq5287() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0xFA", "pmovzxdq xmm15, xmm2");
}



#[test]
fn enc_sse41_pmovzxdq5288() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x35, 0xE3", "pmovzxdq xmm12, xmm11");
}



#[test]
fn enc_sse41_pmovzxdq5289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xE1", "pmovzxdq xmm4, xmm1");
}



#[test]
fn enc_sse41_pmovzxdq5290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0xD9", "pmovzxdq xmm3, xmm1");
}



#[test]
fn enc_sse41_pmovzxdq5291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x35, 0xE3", "pmovzxdq xmm4, xmm11");
}



#[test]
fn enc_sse41_pmovzxdq5292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x04, 0x42", "pmovzxdq xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxdq5293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x20", "pmovzxdq xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq5294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0x20", "pmovzxdq xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxdq5295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x35, 0x1C, 0x42", "pmovzxdq xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxdq5296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxdq xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x35, 0x50, 0x10", "pmovzxdq xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxwd5297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x33, 0xFC", "pmovzxwd xmm15, xmm12");
}



#[test]
fn enc_sse41_pmovzxwd5298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0xDC", "pmovzxwd xmm11, xmm4");
}



#[test]
fn enc_sse41_pmovzxwd5299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xCA", "pmovzxwd xmm1, xmm2");
}



#[test]
fn enc_sse41_pmovzxwd5300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x33, 0xCB", "pmovzxwd xmm1, xmm11");
}



#[test]
fn enc_sse41_pmovzxwd5301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0xE0", "pmovzxwd xmm4, xmm0");
}



#[test]
fn enc_sse41_pmovzxwd5302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x20", "pmovzxwd xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwd5303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x60, 0x10", "pmovzxwd xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxwd5304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x33, 0x1C, 0x42", "pmovzxwd xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwd5305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x33, 0x00", "pmovzxwd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq5306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xC0", "pmovzxwq xmm0, xmm0");
}



#[test]
fn enc_sse41_pmovzxwq5307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x34, 0xE7", "pmovzxwq xmm12, xmm15");
}



#[test]
fn enc_sse41_pmovzxwq5308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0xD9", "pmovzxwq xmm11, xmm1");
}



#[test]
fn enc_sse41_pmovzxwq5309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xE4", "pmovzxwq xmm4, xmm4");
}



#[test]
fn enc_sse41_pmovzxwq5310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0xE0", "pmovzxwq xmm4, xmm0");
}



#[test]
fn enc_sse41_pmovzxwq5311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm15, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x3C, 0x42", "pmovzxwq xmm15, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmovzxwq5312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x08", "pmovzxwq xmm1, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq5313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x20", "pmovzxwq xmm4, DWORD [rax]");
}



#[test]
fn enc_sse41_pmovzxwq5314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm1, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x34, 0x48, 0x10", "pmovzxwq xmm1, DWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmovzxwq5315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmovzxwq xmm11, DWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x34, 0x1C, 0x42", "pmovzxwq xmm11, DWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmuldq5316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x28, 0xD3", "pmuldq xmm2, xmm11");
}



#[test]
fn enc_sse41_pmuldq5317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x28, 0xFF", "pmuldq xmm15, xmm15");
}



#[test]
fn enc_sse41_pmuldq5318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x38, 0x28, 0xC4", "pmuldq xmm0, xmm12");
}



#[test]
fn enc_sse41_pmuldq5319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x20", "pmuldq xmm4, QWORD [rax]");
}



#[test]
fn enc_sse41_pmuldq5320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x10", "pmuldq xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmuldq5321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x48, 0x10", "pmuldq xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmuldq5322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x28, 0x08", "pmuldq xmm1, QWORD [rax]");
}



#[test]
fn enc_sse41_pmuldq5323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmuldq xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x28, 0x3C, 0x42", "pmuldq xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld5324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xD0", "pmulld xmm2, xmm0");
}



#[test]
fn enc_sse41_pmulld5325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0xE2", "pmulld xmm12, xmm2");
}



#[test]
fn enc_sse41_pmulld5326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xC2", "pmulld xmm0, xmm2");
}



#[test]
fn enc_sse41_pmulld5327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0xD1", "pmulld xmm2, xmm1");
}



#[test]
fn enc_sse41_pmulld5328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x50, 0x10", "pmulld xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmulld5329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm1, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x48, 0x10", "pmulld xmm1, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_pmulld5330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm15, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0x3C, 0x42", "pmulld xmm15, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_pmulld5331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x40, 0x10", "pmulld xmm2, QWORD [rax]");
}



#[test]
fn enc_sse41_pmulld5332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulld xmm12, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x40, 0x24, 0x42", "pmulld xmm12, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_ptest5333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xC8", "ptest xmm1, xmm0");
}



#[test]
fn enc_sse41_ptest5334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0xD3", "ptest xmm2, xmm3");
}



#[test]
fn enc_sse41_ptest5335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xDB", "ptest xmm11, xmm3");
}



#[test]
fn enc_sse41_ptest5336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x38, 0x17, 0xDF", "ptest xmm11, xmm15");
}



#[test]
fn enc_sse41_ptest5337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0xFB", "ptest xmm15, xmm3");
}



#[test]
fn enc_sse41_ptest5338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm12, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x60, 0x10", "ptest xmm12, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_ptest5339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x38", "ptest xmm15, QWORD [rax]");
}



#[test]
fn enc_sse41_ptest5340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x20", "ptest xmm12, QWORD [rax]");
}



#[test]
fn enc_sse41_ptest5341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x17, 0x50, 0x10", "ptest xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse41_ptest5342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; ptest xmm11, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x38, 0x17, 0x1C, 0x42", "ptest xmm11, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse41_roundpd5343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm1, xmm11, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xCB, 0x3B", "roundpd xmm1, xmm11, 59");
}



#[test]
fn enc_sse41_roundpd5344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm4, xmm3, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0xE3, 0x62", "roundpd xmm4, xmm3, 98");
}



#[test]
fn enc_sse41_roundpd5345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm1, xmm11, 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xCB, 0x5B", "roundpd xmm1, xmm11, 91");
}



#[test]
fn enc_sse41_roundpd5346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm1, xmm15, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x09, 0xCF, 0x54", "roundpd xmm1, xmm15, 84");
}



#[test]
fn enc_sse41_roundpd5347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm15, xmm2, 104
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0xFA, 0x68", "roundpd xmm15, xmm2, 104");
}



#[test]
fn enc_sse41_roundpd5348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm11, QWORD [rax], 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x09, 0x18, 0x3C", "roundpd xmm11, QWORD [rax], 60");
}



#[test]
fn enc_sse41_roundpd5349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, QWORD [rax], 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x00, 0x6F", "roundpd xmm0, QWORD [rax], 111");
}



#[test]
fn enc_sse41_roundpd5350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm0, QWORD [rax + 16], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x40, 0x10, 0x34", "roundpd xmm0, QWORD [rax + 16], 52");
}



#[test]
fn enc_sse41_roundpd5351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm3, QWORD [rax * 2 + rdx], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x1C, 0x42, 0x4A", "roundpd xmm3, QWORD [rax * 2 + rdx], 74");
}



#[test]
fn enc_sse41_roundpd5352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundpd xmm2, QWORD [rax * 2 + rdx], 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x09, 0x14, 0x42, 0x23", "roundpd xmm2, QWORD [rax * 2 + rdx], 35");
}



#[test]
fn enc_sse41_roundps5353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm0, xmm2, 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xC2, 0x12", "roundps xmm0, xmm2, 18");
}



#[test]
fn enc_sse41_roundps5354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm2, xmm4, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xD4, 0x72", "roundps xmm2, xmm4, 114");
}



#[test]
fn enc_sse41_roundps5355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm3, xmm1, 51
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xD9, 0x33", "roundps xmm3, xmm1, 51");
}



#[test]
fn enc_sse41_roundps5356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm3, xmm1, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0xD9, 0x3A", "roundps xmm3, xmm1, 58");
}



#[test]
fn enc_sse41_roundps5357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm3, xmm12, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x08, 0xDC, 0x17", "roundps xmm3, xmm12, 23");
}



#[test]
fn enc_sse41_roundps5358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm2, QWORD [rax * 2 + rdx], 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x08, 0x14, 0x42, 0x66", "roundps xmm2, QWORD [rax * 2 + rdx], 102");
}



#[test]
fn enc_sse41_roundps5359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm12, QWORD [rax * 2 + rdx], 122
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x24, 0x42, 0x7A", "roundps xmm12, QWORD [rax * 2 + rdx], 122");
}



#[test]
fn enc_sse41_roundps5360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, QWORD [rax + 16], 101
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x58, 0x10, 0x65", "roundps xmm11, QWORD [rax + 16], 101");
}



#[test]
fn enc_sse41_roundps5361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm12, QWORD [rax], 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x20, 0x18", "roundps xmm12, QWORD [rax], 24");
}



#[test]
fn enc_sse41_roundps5362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundps xmm11, QWORD [rax * 2 + rdx], 53
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x08, 0x1C, 0x42, 0x35", "roundps xmm11, QWORD [rax * 2 + rdx], 53");
}



#[test]
fn enc_sse41_roundsd5363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, xmm11, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0B, 0xE3, 0x2F", "roundsd xmm12, xmm11, 47");
}



#[test]
fn enc_sse41_roundsd5364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, xmm2, 120
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xE2, 0x78", "roundsd xmm4, xmm2, 120");
}



#[test]
fn enc_sse41_roundsd5365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, xmm4, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0xE4, 0x1D", "roundsd xmm12, xmm4, 29");
}



#[test]
fn enc_sse41_roundsd5366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, xmm1, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0xE1, 0x1E", "roundsd xmm4, xmm1, 30");
}



#[test]
fn enc_sse41_roundsd5367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm2, xmm15, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0B, 0xD7, 0x1F", "roundsd xmm2, xmm15, 31");
}



#[test]
fn enc_sse41_roundsd5368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm3, QWORD [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x18, 0x10", "roundsd xmm3, QWORD [rax], 16");
}



#[test]
fn enc_sse41_roundsd5369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm2, QWORD [rax + 16], 126
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x50, 0x10, 0x7E", "roundsd xmm2, QWORD [rax + 16], 126");
}



#[test]
fn enc_sse41_roundsd5370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm4, QWORD [rax], 42
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x20, 0x2A", "roundsd xmm4, QWORD [rax], 42");
}



#[test]
fn enc_sse41_roundsd5371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm12, QWORD [rax + 16], 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0B, 0x60, 0x10, 0x4B", "roundsd xmm12, QWORD [rax + 16], 75");
}



#[test]
fn enc_sse41_roundsd5372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundsd xmm1, QWORD [rax * 2 + rdx], 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0B, 0x0C, 0x42, 0x5C", "roundsd xmm1, QWORD [rax * 2 + rdx], 92");
}



#[test]
fn enc_sse41_roundss5373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, xmm2, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xCA, 0x76", "roundss xmm1, xmm2, 118");
}



#[test]
fn enc_sse41_roundss5374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, xmm4, 45
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0xCC, 0x2D", "roundss xmm1, xmm4, 45");
}



#[test]
fn enc_sse41_roundss5375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm15, xmm11, 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x45, 0x0F, 0x3A, 0x0A, 0xFB, 0x37", "roundss xmm15, xmm11, 55");
}



#[test]
fn enc_sse41_roundss5376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, xmm15, 61
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x3A, 0x0A, 0xCF, 0x3D", "roundss xmm1, xmm15, 61");
}



#[test]
fn enc_sse41_roundss5377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm12, xmm1, 38
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0xE1, 0x26", "roundss xmm12, xmm1, 38");
}



#[test]
fn enc_sse41_roundss5378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm1, QWORD [rax * 2 + rdx], 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x0C, 0x42, 0x2C", "roundss xmm1, QWORD [rax * 2 + rdx], 44");
}



#[test]
fn enc_sse41_roundss5379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm12, QWORD [rax + 16], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0x60, 0x10, 0x46", "roundss xmm12, QWORD [rax + 16], 70");
}



#[test]
fn enc_sse41_roundss5380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm2, QWORD [rax], 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x3A, 0x0A, 0x10, 0x60", "roundss xmm2, QWORD [rax], 96");
}



#[test]
fn enc_sse41_roundss5381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm15, QWORD [rax], 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0x38, 0x36", "roundss xmm15, QWORD [rax], 54");
}



#[test]
fn enc_sse41_roundss5382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; roundss xmm11, QWORD [rax * 2 + rdx], 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x3A, 0x0A, 0x1C, 0x42, 0x36", "roundss xmm11, QWORD [rax * 2 + rdx], 54");
}


