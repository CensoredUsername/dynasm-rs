
#[test]
fn enc_sse4a_extrq1744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xD9", "extrq xmm3, xmm1");
}



#[test]
fn enc_sse4a_extrq1745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x79, 0xFA", "extrq xmm15, xmm2");
}



#[test]
fn enc_sse4a_extrq1746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xE4", "extrq xmm4, xmm4");
}



#[test]
fn enc_sse4a_extrq1747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x44, 0x0F, 0x79, 0xFC", "extrq xmm15, xmm4");
}



#[test]
fn enc_sse4a_extrq1748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm2, 115, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC2, 0x73, 0x1E", "extrq xmm2, 115, 30");
}



#[test]
fn enc_sse4a_extrq1749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm3, 89, 50
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC3, 0x59, 0x32", "extrq xmm3, 89, 50");
}



#[test]
fn enc_sse4a_extrq1750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm4, 60, 89
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC4, 0x3C, 0x59", "extrq xmm4, 60, 89");
}



#[test]
fn enc_sse4a_extrq1751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm15, 6, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC7, 0x06, 0x70", "extrq xmm15, 6, 112");
}



#[test]
fn enc_sse4a_extrq1752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm0, 49, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC0, 0x31, 0x69", "extrq xmm0, 49, 105");
}



#[test]
fn enc_sse4a_insertq1753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm4, 36, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x78, 0xFC, 0x24, 0x61", "insertq xmm15, xmm4, 36, 97");
}



#[test]
fn enc_sse4a_insertq1754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm12, xmm3, 59, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x78, 0xE3, 0x3B, 0x2E", "insertq xmm12, xmm3, 59, 46");
}



#[test]
fn enc_sse4a_insertq1755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm4, 92, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x78, 0xFC, 0x5C, 0x67", "insertq xmm15, xmm4, 92, 103");
}



#[test]
fn enc_sse4a_insertq1756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm15, 45, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x78, 0xC7, 0x2D, 0x53", "insertq xmm0, xmm15, 45, 83");
}



#[test]
fn enc_sse4a_insertq1757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm2, 11, 37
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xC2, 0x0B, 0x25", "insertq xmm0, xmm2, 11, 37");
}



#[test]
fn enc_sse4a_insertq1758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xE0", "insertq xmm4, xmm0");
}



#[test]
fn enc_sse4a_insertq1759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x79, 0xD8", "insertq xmm11, xmm0");
}



#[test]
fn enc_sse4a_insertq1760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x79, 0xDB", "insertq xmm11, xmm3");
}



#[test]
fn enc_sse4a_insertq1761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x79, 0xCB", "insertq xmm1, xmm11");
}



#[test]
fn enc_sse4a_insertq1762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x79, 0xE7", "insertq xmm4, xmm15");
}



#[test]
fn enc_sse4a_movntsd1763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x38", "movntsd QWORD [rax], xmm15");
}



#[test]
fn enc_sse4a_movntsd1764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax + 16], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x40, 0x10", "movntsd QWORD [rax + 16], xmm0");
}



#[test]
fn enc_sse4a_movntsd1765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x3C, 0x42", "movntsd QWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse4a_movntsd1766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x20", "movntsd QWORD [rax], xmm12");
}



#[test]
fn enc_sse4a_movntss1767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax + 16], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2B, 0x78, 0x10", "movntss DWORD [rax + 16], xmm15");
}



#[test]
fn enc_sse4a_movntss1768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax + 16], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x60, 0x10", "movntss DWORD [rax + 16], xmm4");
}



#[test]
fn enc_sse4a_movntss1769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x24, 0x42", "movntss DWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse4a_movntss1770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2B, 0x20", "movntss DWORD [rax], xmm12");
}


