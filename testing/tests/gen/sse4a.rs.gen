
#[test]
fn enc_extrq425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm4, 17, 56
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC4, 0x11, 0x38", "extrq xmm4, 17, 56");
}



#[test]
fn enc_extrq426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm2, 96, 7
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x78, 0xC2, 0x60, 0x07", "extrq xmm2, 96, 7");
}



#[test]
fn enc_extrq427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm15, 82, 49
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC7, 0x52, 0x31", "extrq xmm15, 82, 49");
}



#[test]
fn enc_extrq428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm15, 35, 31
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC7, 0x23, 0x1F", "extrq xmm15, 35, 31");
}



#[test]
fn enc_extrq429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm15, 124, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x78, 0xC7, 0x7C, 0x6E", "extrq xmm15, 124, 110");
}



#[test]
fn enc_extrq430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x41, 0x0F, 0x79, 0xC3", "extrq xmm0, xmm11");
}



#[test]
fn enc_extrq431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xCC", "extrq xmm1, xmm4");
}



#[test]
fn enc_extrq432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xE3", "extrq xmm4, xmm3");
}



#[test]
fn enc_extrq433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xC0", "extrq xmm0, xmm0");
}



#[test]
fn enc_extrq434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; extrq xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x79, 0xE1", "extrq xmm4, xmm1");
}



#[test]
fn enc_insertq435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x79, 0xE4", "insertq xmm12, xmm4");
}



#[test]
fn enc_insertq436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x79, 0xDC", "insertq xmm11, xmm4");
}



#[test]
fn enc_insertq437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x79, 0xDC", "insertq xmm3, xmm12");
}



#[test]
fn enc_insertq438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x79, 0xE0", "insertq xmm4, xmm0");
}



#[test]
fn enc_insertq439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x45, 0x0F, 0x79, 0xFF", "insertq xmm15, xmm15");
}



#[test]
fn enc_insertq440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm11, 45, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x78, 0xC3, 0x2D, 0x62", "insertq xmm0, xmm11, 45, 98");
}



#[test]
fn enc_insertq441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm2, xmm0, 75, 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xD0, 0x4B, 0x4A", "insertq xmm2, xmm0, 75, 74");
}



#[test]
fn enc_insertq442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm3, xmm12, 122, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x41, 0x0F, 0x78, 0xDC, 0x7A, 0x17", "insertq xmm3, xmm12, 122, 23");
}



#[test]
fn enc_insertq443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm0, xmm0, 109, 109
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xC0, 0x6D, 0x6D", "insertq xmm0, xmm0, 109, 109");
}



#[test]
fn enc_insertq444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; insertq xmm4, xmm3, 44, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x78, 0xE3, 0x2C, 0x7B", "insertq xmm4, xmm3, 44, 123");
}



#[test]
fn enc_movntsd445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x18", "movntsd QWORD [rax], xmm3");
}



#[test]
fn enc_movntsd446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x20", "movntsd QWORD [rax], xmm4");
}



#[test]
fn enc_movntsd447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x44, 0x0F, 0x2B, 0x38", "movntsd QWORD [rax], xmm15");
}



#[test]
fn enc_movntsd448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntsd QWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF2, 0x0F, 0x2B, 0x08", "movntsd QWORD [rax], xmm1");
}



#[test]
fn enc_movntss449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x44, 0x0F, 0x2B, 0x38", "movntss DWORD [rax], xmm15");
}



#[test]
fn enc_movntss450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x08", "movntss DWORD [rax], xmm1");
}



#[test]
fn enc_movntss451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x18", "movntss DWORD [rax], xmm3");
}



#[test]
fn enc_movntss452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; movntss DWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0x2B, 0x10", "movntss DWORD [rax], xmm2");
}


