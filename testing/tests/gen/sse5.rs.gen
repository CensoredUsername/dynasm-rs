
#[test]
fn enc_sse5_vfmaddsd5416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm1, xmm15, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x6B, 0x08, 0x40", "vfmaddsd xmm1, xmm15, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmaddsd5417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x6B, 0x18, 0x40", "vfmaddsd xmm11, xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm12, xmm3, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x6B, 0x20, 0x00", "vfmaddsd xmm12, xmm3, xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm4, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x6B, 0x18, 0xF0", "vfmaddsd xmm11, xmm4, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmaddsd5420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6B, 0x00, 0x40", "vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm3, xmm2, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xE9, 0x6B, 0xDB, 0xC0", "vfmaddsd xmm3, xmm2, xmm12, xmm11");
}



#[test]
fn enc_sse5_vfmaddsd5422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm15, xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x6B, 0xFB, 0x10", "vfmaddsd xmm15, xmm0, xmm1, xmm3");
}



#[test]
fn enc_sse5_vfmaddsd5423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm15, xmm4, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xD9, 0x6B, 0xFA, 0xC0", "vfmaddsd xmm15, xmm4, xmm12, xmm2");
}



#[test]
fn enc_sse5_vfmaddsd5424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm15, xmm2, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xE9, 0x6B, 0xFF, 0xF0", "vfmaddsd xmm15, xmm2, xmm15, xmm15");
}



#[test]
fn enc_sse5_vfmaddsd5425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm0, xmm11, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xA1, 0x6B, 0xC1, 0x30", "vfmaddsd xmm0, xmm11, xmm3, xmm1");
}



#[test]
fn enc_sse5_vfmaddsd5426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm4, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x6B, 0x18, 0xF0", "vfmaddsd xmm11, xmm4, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmaddsd5427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm12, xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xA1, 0x6B, 0x20, 0xF0", "vfmaddsd xmm12, xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm12, xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xA1, 0x6B, 0x20, 0xF0", "vfmaddsd xmm12, xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6B, 0x00, 0x40", "vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm15, xmm3, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x6B, 0x38, 0x00", "vfmaddsd xmm15, xmm3, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmaddss5431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm2, xmm12, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x99, 0x6A, 0xD3, 0xC0", "vfmaddss xmm2, xmm12, xmm12, xmm3");
}



#[test]
fn enc_sse5_vfmaddss5432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm4, xmm2, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x6A, 0xE0, 0x20", "vfmaddss xmm4, xmm2, xmm2, xmm0");
}



#[test]
fn enc_sse5_vfmaddss5433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm1, xmm15, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x81, 0x6A, 0xCC, 0xC0", "vfmaddss xmm1, xmm15, xmm12, xmm12");
}



#[test]
fn enc_sse5_vfmaddss5434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm2, xmm0, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xF9, 0x6A, 0xD3, 0x10", "vfmaddss xmm2, xmm0, xmm1, xmm11");
}



#[test]
fn enc_sse5_vfmaddss5435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm12, xmm4, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xD9, 0x6A, 0xE3, 0x30", "vfmaddss xmm12, xmm4, xmm3, xmm11");
}



#[test]
fn enc_sse5_vfmaddss5436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6A, 0x00, 0xB0", "vfmaddss xmm0, xmm0, xmm11, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6A, 0x00, 0xB0", "vfmaddss xmm0, xmm0, xmm11, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm3, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x6A, 0x00, 0xB0", "vfmaddss xmm0, xmm3, xmm11, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm4, xmm0, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x20, 0x40", "vfmaddss xmm4, xmm0, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmaddss5440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x00, 0x30", "vfmaddss xmm0, xmm0, DWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfmaddss5441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm15, xmm1, DWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x6A, 0x38, 0x00", "vfmaddss xmm15, xmm1, DWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmaddss5442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6A, 0x00, 0xB0", "vfmaddss xmm0, xmm0, xmm11, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm15, xmm1, DWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x6A, 0x38, 0x00", "vfmaddss xmm15, xmm1, DWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmaddss5444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm4, xmm0, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x20, 0x40", "vfmaddss xmm4, xmm0, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmaddss5445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm15, xmm1, DWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x6A, 0x38, 0x00", "vfmaddss xmm15, xmm1, DWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm11, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x6F, 0x38, 0xC0", "vfmsubsd xmm15, xmm11, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm11, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6F, 0x08, 0xC0", "vfmsubsd xmm1, xmm11, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm12, xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x6F, 0x20, 0xB0", "vfmsubsd xmm12, xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubsd5449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm12, xmm1, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x6F, 0x20, 0x20", "vfmsubsd xmm12, xmm1, xmm2, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubsd5450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm4, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x6F, 0x08, 0xF0", "vfmsubsd xmm1, xmm4, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubsd5451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm3, xmm1, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xF1, 0x6F, 0xDC, 0xF0", "vfmsubsd xmm3, xmm1, xmm15, xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm11, xmm3, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x6F, 0xD8, 0x40", "vfmsubsd xmm11, xmm3, xmm4, xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm11, xmm15, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x6F, 0xDC, 0x00", "vfmsubsd xmm11, xmm15, xmm0, xmm4");
}



#[test]
fn enc_sse5_vfmsubsd5454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm12, xmm2, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE9, 0x6F, 0xE3, 0xF0", "vfmsubsd xmm12, xmm2, xmm15, xmm3");
}



#[test]
fn enc_sse5_vfmsubsd5455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm4, xmm0, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6F, 0xE2, 0xC0", "vfmsubsd xmm4, xmm0, xmm12, xmm2");
}



#[test]
fn enc_sse5_vfmsubsd5456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm11, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6F, 0x08, 0xC0", "vfmsubsd xmm1, xmm11, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm4, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x6F, 0x08, 0xF0", "vfmsubsd xmm1, xmm4, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubsd5458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm11, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6F, 0x08, 0xC0", "vfmsubsd xmm1, xmm11, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm4, xmm1, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x6F, 0x20, 0xC0", "vfmsubsd xmm4, xmm1, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm2, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x6F, 0x08, 0x00", "vfmsubsd xmm1, xmm2, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmsubss5461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm11, xmm3, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x6E, 0xDC, 0x40", "vfmsubss xmm11, xmm3, xmm4, xmm4");
}



#[test]
fn enc_sse5_vfmsubss5462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xA1, 0x6E, 0xD4, 0x40", "vfmsubss xmm2, xmm11, xmm4, xmm12");
}



#[test]
fn enc_sse5_vfmsubss5463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm12, xmm15, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x81, 0x6E, 0xE7, 0xC0", "vfmsubss xmm12, xmm15, xmm12, xmm15");
}



#[test]
fn enc_sse5_vfmsubss5464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm15, xmm12, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x99, 0x6E, 0xFB, 0x40", "vfmsubss xmm15, xmm12, xmm4, xmm3");
}



#[test]
fn enc_sse5_vfmsubss5465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm1, xmm15, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6E, 0xCC, 0xC0", "vfmsubss xmm1, xmm15, xmm12, xmm4");
}



#[test]
fn enc_sse5_vfmsubss5466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm2, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x6E, 0x10, 0xF0", "vfmsubss xmm2, xmm2, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x6E, 0x10, 0x30", "vfmsubss xmm2, xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm11, xmm0, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x6E, 0x18, 0xF0", "vfmsubss xmm11, xmm0, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm4, xmm15, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6E, 0x20, 0x20", "vfmsubss xmm4, xmm15, xmm2, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm0, xmm1, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x6E, 0x00, 0x40", "vfmsubss xmm0, xmm1, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmsubss5471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm1, xmm11, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6E, 0x08, 0xF0", "vfmsubss xmm1, xmm11, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm0, xmm2, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x6E, 0x00, 0xF0", "vfmsubss xmm0, xmm2, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x6E, 0x10, 0x30", "vfmsubss xmm2, xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm0, xmm1, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x6E, 0x00, 0x40", "vfmsubss xmm0, xmm1, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmsubss5475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm1, xmm11, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6E, 0x08, 0xF0", "vfmsubss xmm1, xmm11, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm4, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x7B, 0x20, 0xB0", "vfnmaddsd xmm4, xmm4, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm4, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x7B, 0x20, 0xB0", "vfnmaddsd xmm4, xmm4, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm4, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x7B, 0x20, 0xB0", "vfnmaddsd xmm4, xmm4, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm3, xmm0, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7B, 0x18, 0x00", "vfnmaddsd xmm3, xmm0, xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddsd5481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x7B, 0xC0, 0xB0", "vfnmaddsd xmm0, xmm1, xmm11, xmm0");
}



#[test]
fn enc_sse5_vfnmaddsd5482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm2, xmm1, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x7B, 0xD1, 0xC0", "vfnmaddsd xmm2, xmm1, xmm12, xmm1");
}



#[test]
fn enc_sse5_vfnmaddsd5483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm2, xmm3, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x7B, 0xD4, 0x00", "vfnmaddsd xmm2, xmm3, xmm0, xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm0, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7B, 0xC4, 0x20", "vfnmaddsd xmm0, xmm0, xmm2, xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm11, xmm15, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x7B, 0xDC, 0x30", "vfnmaddsd xmm11, xmm15, xmm3, xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm3, xmm4, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x7B, 0x18, 0xB0", "vfnmaddsd xmm3, xmm4, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm3, xmm4, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x7B, 0x18, 0xB0", "vfnmaddsd xmm3, xmm4, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xA1, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddsd5489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xA1, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddsd5490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddss5491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm3, xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7A, 0xD9, 0x00", "vfnmaddss xmm3, xmm0, xmm0, xmm1");
}



#[test]
fn enc_sse5_vfnmaddss5492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm2, xmm11, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xA1, 0x7A, 0xD3, 0xB0", "vfnmaddss xmm2, xmm11, xmm11, xmm11");
}



#[test]
fn enc_sse5_vfnmaddss5493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm15, xmm12, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x99, 0x7A, 0xF8, 0x20", "vfnmaddss xmm15, xmm12, xmm2, xmm0");
}



#[test]
fn enc_sse5_vfnmaddss5494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm11, xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE9, 0x7A, 0xDB, 0x30", "vfnmaddss xmm11, xmm2, xmm3, xmm3");
}



#[test]
fn enc_sse5_vfnmaddss5495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm11, xmm0, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x7A, 0xDB, 0xC0", "vfnmaddss xmm11, xmm0, xmm12, xmm3");
}



#[test]
fn enc_sse5_vfnmaddss5496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm12, xmm2, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x7A, 0x20, 0x40", "vfnmaddss xmm12, xmm2, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddss5497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm3, xmm3, DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x7A, 0x18, 0x30", "vfnmaddss xmm3, xmm3, DWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfnmaddss5498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm11, xmm4, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xD9, 0x7A, 0x18, 0x10", "vfnmaddss xmm11, xmm4, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm1, xmm0, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7A, 0x08, 0xF0", "vfnmaddss xmm1, xmm0, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm2, xmm4, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7A, 0x10, 0x10", "vfnmaddss xmm2, xmm4, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm4, xmm0, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x7A, 0x20, 0x10", "vfnmaddss xmm4, xmm0, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmaddss5502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm11, xmm4, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xD9, 0x7A, 0x18, 0x10", "vfnmaddss xmm11, xmm4, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm3, xmm3, DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x7A, 0x18, 0x30", "vfnmaddss xmm3, xmm3, DWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfnmaddss5504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm3, xmm3, DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x61, 0x7A, 0x18, 0x30", "vfnmaddss xmm3, xmm3, DWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfnmaddss5505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm15, xmm15, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x7A, 0x38, 0xF0", "vfnmaddss xmm15, xmm15, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm12, xmm3, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x7F, 0x20, 0x00", "vfnmsubsd xmm12, xmm3, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfnmsubsd5507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm12, xmm1, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x7F, 0x20, 0xF0", "vfnmsubsd xmm12, xmm1, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmsubsd5508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0xC0", "vfnmsubsd xmm4, xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm15, QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x7F, 0x20, 0x30", "vfnmsubsd xmm4, xmm15, QWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfnmsubsd5510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm0, xmm0, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7F, 0x00, 0x40", "vfnmsubsd xmm0, xmm0, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm15, xmm15, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x81, 0x7F, 0xFB, 0x10", "vfnmsubsd xmm15, xmm15, xmm1, xmm11");
}



#[test]
fn enc_sse5_vfnmsubsd5512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm0, xmm1, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xF1, 0x7F, 0xC3, 0xB0", "vfnmsubsd xmm0, xmm1, xmm11, xmm11");
}



#[test]
fn enc_sse5_vfnmsubsd5513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm3, xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x7F, 0xDA, 0x10", "vfnmsubsd xmm3, xmm3, xmm1, xmm2");
}



#[test]
fn enc_sse5_vfnmsubsd5514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm2, xmm15, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x7F, 0xD3, 0xB0", "vfnmsubsd xmm2, xmm15, xmm11, xmm3");
}



#[test]
fn enc_sse5_vfnmsubsd5515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm1, xmm2, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x7F, 0xCB, 0xF0", "vfnmsubsd xmm1, xmm2, xmm15, xmm3");
}



#[test]
fn enc_sse5_vfnmsubsd5516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm2, xmm4, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x59, 0x7F, 0x10, 0x40", "vfnmsubsd xmm2, xmm4, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmsubsd5517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x08, 0x00", "vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0x10", "vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0x10", "vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm15, QWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x7F, 0x20, 0x30", "vfnmsubsd xmm4, xmm15, QWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfnmsubss5521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm4, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xD9, 0x7E, 0xFB, 0x10", "vfnmsubss xmm15, xmm4, xmm1, xmm11");
}



#[test]
fn enc_sse5_vfnmsubss5522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm4, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xD9, 0x7E, 0xF8, 0x20", "vfnmsubss xmm15, xmm4, xmm2, xmm0");
}



#[test]
fn enc_sse5_vfnmsubss5523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm2, xmm15, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x7E, 0xD2, 0x40", "vfnmsubss xmm2, xmm15, xmm4, xmm2");
}



#[test]
fn enc_sse5_vfnmsubss5524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm1, xmm1, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x7E, 0xCA, 0x00", "vfnmsubss xmm1, xmm1, xmm0, xmm2");
}



#[test]
fn enc_sse5_vfnmsubss5525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm2, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE9, 0x7E, 0xF9, 0x00", "vfnmsubss xmm15, xmm2, xmm0, xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm12, xmm11, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x7E, 0x20, 0x10", "vfnmsubss xmm12, xmm11, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm2, DWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x7E, 0x38, 0x00", "vfnmsubss xmm15, xmm2, DWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfnmsubss5528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm12, xmm11, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x7E, 0x20, 0x10", "vfnmsubss xmm12, xmm11, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7E, 0x38, 0x40", "vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm3, xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7E, 0x18, 0xF0", "vfnmsubss xmm3, xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm0, xmm11, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7E, 0x00, 0x10", "vfnmsubss xmm0, xmm11, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm2, xmm2, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x7E, 0x10, 0x20", "vfnmsubss xmm2, xmm2, xmm2, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm12, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x99, 0x7E, 0x38, 0x10", "vfnmsubss xmm15, xmm12, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm3, xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7E, 0x18, 0xF0", "vfnmsubss xmm3, xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7E, 0x38, 0x40", "vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]");
}



#[test]
fn enc_sse5_vfrczsd5536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0x83, 0xFB", "vfrczsd xmm15, xmm11");
}



#[test]
fn enc_sse5_vfrczsd5537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x83, 0xD3", "vfrczsd xmm2, xmm11");
}



#[test]
fn enc_sse5_vfrczsd5538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x83, 0xCF", "vfrczsd xmm1, xmm15");
}



#[test]
fn enc_sse5_vfrczsd5539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x83, 0xDB", "vfrczsd xmm11, xmm3");
}



#[test]
fn enc_sse5_vfrczsd5540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0xE3", "vfrczsd xmm4, xmm3");
}



#[test]
fn enc_sse5_vfrczsd5541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x83, 0x20", "vfrczsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse5_vfrczsd5542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x00", "vfrczsd xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfrczsd5543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm4, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x60, 0x10", "vfrczsd xmm4, QWORD [rax + 16]");
}



#[test]
fn enc_sse5_vfrczsd5544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x18", "vfrczsd xmm3, QWORD [rax]");
}



#[test]
fn enc_sse5_vfrczsd5545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm4, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x24, 0x42", "vfrczsd xmm4, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vfrczss5546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0xFB", "vfrczss xmm15, xmm3");
}



#[test]
fn enc_sse5_vfrczss5547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0xF9", "vfrczss xmm15, xmm1");
}



#[test]
fn enc_sse5_vfrczss5548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0xC4", "vfrczss xmm0, xmm4");
}



#[test]
fn enc_sse5_vfrczss5549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x82, 0xCC", "vfrczss xmm1, xmm12");
}



#[test]
fn enc_sse5_vfrczss5550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0xD9", "vfrczss xmm11, xmm1");
}



#[test]
fn enc_sse5_vfrczss5551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm15, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0x78, 0x10", "vfrczss xmm15, DWORD [rax + 16]");
}



#[test]
fn enc_sse5_vfrczss5552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm11, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0x58, 0x10", "vfrczss xmm11, DWORD [rax + 16]");
}



#[test]
fn enc_sse5_vfrczss5553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x00", "vfrczss xmm0, DWORD [rax]");
}



#[test]
fn enc_sse5_vfrczss5554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x18", "vfrczss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse5_vfrczss5555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x40, 0x10", "vfrczss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse5_vpcomb5556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm1, xmm12, OWORD [rdx], 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0xCC, 0x0A, 0x14", "vpcomb xmm1, xmm12, OWORD [rdx], 20");
}



#[test]
fn enc_sse5_vpcomb5557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm2, xmm4, xmm1, 35
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xCC, 0xD1, 0x23", "vpcomb xmm2, xmm4, xmm1, 35");
}



#[test]
fn enc_sse5_vpcomb5558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm4, xmm2, xmm15, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0xCC, 0xE7, 0x61", "vpcomb xmm4, xmm2, xmm15, 97");
}



#[test]
fn enc_sse5_vpcomb5559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm3, xmm1, xmm0, 29
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xCC, 0xD8, 0x1D", "vpcomb xmm3, xmm1, xmm0, 29");
}



#[test]
fn enc_sse5_vpcomb5560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm1, xmm1, xmm12, 24
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x70, 0xCC, 0xCC, 0x18", "vpcomb xmm1, xmm1, xmm12, 24");
}



#[test]
fn enc_sse5_vpcomd5561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm0, xmm15, OWORD [rax], 88
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0xCE, 0x00, 0x58", "vpcomd xmm0, xmm15, OWORD [rax], 88");
}



#[test]
fn enc_sse5_vpcomd5562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm4, xmm15, xmm1, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0xCE, 0xE1, 0x56", "vpcomd xmm4, xmm15, xmm1, 86");
}



#[test]
fn enc_sse5_vpcomd5563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm11, xmm3, xmm4, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0xCE, 0xDC, 0x2E", "vpcomd xmm11, xmm3, xmm4, 46");
}



#[test]
fn enc_sse5_vpcomd5564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm4, xmm4, xmm3, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xCE, 0xE3, 0x62", "vpcomd xmm4, xmm4, xmm3, 98");
}



#[test]
fn enc_sse5_vpcomd5565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm3, xmm1, xmm3, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xCE, 0xDB, 0x71", "vpcomd xmm3, xmm1, xmm3, 113");
}



#[test]
fn enc_sse5_vpcomq5566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm3, xmm3, xmm3, 22
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0xCF, 0xDB, 0x16", "vpcomq xmm3, xmm3, xmm3, 22");
}



#[test]
fn enc_sse5_vpcomq5567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm3, xmm11, OWORD [rdx], 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0xCF, 0x1A, 0x53", "vpcomq xmm3, xmm11, OWORD [rdx], 83");
}



#[test]
fn enc_sse5_vpcomq5568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm0, xmm2, OWORD [rdx], 55
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xCF, 0x02, 0x37", "vpcomq xmm0, xmm2, OWORD [rdx], 55");
}



#[test]
fn enc_sse5_vpcomq5569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm2, xmm4, xmm15, 15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0xCF, 0xD7, 0x0F", "vpcomq xmm2, xmm4, xmm15, 15");
}



#[test]
fn enc_sse5_vpcomq5570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm4, xmm0, xmm15, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xCF, 0xE7, 0x69", "vpcomq xmm4, xmm0, xmm15, 105");
}



#[test]
fn enc_sse5_vpcomub5571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm15, xmm3, xmm2, 30
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0xEC, 0xFA, 0x1E", "vpcomub xmm15, xmm3, xmm2, 30");
}



#[test]
fn enc_sse5_vpcomub5572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm1, xmm1, OWORD [rax], 16
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEC, 0x08, 0x10", "vpcomub xmm1, xmm1, OWORD [rax], 16");
}



#[test]
fn enc_sse5_vpcomub5573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm0, xmm1, OWORD [rdx], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEC, 0x02, 0x46", "vpcomub xmm0, xmm1, OWORD [rdx], 70");
}



#[test]
fn enc_sse5_vpcomub5574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm4, xmm4, OWORD [rax], 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xEC, 0x20, 0x5D", "vpcomub xmm4, xmm4, OWORD [rax], 93");
}



#[test]
fn enc_sse5_vpcomub5575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm11, xmm12, OWORD [rax * 2 + rdx], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xEC, 0x1C, 0x42, 0x4A", "vpcomub xmm11, xmm12, OWORD [rax * 2 + rdx], 74");
}



#[test]
fn enc_sse5_vpcomud5576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm15, xmm3, xmm15, 54
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x60, 0xEE, 0xFF, 0x36", "vpcomud xmm15, xmm3, xmm15, 54");
}



#[test]
fn enc_sse5_vpcomud5577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm12, xmm0, OWORD [rax], 78
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xEE, 0x20, 0x4E", "vpcomud xmm12, xmm0, OWORD [rax], 78");
}



#[test]
fn enc_sse5_vpcomud5578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm4, xmm3, xmm1, 87
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0xEE, 0xE1, 0x57", "vpcomud xmm4, xmm3, xmm1, 87");
}



#[test]
fn enc_sse5_vpcomud5579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm4, xmm1, OWORD [rax * 2 + rdx], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEE, 0x24, 0x42, 0x5B", "vpcomud xmm4, xmm1, OWORD [rax * 2 + rdx], 91");
}



#[test]
fn enc_sse5_vpcomud5580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm4, xmm2, xmm15, 67
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0xEE, 0xE7, 0x43", "vpcomud xmm4, xmm2, xmm15, 67");
}



#[test]
fn enc_sse5_vpcomuq5581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm2, xmm1, OWORD [rdx], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEF, 0x12, 0x20", "vpcomuq xmm2, xmm1, OWORD [rdx], 32");
}



#[test]
fn enc_sse5_vpcomuq5582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm0, xmm1, xmm3, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEF, 0xC3, 0x28", "vpcomuq xmm0, xmm1, xmm3, 40");
}



#[test]
fn enc_sse5_vpcomuq5583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm1, xmm0, xmm1, 83
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xEF, 0xC9, 0x53", "vpcomuq xmm1, xmm0, xmm1, 83");
}



#[test]
fn enc_sse5_vpcomuq5584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm2, xmm3, xmm12, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x60, 0xEF, 0xD4, 0x56", "vpcomuq xmm2, xmm3, xmm12, 86");
}



#[test]
fn enc_sse5_vpcomuq5585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm4, xmm1, xmm2, 111
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEF, 0xE2, 0x6F", "vpcomuq xmm4, xmm1, xmm2, 111");
}



#[test]
fn enc_sse5_vpcomuw5586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm4, xmm3, xmm0, 59
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0xED, 0xE0, 0x3B", "vpcomuw xmm4, xmm3, xmm0, 59");
}



#[test]
fn enc_sse5_vpcomuw5587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm11, xmm3, xmm0, 13
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0xED, 0xD8, 0x0D", "vpcomuw xmm11, xmm3, xmm0, 13");
}



#[test]
fn enc_sse5_vpcomuw5588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm15, xmm4, OWORD [rax * 2 + rdx], 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0xED, 0x3C, 0x42, 0x17", "vpcomuw xmm15, xmm4, OWORD [rax * 2 + rdx], 23");
}



#[test]
fn enc_sse5_vpcomuw5589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm1, xmm4, xmm15, 23
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0xED, 0xCF, 0x17", "vpcomuw xmm1, xmm4, xmm15, 23");
}



#[test]
fn enc_sse5_vpcomuw5590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm0, xmm4, xmm1, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xED, 0xC1, 0x6C", "vpcomuw xmm0, xmm4, xmm1, 108");
}



#[test]
fn enc_sse5_vpcomw5591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm15, xmm12, xmm12, 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x18, 0xCD, 0xFC, 0x54", "vpcomw xmm15, xmm12, xmm12, 84");
}



#[test]
fn enc_sse5_vpcomw5592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm12, xmm11, xmm12, 60
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x20, 0xCD, 0xE4, 0x3C", "vpcomw xmm12, xmm11, xmm12, 60");
}



#[test]
fn enc_sse5_vpcomw5593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm3, xmm3, xmm11, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x60, 0xCD, 0xDB, 0x4B", "vpcomw xmm3, xmm3, xmm11, 75");
}



#[test]
fn enc_sse5_vpcomw5594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm1, xmm0, xmm4, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xCD, 0xCC, 0x28", "vpcomw xmm1, xmm0, xmm4, 40");
}



#[test]
fn enc_sse5_vpcomw5595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm12, xmm0, xmm4, 41
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xCD, 0xE4, 0x29", "vpcomw xmm12, xmm0, xmm4, 41");
}



#[test]
fn enc_sse5_vphaddbd5596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC2, 0xE0", "vphaddbd xmm4, xmm0");
}



#[test]
fn enc_sse5_vphaddbd5597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xC2, 0xDF", "vphaddbd xmm11, xmm15");
}



#[test]
fn enc_sse5_vphaddbd5598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC2, 0xC3", "vphaddbd xmm0, xmm3");
}



#[test]
fn enc_sse5_vphaddbd5599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC2, 0xC8", "vphaddbd xmm1, xmm0");
}



#[test]
fn enc_sse5_vphaddbd5600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC2, 0xE3", "vphaddbd xmm12, xmm3");
}



#[test]
fn enc_sse5_vphaddbq5601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC3, 0xE2", "vphaddbq xmm4, xmm2");
}



#[test]
fn enc_sse5_vphaddbq5602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC3, 0xCB", "vphaddbq xmm1, xmm11");
}



#[test]
fn enc_sse5_vphaddbq5603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC3, 0xC7", "vphaddbq xmm0, xmm15");
}



#[test]
fn enc_sse5_vphaddbq5604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xC3, 0xE7", "vphaddbq xmm12, xmm15");
}



#[test]
fn enc_sse5_vphaddbq5605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC3, 0xD4", "vphaddbq xmm2, xmm12");
}



#[test]
fn enc_sse5_vphaddbw5606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC1, 0xCA", "vphaddbw xmm1, xmm2");
}



#[test]
fn enc_sse5_vphaddbw5607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC1, 0xC3", "vphaddbw xmm0, xmm3");
}



#[test]
fn enc_sse5_vphaddbw5608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC1, 0xF9", "vphaddbw xmm15, xmm1");
}



#[test]
fn enc_sse5_vphaddbw5609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC1, 0xC2", "vphaddbw xmm0, xmm2");
}



#[test]
fn enc_sse5_vphaddbw5610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC1, 0xE4", "vphaddbw xmm4, xmm12");
}



#[test]
fn enc_sse5_vphadddq5611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xCB, 0xFA", "vphadddq xmm15, xmm2");
}



#[test]
fn enc_sse5_vphadddq5612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xCB, 0x0A", "vphadddq xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadddq5613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xCB, 0xE2", "vphadddq xmm4, xmm2");
}



#[test]
fn enc_sse5_vphadddq5614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm11, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xCB, 0x18", "vphadddq xmm11, OWORD [rax]");
}



#[test]
fn enc_sse5_vphadddq5615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xCB, 0xC9", "vphadddq xmm1, xmm1");
}



#[test]
fn enc_sse5_vphaddubd5616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD2, 0x24, 0x42", "vphaddubd xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddubd5617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0x14, 0x42", "vphaddubd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddubd5618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xD2, 0xC3", "vphaddubd xmm0, xmm11");
}



#[test]
fn enc_sse5_vphaddubd5619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0x0A", "vphaddubd xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddubd5620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0xCC", "vphaddubd xmm1, xmm4");
}



#[test]
fn enc_sse5_vphaddubq5621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD3, 0x20", "vphaddubq xmm4, OWORD [rax]");
}



#[test]
fn enc_sse5_vphaddubq5622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD3, 0xDC", "vphaddubq xmm3, xmm4");
}



#[test]
fn enc_sse5_vphaddubq5623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD3, 0xF8", "vphaddubq xmm15, xmm0");
}



#[test]
fn enc_sse5_vphaddubq5624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD3, 0xE2", "vphaddubq xmm12, xmm2");
}



#[test]
fn enc_sse5_vphaddubq5625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD3, 0x24, 0x42", "vphaddubq xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddubw5626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0xD9", "vphaddubw xmm3, xmm1");
}



#[test]
fn enc_sse5_vphaddubw5627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0xD3", "vphaddubw xmm2, xmm3");
}



#[test]
fn enc_sse5_vphaddubw5628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0x1C, 0x42", "vphaddubw xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddubw5629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD1, 0xE0", "vphaddubw xmm12, xmm0");
}



#[test]
fn enc_sse5_vphaddudq5630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xDB, 0x3A", "vphaddudq xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddudq5631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xDB, 0x10", "vphaddudq xmm2, OWORD [rax]");
}



#[test]
fn enc_sse5_vphaddudq5632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xDB, 0xFB", "vphaddudq xmm15, xmm3");
}



#[test]
fn enc_sse5_vphaddudq5633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xDB, 0xF8", "vphaddudq xmm15, xmm0");
}



#[test]
fn enc_sse5_vphaddudq5634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xDB, 0x02", "vphaddudq xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwd5635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD6, 0x0A", "vphadduwd xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwd5636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD6, 0xCB", "vphadduwd xmm1, xmm3");
}



#[test]
fn enc_sse5_vphadduwd5637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD6, 0x0C, 0x42", "vphadduwd xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphadduwd5638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD6, 0x02", "vphadduwd xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwd5639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD6, 0x08", "vphadduwd xmm1, OWORD [rax]");
}



#[test]
fn enc_sse5_vphadduwq5640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD7, 0xD1", "vphadduwq xmm2, xmm1");
}



#[test]
fn enc_sse5_vphadduwq5641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD7, 0x02", "vphadduwq xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwq5642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD7, 0xD3", "vphadduwq xmm2, xmm3");
}



#[test]
fn enc_sse5_vphadduwq5643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD7, 0xD2", "vphadduwq xmm2, xmm2");
}



#[test]
fn enc_sse5_vphadduwq5644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD7, 0xDB", "vphadduwq xmm11, xmm3");
}



#[test]
fn enc_sse5_vphaddwd5645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC6, 0x1C, 0x42", "vphaddwd xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddwd5646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC6, 0xC9", "vphaddwd xmm1, xmm1");
}



#[test]
fn enc_sse5_vphaddwd5647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC6, 0xD8", "vphaddwd xmm11, xmm0");
}



#[test]
fn enc_sse5_vphaddwd5648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC6, 0xD0", "vphaddwd xmm2, xmm0");
}



#[test]
fn enc_sse5_vphaddwd5649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xC6, 0xFB", "vphaddwd xmm15, xmm11");
}



#[test]
fn enc_sse5_vphaddwq5650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC7, 0x22", "vphaddwq xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddwq5651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC7, 0xDF", "vphaddwq xmm3, xmm15");
}



#[test]
fn enc_sse5_vphaddwq5652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC7, 0xE4", "vphaddwq xmm12, xmm4");
}



#[test]
fn enc_sse5_vphaddwq5653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC7, 0xD9", "vphaddwq xmm3, xmm1");
}



#[test]
fn enc_sse5_vphaddwq5654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xC7, 0xE3", "vphaddwq xmm12, xmm11");
}



#[test]
fn enc_sse5_vphsubbw5655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0xDC", "vphsubbw xmm3, xmm4");
}



#[test]
fn enc_sse5_vphsubbw5656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0xE4", "vphsubbw xmm4, xmm4");
}



#[test]
fn enc_sse5_vphsubbw5657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0xE3", "vphsubbw xmm4, xmm3");
}



#[test]
fn enc_sse5_vphsubbw5658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE1, 0xFA", "vphsubbw xmm15, xmm2");
}



#[test]
fn enc_sse5_vphsubbw5659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE1, 0x38", "vphsubbw xmm15, OWORD [rax]");
}



#[test]
fn enc_sse5_vphsubdq5660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE3, 0xDC", "vphsubdq xmm3, xmm4");
}



#[test]
fn enc_sse5_vphsubdq5661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE3, 0x1C, 0x42", "vphsubdq xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphsubdq5662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xE3, 0xDF", "vphsubdq xmm11, xmm15");
}



#[test]
fn enc_sse5_vphsubdq5663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE3, 0xE4", "vphsubdq xmm12, xmm4");
}



#[test]
fn enc_sse5_vphsubdq5664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE3, 0xD0", "vphsubdq xmm2, xmm0");
}



#[test]
fn enc_sse5_vphsubwd5665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xE2, 0xC3", "vphsubwd xmm0, xmm11");
}



#[test]
fn enc_sse5_vphsubwd5666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE2, 0xE3", "vphsubwd xmm12, xmm3");
}



#[test]
fn enc_sse5_vphsubwd5667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE2, 0xC0", "vphsubwd xmm0, xmm0");
}



#[test]
fn enc_sse5_vphsubwd5668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE2, 0xD2", "vphsubwd xmm2, xmm2");
}



#[test]
fn enc_sse5_vphsubwd5669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE2, 0x00", "vphsubwd xmm0, OWORD [rax]");
}



#[test]
fn enc_sse5_vpmacsdd5670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm11, xmm2, xmm4, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0x9E, 0xDC, 0xB0", "vpmacsdd xmm11, xmm2, xmm4, xmm11");
}



#[test]
fn enc_sse5_vpmacsdd5671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm4, xmm11, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x9E, 0xE1, 0xC0", "vpmacsdd xmm4, xmm11, xmm1, xmm12");
}



#[test]
fn enc_sse5_vpmacsdd5672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm11, xmm0, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0x9E, 0xDC, 0x40", "vpmacsdd xmm11, xmm0, xmm12, xmm4");
}



#[test]
fn enc_sse5_vpmacsdd5673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm12, xmm12, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0x9E, 0xE2, 0x40", "vpmacsdd xmm12, xmm12, xmm2, xmm4");
}



#[test]
fn enc_sse5_vpmacsdd5674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm1, xmm0, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0x9E, 0xCC, 0xF0", "vpmacsdd xmm1, xmm0, xmm12, xmm15");
}



#[test]
fn enc_sse5_vpmacsdqh5675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm12, xmm0, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0x9F, 0xE4, 0x00", "vpmacsdqh xmm12, xmm0, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpmacsdqh5676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm12, xmm1, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x70, 0x9F, 0xE3, 0x40", "vpmacsdqh xmm12, xmm1, xmm11, xmm4");
}



#[test]
fn enc_sse5_vpmacsdqh5677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm1, xmm4, OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0x9F, 0x08, 0xF0", "vpmacsdqh xmm1, xmm4, OWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vpmacsdqh5678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm11, xmm15, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x00, 0x9F, 0xDB, 0x30", "vpmacsdqh xmm11, xmm15, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpmacsdqh5679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm15, xmm4, OWORD [rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0x9F, 0x3A, 0x00", "vpmacsdqh xmm15, xmm4, OWORD [rdx], xmm0");
}



#[test]
fn enc_sse5_vpmacsdql5680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm11, xmm11, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x20, 0x97, 0xD9, 0x00", "vpmacsdql xmm11, xmm11, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpmacsdql5681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm0, xmm11, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x97, 0xC2, 0x30", "vpmacsdql xmm0, xmm11, xmm2, xmm3");
}



#[test]
fn enc_sse5_vpmacsdql5682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm1, xmm1, OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0x97, 0x08, 0x20", "vpmacsdql xmm1, xmm1, OWORD [rax], xmm2");
}



#[test]
fn enc_sse5_vpmacsdql5683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm4, xmm15, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0x97, 0xE4, 0x10", "vpmacsdql xmm4, xmm15, xmm12, xmm1");
}



#[test]
fn enc_sse5_vpmacsdql5684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm1, xmm3, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0x97, 0xCB, 0x40", "vpmacsdql xmm1, xmm3, xmm3, xmm4");
}



#[test]
fn enc_sse5_vpmacssdd5685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm3, xmm12, OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x8E, 0x1C, 0x42, 0x10", "vpmacssdd xmm3, xmm12, OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse5_vpmacssdd5686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm3, xmm11, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x20, 0x8E, 0xDC, 0x40", "vpmacssdd xmm3, xmm11, xmm12, xmm4");
}



#[test]
fn enc_sse5_vpmacssdd5687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm0, xmm2, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0x8E, 0xC7, 0xF0", "vpmacssdd xmm0, xmm2, xmm15, xmm15");
}



#[test]
fn enc_sse5_vpmacssdd5688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm11, xmm0, OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0x8E, 0x18, 0x40", "vpmacssdd xmm11, xmm0, OWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vpmacssdd5689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm4, xmm4, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0x8E, 0xE0, 0x30", "vpmacssdd xmm4, xmm4, xmm0, xmm3");
}



#[test]
fn enc_sse5_vpmacssdqh5690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm0, xmm12, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x8F, 0xC1, 0x00", "vpmacssdqh xmm0, xmm12, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpmacssdqh5691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm4, xmm12, OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x8F, 0x24, 0x42, 0x20", "vpmacssdqh xmm4, xmm12, OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse5_vpmacssdqh5692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm2, xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x8F, 0xD2, 0x10", "vpmacssdqh xmm2, xmm11, xmm2, xmm1");
}



#[test]
fn enc_sse5_vpmacssdqh5693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm3, xmm15, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0x8F, 0xD8, 0x40", "vpmacssdqh xmm3, xmm15, xmm0, xmm4");
}



#[test]
fn enc_sse5_vpmacssdqh5694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm3, xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0x8F, 0xDC, 0x20", "vpmacssdqh xmm3, xmm2, xmm12, xmm2");
}



#[test]
fn enc_sse5_vpmacssdql5695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm15, xmm11, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x20, 0x87, 0xFC, 0x20", "vpmacssdql xmm15, xmm11, xmm12, xmm2");
}



#[test]
fn enc_sse5_vpmacssdql5696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm3, xmm15, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0x87, 0xDA, 0xB0", "vpmacssdql xmm3, xmm15, xmm2, xmm11");
}



#[test]
fn enc_sse5_vpmacssdql5697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm3, xmm2, OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0x87, 0x18, 0xF0", "vpmacssdql xmm3, xmm2, OWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vpmacssdql5698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm15, xmm12, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x18, 0x87, 0xFB, 0xC0", "vpmacssdql xmm15, xmm12, xmm11, xmm12");
}



#[test]
fn enc_sse5_vpmacssdql5699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm3, xmm15, OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0x87, 0x18, 0x10", "vpmacssdql xmm3, xmm15, OWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vpmacsswd5700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm12, xmm4, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0x86, 0xE3, 0xF0", "vpmacsswd xmm12, xmm4, xmm3, xmm15");
}



#[test]
fn enc_sse5_vpmacsswd5701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm2, xmm2, OWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0x86, 0x10, 0xF0", "vpmacsswd xmm2, xmm2, OWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vpmacsswd5702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm15, xmm0, OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0x86, 0x3C, 0x42, 0xB0", "vpmacsswd xmm15, xmm0, OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse5_vpmacsswd5703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm11, xmm3, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0x86, 0xD8, 0x20", "vpmacsswd xmm11, xmm3, xmm0, xmm2");
}



#[test]
fn enc_sse5_vpmacsswd5704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm1, xmm15, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0x86, 0xCF, 0x00", "vpmacsswd xmm1, xmm15, xmm15, xmm0");
}



#[test]
fn enc_sse5_vpmacssww5705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm2, xmm12, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x18, 0x85, 0xD7, 0x20", "vpmacssww xmm2, xmm12, xmm15, xmm2");
}



#[test]
fn enc_sse5_vpmacssww5706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm15, xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x00, 0x85, 0xF8, 0x00", "vpmacssww xmm15, xmm15, xmm0, xmm0");
}



#[test]
fn enc_sse5_vpmacssww5707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm4, xmm2, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0x85, 0xE4, 0x00", "vpmacssww xmm4, xmm2, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpmacssww5708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm15, xmm3, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0x85, 0xF9, 0xC0", "vpmacssww xmm15, xmm3, xmm1, xmm12");
}



#[test]
fn enc_sse5_vpmacssww5709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm2, xmm11, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x85, 0xD1, 0x10", "vpmacssww xmm2, xmm11, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpmacswd5710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm2, xmm15, OWORD [rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0x96, 0x12, 0xB0", "vpmacswd xmm2, xmm15, OWORD [rdx], xmm11");
}



#[test]
fn enc_sse5_vpmacswd5711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm0, xmm4, OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0x96, 0x00, 0xB0", "vpmacswd xmm0, xmm4, OWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vpmacswd5712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm4, xmm2, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0x96, 0xE7, 0x30", "vpmacswd xmm4, xmm2, xmm15, xmm3");
}



#[test]
fn enc_sse5_vpmacswd5713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm0, xmm15, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0x96, 0xC2, 0x40", "vpmacswd xmm0, xmm15, xmm2, xmm4");
}



#[test]
fn enc_sse5_vpmacswd5714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm2, xmm0, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0x96, 0xD1, 0x10", "vpmacswd xmm2, xmm0, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpmacsww5715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm12, xmm11, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x20, 0x95, 0xE1, 0x40", "vpmacsww xmm12, xmm11, xmm1, xmm4");
}



#[test]
fn enc_sse5_vpmacsww5716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm15, xmm12, OWORD [rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0x95, 0x3A, 0xB0", "vpmacsww xmm15, xmm12, OWORD [rdx], xmm11");
}



#[test]
fn enc_sse5_vpmacsww5717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm11, xmm1, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0x95, 0xDA, 0x10", "vpmacsww xmm11, xmm1, xmm2, xmm1");
}



#[test]
fn enc_sse5_vpmacsww5718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm15, xmm11, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x20, 0x95, 0xFB, 0x30", "vpmacsww xmm15, xmm11, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpmacsww5719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm1, xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0x95, 0xCB, 0x10", "vpmacsww xmm1, xmm0, xmm11, xmm1");
}



#[test]
fn enc_sse5_vpmadcsswd5720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm4, xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xA6, 0xE0, 0x40", "vpmadcsswd xmm4, xmm0, xmm0, xmm4");
}



#[test]
fn enc_sse5_vpmadcsswd5721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm3, xmm12, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0xA6, 0xDB, 0x20", "vpmadcsswd xmm3, xmm12, xmm3, xmm2");
}



#[test]
fn enc_sse5_vpmadcsswd5722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm2, xmm15, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0xA6, 0xD3, 0xF0", "vpmadcsswd xmm2, xmm15, xmm11, xmm15");
}



#[test]
fn enc_sse5_vpmadcsswd5723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm2, xmm12, OWORD [rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0xA6, 0x12, 0xC0", "vpmadcsswd xmm2, xmm12, OWORD [rdx], xmm12");
}



#[test]
fn enc_sse5_vpmadcsswd5724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm1, xmm12, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0xA6, 0xC8, 0x10", "vpmadcsswd xmm1, xmm12, xmm0, xmm1");
}



#[test]
fn enc_sse5_vpmadcswd5725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm1, xmm15, OWORD [rax * 2 + rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x00, 0xB6, 0x0C, 0x42, 0x40", "vpmadcswd xmm1, xmm15, OWORD [rax * 2 + rdx], xmm4");
}



#[test]
fn enc_sse5_vpmadcswd5726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm4, xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0xB6, 0xE4, 0x00", "vpmadcswd xmm4, xmm4, xmm12, xmm0");
}



#[test]
fn enc_sse5_vpmadcswd5727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm12, xmm0, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xB6, 0xE3, 0x10", "vpmadcswd xmm12, xmm0, xmm11, xmm1");
}



#[test]
fn enc_sse5_vpmadcswd5728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm12, xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x70, 0xB6, 0xE3, 0x00", "vpmadcswd xmm12, xmm1, xmm11, xmm0");
}



#[test]
fn enc_sse5_vpmadcswd5729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm11, xmm2, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0xB6, 0xDA, 0xF0", "vpmadcswd xmm11, xmm2, xmm2, xmm15");
}



#[test]
fn enc_sse5_vpperm5730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm4, xmm3, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x60, 0xA3, 0xE4, 0xB0", "vpperm xmm4, xmm3, xmm12, xmm11");
}



#[test]
fn enc_sse5_vpperm5731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm1, xmm11, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0xA3, 0xCA, 0x20", "vpperm xmm1, xmm11, xmm2, xmm2");
}



#[test]
fn enc_sse5_vpperm5732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm12, xmm15, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x00, 0xA3, 0xE4, 0xF0", "vpperm xmm12, xmm15, xmm12, xmm15");
}



#[test]
fn enc_sse5_vpperm5733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm15, xmm12, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xA3, 0xFB, 0xF0", "vpperm xmm15, xmm12, xmm3, xmm15");
}



#[test]
fn enc_sse5_vpperm5734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm11, xmm4, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0xA3, 0xD8, 0xF0", "vpperm xmm11, xmm4, xmm0, xmm15");
}



#[test]
fn enc_sse5_vpperm5735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm0, xmm2, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0xA3, 0xC7, 0x20", "vpperm xmm0, xmm2, xmm15, xmm2");
}



#[test]
fn enc_sse5_vpperm5736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm4, xmm0, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xA3, 0xE1, 0x10", "vpperm xmm4, xmm0, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpperm5737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm12, xmm1, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0xA3, 0xE0, 0x40", "vpperm xmm12, xmm1, xmm0, xmm4");
}



#[test]
fn enc_sse5_vpperm5738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm11, xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0xA3, 0xDB, 0x30", "vpperm xmm11, xmm3, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpperm5739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm12, xmm1, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0xA3, 0xE3, 0x20", "vpperm xmm12, xmm1, xmm3, xmm2");
}



#[test]
fn enc_sse5_vprotb5740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm15, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x90, 0xF9", "vprotb xmm15, xmm1, xmm12");
}



#[test]
fn enc_sse5_vprotb5741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm15, OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x90, 0x3C, 0x42", "vprotb xmm15, OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse5_vprotb5742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x58, 0x90, 0xCF", "vprotb xmm1, xmm15, xmm4");
}



#[test]
fn enc_sse5_vprotb5743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm11, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x00, 0x90, 0xD9", "vprotb xmm11, xmm1, xmm15");
}



#[test]
fn enc_sse5_vprotb5744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x90, 0xCC", "vprotb xmm1, xmm4, xmm3");
}



#[test]
fn enc_sse5_vprotb5745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x90, 0xCF", "vprotb xmm1, xmm15, xmm1");
}



#[test]
fn enc_sse5_vprotb5746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x90, 0xC8", "vprotb xmm1, xmm0, xmm2");
}



#[test]
fn enc_sse5_vprotb5747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm0, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x90, 0xC2", "vprotb xmm0, xmm2, xmm2");
}



#[test]
fn enc_sse5_vprotb5748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm12, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x90, 0xE4", "vprotb xmm12, xmm4, xmm12");
}



#[test]
fn enc_sse5_vprotb5749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x90, 0xCA", "vprotb xmm1, xmm2, xmm12");
}



#[test]
fn enc_sse5_vprotb5750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm3, xmm3, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC0, 0xDB, 0x60", "vprotb xmm3, xmm3, 96");
}



#[test]
fn enc_sse5_vprotb5751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm4, xmm11, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC0, 0xE3, 0x5E", "vprotb xmm4, xmm11, 94");
}



#[test]
fn enc_sse5_vprotb5752() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm15, OWORD [rax * 2 + rdx], 2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC0, 0x3C, 0x42, 0x02", "vprotb xmm15, OWORD [rax * 2 + rdx], 2");
}



#[test]
fn enc_sse5_vprotb5753() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, OWORD [rax], 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC0, 0x08, 0x28", "vprotb xmm1, OWORD [rax], 40");
}



#[test]
fn enc_sse5_vprotb5754() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm12, OWORD [rax], 32
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC0, 0x20, 0x20", "vprotb xmm12, OWORD [rax], 32");
}



#[test]
fn enc_sse5_vprotd5755() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, OWORD [rdx], 74
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC2, 0x22, 0x4A", "vprotd xmm12, OWORD [rdx], 74");
}



#[test]
fn enc_sse5_vprotd5756() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm3, xmm12, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC2, 0xDC, 0x75", "vprotd xmm3, xmm12, 117");
}



#[test]
fn enc_sse5_vprotd5757() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm0, xmm0, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC2, 0xC0, 0x60", "vprotd xmm0, xmm0, 96");
}



#[test]
fn enc_sse5_vprotd5758() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm1, xmm15, 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC2, 0xCF, 0x06", "vprotd xmm1, xmm15, 6");
}



#[test]
fn enc_sse5_vprotd5759() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm3, OWORD [rdx], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC2, 0x1A, 0x48", "vprotd xmm3, OWORD [rdx], 72");
}



#[test]
fn enc_sse5_vprotd5760() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x92, 0xE0", "vprotd xmm12, xmm0, xmm12");
}



#[test]
fn enc_sse5_vprotd5761() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm15, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x60, 0x92, 0xFF", "vprotd xmm15, xmm15, xmm3");
}



#[test]
fn enc_sse5_vprotd5762() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm15, xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0xE8, 0x92, 0x3C, 0x42", "vprotd xmm15, xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vprotd5763() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm1, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x92, 0xCB", "vprotd xmm1, xmm11, xmm1");
}



#[test]
fn enc_sse5_vprotd5764() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm4, xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x92, 0x22", "vprotd xmm4, xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse5_vprotd5765() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x92, 0x20", "vprotd xmm12, OWORD [rax], xmm2");
}



#[test]
fn enc_sse5_vprotd5766() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x92, 0xE4", "vprotd xmm12, xmm4, xmm2");
}



#[test]
fn enc_sse5_vprotd5767() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x92, 0xDB", "vprotd xmm3, xmm3, xmm3");
}



#[test]
fn enc_sse5_vprotd5768() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, OWORD [rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x92, 0x22", "vprotd xmm12, OWORD [rdx], xmm4");
}



#[test]
fn enc_sse5_vprotd5769() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x58, 0x92, 0xE3", "vprotd xmm12, xmm11, xmm4");
}



#[test]
fn enc_sse5_vprotq5770() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm12, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0xF8, 0x93, 0x24, 0x42", "vprotq xmm12, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vprotq5771() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm11, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x93, 0xDB", "vprotq xmm11, xmm3, xmm4");
}



#[test]
fn enc_sse5_vprotq5772() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm3, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x93, 0xDB", "vprotq xmm3, xmm3, xmm2");
}



#[test]
fn enc_sse5_vprotq5773() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm1, xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x93, 0x0A", "vprotq xmm1, xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vprotq5774() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x20, 0x93, 0xC4", "vprotq xmm0, xmm12, xmm11");
}



#[test]
fn enc_sse5_vprotq5775() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm15, xmm2, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC3, 0xFA, 0x67", "vprotq xmm15, xmm2, 103");
}



#[test]
fn enc_sse5_vprotq5776() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm3, xmm0, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC3, 0xD8, 0x2E", "vprotq xmm3, xmm0, 46");
}



#[test]
fn enc_sse5_vprotq5777() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm1, xmm12, 124
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC3, 0xCC, 0x7C", "vprotq xmm1, xmm12, 124");
}



#[test]
fn enc_sse5_vprotq5778() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm12, xmm3, 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC3, 0xE3, 0x70", "vprotq xmm12, xmm3, 112");
}



#[test]
fn enc_sse5_vprotq5779() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm3, xmm3, 118
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC3, 0xDB, 0x76", "vprotq xmm3, xmm3, 118");
}



#[test]
fn enc_sse5_vprotq5780() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm12, OWORD [rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x20, 0x93, 0x22", "vprotq xmm12, OWORD [rdx], xmm11");
}



#[test]
fn enc_sse5_vprotq5781() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm15, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x93, 0xFC", "vprotq xmm15, xmm4, xmm1");
}



#[test]
fn enc_sse5_vprotq5782() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm0, OWORD [rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x93, 0x02", "vprotq xmm0, OWORD [rdx], xmm15");
}



#[test]
fn enc_sse5_vprotq5783() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm3, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x93, 0xDB", "vprotq xmm3, xmm11, xmm0");
}



#[test]
fn enc_sse5_vprotq5784() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm3, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x93, 0xDA", "vprotq xmm3, xmm2, xmm1");
}



#[test]
fn enc_sse5_vprotw5785() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm0, xmm3, 17
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0xC3, 0x11", "vprotw xmm0, xmm3, 17");
}



#[test]
fn enc_sse5_vprotw5786() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm4, xmm11, 63
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC1, 0xE3, 0x3F", "vprotw xmm4, xmm11, 63");
}



#[test]
fn enc_sse5_vprotw5787() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm4, xmm15, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC1, 0xE7, 0x62", "vprotw xmm4, xmm15, 98");
}



#[test]
fn enc_sse5_vprotw5788() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm2, OWORD [rdx], 91
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0x12, 0x5B", "vprotw xmm2, OWORD [rdx], 91");
}



#[test]
fn enc_sse5_vprotw5789() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm2, xmm2, 44
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0xD2, 0x2C", "vprotw xmm2, xmm2, 44");
}



#[test]
fn enc_sse5_vprotw5790() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm4, OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x91, 0x20", "vprotw xmm4, OWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vprotw5791() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm15, OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x91, 0x38", "vprotw xmm15, OWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vprotw5792() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm12, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x91, 0xE3", "vprotw xmm12, xmm3, xmm4");
}



#[test]
fn enc_sse5_vprotw5793() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm1, OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x91, 0x0C, 0x42", "vprotw xmm1, OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse5_vprotw5794() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm4, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x91, 0xE4", "vprotw xmm4, xmm4, xmm15");
}



#[test]
fn enc_sse5_vprotw5795() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm15, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x91, 0xFB", "vprotw xmm15, xmm3, xmm0");
}



#[test]
fn enc_sse5_vprotw5796() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm2, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x91, 0xD4", "vprotw xmm2, xmm12, xmm2");
}



#[test]
fn enc_sse5_vprotw5797() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm2, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xD8, 0x91, 0x12", "vprotw xmm2, xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse5_vprotw5798() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x91, 0xF8", "vprotw xmm15, xmm0, xmm0");
}



#[test]
fn enc_sse5_vprotw5799() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm1, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x58, 0x91, 0xCF", "vprotw xmm1, xmm15, xmm4");
}



#[test]
fn enc_sse5_vpshab5800() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm11, xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0xD8, 0x98, 0x18", "vpshab xmm11, xmm4, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshab5801() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm0, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x98, 0xC0", "vpshab xmm0, xmm0, xmm1");
}



#[test]
fn enc_sse5_vpshab5802() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm11, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x98, 0xD9", "vpshab xmm11, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpshab5803() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm0, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x98, 0xC3", "vpshab xmm0, xmm3, xmm2");
}



#[test]
fn enc_sse5_vpshab5804() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm15, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x98, 0xF8", "vpshab xmm15, xmm0, xmm1");
}



#[test]
fn enc_sse5_vpshab5805() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm12, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x98, 0xE3", "vpshab xmm12, xmm3, xmm0");
}



#[test]
fn enc_sse5_vpshab5806() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm2, OWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x98, 0x14, 0x42", "vpshab xmm2, OWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_sse5_vpshab5807() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm0, OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x98, 0x04, 0x42", "vpshab xmm0, OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse5_vpshab5808() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm1, OWORD [rax * 2 + rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x98, 0x0C, 0x42", "vpshab xmm1, OWORD [rax * 2 + rdx], xmm1");
}



#[test]
fn enc_sse5_vpshab5809() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x98, 0xD9", "vpshab xmm3, xmm1, xmm11");
}



#[test]
fn enc_sse5_vpshad5810() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm0, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x9A, 0xC3", "vpshad xmm0, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpshad5811() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm11, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x20, 0x9A, 0xDB", "vpshad xmm11, xmm11, xmm11");
}



#[test]
fn enc_sse5_vpshad5812() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm12, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x9A, 0xE1", "vpshad xmm12, xmm1, xmm2");
}



#[test]
fn enc_sse5_vpshad5813() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm4, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x9A, 0xE1", "vpshad xmm4, xmm1, xmm15");
}



#[test]
fn enc_sse5_vpshad5814() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm3, OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x9A, 0x1C, 0x42", "vpshad xmm3, OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse5_vpshad5815() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm0, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x9A, 0xC0", "vpshad xmm0, xmm0, xmm2");
}



#[test]
fn enc_sse5_vpshad5816() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm3, xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x98, 0x9A, 0x1A", "vpshad xmm3, xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse5_vpshad5817() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm15, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x9A, 0xF9", "vpshad xmm15, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpshad5818() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm3, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x9A, 0xDC", "vpshad xmm3, xmm12, xmm2");
}



#[test]
fn enc_sse5_vpshad5819() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm0, xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xA0, 0x9A, 0x04, 0x42", "vpshad xmm0, xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshaq5820() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm3, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x9B, 0xDB", "vpshaq xmm3, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpshaq5821() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm0, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x9B, 0xC4", "vpshaq xmm0, xmm12, xmm0");
}



#[test]
fn enc_sse5_vpshaq5822() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm11, OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x60, 0x9B, 0x18", "vpshaq xmm11, OWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vpshaq5823() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm1, OWORD [rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x9B, 0x0A", "vpshaq xmm1, OWORD [rdx], xmm0");
}



#[test]
fn enc_sse5_vpshaq5824() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm0, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x9B, 0xC1", "vpshaq xmm0, xmm1, xmm4");
}



#[test]
fn enc_sse5_vpshaq5825() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm3, xmm1, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x9B, 0x1C, 0x42", "vpshaq xmm3, xmm1, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshaq5826() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm11, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x9B, 0xDA", "vpshaq xmm11, xmm2, xmm4");
}



#[test]
fn enc_sse5_vpshaq5827() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm0, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x9B, 0xC3", "vpshaq xmm0, xmm3, xmm4");
}



#[test]
fn enc_sse5_vpshaq5828() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm15, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x9B, 0xFA", "vpshaq xmm15, xmm2, xmm4");
}



#[test]
fn enc_sse5_vpshaq5829() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x9B, 0xC4", "vpshaq xmm0, xmm12, xmm1");
}



#[test]
fn enc_sse5_vpshaw5830() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm1, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x99, 0xC9", "vpshaw xmm1, xmm1, xmm2");
}



#[test]
fn enc_sse5_vpshaw5831() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm2, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x99, 0xD7", "vpshaw xmm2, xmm15, xmm0");
}



#[test]
fn enc_sse5_vpshaw5832() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm11, OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x99, 0x18", "vpshaw xmm11, OWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vpshaw5833() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm2, OWORD [rdx], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x99, 0x12", "vpshaw xmm2, OWORD [rdx], xmm4");
}



#[test]
fn enc_sse5_vpshaw5834() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm11, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x99, 0xD9", "vpshaw xmm11, xmm1, xmm4");
}



#[test]
fn enc_sse5_vpshaw5835() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm3, xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x99, 0x1C, 0x42", "vpshaw xmm3, xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshaw5836() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm4, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x99, 0xE3", "vpshaw xmm4, xmm3, xmm4");
}



#[test]
fn enc_sse5_vpshaw5837() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm1, xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xD8, 0x99, 0x08", "vpshaw xmm1, xmm4, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshaw5838() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm0, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x99, 0xC3", "vpshaw xmm0, xmm3, xmm0");
}



#[test]
fn enc_sse5_vpshaw5839() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm11, xmm1, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0xF0, 0x99, 0x18", "vpshaw xmm11, xmm1, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshlb5840() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm2, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x60, 0x94, 0xD3", "vpshlb xmm2, xmm11, xmm3");
}



#[test]
fn enc_sse5_vpshlb5841() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x20, 0x94, 0xFB", "vpshlb xmm15, xmm11, xmm11");
}



#[test]
fn enc_sse5_vpshlb5842() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm2, xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x94, 0x12", "vpshlb xmm2, xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse5_vpshlb5843() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm3, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x94, 0x1C, 0x42", "vpshlb xmm3, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshlb5844() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm0, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x94, 0xC4", "vpshlb xmm0, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpshlb5845() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x94, 0xD3", "vpshlb xmm2, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpshlb5846() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm11, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x00, 0x94, 0xDF", "vpshlb xmm11, xmm15, xmm15");
}



#[test]
fn enc_sse5_vpshlb5847() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm4, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x94, 0xE4", "vpshlb xmm4, xmm4, xmm4");
}



#[test]
fn enc_sse5_vpshlb5848() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm1, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x94, 0xCB", "vpshlb xmm1, xmm3, xmm1");
}



#[test]
fn enc_sse5_vpshlb5849() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm12, OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x94, 0x20", "vpshlb xmm12, OWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vpshld5850() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x96, 0xC1", "vpshld xmm0, xmm1, xmm3");
}



#[test]
fn enc_sse5_vpshld5851() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm3, xmm12, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x98, 0x96, 0x1C, 0x42", "vpshld xmm3, xmm12, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshld5852() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm11, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x60, 0x96, 0xD9", "vpshld xmm11, xmm1, xmm3");
}



#[test]
fn enc_sse5_vpshld5853() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm1, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x96, 0xC9", "vpshld xmm1, xmm1, xmm12");
}



#[test]
fn enc_sse5_vpshld5854() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm2, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x96, 0xD1", "vpshld xmm2, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpshld5855() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm1, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x96, 0xCB", "vpshld xmm1, xmm3, xmm12");
}



#[test]
fn enc_sse5_vpshld5856() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x96, 0xF8", "vpshld xmm15, xmm0, xmm12");
}



#[test]
fn enc_sse5_vpshld5857() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm15, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x00, 0x96, 0xFA", "vpshld xmm15, xmm2, xmm15");
}



#[test]
fn enc_sse5_vpshld5858() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm12, OWORD [rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x96, 0x22", "vpshld xmm12, OWORD [rdx], xmm1");
}



#[test]
fn enc_sse5_vpshld5859() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm15, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x96, 0xF8", "vpshld xmm15, xmm0, xmm0");
}



#[test]
fn enc_sse5_vpshlq5860() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm4, OWORD [rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x97, 0x22", "vpshlq xmm4, OWORD [rdx], xmm11");
}



#[test]
fn enc_sse5_vpshlq5861() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm2, OWORD [rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x97, 0x12", "vpshlq xmm2, OWORD [rdx], xmm12");
}



#[test]
fn enc_sse5_vpshlq5862() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm2, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x97, 0xD3", "vpshlq xmm2, xmm3, xmm0");
}



#[test]
fn enc_sse5_vpshlq5863() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm11, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x68, 0x97, 0xDF", "vpshlq xmm11, xmm15, xmm2");
}



#[test]
fn enc_sse5_vpshlq5864() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm1, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x97, 0xC8", "vpshlq xmm1, xmm0, xmm12");
}



#[test]
fn enc_sse5_vpshlq5865() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x97, 0xC0", "vpshlq xmm0, xmm0, xmm4");
}



#[test]
fn enc_sse5_vpshlq5866() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm12, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x97, 0xE2", "vpshlq xmm12, xmm2, xmm0");
}



#[test]
fn enc_sse5_vpshlq5867() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm4, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x97, 0xE0", "vpshlq xmm4, xmm0, xmm4");
}



#[test]
fn enc_sse5_vpshlq5868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm0, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x97, 0xC0", "vpshlq xmm0, xmm0, xmm3");
}



#[test]
fn enc_sse5_vpshlq5869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm11, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x58, 0x97, 0xDB", "vpshlq xmm11, xmm11, xmm4");
}



#[test]
fn enc_sse5_vpshlw5870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm1, xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x95, 0xC9", "vpshlw xmm1, xmm1, xmm15");
}



#[test]
fn enc_sse5_vpshlw5871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm1, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x60, 0x95, 0xCC", "vpshlw xmm1, xmm12, xmm3");
}



#[test]
fn enc_sse5_vpshlw5872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm3, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x95, 0xDC", "vpshlw xmm3, xmm12, xmm0");
}



#[test]
fn enc_sse5_vpshlw5873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm0, xmm1, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x95, 0x02", "vpshlw xmm0, xmm1, OWORD [rdx]");
}



#[test]
fn enc_sse5_vpshlw5874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm0, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x18, 0x95, 0xC7", "vpshlw xmm0, xmm15, xmm12");
}



#[test]
fn enc_sse5_vpshlw5875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm4, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x95, 0xE1", "vpshlw xmm4, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpshlw5876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm12, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x95, 0xE2", "vpshlw xmm12, xmm2, xmm12");
}



#[test]
fn enc_sse5_vpshlw5877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm1, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x95, 0xCB", "vpshlw xmm1, xmm11, xmm0");
}



#[test]
fn enc_sse5_vpshlw5878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm3, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x95, 0xDB", "vpshlw xmm3, xmm3, xmm2");
}



#[test]
fn enc_sse5_vpshlw5879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x95, 0xE4", "vpshlw xmm12, xmm4, xmm1");
}


