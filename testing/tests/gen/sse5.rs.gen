
#[test]
fn enc_sse5_vfmaddsd5289() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm1, xmm15, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x6B, 0x08, 0x40", "vfmaddsd xmm1, xmm15, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmaddsd5290() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm3, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x6B, 0x18, 0xB0", "vfmaddsd xmm11, xmm3, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfmaddsd5291() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm1, xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6B, 0x08, 0x20", "vfmaddsd xmm1, xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5292() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm4, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x59, 0x6B, 0x18, 0xF0", "vfmaddsd xmm11, xmm4, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmaddsd5293() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm1, xmm15, xmm2, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6B, 0x08, 0x20", "vfmaddsd xmm1, xmm15, xmm2, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5294() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm2, xmm3, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x6B, 0xD2, 0x10", "vfmaddsd xmm2, xmm3, xmm1, xmm2");
}



#[test]
fn enc_sse5_vfmaddsd5295() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm12, xmm2, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE9, 0x6B, 0xE3, 0x30", "vfmaddsd xmm12, xmm2, xmm3, xmm3");
}



#[test]
fn enc_sse5_vfmaddsd5296() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm2, xmm3, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x6B, 0xD4, 0xC0", "vfmaddsd xmm2, xmm3, xmm12, xmm4");
}



#[test]
fn enc_sse5_vfmaddsd5297() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm1, xmm11, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xA1, 0x6B, 0xCB, 0x20", "vfmaddsd xmm1, xmm11, xmm2, xmm11");
}



#[test]
fn enc_sse5_vfmaddsd5298() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm15, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x6B, 0xDC, 0x10", "vfmaddsd xmm11, xmm15, xmm1, xmm4");
}



#[test]
fn enc_sse5_vfmaddsd5299() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm11, xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x6B, 0x18, 0x40", "vfmaddsd xmm11, xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5300() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm1, xmm15, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x6B, 0x08, 0x40", "vfmaddsd xmm1, xmm15, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmaddsd5301() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm12, xmm11, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xA1, 0x6B, 0x20, 0xF0", "vfmaddsd xmm12, xmm11, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5302() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6B, 0x00, 0x40", "vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddsd5303() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x81, 0x6B, 0x00, 0x40", "vfmaddsd xmm0, xmm15, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5304() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm15, xmm1, DWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x6A, 0x38, 0x00", "vfmaddss xmm15, xmm1, DWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmaddss5305() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm1, xmm0, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6A, 0x08, 0x40", "vfmaddss xmm1, xmm0, xmm4, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5306() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm3, xmm11, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xA1, 0x6A, 0x18, 0x20", "vfmaddss xmm3, xmm11, xmm2, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5307() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm2, xmm0, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x10, 0xF0", "vfmaddss xmm2, xmm0, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmaddss5308() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm15, xmm1, DWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x6A, 0x38, 0x00", "vfmaddss xmm15, xmm1, DWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmaddss5309() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm12, xmm3, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xE1, 0x6A, 0xE4, 0x00", "vfmaddss xmm12, xmm3, xmm0, xmm12");
}



#[test]
fn enc_sse5_vfmaddss5310() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm1, xmm1, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x6A, 0xCC, 0x40", "vfmaddss xmm1, xmm1, xmm4, xmm4");
}



#[test]
fn enc_sse5_vfmaddss5311() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm12, xmm4, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xD9, 0x6A, 0xE2, 0xB0", "vfmaddss xmm12, xmm4, xmm11, xmm2");
}



#[test]
fn enc_sse5_vfmaddss5312() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm12, xmm15, xmm4, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x6A, 0xE4, 0x40", "vfmaddss xmm12, xmm15, xmm4, xmm4");
}



#[test]
fn enc_sse5_vfmaddss5313() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm15, xmm2, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xE9, 0x6A, 0xFB, 0x00", "vfmaddss xmm15, xmm2, xmm0, xmm11");
}



#[test]
fn enc_sse5_vfmaddss5314() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6A, 0x00, 0xB0", "vfmaddss xmm0, xmm0, xmm11, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5315() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, xmm11, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6A, 0x00, 0xB0", "vfmaddss xmm0, xmm0, xmm11, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmaddss5316() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm4, xmm0, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x20, 0x40", "vfmaddss xmm4, xmm0, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmaddss5317() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm0, xmm0, DWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x00, 0x30", "vfmaddss xmm0, xmm0, DWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vfmaddss5318() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmaddss xmm4, xmm0, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x6A, 0x20, 0x40", "vfmaddss xmm4, xmm0, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmsubsd5319() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm3, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xE1, 0x6F, 0xFC, 0x00", "vfmsubsd xmm15, xmm3, xmm0, xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5320() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm2, xmm12, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x99, 0x6F, 0xD0, 0xC0", "vfmsubsd xmm2, xmm12, xmm12, xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5321() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm0, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xF9, 0x6F, 0xFF, 0xB0", "vfmsubsd xmm15, xmm0, xmm11, xmm15");
}



#[test]
fn enc_sse5_vfmsubsd5322() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm3, xmm4, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xD9, 0x6F, 0xDB, 0x20", "vfmsubsd xmm3, xmm4, xmm2, xmm11");
}



#[test]
fn enc_sse5_vfmsubsd5323() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm4, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xD9, 0x6F, 0xF8, 0x30", "vfmsubsd xmm15, xmm4, xmm3, xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5324() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm2, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x6F, 0x08, 0x00", "vfmsubsd xmm1, xmm2, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5325() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm12, xmm3, xmm11, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x6F, 0x20, 0xB0", "vfmsubsd xmm12, xmm3, xmm11, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubsd5326() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm11, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6F, 0x08, 0xC0", "vfmsubsd xmm1, xmm11, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5327() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm3, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x6F, 0x38, 0xB0", "vfmsubsd xmm15, xmm3, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfmsubsd5328() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm0, xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x6F, 0x08, 0xF0", "vfmsubsd xmm1, xmm0, xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubsd5329() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm2, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x6F, 0x08, 0x00", "vfmsubsd xmm1, xmm2, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5330() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm4, xmm1, QWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x6F, 0x20, 0xC0", "vfmsubsd xmm4, xmm1, QWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vfmsubsd5331() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm3, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x6F, 0x38, 0xB0", "vfmsubsd xmm15, xmm3, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfmsubsd5332() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm1, xmm2, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x6F, 0x08, 0x00", "vfmsubsd xmm1, xmm2, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfmsubsd5333() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubsd xmm15, xmm3, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x6F, 0x38, 0xB0", "vfmsubsd xmm15, xmm3, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfmsubss5334() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm0, xmm2, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x6E, 0x00, 0xF0", "vfmsubss xmm0, xmm2, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5335() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm1, xmm11, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6E, 0x08, 0xF0", "vfmsubss xmm1, xmm11, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5336() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm0, xmm1, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x71, 0x6E, 0x00, 0x40", "vfmsubss xmm0, xmm1, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfmsubss5337() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm1, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x6E, 0x10, 0x30", "vfmsubss xmm2, xmm1, xmm3, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5338() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm1, xmm11, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x6E, 0x08, 0xF0", "vfmsubss xmm1, xmm11, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5339() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm4, xmm2, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x6E, 0xE3, 0x00", "vfmsubss xmm4, xmm2, xmm0, xmm3");
}



#[test]
fn enc_sse5_vfmsubss5340() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm3, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x6E, 0xD0, 0x00", "vfmsubss xmm2, xmm3, xmm0, xmm0");
}



#[test]
fn enc_sse5_vfmsubss5341() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm3, xmm1, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF1, 0x6E, 0xD9, 0x30", "vfmsubss xmm3, xmm1, xmm3, xmm1");
}



#[test]
fn enc_sse5_vfmsubss5342() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm3, xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x99, 0x6E, 0xDF, 0x40", "vfmsubss xmm3, xmm12, xmm4, xmm15");
}



#[test]
fn enc_sse5_vfmsubss5343() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm12, xmm11, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xA1, 0x6E, 0xE4, 0xC0", "vfmsubss xmm12, xmm11, xmm12, xmm12");
}



#[test]
fn enc_sse5_vfmsubss5344() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm11, xmm0, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x6E, 0x18, 0xF0", "vfmsubss xmm11, xmm0, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5345() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm11, xmm0, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x6E, 0x18, 0xF0", "vfmsubss xmm11, xmm0, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5346() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm11, xmm0, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x79, 0x6E, 0x18, 0xF0", "vfmsubss xmm11, xmm0, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfmsubss5347() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm0, xmm4, xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x6E, 0x00, 0x30", "vfmsubss xmm0, xmm4, xmm3, DWORD [rax]");
}



#[test]
fn enc_sse5_vfmsubss5348() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfmsubss xmm2, xmm2, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x69, 0x6E, 0x10, 0xF0", "vfmsubss xmm2, xmm2, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5349() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm12, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x7B, 0x00, 0x40", "vfnmaddsd xmm0, xmm12, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5350() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm11, xmm1, xmm3, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7B, 0x18, 0x30", "vfnmaddsd xmm11, xmm1, xmm3, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddsd5351() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5352() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5353() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5354() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm11, xmm3, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xE1, 0x7B, 0xD8, 0x40", "vfnmaddsd xmm11, xmm3, xmm4, xmm0");
}



#[test]
fn enc_sse5_vfnmaddsd5355() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm11, xmm15, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x7B, 0xD9, 0xB0", "vfnmaddsd xmm11, xmm15, xmm11, xmm1");
}



#[test]
fn enc_sse5_vfnmaddsd5356() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm11, xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0x81, 0x7B, 0xDB, 0xB0", "vfnmaddsd xmm11, xmm15, xmm11, xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5357() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm15, xmm12, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x99, 0x7B, 0xFB, 0x20", "vfnmaddsd xmm15, xmm12, xmm2, xmm3");
}



#[test]
fn enc_sse5_vfnmaddsd5358() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm3, xmm3, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x7B, 0xC4, 0x30", "vfnmaddsd xmm0, xmm3, xmm3, xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5359() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm11, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x00, 0xB0", "vfnmaddsd xmm0, xmm11, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddsd5360() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x20, 0xF0", "vfnmaddsd xmm4, xmm11, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmaddsd5361() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm12, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x7B, 0x00, 0x40", "vfnmaddsd xmm0, xmm12, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5362() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm12, QWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x7B, 0x00, 0x40", "vfnmaddsd xmm0, xmm12, QWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddsd5363() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddsd xmm0, xmm11, QWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7B, 0x00, 0xB0", "vfnmaddsd xmm0, xmm11, QWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmaddss5364() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm12, xmm2, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x7A, 0x20, 0x40", "vfnmaddss xmm12, xmm2, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddss5365() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm12, xmm2, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x7A, 0x20, 0x40", "vfnmaddss xmm12, xmm2, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddss5366() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm12, xmm1, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7A, 0x20, 0x10", "vfnmaddss xmm12, xmm1, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5367() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm1, xmm0, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7A, 0x08, 0xF0", "vfnmaddss xmm1, xmm0, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5368() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm12, xmm2, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x69, 0x7A, 0x20, 0x40", "vfnmaddss xmm12, xmm2, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmaddss5369() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm11, xmm2, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xE9, 0x7A, 0xDC, 0x40", "vfnmaddss xmm11, xmm2, xmm4, xmm12");
}



#[test]
fn enc_sse5_vfnmaddss5370() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm4, xmm15, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x81, 0x7A, 0xE4, 0xF0", "vfnmaddss xmm4, xmm15, xmm15, xmm12");
}



#[test]
fn enc_sse5_vfnmaddss5371() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm11, xmm1, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7A, 0xDB, 0x40", "vfnmaddss xmm11, xmm1, xmm4, xmm3");
}



#[test]
fn enc_sse5_vfnmaddss5372() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm2, xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0x99, 0x7A, 0xD7, 0x40", "vfnmaddss xmm2, xmm12, xmm4, xmm15");
}



#[test]
fn enc_sse5_vfnmaddss5373() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm1, xmm4, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7A, 0xC9, 0xB0", "vfnmaddss xmm1, xmm4, xmm11, xmm1");
}



#[test]
fn enc_sse5_vfnmaddss5374() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm2, xmm4, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7A, 0x10, 0x10", "vfnmaddss xmm2, xmm4, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5375() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm1, xmm0, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7A, 0x08, 0xF0", "vfnmaddss xmm1, xmm0, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5376() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm15, xmm15, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x7A, 0x38, 0xF0", "vfnmaddss xmm15, xmm15, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmaddss5377() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm4, xmm0, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x79, 0x7A, 0x20, 0x10", "vfnmaddss xmm4, xmm0, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmaddss5378() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmaddss xmm0, xmm12, DWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x19, 0x7A, 0x00, 0xB0", "vfnmaddss xmm0, xmm12, DWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vfnmsubsd5379() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x08, 0x00", "vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5380() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0x10", "vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5381() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm12, xmm1, QWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x71, 0x7F, 0x20, 0xF0", "vfnmsubsd xmm12, xmm1, QWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfnmsubsd5382() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0xC0", "vfnmsubsd xmm4, xmm4, xmm12, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5383() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0x10", "vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5384() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm3, xmm12, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x99, 0x7F, 0xD9, 0xB0", "vfnmsubsd xmm3, xmm12, xmm11, xmm1");
}



#[test]
fn enc_sse5_vfnmsubsd5385() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm11, xmm0, xmm0, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x7F, 0xDC, 0x00", "vfnmsubsd xmm11, xmm0, xmm0, xmm4");
}



#[test]
fn enc_sse5_vfnmsubsd5386() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm12, xmm0, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF9, 0x7F, 0xE4, 0xB0", "vfnmsubsd xmm12, xmm0, xmm11, xmm4");
}



#[test]
fn enc_sse5_vfnmsubsd5387() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm0, xmm0, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xF9, 0x7F, 0xC4, 0xC0", "vfnmsubsd xmm0, xmm0, xmm12, xmm12");
}



#[test]
fn enc_sse5_vfnmsubsd5388() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm1, xmm3, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE1, 0x7F, 0xC9, 0xB0", "vfnmsubsd xmm1, xmm3, xmm11, xmm1");
}



#[test]
fn enc_sse5_vfnmsubsd5389() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm12, xmm3, QWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x61, 0x7F, 0x20, 0x00", "vfnmsubsd xmm12, xmm3, QWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vfnmsubsd5390() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm0, xmm0, xmm4, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xF9, 0x7F, 0x00, 0x40", "vfnmsubsd xmm0, xmm0, xmm4, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5391() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x20, 0x10", "vfnmsubsd xmm4, xmm4, xmm1, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5392() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x08, 0x00", "vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubsd5393() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7F, 0x08, 0x00", "vfnmsubsd xmm1, xmm4, xmm0, QWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5394() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm12, xmm15, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x7E, 0xE1, 0x00", "vfnmsubss xmm12, xmm15, xmm0, xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5395() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm11, xmm3, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xE1, 0x7E, 0xDB, 0x10", "vfnmsubss xmm11, xmm3, xmm1, xmm11");
}



#[test]
fn enc_sse5_vfnmsubss5396() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm3, xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xA1, 0x7E, 0xDF, 0x00", "vfnmsubss xmm3, xmm11, xmm0, xmm15");
}



#[test]
fn enc_sse5_vfnmsubss5397() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm12, xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x43, 0xA1, 0x7E, 0xE7, 0x00", "vfnmsubss xmm12, xmm11, xmm0, xmm15");
}



#[test]
fn enc_sse5_vfnmsubss5398() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm3, xmm0, xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xC3, 0xF9, 0x7E, 0xDC, 0x10", "vfnmsubss xmm3, xmm0, xmm1, xmm12");
}



#[test]
fn enc_sse5_vfnmsubss5399() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm3, xmm4, xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xD9, 0x7E, 0x18, 0xF0", "vfnmsubss xmm3, xmm4, xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5400() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm12, xmm11, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x7E, 0x20, 0x10", "vfnmsubss xmm12, xmm11, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5401() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm0, xmm11, DWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x21, 0x7E, 0x00, 0x10", "vfnmsubss xmm0, xmm11, DWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vfnmsubss5402() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm12, xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x99, 0x7E, 0x38, 0x10", "vfnmsubss xmm15, xmm12, xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5403() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm12, xmm15, xmm0, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x81, 0x7E, 0x20, 0x00", "vfnmsubss xmm12, xmm15, xmm0, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5404() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm1, xmm15, DWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0x01, 0x7E, 0x08, 0x40", "vfnmsubss xmm1, xmm15, DWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vfnmsubss5405() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7E, 0x38, 0x40", "vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5406() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0xF1, 0x7E, 0x38, 0x40", "vfnmsubss xmm15, xmm1, xmm4, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5407() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm2, xmm2, xmm2, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0xE3, 0xE9, 0x7E, 0x10, 0x20", "vfnmsubss xmm2, xmm2, xmm2, DWORD [rax]");
}



#[test]
fn enc_sse5_vfnmsubss5408() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfnmsubss xmm15, xmm11, DWORD [rax], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xC4, 0x63, 0x21, 0x7E, 0x38, 0xF0", "vfnmsubss xmm15, xmm11, DWORD [rax], xmm15");
}



#[test]
fn enc_sse5_vfrczsd5409() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x83, 0xC4", "vfrczsd xmm0, xmm12");
}



#[test]
fn enc_sse5_vfrczsd5410() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x83, 0xFA", "vfrczsd xmm15, xmm2");
}



#[test]
fn enc_sse5_vfrczsd5411() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0xE3", "vfrczsd xmm4, xmm3");
}



#[test]
fn enc_sse5_vfrczsd5412() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0x83, 0xDB", "vfrczsd xmm11, xmm11");
}



#[test]
fn enc_sse5_vfrczsd5413() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0x83, 0xE3", "vfrczsd xmm12, xmm11");
}



#[test]
fn enc_sse5_vfrczsd5414() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm2, QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x50, 0x10", "vfrczsd xmm2, QWORD [rax + 16]");
}



#[test]
fn enc_sse5_vfrczsd5415() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm15, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x83, 0x38", "vfrczsd xmm15, QWORD [rax]");
}



#[test]
fn enc_sse5_vfrczsd5416() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm3, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x1C, 0x42", "vfrczsd xmm3, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vfrczsd5417() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm12, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x83, 0x20", "vfrczsd xmm12, QWORD [rax]");
}



#[test]
fn enc_sse5_vfrczsd5418() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczsd xmm0, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x83, 0x04, 0x42", "vfrczsd xmm0, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vfrczss5419() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0xE3", "vfrczss xmm12, xmm3");
}



#[test]
fn enc_sse5_vfrczss5420() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0xC0", "vfrczss xmm0, xmm0");
}



#[test]
fn enc_sse5_vfrczss5421() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0xF9", "vfrczss xmm15, xmm1");
}



#[test]
fn enc_sse5_vfrczss5422() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0xCA", "vfrczss xmm1, xmm2");
}



#[test]
fn enc_sse5_vfrczss5423() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0x82, 0xDC", "vfrczss xmm11, xmm12");
}



#[test]
fn enc_sse5_vfrczss5424() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm1, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x08", "vfrczss xmm1, DWORD [rax]");
}



#[test]
fn enc_sse5_vfrczss5425() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm15, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x82, 0x38", "vfrczss xmm15, DWORD [rax]");
}



#[test]
fn enc_sse5_vfrczss5426() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm3, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x58, 0x10", "vfrczss xmm3, DWORD [rax + 16]");
}



#[test]
fn enc_sse5_vfrczss5427() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm3, DWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x18", "vfrczss xmm3, DWORD [rax]");
}



#[test]
fn enc_sse5_vfrczss5428() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vfrczss xmm0, DWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x82, 0x40, 0x10", "vfrczss xmm0, DWORD [rax + 16]");
}



#[test]
fn enc_sse5_vpcomb5429() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm0, xmm3, OWORD [rdx], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0xCC, 0x02, 0x70", "vpcomb xmm0, xmm3, OWORD [rdx], 112");
}



#[test]
fn enc_sse5_vpcomb5430() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm0, xmm2, OWORD [rax], 18
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xCC, 0x00, 0x12", "vpcomb xmm0, xmm2, OWORD [rax], 18");
}



#[test]
fn enc_sse5_vpcomb5431() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm11, xmm4, xmm2, 100
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0xCC, 0xDA, 0x64", "vpcomb xmm11, xmm4, xmm2, 100");
}



#[test]
fn enc_sse5_vpcomb5432() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm12, xmm4, OWORD [rax * 2 + rdx], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0xCC, 0x24, 0x42, 0x1B", "vpcomb xmm12, xmm4, OWORD [rax * 2 + rdx], 27");
}



#[test]
fn enc_sse5_vpcomb5433() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomb xmm0, xmm0, OWORD [rax * 2 + rdx], 39
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xCC, 0x04, 0x42, 0x27", "vpcomb xmm0, xmm0, OWORD [rax * 2 + rdx], 39");
}



#[test]
fn enc_sse5_vpcomd5434() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm4, xmm2, xmm12, 77
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0xCE, 0xE4, 0x4D", "vpcomd xmm4, xmm2, xmm12, 77");
}



#[test]
fn enc_sse5_vpcomd5435() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm2, xmm4, xmm11, 97
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0xCE, 0xD3, 0x61", "vpcomd xmm2, xmm4, xmm11, 97");
}



#[test]
fn enc_sse5_vpcomd5436() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm3, xmm2, xmm15, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x68, 0xCE, 0xDF, 0x72", "vpcomd xmm3, xmm2, xmm15, 114");
}



#[test]
fn enc_sse5_vpcomd5437() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm12, xmm11, xmm11, 62
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x20, 0xCE, 0xE3, 0x3E", "vpcomd xmm12, xmm11, xmm11, 62");
}



#[test]
fn enc_sse5_vpcomd5438() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomd xmm11, xmm12, xmm3, 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xCE, 0xDB, 0x44", "vpcomd xmm11, xmm12, xmm3, 68");
}



#[test]
fn enc_sse5_vpcomq5439() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm15, xmm2, xmm11, 58
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x68, 0xCF, 0xFB, 0x3A", "vpcomq xmm15, xmm2, xmm11, 58");
}



#[test]
fn enc_sse5_vpcomq5440() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm11, xmm2, OWORD [rax * 2 + rdx], 84
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0xCF, 0x1C, 0x42, 0x54", "vpcomq xmm11, xmm2, OWORD [rax * 2 + rdx], 84");
}



#[test]
fn enc_sse5_vpcomq5441() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm12, xmm15, xmm11, 96
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x00, 0xCF, 0xE3, 0x60", "vpcomq xmm12, xmm15, xmm11, 96");
}



#[test]
fn enc_sse5_vpcomq5442() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm3, xmm3, OWORD [rdx], 10
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0xCF, 0x1A, 0x0A", "vpcomq xmm3, xmm3, OWORD [rdx], 10");
}



#[test]
fn enc_sse5_vpcomq5443() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomq xmm12, xmm15, xmm3, 94
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x00, 0xCF, 0xE3, 0x5E", "vpcomq xmm12, xmm15, xmm3, 94");
}



#[test]
fn enc_sse5_vpcomub5444() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm15, xmm12, xmm1, 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xEC, 0xF9, 0x1B", "vpcomub xmm15, xmm12, xmm1, 27");
}



#[test]
fn enc_sse5_vpcomub5445() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm4, xmm1, xmm1, 108
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xEC, 0xE1, 0x6C", "vpcomub xmm4, xmm1, xmm1, 108");
}



#[test]
fn enc_sse5_vpcomub5446() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm0, xmm0, xmm15, 47
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xEC, 0xC7, 0x2F", "vpcomub xmm0, xmm0, xmm15, 47");
}



#[test]
fn enc_sse5_vpcomub5447() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm0, xmm4, OWORD [rax * 2 + rdx], 5
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xEC, 0x04, 0x42, 0x05", "vpcomub xmm0, xmm4, OWORD [rax * 2 + rdx], 5");
}



#[test]
fn enc_sse5_vpcomub5448() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomub xmm3, xmm2, OWORD [rax], 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xEC, 0x18, 0x48", "vpcomub xmm3, xmm2, OWORD [rax], 72");
}



#[test]
fn enc_sse5_vpcomud5449() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm1, xmm3, xmm12, 99
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x60, 0xEE, 0xCC, 0x63", "vpcomud xmm1, xmm3, xmm12, 99");
}



#[test]
fn enc_sse5_vpcomud5450() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm15, xmm12, OWORD [rax * 2 + rdx], 112
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xEE, 0x3C, 0x42, 0x70", "vpcomud xmm15, xmm12, OWORD [rax * 2 + rdx], 112");
}



#[test]
fn enc_sse5_vpcomud5451() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm3, xmm2, xmm4, 72
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xEE, 0xDC, 0x48", "vpcomud xmm3, xmm2, xmm4, 72");
}



#[test]
fn enc_sse5_vpcomud5452() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm11, xmm12, xmm1, 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xEE, 0xD9, 0x56", "vpcomud xmm11, xmm12, xmm1, 86");
}



#[test]
fn enc_sse5_vpcomud5453() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomud xmm4, xmm4, xmm1, 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xEE, 0xE1, 0x4C", "vpcomud xmm4, xmm4, xmm1, 76");
}



#[test]
fn enc_sse5_vpcomuq5454() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm11, xmm3, xmm2, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0xEF, 0xDA, 0x72", "vpcomuq xmm11, xmm3, xmm2, 114");
}



#[test]
fn enc_sse5_vpcomuq5455() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm11, xmm1, xmm2, 75
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0xEF, 0xDA, 0x4B", "vpcomuq xmm11, xmm1, xmm2, 75");
}



#[test]
fn enc_sse5_vpcomuq5456() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm12, xmm0, xmm11, 25
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xEF, 0xE3, 0x19", "vpcomuq xmm12, xmm0, xmm11, 25");
}



#[test]
fn enc_sse5_vpcomuq5457() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm4, xmm11, xmm15, 20
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x20, 0xEF, 0xE7, 0x14", "vpcomuq xmm4, xmm11, xmm15, 20");
}



#[test]
fn enc_sse5_vpcomuq5458() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuq xmm12, xmm2, OWORD [rax], 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0xEF, 0x20, 0x72", "vpcomuq xmm12, xmm2, OWORD [rax], 114");
}



#[test]
fn enc_sse5_vpcomuw5459() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm15, xmm15, xmm3, 103
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x00, 0xED, 0xFB, 0x67", "vpcomuw xmm15, xmm15, xmm3, 103");
}



#[test]
fn enc_sse5_vpcomuw5460() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm3, xmm4, xmm11, 64
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0xED, 0xDB, 0x40", "vpcomuw xmm3, xmm4, xmm11, 64");
}



#[test]
fn enc_sse5_vpcomuw5461() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm11, xmm2, xmm1, 98
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0xED, 0xD9, 0x62", "vpcomuw xmm11, xmm2, xmm1, 98");
}



#[test]
fn enc_sse5_vpcomuw5462() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm4, xmm3, xmm15, 113
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x60, 0xED, 0xE7, 0x71", "vpcomuw xmm4, xmm3, xmm15, 113");
}



#[test]
fn enc_sse5_vpcomuw5463() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomuw xmm1, xmm2, OWORD [rax], 6
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xED, 0x08, 0x06", "vpcomuw xmm1, xmm2, OWORD [rax], 6");
}



#[test]
fn enc_sse5_vpcomw5464() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm15, xmm0, xmm11, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xCD, 0xFB, 0x69", "vpcomw xmm15, xmm0, xmm11, 105");
}



#[test]
fn enc_sse5_vpcomw5465() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm12, xmm3, xmm15, 48
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x60, 0xCD, 0xE7, 0x30", "vpcomw xmm12, xmm3, xmm15, 48");
}



#[test]
fn enc_sse5_vpcomw5466() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm1, xmm12, xmm12, 93
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x18, 0xCD, 0xCC, 0x5D", "vpcomw xmm1, xmm12, xmm12, 93");
}



#[test]
fn enc_sse5_vpcomw5467() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm2, xmm2, xmm0, 102
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xCD, 0xD0, 0x66", "vpcomw xmm2, xmm2, xmm0, 102");
}



#[test]
fn enc_sse5_vpcomw5468() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpcomw xmm0, xmm2, OWORD [rax * 2 + rdx], 33
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xCD, 0x04, 0x42, 0x21", "vpcomw xmm0, xmm2, OWORD [rax * 2 + rdx], 33");
}



#[test]
fn enc_sse5_vphaddbd5469() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC2, 0xCC", "vphaddbd xmm1, xmm12");
}



#[test]
fn enc_sse5_vphaddbd5470() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC2, 0xFA", "vphaddbd xmm15, xmm2");
}



#[test]
fn enc_sse5_vphaddbd5471() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC2, 0xFC", "vphaddbd xmm15, xmm4");
}



#[test]
fn enc_sse5_vphaddbd5472() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC2, 0xC4", "vphaddbd xmm0, xmm12");
}



#[test]
fn enc_sse5_vphaddbd5473() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbd xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC2, 0xD3", "vphaddbd xmm2, xmm11");
}



#[test]
fn enc_sse5_vphaddbq5474() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC3, 0xE2", "vphaddbq xmm4, xmm2");
}



#[test]
fn enc_sse5_vphaddbq5475() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC3, 0xD1", "vphaddbq xmm2, xmm1");
}



#[test]
fn enc_sse5_vphaddbq5476() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC3, 0x1C, 0x42", "vphaddbq xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddbq5477() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC3, 0xE1", "vphaddbq xmm12, xmm1");
}



#[test]
fn enc_sse5_vphaddbq5478() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbq xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC3, 0x10", "vphaddbq xmm2, OWORD [rax]");
}



#[test]
fn enc_sse5_vphaddbw5479() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC1, 0x1A", "vphaddbw xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddbw5480() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC1, 0xE4", "vphaddbw xmm12, xmm4");
}



#[test]
fn enc_sse5_vphaddbw5481() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC1, 0xCF", "vphaddbw xmm1, xmm15");
}



#[test]
fn enc_sse5_vphaddbw5482() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddbw xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC1, 0xE4", "vphaddbw xmm4, xmm12");
}



#[test]
fn enc_sse5_vphadddq5483() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xCB, 0xE4", "vphadddq xmm12, xmm12");
}



#[test]
fn enc_sse5_vphadddq5484() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xCB, 0xC0", "vphadddq xmm0, xmm0");
}



#[test]
fn enc_sse5_vphadddq5485() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xCB, 0x14, 0x42", "vphadddq xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphadddq5486() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadddq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xCB, 0xFC", "vphadddq xmm15, xmm12");
}



#[test]
fn enc_sse5_vphaddubd5487() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xD2, 0xDF", "vphaddubd xmm11, xmm15");
}



#[test]
fn enc_sse5_vphaddubd5488() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0x1A", "vphaddubd xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddubd5489() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0xD2", "vphaddubd xmm2, xmm2");
}



#[test]
fn enc_sse5_vphaddubd5490() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0x02", "vphaddubd xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddubd5491() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubd xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD2, 0xE1", "vphaddubd xmm4, xmm1");
}



#[test]
fn enc_sse5_vphaddubq5492() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD3, 0xD2", "vphaddubq xmm2, xmm2");
}



#[test]
fn enc_sse5_vphaddubq5493() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD3, 0x22", "vphaddubq xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddubq5494() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD3, 0xD8", "vphaddubq xmm11, xmm0");
}



#[test]
fn enc_sse5_vphaddubq5495() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm11, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD3, 0x1C, 0x42", "vphaddubq xmm11, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddubq5496() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubq xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD3, 0xD8", "vphaddubq xmm3, xmm0");
}



#[test]
fn enc_sse5_vphaddubw5497() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0x1A", "vphaddubw xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddubw5498() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm2, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0x10", "vphaddubw xmm2, OWORD [rax]");
}



#[test]
fn enc_sse5_vphaddubw5499() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm0, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0x00", "vphaddubw xmm0, OWORD [rax]");
}



#[test]
fn enc_sse5_vphaddubw5500() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD1, 0xC2", "vphaddubw xmm0, xmm2");
}



#[test]
fn enc_sse5_vphaddubw5501() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddubw xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD1, 0xF9", "vphaddubw xmm15, xmm1");
}



#[test]
fn enc_sse5_vphaddudq5502() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xDB, 0xFB", "vphaddudq xmm15, xmm3");
}



#[test]
fn enc_sse5_vphaddudq5503() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xDB, 0xC4", "vphaddudq xmm0, xmm12");
}



#[test]
fn enc_sse5_vphaddudq5504() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xDB, 0xCA", "vphaddudq xmm1, xmm2");
}



#[test]
fn enc_sse5_vphaddudq5505() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xDB, 0xE3", "vphaddudq xmm12, xmm3");
}



#[test]
fn enc_sse5_vphaddudq5506() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddudq xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xDB, 0xE1", "vphaddudq xmm12, xmm1");
}



#[test]
fn enc_sse5_vphadduwd5507() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xD6, 0xFC", "vphadduwd xmm15, xmm12");
}



#[test]
fn enc_sse5_vphadduwd5508() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD6, 0xE2", "vphadduwd xmm12, xmm2");
}



#[test]
fn enc_sse5_vphadduwd5509() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm15, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD6, 0x3A", "vphadduwd xmm15, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwd5510() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xD6, 0xE4", "vphadduwd xmm12, xmm12");
}



#[test]
fn enc_sse5_vphadduwd5511() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwd xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xD6, 0xD7", "vphadduwd xmm2, xmm15");
}



#[test]
fn enc_sse5_vphadduwq5512() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm2, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD7, 0x12", "vphadduwq xmm2, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwq5513() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xD7, 0xCF", "vphadduwq xmm1, xmm15");
}



#[test]
fn enc_sse5_vphadduwq5514() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xD7, 0xC2", "vphadduwq xmm0, xmm2");
}



#[test]
fn enc_sse5_vphadduwq5515() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD7, 0x22", "vphadduwq xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphadduwq5516() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphadduwq xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xD7, 0xD9", "vphadduwq xmm11, xmm1");
}



#[test]
fn enc_sse5_vphaddwd5517() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC6, 0x14, 0x42", "vphaddwd xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddwd5518() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm1, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC6, 0xCF", "vphaddwd xmm1, xmm15");
}



#[test]
fn enc_sse5_vphaddwd5519() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC6, 0xD9", "vphaddwd xmm11, xmm1");
}



#[test]
fn enc_sse5_vphaddwd5520() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm12, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC6, 0x22", "vphaddwd xmm12, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphaddwd5521() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwd xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xC6, 0xF9", "vphaddwd xmm15, xmm1");
}



#[test]
fn enc_sse5_vphaddwq5522() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xC7, 0xE7", "vphaddwq xmm4, xmm15");
}



#[test]
fn enc_sse5_vphaddwq5523() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xC7, 0xFC", "vphaddwq xmm15, xmm12");
}



#[test]
fn enc_sse5_vphaddwq5524() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0xC7, 0xDC", "vphaddwq xmm11, xmm12");
}



#[test]
fn enc_sse5_vphaddwq5525() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC7, 0x1C, 0x42", "vphaddwq xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphaddwq5526() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphaddwq xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xC7, 0x04, 0x42", "vphaddwq xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphsubbw5527() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xE1, 0xC3", "vphsubbw xmm0, xmm11");
}



#[test]
fn enc_sse5_vphsubbw5528() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0xDA", "vphsubbw xmm3, xmm2");
}



#[test]
fn enc_sse5_vphsubbw5529() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0x22", "vphsubbw xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphsubbw5530() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0x04, 0x42", "vphsubbw xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphsubbw5531() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubbw xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE1, 0x02", "vphsubbw xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vphsubdq5532() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xE3, 0xE4", "vphsubdq xmm4, xmm12");
}



#[test]
fn enc_sse5_vphsubdq5533() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE3, 0xD4", "vphsubdq xmm2, xmm4");
}



#[test]
fn enc_sse5_vphsubdq5534() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE3, 0x1C, 0x42", "vphsubdq xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphsubdq5535() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE3, 0xE0", "vphsubdq xmm12, xmm0");
}



#[test]
fn enc_sse5_vphsubdq5536() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubdq xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE3, 0xFB", "vphsubdq xmm15, xmm3");
}



#[test]
fn enc_sse5_vphsubwd5537() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm3, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE2, 0x1C, 0x42", "vphsubwd xmm3, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vphsubwd5538() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm1, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0xE2, 0xCC", "vphsubwd xmm1, xmm12");
}



#[test]
fn enc_sse5_vphsubwd5539() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE2, 0xE2", "vphsubwd xmm12, xmm2");
}



#[test]
fn enc_sse5_vphsubwd5540() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0xE2, 0xC0", "vphsubwd xmm0, xmm0");
}



#[test]
fn enc_sse5_vphsubwd5541() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vphsubwd xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0xE2, 0xE0", "vphsubwd xmm12, xmm0");
}



#[test]
fn enc_sse5_vpmacsdd5542() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm11, xmm2, xmm1, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0x9E, 0xD9, 0x40", "vpmacsdd xmm11, xmm2, xmm1, xmm4");
}



#[test]
fn enc_sse5_vpmacsdd5543() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm1, xmm15, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0x9E, 0xCF, 0xB0", "vpmacsdd xmm1, xmm15, xmm15, xmm11");
}



#[test]
fn enc_sse5_vpmacsdd5544() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm15, xmm12, OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0x9E, 0x38, 0xC0", "vpmacsdd xmm15, xmm12, OWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vpmacsdd5545() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm11, xmm4, OWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0x9E, 0x1C, 0x42, 0xC0", "vpmacsdd xmm11, xmm4, OWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse5_vpmacsdd5546() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdd xmm0, xmm0, OWORD [rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0x9E, 0x02, 0xB0", "vpmacsdd xmm0, xmm0, OWORD [rdx], xmm11");
}



#[test]
fn enc_sse5_vpmacsdqh5547() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm0, xmm12, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x9F, 0xC4, 0x00", "vpmacsdqh xmm0, xmm12, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpmacsdqh5548() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm4, xmm3, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x60, 0x9F, 0xE3, 0x20", "vpmacsdqh xmm4, xmm3, xmm11, xmm2");
}



#[test]
fn enc_sse5_vpmacsdqh5549() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm15, xmm15, OWORD [rax], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x00, 0x9F, 0x38, 0x20", "vpmacsdqh xmm15, xmm15, OWORD [rax], xmm2");
}



#[test]
fn enc_sse5_vpmacsdqh5550() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm1, xmm0, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0x9F, 0xC9, 0x30", "vpmacsdqh xmm1, xmm0, xmm1, xmm3");
}



#[test]
fn enc_sse5_vpmacsdqh5551() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdqh xmm15, xmm4, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x58, 0x9F, 0xFB, 0x30", "vpmacsdqh xmm15, xmm4, xmm11, xmm3");
}



#[test]
fn enc_sse5_vpmacsdql5552() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm12, xmm0, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0x97, 0xE3, 0x30", "vpmacsdql xmm12, xmm0, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpmacsdql5553() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm3, xmm12, xmm3, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x97, 0xDB, 0x20", "vpmacsdql xmm3, xmm12, xmm3, xmm2");
}



#[test]
fn enc_sse5_vpmacsdql5554() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm12, xmm2, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x68, 0x97, 0xE3, 0xB0", "vpmacsdql xmm12, xmm2, xmm3, xmm11");
}



#[test]
fn enc_sse5_vpmacsdql5555() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm15, xmm2, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x68, 0x97, 0xFF, 0xC0", "vpmacsdql xmm15, xmm2, xmm15, xmm12");
}



#[test]
fn enc_sse5_vpmacsdql5556() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsdql xmm0, xmm15, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0x97, 0xC4, 0x10", "vpmacsdql xmm0, xmm15, xmm12, xmm1");
}



#[test]
fn enc_sse5_vpmacssdd5557() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm15, xmm15, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x00, 0x8E, 0xFC, 0xC0", "vpmacssdd xmm15, xmm15, xmm12, xmm12");
}



#[test]
fn enc_sse5_vpmacssdd5558() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm1, xmm3, OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0x8E, 0x0C, 0x42, 0x30", "vpmacssdd xmm1, xmm3, OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse5_vpmacssdd5559() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm15, xmm11, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x20, 0x8E, 0xFF, 0x30", "vpmacssdd xmm15, xmm11, xmm15, xmm3");
}



#[test]
fn enc_sse5_vpmacssdd5560() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm15, xmm12, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0x8E, 0xFB, 0x00", "vpmacssdd xmm15, xmm12, xmm3, xmm0");
}



#[test]
fn enc_sse5_vpmacssdd5561() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdd xmm12, xmm4, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0x8E, 0xE2, 0xF0", "vpmacssdd xmm12, xmm4, xmm2, xmm15");
}



#[test]
fn enc_sse5_vpmacssdqh5562() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm0, xmm11, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x20, 0x8F, 0xC4, 0x10", "vpmacssdqh xmm0, xmm11, xmm12, xmm1");
}



#[test]
fn enc_sse5_vpmacssdqh5563() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm1, xmm0, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0x8F, 0xC8, 0xB0", "vpmacssdqh xmm1, xmm0, xmm0, xmm11");
}



#[test]
fn enc_sse5_vpmacssdqh5564() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm12, xmm0, OWORD [rax * 2 + rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0x8F, 0x24, 0x42, 0x20", "vpmacssdqh xmm12, xmm0, OWORD [rax * 2 + rdx], xmm2");
}



#[test]
fn enc_sse5_vpmacssdqh5565() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm4, xmm4, xmm12, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0x8F, 0xE4, 0x00", "vpmacssdqh xmm4, xmm4, xmm12, xmm0");
}



#[test]
fn enc_sse5_vpmacssdqh5566() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdqh xmm11, xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x20, 0x8F, 0xDC, 0xC0", "vpmacssdqh xmm11, xmm11, xmm4, xmm12");
}



#[test]
fn enc_sse5_vpmacssdql5567() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm15, xmm1, OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0x87, 0x3C, 0x42, 0xF0", "vpmacssdql xmm15, xmm1, OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse5_vpmacssdql5568() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm12, xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x00, 0x87, 0xE0, 0xC0", "vpmacssdql xmm12, xmm15, xmm0, xmm12");
}



#[test]
fn enc_sse5_vpmacssdql5569() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm15, xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0x87, 0xF8, 0x20", "vpmacssdql xmm15, xmm4, xmm0, xmm2");
}



#[test]
fn enc_sse5_vpmacssdql5570() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm0, xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0x87, 0xC4, 0xB0", "vpmacssdql xmm0, xmm0, xmm12, xmm11");
}



#[test]
fn enc_sse5_vpmacssdql5571() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssdql xmm0, xmm0, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0x87, 0xC4, 0x10", "vpmacssdql xmm0, xmm0, xmm12, xmm1");
}



#[test]
fn enc_sse5_vpmacsswd5572() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm12, xmm0, OWORD [rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0x86, 0x22, 0x30", "vpmacsswd xmm12, xmm0, OWORD [rdx], xmm3");
}



#[test]
fn enc_sse5_vpmacsswd5573() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm2, xmm4, OWORD [rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0x86, 0x12, 0x20", "vpmacsswd xmm2, xmm4, OWORD [rdx], xmm2");
}



#[test]
fn enc_sse5_vpmacsswd5574() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm4, xmm1, OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0x86, 0x20, 0x30", "vpmacsswd xmm4, xmm1, OWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vpmacsswd5575() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm3, xmm4, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0x86, 0xD9, 0x20", "vpmacsswd xmm3, xmm4, xmm1, xmm2");
}



#[test]
fn enc_sse5_vpmacsswd5576() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsswd xmm15, xmm1, OWORD [rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0x86, 0x3A, 0x10", "vpmacsswd xmm15, xmm1, OWORD [rdx], xmm1");
}



#[test]
fn enc_sse5_vpmacssww5577() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm11, xmm2, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x68, 0x85, 0xDB, 0x40", "vpmacssww xmm11, xmm2, xmm11, xmm4");
}



#[test]
fn enc_sse5_vpmacssww5578() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm4, xmm12, OWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x85, 0x24, 0x42, 0xC0", "vpmacssww xmm4, xmm12, OWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse5_vpmacssww5579() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm4, xmm15, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0x85, 0xE4, 0x20", "vpmacssww xmm4, xmm15, xmm12, xmm2");
}



#[test]
fn enc_sse5_vpmacssww5580() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm15, xmm1, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x70, 0x85, 0xFF, 0x00", "vpmacssww xmm15, xmm1, xmm15, xmm0");
}



#[test]
fn enc_sse5_vpmacssww5581() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacssww xmm3, xmm2, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0x85, 0xDB, 0xF0", "vpmacssww xmm3, xmm2, xmm3, xmm15");
}



#[test]
fn enc_sse5_vpmacswd5582() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm2, xmm1, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x70, 0x96, 0xD4, 0xB0", "vpmacswd xmm2, xmm1, xmm12, xmm11");
}



#[test]
fn enc_sse5_vpmacswd5583() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm12, xmm4, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x58, 0x96, 0xE1, 0x30", "vpmacswd xmm12, xmm4, xmm1, xmm3");
}



#[test]
fn enc_sse5_vpmacswd5584() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm1, xmm11, OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x96, 0x08, 0x00", "vpmacswd xmm1, xmm11, OWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vpmacswd5585() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm3, xmm12, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x18, 0x96, 0xDB, 0x30", "vpmacswd xmm3, xmm12, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpmacswd5586() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacswd xmm11, xmm3, OWORD [rax * 2 + rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x60, 0x96, 0x1C, 0x42, 0x30", "vpmacswd xmm11, xmm3, OWORD [rax * 2 + rdx], xmm3");
}



#[test]
fn enc_sse5_vpmacsww5587() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm1, xmm11, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x95, 0xCC, 0x10", "vpmacsww xmm1, xmm11, xmm4, xmm1");
}



#[test]
fn enc_sse5_vpmacsww5588() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm0, xmm11, OWORD [rax], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x95, 0x00, 0x00", "vpmacsww xmm0, xmm11, OWORD [rax], xmm0");
}



#[test]
fn enc_sse5_vpmacsww5589() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm4, xmm11, xmm11, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x20, 0x95, 0xE3, 0x00", "vpmacsww xmm4, xmm11, xmm11, xmm0");
}



#[test]
fn enc_sse5_vpmacsww5590() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm0, xmm11, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0x95, 0xC0, 0xF0", "vpmacsww xmm0, xmm11, xmm0, xmm15");
}



#[test]
fn enc_sse5_vpmacsww5591() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmacsww xmm3, xmm3, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x60, 0x95, 0xDA, 0x40", "vpmacsww xmm3, xmm3, xmm2, xmm4");
}



#[test]
fn enc_sse5_vpmadcsswd5592() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm1, xmm4, xmm15, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x58, 0xA6, 0xCF, 0x30", "vpmadcsswd xmm1, xmm4, xmm15, xmm3");
}



#[test]
fn enc_sse5_vpmadcsswd5593() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm15, xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x68, 0xA6, 0xFC, 0x30", "vpmadcsswd xmm15, xmm2, xmm12, xmm3");
}



#[test]
fn enc_sse5_vpmadcsswd5594() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm4, xmm2, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xA6, 0xE0, 0x20", "vpmadcsswd xmm4, xmm2, xmm0, xmm2");
}



#[test]
fn enc_sse5_vpmadcsswd5595() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm1, xmm1, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x70, 0xA6, 0xCC, 0xC0", "vpmadcsswd xmm1, xmm1, xmm4, xmm12");
}



#[test]
fn enc_sse5_vpmadcsswd5596() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcsswd xmm12, xmm0, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xA6, 0xE3, 0xC0", "vpmadcsswd xmm12, xmm0, xmm3, xmm12");
}



#[test]
fn enc_sse5_vpmadcswd5597() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm12, xmm0, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xB6, 0xE7, 0x40", "vpmadcswd xmm12, xmm0, xmm15, xmm4");
}



#[test]
fn enc_sse5_vpmadcswd5598() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm15, xmm12, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xB6, 0xFB, 0xB0", "vpmadcswd xmm15, xmm12, xmm3, xmm11");
}



#[test]
fn enc_sse5_vpmadcswd5599() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm15, xmm0, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xB6, 0xFB, 0x30", "vpmadcswd xmm15, xmm0, xmm11, xmm3");
}



#[test]
fn enc_sse5_vpmadcswd5600() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm3, xmm4, OWORD [rax * 2 + rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xB6, 0x1C, 0x42, 0x00", "vpmadcswd xmm3, xmm4, OWORD [rax * 2 + rdx], xmm0");
}



#[test]
fn enc_sse5_vpmadcswd5601() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpmadcswd xmm11, xmm0, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xB6, 0xDF, 0x10", "vpmadcswd xmm11, xmm0, xmm15, xmm1");
}



#[test]
fn enc_sse5_vpperm5602() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm11, xmm1, OWORD [rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0xA3, 0x1A, 0x10", "vpperm xmm11, xmm1, OWORD [rdx], xmm1");
}



#[test]
fn enc_sse5_vpperm5603() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm11, xmm12, xmm2, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xA3, 0xDA, 0xF0", "vpperm xmm11, xmm12, xmm2, xmm15");
}



#[test]
fn enc_sse5_vpperm5604() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm11, xmm12, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x18, 0xA3, 0xDA, 0x20", "vpperm xmm11, xmm12, xmm2, xmm2");
}



#[test]
fn enc_sse5_vpperm5605() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm11, xmm1, OWORD [rdx], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x70, 0xA3, 0x1A, 0x10", "vpperm xmm11, xmm1, OWORD [rdx], xmm1");
}



#[test]
fn enc_sse5_vpperm5606() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm1, xmm0, xmm3, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xA3, 0xCB, 0xC0", "vpperm xmm1, xmm0, xmm3, xmm12");
}



#[test]
fn enc_sse5_vpperm5607() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm3, xmm2, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x68, 0xA3, 0xD9, 0x20", "vpperm xmm3, xmm2, xmm1, xmm2");
}



#[test]
fn enc_sse5_vpperm5608() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm4, xmm15, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x00, 0xA3, 0xE3, 0x10", "vpperm xmm4, xmm15, xmm11, xmm1");
}



#[test]
fn enc_sse5_vpperm5609() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm2, xmm4, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x58, 0xA3, 0xD0, 0x20", "vpperm xmm2, xmm4, xmm0, xmm2");
}



#[test]
fn enc_sse5_vpperm5610() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm2, xmm11, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x20, 0xA3, 0xD1, 0x00", "vpperm xmm2, xmm11, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpperm5611() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpperm xmm4, xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x70, 0xA3, 0xE7, 0x10", "vpperm xmm4, xmm1, xmm15, xmm1");
}



#[test]
fn enc_sse5_vprotb5612() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm2, xmm1, 9
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC0, 0xD1, 0x09", "vprotb xmm2, xmm1, 9");
}



#[test]
fn enc_sse5_vprotb5613() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm11, 26
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC8, 0x78, 0xC0, 0xCB, 0x1A", "vprotb xmm1, xmm11, 26");
}



#[test]
fn enc_sse5_vprotb5614() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm4, 117
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC0, 0xCC, 0x75", "vprotb xmm1, xmm4, 117");
}



#[test]
fn enc_sse5_vprotb5615() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm3, OWORD [rax * 2 + rdx], 76
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC0, 0x1C, 0x42, 0x4C", "vprotb xmm3, OWORD [rax * 2 + rdx], 76");
}



#[test]
fn enc_sse5_vprotb5616() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, OWORD [rax], 52
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC0, 0x08, 0x34", "vprotb xmm1, OWORD [rax], 52");
}



#[test]
fn enc_sse5_vprotb5617() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm2, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x90, 0xCA", "vprotb xmm1, xmm2, xmm3");
}



#[test]
fn enc_sse5_vprotb5618() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm3, xmm3, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x90, 0xDB", "vprotb xmm3, xmm3, xmm15");
}



#[test]
fn enc_sse5_vprotb5619() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm1, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x90, 0xCA", "vprotb xmm1, xmm2, xmm4");
}



#[test]
fn enc_sse5_vprotb5620() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm3, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x90, 0xDB", "vprotb xmm3, xmm11, xmm2");
}



#[test]
fn enc_sse5_vprotb5621() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm4, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x90, 0xE7", "vprotb xmm4, xmm15, xmm1");
}



#[test]
fn enc_sse5_vprotb5622() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm15, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x18, 0x90, 0xFF", "vprotb xmm15, xmm15, xmm12");
}



#[test]
fn enc_sse5_vprotb5623() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm15, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x18, 0x90, 0xFB", "vprotb xmm15, xmm11, xmm12");
}



#[test]
fn enc_sse5_vprotb5624() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm2, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x90, 0xD0", "vprotb xmm2, xmm0, xmm11");
}



#[test]
fn enc_sse5_vprotb5625() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm11, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x90, 0xDC", "vprotb xmm11, xmm4, xmm0");
}



#[test]
fn enc_sse5_vprotb5626() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotb xmm4, xmm1, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x90, 0xE1", "vprotb xmm4, xmm1, xmm2");
}



#[test]
fn enc_sse5_vprotd5627() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm3, OWORD [rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x92, 0x1A", "vprotd xmm3, OWORD [rdx], xmm15");
}



#[test]
fn enc_sse5_vprotd5628() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm2, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x18, 0x92, 0xD7", "vprotd xmm2, xmm15, xmm12");
}



#[test]
fn enc_sse5_vprotd5629() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm15, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x18, 0x92, 0xFB", "vprotd xmm15, xmm11, xmm12");
}



#[test]
fn enc_sse5_vprotd5630() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm2, OWORD [rax * 2 + rdx], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x92, 0x14, 0x42", "vprotd xmm2, OWORD [rax * 2 + rdx], xmm11");
}



#[test]
fn enc_sse5_vprotd5631() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm0, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x92, 0xC3", "vprotd xmm0, xmm3, xmm1");
}



#[test]
fn enc_sse5_vprotd5632() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm0, xmm1, 71
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC2, 0xC1, 0x47", "vprotd xmm0, xmm1, 71");
}



#[test]
fn enc_sse5_vprotd5633() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, OWORD [rax], 68
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC2, 0x20, 0x44", "vprotd xmm12, OWORD [rax], 68");
}



#[test]
fn enc_sse5_vprotd5634() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, xmm2, 46
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC2, 0xE2, 0x2E", "vprotd xmm12, xmm2, 46");
}



#[test]
fn enc_sse5_vprotd5635() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm15, OWORD [rax * 2 + rdx], 27
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC2, 0x3C, 0x42, 0x1B", "vprotd xmm15, OWORD [rax * 2 + rdx], 27");
}



#[test]
fn enc_sse5_vprotd5636() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm15, OWORD [rax], 86
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC2, 0x38, 0x56", "vprotd xmm15, OWORD [rax], 86");
}



#[test]
fn enc_sse5_vprotd5637() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm11, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x92, 0xDA", "vprotd xmm11, xmm2, xmm2");
}



#[test]
fn enc_sse5_vprotd5638() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm11, xmm3, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x20, 0x92, 0xDB", "vprotd xmm11, xmm3, xmm11");
}



#[test]
fn enc_sse5_vprotd5639() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x58, 0x92, 0xE2", "vprotd xmm12, xmm2, xmm4");
}



#[test]
fn enc_sse5_vprotd5640() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm12, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x92, 0xE3", "vprotd xmm12, xmm3, xmm1");
}



#[test]
fn enc_sse5_vprotd5641() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotd xmm15, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x20, 0x92, 0xFB", "vprotd xmm15, xmm11, xmm11");
}



#[test]
fn enc_sse5_vprotq5642() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm15, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x00, 0x93, 0xF8", "vprotq xmm15, xmm0, xmm15");
}



#[test]
fn enc_sse5_vprotq5643() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm1, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x78, 0x93, 0xCF", "vprotq xmm1, xmm15, xmm0");
}



#[test]
fn enc_sse5_vprotq5644() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm2, xmm11, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x58, 0x93, 0xD3", "vprotq xmm2, xmm11, xmm4");
}



#[test]
fn enc_sse5_vprotq5645() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm3, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x93, 0xD8", "vprotq xmm3, xmm0, xmm11");
}



#[test]
fn enc_sse5_vprotq5646() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm11, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x18, 0x93, 0xDC", "vprotq xmm11, xmm12, xmm12");
}



#[test]
fn enc_sse5_vprotq5647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm4, OWORD [rax], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x93, 0x20", "vprotq xmm4, OWORD [rax], xmm12");
}



#[test]
fn enc_sse5_vprotq5648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm2, xmm12, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x93, 0xD4", "vprotq xmm2, xmm12, xmm1");
}



#[test]
fn enc_sse5_vprotq5649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm0, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x20, 0x93, 0xC4", "vprotq xmm0, xmm12, xmm11");
}



#[test]
fn enc_sse5_vprotq5650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm12, xmm4, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x93, 0xE4", "vprotq xmm12, xmm4, xmm1");
}



#[test]
fn enc_sse5_vprotq5651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm12, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x20, 0x93, 0xE0", "vprotq xmm12, xmm0, xmm11");
}



#[test]
fn enc_sse5_vprotq5652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm15, xmm0, 114
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC3, 0xF8, 0x72", "vprotq xmm15, xmm0, 114");
}



#[test]
fn enc_sse5_vprotq5653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm1, xmm3, 105
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC3, 0xCB, 0x69", "vprotq xmm1, xmm3, 105");
}



#[test]
fn enc_sse5_vprotq5654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm11, xmm15, 106
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x48, 0x78, 0xC3, 0xDF, 0x6A", "vprotq xmm11, xmm15, 106");
}



#[test]
fn enc_sse5_vprotq5655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm15, OWORD [rax * 2 + rdx], 69
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x68, 0x78, 0xC3, 0x3C, 0x42, 0x45", "vprotq xmm15, OWORD [rax * 2 + rdx], 69");
}



#[test]
fn enc_sse5_vprotq5656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotq xmm4, xmm3, 40
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC3, 0xE3, 0x28", "vprotq xmm4, xmm3, 40");
}



#[test]
fn enc_sse5_vprotw5657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm2, xmm2, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x91, 0xD2", "vprotw xmm2, xmm2, xmm11");
}



#[test]
fn enc_sse5_vprotw5658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm12, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x91, 0xE4", "vprotw xmm12, xmm4, xmm0");
}



#[test]
fn enc_sse5_vprotw5659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm11, xmm0, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x91, 0xD8", "vprotw xmm11, xmm0, xmm1");
}



#[test]
fn enc_sse5_vprotw5660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm12, xmm0, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x20, 0x91, 0xE0", "vprotw xmm12, xmm0, xmm11");
}



#[test]
fn enc_sse5_vprotw5661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm3, xmm4, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xD8, 0x91, 0x1A", "vprotw xmm3, xmm4, OWORD [rdx]");
}



#[test]
fn enc_sse5_vprotw5662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm2, xmm1, 123
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0xD1, 0x7B", "vprotw xmm2, xmm1, 123");
}



#[test]
fn enc_sse5_vprotw5663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm0, xmm3, 110
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0xC3, 0x6E", "vprotw xmm0, xmm3, 110");
}



#[test]
fn enc_sse5_vprotw5664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm1, xmm0, 92
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0xC8, 0x5C", "vprotw xmm1, xmm0, 92");
}



#[test]
fn enc_sse5_vprotw5665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm3, xmm1, 121
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0xD9, 0x79", "vprotw xmm3, xmm1, 121");
}



#[test]
fn enc_sse5_vprotw5666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm3, OWORD [rax], 70
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE8, 0x78, 0xC1, 0x18, 0x46", "vprotw xmm3, OWORD [rax], 70");
}



#[test]
fn enc_sse5_vprotw5667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm11, xmm0, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x91, 0xD8", "vprotw xmm11, xmm0, xmm2");
}



#[test]
fn enc_sse5_vprotw5668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm1, xmm15, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x18, 0x91, 0xCF", "vprotw xmm1, xmm15, xmm12");
}



#[test]
fn enc_sse5_vprotw5669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x91, 0xCA", "vprotw xmm1, xmm2, xmm12");
}



#[test]
fn enc_sse5_vprotw5670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm12, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x00, 0x91, 0xE3", "vprotw xmm12, xmm11, xmm15");
}



#[test]
fn enc_sse5_vprotw5671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vprotw xmm15, xmm15, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x78, 0x91, 0xFF", "vprotw xmm15, xmm15, xmm0");
}



#[test]
fn enc_sse5_vpshab5672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm11, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x98, 0xDC", "vpshab xmm11, xmm4, xmm12");
}



#[test]
fn enc_sse5_vpshab5673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm3, OWORD [rax], xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x98, 0x18", "vpshab xmm3, OWORD [rax], xmm4");
}



#[test]
fn enc_sse5_vpshab5674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm12, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x00, 0x98, 0xE4", "vpshab xmm12, xmm4, xmm15");
}



#[test]
fn enc_sse5_vpshab5675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm3, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x98, 0xD8", "vpshab xmm3, xmm0, xmm3");
}



#[test]
fn enc_sse5_vpshab5676() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm12, OWORD [rdx], xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x98, 0x22", "vpshab xmm12, OWORD [rdx], xmm0");
}



#[test]
fn enc_sse5_vpshab5677() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm2, xmm12, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x00, 0x98, 0xD4", "vpshab xmm2, xmm12, xmm15");
}



#[test]
fn enc_sse5_vpshab5678() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm1, xmm15, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x00, 0x98, 0xCF", "vpshab xmm1, xmm15, xmm15");
}



#[test]
fn enc_sse5_vpshab5679() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm4, xmm12, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x98, 0xE4", "vpshab xmm4, xmm12, xmm2");
}



#[test]
fn enc_sse5_vpshab5680() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm3, xmm4, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xD8, 0x98, 0x18", "vpshab xmm3, xmm4, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshab5681() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshab xmm3, xmm1, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x98, 0xD9", "vpshab xmm3, xmm1, xmm3");
}



#[test]
fn enc_sse5_vpshad5682() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm2, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x9A, 0xD0", "vpshad xmm2, xmm0, xmm15");
}



#[test]
fn enc_sse5_vpshad5683() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm12, xmm12, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x58, 0x9A, 0xE4", "vpshad xmm12, xmm12, xmm4");
}



#[test]
fn enc_sse5_vpshad5684() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x9A, 0xCA", "vpshad xmm1, xmm2, xmm12");
}



#[test]
fn enc_sse5_vpshad5685() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm2, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x9A, 0xD4", "vpshad xmm2, xmm4, xmm15");
}



#[test]
fn enc_sse5_vpshad5686() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm1, xmm15, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x80, 0x9A, 0x08", "vpshad xmm1, xmm15, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshad5687() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm2, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x9A, 0xD1", "vpshad xmm2, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpshad5688() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm12, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x9A, 0xE3", "vpshad xmm12, xmm3, xmm0");
}



#[test]
fn enc_sse5_vpshad5689() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm2, xmm11, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x60, 0x9A, 0xD3", "vpshad xmm2, xmm11, xmm3");
}



#[test]
fn enc_sse5_vpshad5690() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm4, xmm2, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x9A, 0xE2", "vpshad xmm4, xmm2, xmm0");
}



#[test]
fn enc_sse5_vpshad5691() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshad xmm11, OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x00, 0x9A, 0x1C, 0x42", "vpshad xmm11, OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse5_vpshaq5692() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm12, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x9B, 0xE0", "vpshaq xmm12, xmm0, xmm0");
}



#[test]
fn enc_sse5_vpshaq5693() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm3, OWORD [rax * 2 + rdx], xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x9B, 0x1C, 0x42", "vpshaq xmm3, OWORD [rax * 2 + rdx], xmm15");
}



#[test]
fn enc_sse5_vpshaq5694() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm3, OWORD [rax], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x9B, 0x18", "vpshaq xmm3, OWORD [rax], xmm3");
}



#[test]
fn enc_sse5_vpshaq5695() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm12, OWORD [rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x60, 0x9B, 0x22", "vpshaq xmm12, OWORD [rdx], xmm3");
}



#[test]
fn enc_sse5_vpshaq5696() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm2, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x9B, 0xD4", "vpshaq xmm2, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpshaq5697() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm4, xmm0, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x9B, 0x22", "vpshaq xmm4, xmm0, OWORD [rdx]");
}



#[test]
fn enc_sse5_vpshaq5698() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm15, xmm3, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x60, 0x9B, 0xFB", "vpshaq xmm15, xmm3, xmm3");
}



#[test]
fn enc_sse5_vpshaq5699() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm0, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x9B, 0xC0", "vpshaq xmm0, xmm0, xmm3");
}



#[test]
fn enc_sse5_vpshaq5700() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm15, xmm0, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x60, 0x9B, 0xF8", "vpshaq xmm15, xmm0, xmm3");
}



#[test]
fn enc_sse5_vpshaq5701() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaq xmm11, xmm2, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x9B, 0xDA", "vpshaq xmm11, xmm2, xmm1");
}



#[test]
fn enc_sse5_vpshaw5702() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm0, xmm4, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x99, 0xC4", "vpshaw xmm0, xmm4, xmm3");
}



#[test]
fn enc_sse5_vpshaw5703() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm4, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x00, 0x99, 0xE3", "vpshaw xmm4, xmm11, xmm15");
}



#[test]
fn enc_sse5_vpshaw5704() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm11, xmm11, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x20, 0x99, 0xDB", "vpshaw xmm11, xmm11, xmm11");
}



#[test]
fn enc_sse5_vpshaw5705() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm2, xmm0, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x99, 0x14, 0x42", "vpshaw xmm2, xmm0, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshaw5706() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm2, xmm11, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x99, 0xD3", "vpshaw xmm2, xmm11, xmm1");
}



#[test]
fn enc_sse5_vpshaw5707() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm15, xmm4, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x99, 0xFC", "vpshaw xmm15, xmm4, xmm12");
}



#[test]
fn enc_sse5_vpshaw5708() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm1, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x99, 0xC9", "vpshaw xmm1, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpshaw5709() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm2, xmm11, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x00, 0x99, 0xD3", "vpshaw xmm2, xmm11, xmm15");
}



#[test]
fn enc_sse5_vpshaw5710() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm11, xmm1, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x20, 0x99, 0xD9", "vpshaw xmm11, xmm1, xmm11");
}



#[test]
fn enc_sse5_vpshaw5711() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshaw xmm3, xmm3, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x99, 0xDB", "vpshaw xmm3, xmm3, xmm0");
}



#[test]
fn enc_sse5_vpshlb5712() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm2, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x60, 0x94, 0xD4", "vpshlb xmm2, xmm12, xmm3");
}



#[test]
fn enc_sse5_vpshlb5713() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm15, xmm2, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x94, 0xFA", "vpshlb xmm15, xmm2, xmm2");
}



#[test]
fn enc_sse5_vpshlb5714() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm1, xmm0, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x94, 0xC8", "vpshlb xmm1, xmm0, xmm0");
}



#[test]
fn enc_sse5_vpshlb5715() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm1, xmm15, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x70, 0x94, 0xCF", "vpshlb xmm1, xmm15, xmm1");
}



#[test]
fn enc_sse5_vpshlb5716() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm11, OWORD [rax * 2 + rdx], xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x94, 0x1C, 0x42", "vpshlb xmm11, OWORD [rax * 2 + rdx], xmm12");
}



#[test]
fn enc_sse5_vpshlb5717() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm12, xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0xE8, 0x94, 0x24, 0x42", "vpshlb xmm12, xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshlb5718() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm4, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x20, 0x94, 0xE4", "vpshlb xmm4, xmm12, xmm11");
}



#[test]
fn enc_sse5_vpshlb5719() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm0, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x94, 0xC4", "vpshlb xmm0, xmm4, xmm15");
}



#[test]
fn enc_sse5_vpshlb5720() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm12, xmm15, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x58, 0x94, 0xE7", "vpshlb xmm12, xmm15, xmm4");
}



#[test]
fn enc_sse5_vpshlb5721() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlb xmm0, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x94, 0xC3", "vpshlb xmm0, xmm11, xmm2");
}



#[test]
fn enc_sse5_vpshld5722() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm12, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x96, 0xE4", "vpshld xmm12, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpshld5723() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm0, xmm4, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x96, 0xC4", "vpshld xmm0, xmm4, xmm0");
}



#[test]
fn enc_sse5_vpshld5724() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm4, xmm3, OWORD [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x96, 0x22", "vpshld xmm4, xmm3, OWORD [rdx]");
}



#[test]
fn enc_sse5_vpshld5725() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm0, xmm3, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x70, 0x96, 0xC3", "vpshld xmm0, xmm3, xmm1");
}



#[test]
fn enc_sse5_vpshld5726() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm15, xmm12, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x98, 0x96, 0x38", "vpshld xmm15, xmm12, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshld5727() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm0, OWORD [rdx], xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x68, 0x96, 0x02", "vpshld xmm0, OWORD [rdx], xmm2");
}



#[test]
fn enc_sse5_vpshld5728() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm11, OWORD [rax], xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x96, 0x18", "vpshld xmm11, OWORD [rax], xmm1");
}



#[test]
fn enc_sse5_vpshld5729() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm4, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x96, 0xE4", "vpshld xmm4, xmm4, xmm15");
}



#[test]
fn enc_sse5_vpshld5730() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm11, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x20, 0x96, 0xDC", "vpshld xmm11, xmm12, xmm11");
}



#[test]
fn enc_sse5_vpshld5731() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshld xmm1, xmm2, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x18, 0x96, 0xCA", "vpshld xmm1, xmm2, xmm12");
}



#[test]
fn enc_sse5_vpshlq5732() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm15, xmm4, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x68, 0x97, 0xFC", "vpshlq xmm15, xmm4, xmm2");
}



#[test]
fn enc_sse5_vpshlq5733() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm15, xmm15, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x68, 0x97, 0xFF", "vpshlq xmm15, xmm15, xmm2");
}



#[test]
fn enc_sse5_vpshlq5734() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm0, OWORD [rax], xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x20, 0x97, 0x00", "vpshlq xmm0, OWORD [rax], xmm11");
}



#[test]
fn enc_sse5_vpshlq5735() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm15, xmm12, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x20, 0x97, 0xFC", "vpshlq xmm15, xmm12, xmm11");
}



#[test]
fn enc_sse5_vpshlq5736() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm12, xmm0, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x00, 0x97, 0xE0", "vpshlq xmm12, xmm0, xmm15");
}



#[test]
fn enc_sse5_vpshlq5737() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm1, xmm2, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x97, 0x0C, 0x42", "vpshlq xmm1, xmm2, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_sse5_vpshlq5738() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm11, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x78, 0x97, 0xD9", "vpshlq xmm11, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpshlq5739() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm11, xmm11, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x49, 0x18, 0x97, 0xDB", "vpshlq xmm11, xmm11, xmm12");
}



#[test]
fn enc_sse5_vpshlq5740() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm4, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x97, 0xE3", "vpshlq xmm4, xmm11, xmm2");
}



#[test]
fn enc_sse5_vpshlq5741() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlq xmm2, xmm1, xmm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x78, 0x97, 0xD1", "vpshlq xmm2, xmm1, xmm0");
}



#[test]
fn enc_sse5_vpshlw5742() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm11, xmm3, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0xE0, 0x95, 0x18", "vpshlw xmm11, xmm3, OWORD [rax]");
}



#[test]
fn enc_sse5_vpshlw5743() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm2, xmm12, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x18, 0x95, 0xD4", "vpshlw xmm2, xmm12, xmm12");
}



#[test]
fn enc_sse5_vpshlw5744() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm15, xmm0, xmm12
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x18, 0x95, 0xF8", "vpshlw xmm15, xmm0, xmm12");
}



#[test]
fn enc_sse5_vpshlw5745() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm4, xmm12, xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x60, 0x95, 0xE4", "vpshlw xmm4, xmm12, xmm3");
}



#[test]
fn enc_sse5_vpshlw5746() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm4, xmm2, xmm4
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x58, 0x95, 0xE2", "vpshlw xmm4, xmm2, xmm4");
}



#[test]
fn enc_sse5_vpshlw5747() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm2, xmm4, xmm15
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x00, 0x95, 0xD4", "vpshlw xmm2, xmm4, xmm15");
}



#[test]
fn enc_sse5_vpshlw5748() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm12, xmm1, xmm1
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0x69, 0x70, 0x95, 0xE1", "vpshlw xmm12, xmm1, xmm1");
}



#[test]
fn enc_sse5_vpshlw5749() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm3, xmm15, xmm11
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x20, 0x95, 0xDF", "vpshlw xmm3, xmm15, xmm11");
}



#[test]
fn enc_sse5_vpshlw5750() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm3, OWORD [rdx], xmm3
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0x60, 0x95, 0x1A", "vpshlw xmm3, OWORD [rdx], xmm3");
}



#[test]
fn enc_sse5_vpshlw5751() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vpshlw xmm3, xmm11, xmm2
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xC9, 0x68, 0x95, 0xDB", "vpshlw xmm3, xmm11, xmm2");
}


