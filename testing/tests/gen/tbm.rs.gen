
#[test]
fn enc_tbm_blcfill5868() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0xC9", "blcfill rdx, rcx");
}



#[test]
fn enc_tbm_blcfill5869() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0xC9", "blcfill rbx, rcx");
}



#[test]
fn enc_tbm_blcfill5870() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x0C, 0x42", "blcfill rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcfill5871() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x0C, 0x42", "blcfill rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blci5872() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x02, 0xF1", "blci rdx, rcx");
}



#[test]
fn enc_tbm_blci5873() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0x34, 0x42", "blci rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blci5874() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x02, 0x34, 0x42", "blci rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blci5875() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x02, 0x30", "blci rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcic5876() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0xE9", "blcic rcx, rcx");
}



#[test]
fn enc_tbm_blcic5877() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x2C, 0x42", "blcic rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcic5878() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x28", "blcic rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcic5879() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x2C, 0x42", "blcic rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcic5880() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x2C, 0x42", "blcic rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcmsk5881() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0x08", "blcmsk rax, QWORD [rax]");
}



#[test]
fn enc_tbm_blcmsk5882() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x02, 0x08", "blcmsk rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcmsk5883() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0x0C, 0x42", "blcmsk rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcmsk5884() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x02, 0x08", "blcmsk rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcs5885() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x1C, 0x42", "blcs rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcs5886() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x18", "blcs rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcs5887() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0xD9", "blcs rbx, rcx");
}



#[test]
fn enc_tbm_blcs5888() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x18", "blcs rcx, QWORD [rax]");
}



#[test]
fn enc_tbm_blsfill5889() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x10", "blsfill rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_blsfill5890() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0xD1", "blsfill rax, rcx");
}



#[test]
fn enc_tbm_blsfill5891() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x14, 0x42", "blsfill rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blsfill5892() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x14, 0x42", "blsfill rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blsfill5893() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0xD1", "blsfill rdx, rcx");
}



#[test]
fn enc_tbm_blsic5894() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsic rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x30", "blsic rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_blsic5895() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsic rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0xF1", "blsic rax, rcx");
}



#[test]
fn enc_tbm_blsic5896() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsic rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x34, 0x42", "blsic rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_t1mskc5897() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x3C, 0x42", "t1mskc rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_t1mskc5898() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x3C, 0x42", "t1mskc rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_t1mskc5899() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x38", "t1mskc rax, QWORD [rax]");
}



#[test]
fn enc_tbm_t1mskc5900() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0xF9", "t1mskc rcx, rcx");
}



#[test]
fn enc_tbm_tzmsk5901() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0xE1", "tzmsk rbx, rcx");
}



#[test]
fn enc_tbm_tzmsk5902() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0xE1", "tzmsk rdx, rcx");
}



#[test]
fn enc_tbm_tzmsk5903() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x20", "tzmsk rcx, QWORD [rax]");
}



#[test]
fn enc_tbm_tzmsk5904() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x24, 0x42", "tzmsk rcx, QWORD [rax * 2 + rdx]");
}


