
#[test]
fn enc_tbm_blcfill5995() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0xC9", "blcfill rcx, rcx");
}



#[test]
fn enc_tbm_blcfill5996() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0xC9", "blcfill rbx, rcx");
}



#[test]
fn enc_tbm_blcfill5997() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcfill rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x08", "blcfill rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_blci5998() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x02, 0x34, 0x42", "blci rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blci5999() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x02, 0x30", "blci rcx, QWORD [rax]");
}



#[test]
fn enc_tbm_blci6000() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0xF1", "blci rax, rcx");
}



#[test]
fn enc_tbm_blci6001() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blci rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0x34, 0x42", "blci rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcic6002() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x2C, 0x42", "blcic rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcic6003() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rdx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x2C, 0x42", "blcic rdx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcic6004() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x28", "blcic rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcic6005() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcic rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0xE9", "blcic rax, rcx");
}



#[test]
fn enc_tbm_blcmsk6006() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0xC9", "blcmsk rax, rcx");
}



#[test]
fn enc_tbm_blcmsk6007() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0x0C, 0x42", "blcmsk rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcmsk6008() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x02, 0x08", "blcmsk rax, QWORD [rax]");
}



#[test]
fn enc_tbm_blcmsk6009() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcmsk rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x02, 0xC9", "blcmsk rdx, rcx");
}



#[test]
fn enc_tbm_blcs6010() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x1C, 0x42", "blcs rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcs6011() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rcx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0xD9", "blcs rcx, rcx");
}



#[test]
fn enc_tbm_blcs6012() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x18", "blcs rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_blcs6013() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x1C, 0x42", "blcs rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blcs6014() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blcs rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0xD9", "blcs rax, rcx");
}



#[test]
fn enc_tbm_blsfill6015() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x14, 0x42", "blsfill rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blsfill6016() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x10", "blsfill rcx, QWORD [rax]");
}



#[test]
fn enc_tbm_blsfill6017() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x10", "blsfill rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_blsfill6018() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0xD1", "blsfill rbx, rcx");
}



#[test]
fn enc_tbm_blsfill6019() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsfill rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x14, 0x42", "blsfill rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blsic6020() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsic rcx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x34, 0x42", "blsic rcx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blsic6021() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsic rbx, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x34, 0x42", "blsic rbx, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_blsic6022() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; blsic rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x30", "blsic rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_t1mskc6023() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rcx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF0, 0x01, 0x38", "t1mskc rcx, QWORD [rax]");
}



#[test]
fn enc_tbm_t1mskc6024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rax, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x38", "t1mskc rax, QWORD [rax]");
}



#[test]
fn enc_tbm_t1mskc6025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rax, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0xF9", "t1mskc rax, rcx");
}



#[test]
fn enc_tbm_t1mskc6026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; t1mskc rbx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0x38", "t1mskc rbx, QWORD [rax]");
}



#[test]
fn enc_tbm_tzmsk6027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rbx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE0, 0x01, 0xE1", "tzmsk rbx, rcx");
}



#[test]
fn enc_tbm_tzmsk6028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rdx, QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0x20", "tzmsk rdx, QWORD [rax]");
}



#[test]
fn enc_tbm_tzmsk6029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rax, QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xF8, 0x01, 0x24, 0x42", "tzmsk rax, QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tbm_tzmsk6030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; tzmsk rdx, rcx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x8F, 0xE9, 0xE8, 0x01, 0xE1", "tzmsk rdx, rcx");
}


