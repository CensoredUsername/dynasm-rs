
#[test]
fn enc_tdnow_femms4024() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; femms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0E", "femms");
}



#[test]
fn enc_tdnow_pavgusb4025() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0xBF", "pavgusb mm5, [rdx]");
}



#[test]
fn enc_tdnow_pavgusb4026() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xBF", "pavgusb mm3, [rax]");
}



#[test]
fn enc_tdnow_pavgusb4027() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xBF", "pavgusb mm3, mm0");
}



#[test]
fn enc_tdnow_pavgusb4028() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xBF", "pavgusb mm3, [rdx]");
}



#[test]
fn enc_tdnow_pavgusb4029() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xBF", "pavgusb mm0, [rax]");
}



#[test]
fn enc_tdnow_pf2id4030() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x1D", "pf2id mm1, [rdx]");
}



#[test]
fn enc_tdnow_pf2id4031() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x1D", "pf2id mm3, [rdx]");
}



#[test]
fn enc_tdnow_pf2id4032() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x1D", "pf2id mm0, [rax]");
}



#[test]
fn enc_tdnow_pf2id4033() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x1D", "pf2id mm1, [rax]");
}



#[test]
fn enc_tdnow_pf2iw4034() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x1C", "pf2iw mm2, mm0");
}



#[test]
fn enc_tdnow_pf2iw4035() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x1C", "pf2iw mm2, [rax]");
}



#[test]
fn enc_tdnow_pf2iw4036() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x1C", "pf2iw mm4, [rax]");
}



#[test]
fn enc_tdnow_pf2iw4037() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x1C", "pf2iw mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfacc4038() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xAE", "pfacc mm0, [rax]");
}



#[test]
fn enc_tdnow_pfacc4039() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xAE", "pfacc mm5, mm0");
}



#[test]
fn enc_tdnow_pfacc4040() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xAE", "pfacc mm3, mm0");
}



#[test]
fn enc_tdnow_pfacc4041() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xAE", "pfacc mm4, [rax]");
}



#[test]
fn enc_tdnow_pfadd4042() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x9E", "pfadd mm2, mm0");
}



#[test]
fn enc_tdnow_pfadd4043() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x9E", "pfadd mm1, mm0");
}



#[test]
fn enc_tdnow_pfadd4044() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x9E", "pfadd mm4, [rax]");
}



#[test]
fn enc_tdnow_pfadd4045() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x9E", "pfadd mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfmax4046() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xA4", "pfmax mm4, [rax]");
}



#[test]
fn enc_tdnow_pfmax4047() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xA4", "pfmax mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfmax4048() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xA4", "pfmax mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfmax4049() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xA4", "pfmax mm1, mm0");
}



#[test]
fn enc_tdnow_pfmax4050() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xA4", "pfmax mm5, [rax]");
}



#[test]
fn enc_tdnow_pfmin4051() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x94", "pfmin mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfmin4052() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x94", "pfmin mm5, [rax]");
}



#[test]
fn enc_tdnow_pfmin4053() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x94", "pfmin mm3, [rax]");
}



#[test]
fn enc_tdnow_pfmin4054() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x94", "pfmin mm3, mm0");
}



#[test]
fn enc_tdnow_pfmin4055() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x94", "pfmin mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfmul4056() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xB4", "pfmul mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfmul4057() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xB4", "pfmul mm0, mm0");
}



#[test]
fn enc_tdnow_pfmul4058() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xB4", "pfmul mm1, [rax]");
}



#[test]
fn enc_tdnow_pfmul4059() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xB4", "pfmul mm1, mm0");
}



#[test]
fn enc_tdnow_pfmul4060() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0xB4", "pfmul mm5, [rdx]");
}



#[test]
fn enc_tdnow_pfnacc4061() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x8A", "pfnacc mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfnacc4062() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x8A", "pfnacc mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfnacc4063() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x8A", "pfnacc mm0, mm0");
}



#[test]
fn enc_tdnow_pfnacc4064() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x8A", "pfnacc mm4, [rax]");
}



#[test]
fn enc_tdnow_pfnacc4065() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x8A", "pfnacc mm4, mm0");
}



#[test]
fn enc_tdnow_pfpnacc4066() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x8E", "pfpnacc mm2, mm0");
}



#[test]
fn enc_tdnow_pfpnacc4067() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x8E", "pfpnacc mm0, [rdx]");
}



#[test]
fn enc_tdnow_pfpnacc4068() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x8E", "pfpnacc mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfpnacc4069() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x8E", "pfpnacc mm1, mm0");
}



#[test]
fn enc_tdnow_pfrcp4070() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x96", "pfrcp mm4, [rax]");
}



#[test]
fn enc_tdnow_pfrcp4071() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x96", "pfrcp mm1, mm0");
}



#[test]
fn enc_tdnow_pfrcp4072() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x96", "pfrcp mm2, mm0");
}



#[test]
fn enc_tdnow_pfrcp4073() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x96", "pfrcp mm3, mm0");
}



#[test]
fn enc_tdnow_pfrcpit14074() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xA6", "pfrcpit1 mm1, mm0");
}



#[test]
fn enc_tdnow_pfrcpit14075() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xA6", "pfrcpit1 mm5, [rax]");
}



#[test]
fn enc_tdnow_pfrcpit14076() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xA6", "pfrcpit1 mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpit14077() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xA6", "pfrcpit1 mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpit14078() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0xA6", "pfrcpit1 mm5, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpit24079() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xB6", "pfrcpit2 mm2, mm0");
}



#[test]
fn enc_tdnow_pfrcpit24080() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xB6", "pfrcpit2 mm5, mm0");
}



#[test]
fn enc_tdnow_pfrcpit24081() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xB6", "pfrcpit2 mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpit24082() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xB6", "pfrcpit2 mm4, [rax]");
}



#[test]
fn enc_tdnow_pfrcpv4083() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x86", "pfrcpv mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpv4084() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x86", "pfrcpv mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpv4085() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x86", "pfrcpv mm1, [rax]");
}



#[test]
fn enc_tdnow_pfrcpv4086() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x86", "pfrcpv mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrsqit14087() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xA7", "pfrsqit1 mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqit14088() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xA7", "pfrsqit1 mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrsqit14089() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xA7", "pfrsqit1 mm1, mm0");
}



#[test]
fn enc_tdnow_pfrsqit14090() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xA7", "pfrsqit1 mm3, mm0");
}



#[test]
fn enc_tdnow_pfrsqit14091() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xA7", "pfrsqit1 mm4, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrt4092() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x97", "pfrsqrt mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqrt4093() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x97", "pfrsqrt mm3, mm0");
}



#[test]
fn enc_tdnow_pfrsqrt4094() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x97", "pfrsqrt mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrt4095() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x97", "pfrsqrt mm5, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrt4096() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x97", "pfrsqrt mm5, mm0");
}



#[test]
fn enc_tdnow_pfrsqrtv4097() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x87", "pfrsqrtv mm1, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrtv4098() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x87", "pfrsqrtv mm5, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrtv4099() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x87", "pfrsqrtv mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqrtv4100() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x87", "pfrsqrtv mm0, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrtv4101() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x87", "pfrsqrtv mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfsub4102() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x9A", "pfsub mm5, [rax]");
}



#[test]
fn enc_tdnow_pfsub4103() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x9A", "pfsub mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfsub4104() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x9A", "pfsub mm1, [rax]");
}



#[test]
fn enc_tdnow_pfsub4105() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x9A", "pfsub mm0, mm0");
}



#[test]
fn enc_tdnow_pfsubr4106() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xAA", "pfsubr mm0, mm0");
}



#[test]
fn enc_tdnow_pfsubr4107() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xAA", "pfsubr mm2, mm0");
}



#[test]
fn enc_tdnow_pfsubr4108() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xAA", "pfsubr mm1, mm0");
}



#[test]
fn enc_tdnow_pfsubr4109() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xAA", "pfsubr mm0, [rdx]");
}



#[test]
fn enc_tdnow_pfsubr4110() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xAA", "pfsubr mm5, mm0");
}



#[test]
fn enc_tdnow_pi2fd4111() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x0D", "pi2fd mm0, [rax]");
}



#[test]
fn enc_tdnow_pi2fd4112() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x0D", "pi2fd mm2, [rax]");
}



#[test]
fn enc_tdnow_pi2fd4113() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x0D", "pi2fd mm4, [rax]");
}



#[test]
fn enc_tdnow_pi2fd4114() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x0D", "pi2fd mm3, [rdx]");
}



#[test]
fn enc_tdnow_pi2fd4115() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0x0D", "pi2fd mm3, mm0");
}



#[test]
fn enc_tdnow_pi2fw4116() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x0C", "pi2fw mm1, [rdx]");
}



#[test]
fn enc_tdnow_pi2fw4117() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x0C", "pi2fw mm3, [rdx]");
}



#[test]
fn enc_tdnow_pi2fw4118() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x0C", "pi2fw mm5, [rax]");
}



#[test]
fn enc_tdnow_pi2fw4119() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x0C", "pi2fw mm2, [rax]");
}



#[test]
fn enc_tdnow_pi2fw4120() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x0C", "pi2fw mm0, [rdx]");
}



#[test]
fn enc_tdnow_pmulhrwa4121() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xB7", "pmulhrwa mm5, mm0");
}



#[test]
fn enc_tdnow_pmulhrwa4122() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xB7", "pmulhrwa mm1, [rdx]");
}



#[test]
fn enc_tdnow_pmulhrwa4123() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xB7", "pmulhrwa mm3, [rax]");
}



#[test]
fn enc_tdnow_pmulhrwa4124() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xB7", "pmulhrwa mm4, mm0");
}



#[test]
fn enc_tdnow_pmulhrwa4125() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xB7", "pmulhrwa mm4, [rdx]");
}



#[test]
fn enc_tdnow_prefetch4126() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x04, 0x42", "prefetch QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tdnow_prefetch4127() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn enc_tdnow_prefetchw4128() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x48, 0x10", "prefetchw QWORD [rax + 16]");
}



#[test]
fn enc_tdnow_prefetchw4129() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x0C, 0x42", "prefetchw QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tdnow_prefetchw4130() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn enc_tdnow_pswapd4131() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xBB", "pswapd mm0, [rdx]");
}



#[test]
fn enc_tdnow_pswapd4132() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xBB", "pswapd mm3, [rax]");
}



#[test]
fn enc_tdnow_pswapd4133() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xBB", "pswapd mm1, [rdx]");
}



#[test]
fn enc_tdnow_pswapd4134() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xBB", "pswapd mm2, [rdx]");
}


