
#[test]
fn enc_tdnow_femms4141() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; femms
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0E", "femms");
}



#[test]
fn enc_tdnow_pavgusb4142() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xBF", "pavgusb mm5, [rax]");
}



#[test]
fn enc_tdnow_pavgusb4143() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xBF", "pavgusb mm1, [rdx]");
}



#[test]
fn enc_tdnow_pavgusb4144() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xBF", "pavgusb mm0, mm0");
}



#[test]
fn enc_tdnow_pavgusb4145() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xBF", "pavgusb mm0, [rdx]");
}



#[test]
fn enc_tdnow_pavgusb4146() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pavgusb mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xBF", "pavgusb mm4, [rax]");
}



#[test]
fn enc_tdnow_pf2id4147() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x1D", "pf2id mm1, [rdx]");
}



#[test]
fn enc_tdnow_pf2id4148() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x1D", "pf2id mm0, [rdx]");
}



#[test]
fn enc_tdnow_pf2id4149() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x1D", "pf2id mm3, [rdx]");
}



#[test]
fn enc_tdnow_pf2id4150() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x1D", "pf2id mm2, [rax]");
}



#[test]
fn enc_tdnow_pf2id4151() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2id mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x1D", "pf2id mm2, [rdx]");
}



#[test]
fn enc_tdnow_pf2iw4152() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x1C", "pf2iw mm0, mm0");
}



#[test]
fn enc_tdnow_pf2iw4153() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x1C", "pf2iw mm2, mm0");
}



#[test]
fn enc_tdnow_pf2iw4154() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x1C", "pf2iw mm4, [rax]");
}



#[test]
fn enc_tdnow_pf2iw4155() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x1C", "pf2iw mm3, [rdx]");
}



#[test]
fn enc_tdnow_pf2iw4156() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pf2iw mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x1C", "pf2iw mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfacc4157() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xAE", "pfacc mm3, [rax]");
}



#[test]
fn enc_tdnow_pfacc4158() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xAE", "pfacc mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfacc4159() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xAE", "pfacc mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfacc4160() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xAE", "pfacc mm0, mm0");
}



#[test]
fn enc_tdnow_pfacc4161() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfacc mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0xAE", "pfacc mm5, [rax]");
}



#[test]
fn enc_tdnow_pfadd4162() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x9E", "pfadd mm0, [rdx]");
}



#[test]
fn enc_tdnow_pfadd4163() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x9E", "pfadd mm0, [rax]");
}



#[test]
fn enc_tdnow_pfadd4164() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x9E", "pfadd mm0, mm0");
}



#[test]
fn enc_tdnow_pfadd4165() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfadd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0x9E", "pfadd mm1, mm0");
}



#[test]
fn enc_tdnow_pfmax4166() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xA4", "pfmax mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfmax4167() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xA4", "pfmax mm1, [rax]");
}



#[test]
fn enc_tdnow_pfmax4168() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xA4", "pfmax mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfmax4169() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0xA4", "pfmax mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfmax4170() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmax mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xA4", "pfmax mm2, mm0");
}



#[test]
fn enc_tdnow_pfmin4171() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x94", "pfmin mm1, [rax]");
}



#[test]
fn enc_tdnow_pfmin4172() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x94", "pfmin mm5, mm0");
}



#[test]
fn enc_tdnow_pfmin4173() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x94", "pfmin mm3, [rax]");
}



#[test]
fn enc_tdnow_pfmin4174() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x94", "pfmin mm4, mm0");
}



#[test]
fn enc_tdnow_pfmin4175() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmin mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x94", "pfmin mm5, [rdx]");
}



#[test]
fn enc_tdnow_pfmul4176() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xB4", "pfmul mm0, mm0");
}



#[test]
fn enc_tdnow_pfmul4177() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xB4", "pfmul mm2, mm0");
}



#[test]
fn enc_tdnow_pfmul4178() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xB4", "pfmul mm1, [rax]");
}



#[test]
fn enc_tdnow_pfmul4179() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xB4", "pfmul mm5, mm0");
}



#[test]
fn enc_tdnow_pfmul4180() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfmul mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xB4", "pfmul mm2, [rax]");
}



#[test]
fn enc_tdnow_pfnacc4181() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x8A", "pfnacc mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfnacc4182() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x8A", "pfnacc mm3, [rax]");
}



#[test]
fn enc_tdnow_pfnacc4183() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x8A", "pfnacc mm2, [rax]");
}



#[test]
fn enc_tdnow_pfnacc4184() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x8A", "pfnacc mm2, mm0");
}



#[test]
fn enc_tdnow_pfnacc4185() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfnacc mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x8A", "pfnacc mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfpnacc4186() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0x8E", "pfpnacc mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfpnacc4187() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x8E", "pfpnacc mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfpnacc4188() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0x8E", "pfpnacc mm1, [rax]");
}



#[test]
fn enc_tdnow_pfpnacc4189() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x8E", "pfpnacc mm5, [rdx]");
}



#[test]
fn enc_tdnow_pfpnacc4190() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfpnacc mm5, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x28, 0x8E", "pfpnacc mm5, [rax]");
}



#[test]
fn enc_tdnow_pfrcp4191() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x96", "pfrcp mm4, mm0");
}



#[test]
fn enc_tdnow_pfrcp4192() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x96", "pfrcp mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrcp4193() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x96", "pfrcp mm0, [rdx]");
}



#[test]
fn enc_tdnow_pfrcp4194() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x96", "pfrcp mm0, mm0");
}



#[test]
fn enc_tdnow_pfrcp4195() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcp mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0x96", "pfrcp mm2, mm0");
}



#[test]
fn enc_tdnow_pfrcpit14196() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xA6", "pfrcpit1 mm3, mm0");
}



#[test]
fn enc_tdnow_pfrcpit14197() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0xA6", "pfrcpit1 mm0, mm0");
}



#[test]
fn enc_tdnow_pfrcpit14198() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xA6", "pfrcpit1 mm4, mm0");
}



#[test]
fn enc_tdnow_pfrcpit14199() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xA6", "pfrcpit1 mm2, [rax]");
}



#[test]
fn enc_tdnow_pfrcpit14200() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit1 mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xA6", "pfrcpit1 mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpit24201() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xB6", "pfrcpit2 mm5, mm0");
}



#[test]
fn enc_tdnow_pfrcpit24202() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xB6", "pfrcpit2 mm4, [rax]");
}



#[test]
fn enc_tdnow_pfrcpit24203() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xB6", "pfrcpit2 mm3, mm0");
}



#[test]
fn enc_tdnow_pfrcpit24204() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpit2 mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xB6", "pfrcpit2 mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfrcpv4205() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0x86", "pfrcpv mm4, mm0");
}



#[test]
fn enc_tdnow_pfrcpv4206() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x86", "pfrcpv mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrcpv4207() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x86", "pfrcpv mm2, [rax]");
}



#[test]
fn enc_tdnow_pfrcpv4208() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x86", "pfrcpv mm0, [rax]");
}



#[test]
fn enc_tdnow_pfrcpv4209() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrcpv mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x86", "pfrcpv mm5, mm0");
}



#[test]
fn enc_tdnow_pfrsqit14210() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xA7", "pfrsqit1 mm0, [rax]");
}



#[test]
fn enc_tdnow_pfrsqit14211() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xA7", "pfrsqit1 mm1, mm0");
}



#[test]
fn enc_tdnow_pfrsqit14212() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0xA7", "pfrsqit1 mm5, mm0");
}



#[test]
fn enc_tdnow_pfrsqit14213() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqit1 mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xA7", "pfrsqit1 mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrt4214() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x97", "pfrsqrt mm5, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqrt4215() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0x97", "pfrsqrt mm0, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqrt4216() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x97", "pfrsqrt mm4, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrt4217() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x97", "pfrsqrt mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrt4218() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrt mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x97", "pfrsqrt mm3, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqrtv4219() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x87", "pfrsqrtv mm4, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrtv4220() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x87", "pfrsqrtv mm5, [rdx]");
}



#[test]
fn enc_tdnow_pfrsqrtv4221() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x87", "pfrsqrtv mm3, [rax]");
}



#[test]
fn enc_tdnow_pfrsqrtv4222() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfrsqrtv mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0x87", "pfrsqrtv mm0, [rax]");
}



#[test]
fn enc_tdnow_pfsub4223() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x9A", "pfsub mm4, [rax]");
}



#[test]
fn enc_tdnow_pfsub4224() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0x9A", "pfsub mm3, [rax]");
}



#[test]
fn enc_tdnow_pfsub4225() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0x9A", "pfsub mm2, [rax]");
}



#[test]
fn enc_tdnow_pfsub4226() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0x9A", "pfsub mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfsub4227() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsub mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0x9A", "pfsub mm1, [rdx]");
}



#[test]
fn enc_tdnow_pfsubr4228() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm2, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x12, 0xAA", "pfsubr mm2, [rdx]");
}



#[test]
fn enc_tdnow_pfsubr4229() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm3, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD8, 0xAA", "pfsubr mm3, mm0");
}



#[test]
fn enc_tdnow_pfsubr4230() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm4, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x22, 0xAA", "pfsubr mm4, [rdx]");
}



#[test]
fn enc_tdnow_pfsubr4231() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xAA", "pfsubr mm4, [rax]");
}



#[test]
fn enc_tdnow_pfsubr4232() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pfsubr mm4, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE0, 0xAA", "pfsubr mm4, mm0");
}



#[test]
fn enc_tdnow_pi2fd4233() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0x0D", "pi2fd mm4, [rax]");
}



#[test]
fn enc_tdnow_pi2fd4234() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x0D", "pi2fd mm0, mm0");
}



#[test]
fn enc_tdnow_pi2fd4235() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fd mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x0D", "pi2fd mm3, [rdx]");
}



#[test]
fn enc_tdnow_pi2fw4236() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm0, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC0, 0x0C", "pi2fw mm0, mm0");
}



#[test]
fn enc_tdnow_pi2fw4237() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm3, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x1A, 0x0C", "pi2fw mm3, [rdx]");
}



#[test]
fn enc_tdnow_pi2fw4238() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm5, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xE8, 0x0C", "pi2fw mm5, mm0");
}



#[test]
fn enc_tdnow_pi2fw4239() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pi2fw mm5, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x2A, 0x0C", "pi2fw mm5, [rdx]");
}



#[test]
fn enc_tdnow_pmulhrwa4240() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xB7", "pmulhrwa mm0, [rax]");
}



#[test]
fn enc_tdnow_pmulhrwa4241() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm4, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x20, 0xB7", "pmulhrwa mm4, [rax]");
}



#[test]
fn enc_tdnow_pmulhrwa4242() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm1, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x0A, 0xB7", "pmulhrwa mm1, [rdx]");
}



#[test]
fn enc_tdnow_pmulhrwa4243() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm0, [rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x02, 0xB7", "pmulhrwa mm0, [rdx]");
}



#[test]
fn enc_tdnow_pmulhrwa4244() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pmulhrwa mm1, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x08, 0xB7", "pmulhrwa mm1, [rax]");
}



#[test]
fn enc_tdnow_prefetch4245() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x04, 0x42", "prefetch QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tdnow_prefetch4246() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x00", "prefetch QWORD [rax]");
}



#[test]
fn enc_tdnow_prefetch4247() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetch QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x40, 0x10", "prefetch QWORD [rax + 16]");
}



#[test]
fn enc_tdnow_prefetchw4248() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x08", "prefetchw QWORD [rax]");
}



#[test]
fn enc_tdnow_prefetchw4249() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x48, 0x10", "prefetchw QWORD [rax + 16]");
}



#[test]
fn enc_tdnow_prefetchw4250() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; prefetchw QWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0D, 0x0C, 0x42", "prefetchw QWORD [rax * 2 + rdx]");
}



#[test]
fn enc_tdnow_pswapd4251() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm2, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x10, 0xBB", "pswapd mm2, [rax]");
}



#[test]
fn enc_tdnow_pswapd4252() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm2, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xD0, 0xBB", "pswapd mm2, mm0");
}



#[test]
fn enc_tdnow_pswapd4253() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm3, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x18, 0xBB", "pswapd mm3, [rax]");
}



#[test]
fn enc_tdnow_pswapd4254() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm1, mm0
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0xC8, 0xBB", "pswapd mm1, mm0");
}



#[test]
fn enc_tdnow_pswapd4255() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; pswapd mm0, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x0F, 0x00, 0xBB", "pswapd mm0, [rax]");
}


