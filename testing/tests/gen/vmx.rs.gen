
#[test]
fn enc_vmx_clgi4647() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; clgi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDD", "clgi");
}



#[test]
fn enc_vmx_invept4648() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rcx, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x48, 0x10", "invept rcx, OWORD [rax + 16]");
}



#[test]
fn enc_vmx_invept4649() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invept rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x80, 0x00", "invept rax, OWORD [rax]");
}



#[test]
fn enc_vmx_invvpid4650() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rdx, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x50, 0x10", "invvpid rdx, OWORD [rax + 16]");
}



#[test]
fn enc_vmx_invvpid4651() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rdx, OWORD [rax * 2 + rdx]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x14, 0x42", "invvpid rdx, OWORD [rax * 2 + rdx]");
}



#[test]
fn enc_vmx_invvpid4652() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x00", "invvpid rax, OWORD [rax]");
}



#[test]
fn enc_vmx_invvpid4653() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rax, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x40, 0x10", "invvpid rax, OWORD [rax + 16]");
}



#[test]
fn enc_vmx_invvpid4654() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; invvpid rcx, OWORD [rax + 16]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0x38, 0x81, 0x48, 0x10", "invvpid rcx, OWORD [rax + 16]");
}



#[test]
fn enc_vmx_stgi4655() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; stgi
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDC", "stgi");
}



#[test]
fn enc_vmx_vmcall4656() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmcall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC1", "vmcall");
}



#[test]
fn enc_vmx_vmclear4657() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmclear [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x66, 0x0F, 0xC7, 0x30", "vmclear [rax]");
}



#[test]
fn enc_vmx_vmfunc4658() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmfunc
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD4", "vmfunc");
}



#[test]
fn enc_vmx_vmlaunch4659() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmlaunch
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC2", "vmlaunch");
}



#[test]
fn enc_vmx_vmload4660() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmload
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDA", "vmload");
}



#[test]
fn enc_vmx_vmmcall4661() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmmcall
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD9", "vmmcall");
}



#[test]
fn enc_vmx_vmptrld4662() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrld [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x30", "vmptrld [rax]");
}



#[test]
fn enc_vmx_vmptrst4663() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmptrst [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0xC7, 0x38", "vmptrst [rax]");
}



#[test]
fn enc_vmx_vmread4664() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rdx
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xD0", "vmread rax, rdx");
}



#[test]
fn enc_vmx_vmread4665() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread rax, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0xC0", "vmread rax, rax");
}



#[test]
fn enc_vmx_vmread4666() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmread [rax], rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x78, 0x00", "vmread [rax], rax");
}



#[test]
fn enc_vmx_vmresume4667() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmresume
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC3", "vmresume");
}



#[test]
fn enc_vmx_vmrun4668() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmrun
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xD8", "vmrun");
}



#[test]
fn enc_vmx_vmsave4669() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmsave
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xDB", "vmsave");
}



#[test]
fn enc_vmx_vmwrite4670() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rdx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xD0", "vmwrite rdx, rax");
}



#[test]
fn enc_vmx_vmwrite4671() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rdx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0x10", "vmwrite rdx, [rax]");
}



#[test]
fn enc_vmx_vmwrite4672() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rcx, rax
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0xC8", "vmwrite rcx, rax");
}



#[test]
fn enc_vmx_vmwrite4673() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmwrite rcx, [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x79, 0x08", "vmwrite rcx, [rax]");
}



#[test]
fn enc_vmx_vmxoff4674() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxoff
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0x0F, 0x01, 0xC4", "vmxoff");
}



#[test]
fn enc_vmx_vmxon4675() {
     let mut ops = dynasmrt::x64::Assembler::new();
     dynasm!(ops
             ; vmxon [rax]
     );
     let buf = ops.finalize().unwrap();
     let hex: Vec<String> = buf.iter().map(|x| format!("0x{:02X}", *x)).collect();
     let hex: String = hex.join(", ");
     assert_eq!(hex, "0xF3, 0x0F, 0xC7, 0x30", "vmxon [rax]");
}


