
#[test]
fn abs_0() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs D(31), D(2)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, B8, E0, 5E", "abs D(31), D(2)");
}

#[test]
fn abs_1() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs d21, D(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, B8, E0, 5E", "abs d21, D(3)");
}

#[test]
fn abs_2() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(8).B16, v11.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, B9, 20, 4E", "abs V(8).B16, v11.B16");
}

#[test]
fn abs_3() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(21).B16, V(26).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, BB, 20, 4E", "abs V(21).B16, V(26).B16");
}

#[test]
fn abs_4() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(16).B8, v12.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, B9, 20, 0E", "abs V(16).B8, v12.B8");
}

#[test]
fn abs_5() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(10).B8, V(31).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, BB, 20, 0E", "abs V(10).B8, V(31).B8");
}

#[test]
fn abs_6() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(26).H8, V(6).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, B8, 60, 4E", "abs V(26).H8, V(6).H8");
}

#[test]
fn abs_7() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(22).H8, V(4).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, B8, 60, 4E", "abs V(22).H8, V(4).H8");
}

#[test]
fn abs_8() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(0).H4, v12.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, B9, 60, 0E", "abs V(0).H4, v12.H4");
}

#[test]
fn abs_9() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(4).H4, v17.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, BA, 60, 0E", "abs V(4).H4, v17.H4");
}

#[test]
fn abs_10() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs v10.S4, v24.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, BB, A0, 4E", "abs v10.S4, v24.S4");
}

#[test]
fn abs_11() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(13).S4, V(13).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AD, B9, A0, 4E", "abs V(13).S4, V(13).S4");
}

#[test]
fn abs_12() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs v20.S2, v9.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, B9, A0, 0E", "abs v20.S2, v9.S2");
}

#[test]
fn abs_13() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs v29.S2, V(30).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, BB, A0, 0E", "abs v29.S2, V(30).S2");
}

#[test]
fn abs_14() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs v30.D2, v5.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, B8, E0, 4E", "abs v30.D2, v5.D2");
}

#[test]
fn abs_15() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; abs v31.D2, v2.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, B8, E0, 4E", "abs v31.D2, v2.D2");
}

#[test]
fn adc_16() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adc w30, W(29), w9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 03, 09, 1A", "adc w30, W(29), w9");
}

#[test]
fn adc_17() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adc W(22), w29, w9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 03, 09, 1A", "adc W(22), w29, w9");
}

#[test]
fn adc_18() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adc x0, X(20), X(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 02, 19, 9A", "adc x0, X(20), X(25)");
}

#[test]
fn adc_19() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adc x21, X(21), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B5, 02, 15, 9A", "adc x21, X(21), X(21)");
}

#[test]
fn adcs_20() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adcs w5, w25, w10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 03, 0A, 3A", "adcs w5, w25, w10");
}

#[test]
fn adcs_21() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adcs W(10), W(31), W(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 03, 15, 3A", "adcs W(10), W(31), W(21)");
}

#[test]
fn adcs_22() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adcs X(14), x4, xzr
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 00, 1F, BA", "adcs X(14), x4, xzr");
}

#[test]
fn adcs_23() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adcs X(8), x29, x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 03, 0B, BA", "adcs X(8), x29, x11");
}

#[test]
fn add_24() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add W(5), w3, w21 , LSL 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 00, 15, 0B", "add W(5), w3, w21 , LSL 0");
}

#[test]
fn add_25() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add w10, w19, w8 , ASR 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 2E, 88, 0B", "add w10, w19, w8 , ASR 11");
}

#[test]
fn add_26() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add X(1), X(4), X(10) , ASR 59
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, EC, 8A, 8B", "add X(1), X(4), X(10) , ASR 59");
}

#[test]
fn add_27() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x1, x19, X(2) , LSL 60
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, F2, 02, 8B", "add x1, x19, X(2) , LSL 60");
}

#[test]
fn add_28() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add w8, w30, w29 , LSL 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 0B, 1D, 0B", "add w8, w30, w29 , LSL 2");
}

#[test]
fn add_29() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add w25, w28, w29 , SXTW 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, CF, 3D, 0B", "add w25, w28, w29 , SXTW 3");
}

#[test]
fn add_30() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x6, x6, W(11) , SXTB  1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, 84, 2B, 8B", "add x6, x6, W(11) , SXTB  1");
}

#[test]
fn add_31() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x17, x23, w13 , SXTH  0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, A2, 2D, 8B", "add x17, x23, w13 , SXTH  0");
}

#[test]
fn add_32() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x14, x2, X(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, 00, 1B, 8B", "add x14, x2, X(27)");
}

#[test]
fn add_33() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x4, x10, X(1) , SXTX 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, E9, 21, 8B", "add x4, x10, X(1) , SXTX 2");
}

#[test]
fn add_34() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add w24, w5, 2618
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, E8, 28, 11", "add w24, w5, 2618");
}

#[test]
fn add_35() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add w12, w29, 1784 , LSL 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, E3, 5B, 11", "add w12, w29, 1784 , LSL 12");
}

#[test]
fn add_36() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x20, x30, 3196
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, F3, 31, 91", "add x20, x30, 3196");
}

#[test]
fn add_37() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add x17, x1, 1152
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 00, 12, 91", "add x17, x1, 1152");
}

#[test]
fn add_38() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add D(18), d17, D(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 86, FC, 5E", "add D(18), d17, D(28)");
}

#[test]
fn add_39() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add D(20), d12, D(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "94, 85, F0, 5E", "add D(20), d12, D(16)");
}

#[test]
fn add_40() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(4).B16, V(11).B16, V(8).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 85, 28, 4E", "add V(4).B16, V(11).B16, V(8).B16");
}

#[test]
fn add_41() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(2).B16, v23.B16, v11.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 86, 2B, 4E", "add V(2).B16, v23.B16, v11.B16");
}

#[test]
fn add_42() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(21).B8, v11.B8, v15.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 85, 2F, 0E", "add V(21).B8, v11.B8, v15.B8");
}

#[test]
fn add_43() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add v5.B8, V(19).B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 86, 27, 0E", "add v5.B8, V(19).B8, V(7).B8");
}

#[test]
fn add_44() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add v28.H8, V(18).H8, v31.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 86, 7F, 4E", "add v28.H8, V(18).H8, v31.H8");
}

#[test]
fn add_45() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add v0.H8, v28.H8, v1.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 87, 61, 4E", "add v0.H8, v28.H8, v1.H8");
}

#[test]
fn add_46() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add v25.H4, V(10).H4, V(12).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 85, 6C, 0E", "add v25.H4, V(10).H4, V(12).H4");
}

#[test]
fn add_47() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add v3.H4, v14.H4, v12.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 85, 6C, 0E", "add v3.H4, v14.H4, v12.H4");
}

#[test]
fn add_48() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(27).S4, V(4).S4, v6.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9B, 84, A6, 4E", "add V(27).S4, V(4).S4, v6.S4");
}

#[test]
fn add_49() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(31).S4, v19.S4, V(2).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 86, A2, 4E", "add V(31).S4, v19.S4, V(2).S4");
}

#[test]
fn add_50() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(1).S2, v16.S2, V(18).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 86, B2, 0E", "add V(1).S2, v16.S2, V(18).S2");
}

#[test]
fn add_51() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add v18.S2, V(26).S2, V(27).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "52, 87, BB, 0E", "add v18.S2, V(26).S2, V(27).S2");
}

#[test]
fn add_52() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(6).D2, V(17).D2, v20.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 86, F4, 4E", "add V(6).D2, V(17).D2, v20.D2");
}

#[test]
fn add_53() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; add V(28).D2, V(8).D2, v31.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1C, 85, FF, 4E", "add V(28).D2, V(8).D2, v31.D2");
}

#[test]
fn addhn_54() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn V(25).B8, V(0).H8, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 40, 33, 0E", "addhn V(25).B8, V(0).H8, V(19).H8");
}

#[test]
fn addhn_55() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn V(10).B8, v4.H8, v8.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 40, 28, 0E", "addhn V(10).B8, v4.H8, v8.H8");
}

#[test]
fn addhn_56() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn v0.H4, v29.S4, V(23).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 43, 77, 0E", "addhn v0.H4, v29.S4, V(23).S4");
}

#[test]
fn addhn_57() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn V(20).H4, v24.S4, v23.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, 43, 77, 0E", "addhn V(20).H4, v24.S4, v23.S4");
}

#[test]
fn addhn_58() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn v19.S2, v9.D2, v3.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 41, A3, 0E", "addhn v19.S2, v9.D2, v3.D2");
}

#[test]
fn addhn_59() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn V(23).S2, v29.D2, V(31).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 43, BF, 0E", "addhn V(23).S2, v29.D2, V(31).D2");
}

#[test]
fn addhn2_60() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 v2.B16, v6.H8, V(10).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 40, 2A, 4E", "addhn2 v2.B16, v6.H8, V(10).H8");
}

#[test]
fn addhn2_61() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 V(0).B16, V(10).H8, v26.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 41, 3A, 4E", "addhn2 V(0).B16, V(10).H8, v26.H8");
}

#[test]
fn addhn2_62() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 v29.H8, v17.S4, V(14).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, 42, 6E, 4E", "addhn2 v29.H8, v17.S4, V(14).S4");
}

#[test]
fn addhn2_63() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 v1.H8, v1.S4, V(21).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 40, 75, 4E", "addhn2 v1.H8, v1.S4, V(21).S4");
}

#[test]
fn addhn2_64() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 v30.S4, V(21).D2, V(26).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, 42, BA, 4E", "addhn2 v30.S4, V(21).D2, V(26).D2");
}

#[test]
fn addhn2_65() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 V(10).S4, v14.D2, V(3).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 41, A3, 4E", "addhn2 V(10).S4, v14.D2, V(3).D2");
}

#[test]
fn addp_66() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp D(1), v21.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, BA, F1, 5E", "addp D(1), v21.D2");
}

#[test]
fn addp_67() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp d3, V(12).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, B9, F1, 5E", "addp d3, V(12).D2");
}

#[test]
fn addp_68() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v18.B16, v12.B16, v15.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, BD, 2F, 4E", "addp v18.B16, v12.B16, v15.B16");
}

#[test]
fn addp_69() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v12.B16, V(21).B16, V(12).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, BE, 2C, 4E", "addp v12.B16, V(21).B16, V(12).B16");
}

#[test]
fn addp_70() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(9).B8, v25.B8, v30.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, BF, 3E, 0E", "addp V(9).B8, v25.B8, v30.B8");
}

#[test]
fn addp_71() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(3).B8, V(16).B8, V(21).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, BE, 35, 0E", "addp V(3).B8, V(16).B8, V(21).B8");
}

#[test]
fn addp_72() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v22.H8, v29.H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, BF, 79, 4E", "addp v22.H8, v29.H8, v25.H8");
}

#[test]
fn addp_73() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(27).H8, V(27).H8, v10.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7B, BF, 6A, 4E", "addp V(27).H8, V(27).H8, v10.H8");
}

#[test]
fn addp_74() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(6).H4, V(20).H4, V(13).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, BE, 6D, 0E", "addp V(6).H4, V(20).H4, V(13).H4");
}

#[test]
fn addp_75() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v3.H4, V(20).H4, V(12).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, BE, 6C, 0E", "addp v3.H4, V(20).H4, V(12).H4");
}

#[test]
fn addp_76() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v6.S4, v2.S4, V(1).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, BC, A1, 4E", "addp v6.S4, v2.S4, V(1).S4");
}

#[test]
fn addp_77() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v2.S4, v8.S4, V(2).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "02, BD, A2, 4E", "addp v2.S4, v8.S4, V(2).S4");
}

#[test]
fn addp_78() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(23).S2, v6.S2, V(29).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, BC, BD, 0E", "addp V(23).S2, v6.S2, V(29).S2");
}

#[test]
fn addp_79() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v21.S2, V(26).S2, v8.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, BF, A8, 0E", "addp v21.S2, V(26).S2, v8.S2");
}

#[test]
fn addp_80() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v26.D2, V(23).D2, V(23).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, BE, F7, 4E", "addp v26.D2, V(23).D2, V(23).D2");
}

#[test]
fn addp_81() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addp v31.D2, v4.D2, v28.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, BC, FC, 4E", "addp v31.D2, v4.D2, v28.D2");
}

#[test]
fn adds_82() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds W(14), W(5), w20 , LSR 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 2C, 54, 2B", "adds W(14), W(5), w20 , LSR 11");
}

#[test]
fn adds_83() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds w13, W(31), w17 , LSR 22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 5B, 51, 2B", "adds w13, W(31), w17 , LSR 22");
}

#[test]
fn adds_84() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds x25, X(4), X(6) , LSR 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 28, 46, AB", "adds x25, X(4), X(6) , LSR 10");
}

#[test]
fn adds_85() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds xzr, x2, X(22) , LSL 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 0C, 16, AB", "adds xzr, x2, X(22) , LSL 3");
}

#[test]
fn adds_86() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds w16, w8, W(7) , SXTX 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "10, ED, 27, 2B", "adds w16, w8, W(7) , SXTX 3");
}

#[test]
fn adds_87() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds W(13), w0, w0 , UXTH 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 2C, 20, 2B", "adds W(13), w0, w0 , UXTH 3");
}

#[test]
fn adds_88() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds X(31), x7, w9 , UXTH  3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 2C, 29, AB", "adds X(31), x7, w9 , UXTH  3");
}

#[test]
fn adds_89() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds X(25), x0, w16 , UXTW  1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 44, 30, AB", "adds X(25), x0, w16 , UXTW  1");
}

#[test]
fn adds_90() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds X(27), x18, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 02, 0D, AB", "adds X(27), x18, x13");
}

#[test]
fn adds_91() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds x7, x1, X(28) , UXTX 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 60, 3C, AB", "adds x7, x1, X(28) , UXTX 0");
}

#[test]
fn adds_92() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds W(8), w20, 3428 , LSL 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 92, 75, 31", "adds W(8), w20, 3428 , LSL 12");
}

#[test]
fn adds_93() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds w1, w27, 1123 , LSL 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 8F, 51, 31", "adds w1, w27, 1123 , LSL 12");
}

#[test]
fn adds_94() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds x9, sp, 216
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 63, 03, B1", "adds x9, sp, 216");
}

#[test]
fn adds_95() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adds x15, x8, 103
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 9D, 01, B1", "adds x15, x8, 103");
}

#[test]
fn addv_96() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv B(26), v4.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, B8, 31, 4E", "addv B(26), v4.B16");
}

#[test]
fn addv_97() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv b1, V(22).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, BA, 31, 4E", "addv b1, V(22).B16");
}

#[test]
fn addv_98() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv B(13), v9.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, B9, 31, 0E", "addv B(13), v9.B8");
}

#[test]
fn addv_99() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv b10, v17.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, BA, 31, 0E", "addv b10, v17.B8");
}

#[test]
fn addv_100() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv h17, V(25).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, BB, 71, 4E", "addv h17, V(25).H8");
}

#[test]
fn addv_101() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv H(25), V(14).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, B9, 71, 4E", "addv H(25), V(14).H8");
}

#[test]
fn addv_102() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv H(0), V(31).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, BB, 71, 0E", "addv H(0), V(31).H4");
}

#[test]
fn addv_103() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv h8, v10.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, B9, 71, 0E", "addv h8, v10.H4");
}

#[test]
fn addv_104() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv S(30), v31.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, BB, B1, 4E", "addv S(30), v31.S4");
}

#[test]
fn addv_105() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; addv s15, v26.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, BB, B1, 4E", "addv s15, v26.S4");
}

#[test]
fn adr_106() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adr x0, 601617
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 70, 49, 30", "adr x0, 601617");
}

#[test]
fn adr_107() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; adr X(12), 119425
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 94, 0E, 30", "adr X(12), 119425");
}

#[test]
fn aesd_110() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aesd V(3).B16, v16.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 5A, 28, 4E", "aesd V(3).B16, v16.B16");
}

#[test]
fn aesd_111() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aesd v14.B16, v20.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 5A, 28, 4E", "aesd v14.B16, v20.B16");
}

#[test]
fn aese_112() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aese V(9).B16, V(22).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, 4A, 28, 4E", "aese V(9).B16, V(22).B16");
}

#[test]
fn aese_113() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aese V(21).B16, V(20).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 4A, 28, 4E", "aese V(21).B16, V(20).B16");
}

#[test]
fn aesimc_114() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aesimc V(5).B16, v0.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 78, 28, 4E", "aesimc V(5).B16, v0.B16");
}

#[test]
fn aesimc_115() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aesimc V(16).B16, v6.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D0, 78, 28, 4E", "aesimc V(16).B16, v6.B16");
}

#[test]
fn aesmc_116() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aesmc v27.B16, v6.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 68, 28, 4E", "aesmc v27.B16, v6.B16");
}

#[test]
fn aesmc_117() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; aesmc v10.B16, V(18).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 6A, 28, 4E", "aesmc v10.B16, V(18).B16");
}

#[test]
fn and_118() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and V(4).B16, V(15).B16, V(19).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 1D, 33, 4E", "and V(4).B16, V(15).B16, V(19).B16");
}

#[test]
fn and_119() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and v18.B16, V(1).B16, v2.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 1C, 22, 4E", "and v18.B16, V(1).B16, v2.B16");
}

#[test]
fn and_120() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and v23.B8, v7.B8, V(14).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 1C, 2E, 0E", "and v23.B8, v7.B8, V(14).B8");
}

#[test]
fn and_121() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and v8.B8, v23.B8, V(19).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 1E, 33, 0E", "and v8.B8, v23.B8, V(19).B8");
}

#[test]
fn and_122() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and w18, w24, 4294705279
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 53, 0E, 12", "and w18, w24, 4294705279");
}

#[test]
fn and_123() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and w0, w8, 3284386755
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, CD, 02, 12", "and w0, w8, 3284386755");
}

#[test]
fn and_124() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and x19, X(6), 17293822569169813503
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 74, 44, 92", "and x19, X(6), 17293822569169813503");
}

#[test]
fn and_125() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and x30, X(14), 12297829382473034410
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, F1, 01, 92", "and x30, X(14), 12297829382473034410");
}

#[test]
fn and_126() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and w17, W(21), w21 , LSL 18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B1, 4A, 15, 0A", "and w17, W(21), w21 , LSL 18");
}

#[test]
fn and_127() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and w17, W(25), W(9) , LSR 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 37, 49, 0A", "and w17, W(25), W(9) , LSR 13");
}

#[test]
fn and_128() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and X(30), x20, x0 , ROR 54
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9E, DA, C0, 8A", "and X(30), x20, x0 , ROR 54");
}

#[test]
fn and_129() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; and X(0), X(26), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 03, 13, 8A", "and X(0), X(26), X(19)");
}

#[test]
fn ands_130() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands W(27), W(18), 4227595259
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, DA, 05, 72", "ands W(27), W(18), 4227595259");
}

#[test]
fn ands_131() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands w18, W(21), 2273806215
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B2, CE, 01, 72", "ands w18, W(21), 2273806215");
}

#[test]
fn ands_132() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands X(20), X(9), 4919131752989213764
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, E1, 02, F2", "ands X(20), X(9), 4919131752989213764");
}

#[test]
fn ands_133() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands X(26), x18, 3940709804408846
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 8A, 0F, F2", "ands X(26), x18, 3940709804408846");
}

#[test]
fn ands_134() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands W(7), w9, w8 , ASR 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 69, 88, 6A", "ands W(7), w9, w8 , ASR 26");
}

#[test]
fn ands_135() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands W(31), W(28), W(26) , ASR 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 27, 9A, 6A", "ands W(31), W(28), W(26) , ASR 9");
}

#[test]
fn ands_136() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands X(30), X(18), X(30) , LSL 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 2E, 1E, EA", "ands X(30), X(18), X(30) , LSL 11");
}

#[test]
fn ands_137() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ands X(7), x11, X(16)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "67, 01, 10, EA", "ands X(7), x11, X(16)");
}

#[test]
fn asr_138() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr W(14), w3, w28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 28, DC, 1A", "asr W(14), w3, w28");
}

#[test]
fn asr_139() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr w2, w3, w15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 28, CF, 1A", "asr w2, w3, w15");
}

#[test]
fn asr_140() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr x16, X(23), x10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 2A, CA, 9A", "asr x16, X(23), x10");
}

#[test]
fn asr_141() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr X(19), X(15), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 29, D5, 9A", "asr X(19), X(15), X(21)");
}

#[test]
fn asr_142() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr w30, w16, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 7E, 14, 13", "asr w30, w16, 20");
}

#[test]
fn asr_143() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr w30, w19, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 7E, 05, 13", "asr w30, w19, 5");
}

#[test]
fn asr_144() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr x23, X(29), 23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, FF, 57, 93", "asr x23, X(29), 23");
}

#[test]
fn asr_145() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asr X(30), X(5), 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BE, FC, 46, 93", "asr X(30), X(5), 6");
}

#[test]
fn asrv_146() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asrv W(0), W(20), w26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 2A, DA, 1A", "asrv W(0), W(20), w26");
}

#[test]
fn asrv_147() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asrv w14, W(13), W(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 29, CA, 1A", "asrv w14, W(13), W(10)");
}

#[test]
fn asrv_148() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asrv x11, X(8), X(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 29, D3, 9A", "asrv x11, X(8), X(19)");
}

#[test]
fn asrv_149() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; asrv X(22), x4, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 28, D0, 9A", "asrv X(22), x4, x16");
}

#[test]
fn at_150() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; at s1e2r, x0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 78, 0C, D5", "at s1e2r, x0");
}

#[test]
fn at_151() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; at s1e3r, X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 78, 0E, D5", "at s1e3r, X(5)");
}

#[test]
fn autda_152() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autda X(7), x29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 1B, C1, DA", "autda X(7), x29");
}

#[test]
fn autda_153() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autda X(25), x24
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 1B, C1, DA", "autda X(25), x24");
}

#[test]
fn autdb_154() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autdb x7, x7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 1C, C1, DA", "autdb x7, x7");
}

#[test]
fn autdb_155() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autdb X(17), x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 1F, C1, DA", "autdb X(17), x26");
}

#[test]
fn autdza_156() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autdza x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 3B, C1, DA", "autdza x13");
}

#[test]
fn autdza_157() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autdza x18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 3B, C1, DA", "autdza x18");
}

#[test]
fn autdzb_158() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autdzb X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 3F, C1, DA", "autdzb X(9)");
}

#[test]
fn autdzb_159() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autdzb x1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 3F, C1, DA", "autdzb x1");
}

#[test]
fn autia_160() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autia X(23), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "57, 10, C1, DA", "autia X(23), x2");
}

#[test]
fn autia_161() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autia x1, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 10, C1, DA", "autia x1, x4");
}

#[test]
fn autia1716_162() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autia1716
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 21, 03, D5", "autia1716");
}

#[test]
fn autia1716_163() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autia1716
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 21, 03, D5", "autia1716");
}

#[test]
fn autiasp_164() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autiasp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 23, 03, D5", "autiasp");
}

#[test]
fn autiasp_165() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autiasp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 23, 03, D5", "autiasp");
}

#[test]
fn autiaz_166() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autiaz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 23, 03, D5", "autiaz");
}

#[test]
fn autiaz_167() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autiaz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 23, 03, D5", "autiaz");
}

#[test]
fn autib_168() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autib xzr, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 14, C1, DA", "autib xzr, x3");
}

#[test]
fn autib_169() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autib x30, x6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 14, C1, DA", "autib x30, x6");
}

#[test]
fn autib1716_170() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autib1716
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 21, 03, D5", "autib1716");
}

#[test]
fn autib1716_171() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autib1716
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 21, 03, D5", "autib1716");
}

#[test]
fn autibsp_172() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autibsp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 23, 03, D5", "autibsp");
}

#[test]
fn autibsp_173() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autibsp
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 23, 03, D5", "autibsp");
}

#[test]
fn autibz_174() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autibz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 23, 03, D5", "autibz");
}

#[test]
fn autibz_175() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autibz
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 23, 03, D5", "autibz");
}

#[test]
fn autiza_176() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autiza X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 33, C1, DA", "autiza X(12)");
}

#[test]
fn autiza_177() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autiza x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 33, C1, DA", "autiza x2");
}

#[test]
fn autizb_178() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autizb x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 37, C1, DA", "autizb x14");
}

#[test]
fn autizb_179() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; autizb x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 37, C1, DA", "autizb x2");
}

#[test]
fn b_pl_180() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; b.pl 75976
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 46, 09, 54", "b.pl 75976");
}

#[test]
fn b_nv_181() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; b.nv -188996
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, ED, E8, 54", "b.nv -188996");
}

#[test]
fn b_182() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; b 130599908
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 32, F2, 15", "b 130599908");
}

#[test]
fn b_183() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; b -52056272
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CC, 6B, 39, 17", "b -52056272");
}

#[test]
fn bcax_184() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bcax v4.B16, v20.B16, v21.B16, v9.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 26, 35, CE", "bcax v4.B16, v20.B16, v21.B16, v9.B16");
}

#[test]
fn bcax_185() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bcax V(8).B16, v15.B16, V(4).B16, V(27).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 6D, 24, CE", "bcax V(8).B16, v15.B16, V(4).B16, V(27).B16");
}

#[test]
fn bfc_186() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfc W(16), 25, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 03, 07, 33", "bfc W(16), 25, 1");
}

#[test]
fn bfc_187() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfc W(18), 20, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F2, 2B, 0C, 33", "bfc W(18), 20, 11");
}

#[test]
fn bfc_188() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfc x6, 24, 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 27, 68, B3", "bfc x6, 24, 10");
}

#[test]
fn bfc_189() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfc x19, 28, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 0B, 64, B3", "bfc x19, 28, 3");
}

#[test]
fn bfi_190() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfi w29, w4, 24, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, 18, 08, 33", "bfi w29, w4, 24, 7");
}

#[test]
fn bfi_191() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfi W(25), W(4), 25, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 08, 07, 33", "bfi W(25), W(4), 25, 3");
}

#[test]
fn bfi_192() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfi x29, x25, 15, 41
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3D, A3, 71, B3", "bfi x29, x25, 15, 41");
}

#[test]
fn bfi_193() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfi X(14), x23, 56, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 02, 48, B3", "bfi X(14), x23, 56, 1");
}

#[test]
fn bfm_194() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfm W(14), w1, 9, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 44, 09, 33", "bfm W(14), w1, 9, 17");
}

#[test]
fn bfm_195() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfm w27, w2, 10, 7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 1C, 0A, 33", "bfm w27, w2, 10, 7");
}

#[test]
fn bfm_196() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfm X(31), x28, 41, 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 4F, 69, B3", "bfm X(31), x28, 41, 19");
}

#[test]
fn bfm_197() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfm x22, X(3), 32, 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 34, 60, B3", "bfm x22, X(3), 32, 13");
}

#[test]
fn bfxil_198() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfxil W(25), w0, 7, 9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 3C, 07, 33", "bfxil W(25), w0, 7, 9");
}

#[test]
fn bfxil_199() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfxil w0, w8, 12, 20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 7D, 0C, 33", "bfxil w0, w8, 12, 20");
}

#[test]
fn bfxil_200() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfxil x0, X(25), 11, 47
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, E7, 4B, B3", "bfxil x0, X(25), 11, 47");
}

#[test]
fn bfxil_201() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bfxil X(11), x29, 50, 5
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, DB, 72, B3", "bfxil X(11), x29, 50, 5");
}

#[test]
fn bic_202() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(12).H8, 20 , LSL 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8C, B6, 00, 6F", "bic V(12).H8, 20 , LSL 8");
}

#[test]
fn bic_203() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v11.H8, 162
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4B, 94, 05, 6F", "bic v11.H8, 162");
}

#[test]
fn bic_204() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(4).H4, 116 , LSL 8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, B6, 03, 2F", "bic V(4).H4, 116 , LSL 8");
}

#[test]
fn bic_205() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v23.H4, 12 , LSL 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 95, 00, 2F", "bic v23.H4, 12 , LSL 0");
}

#[test]
fn bic_206() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v4.S4, 74
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 15, 02, 6F", "bic v4.S4, 74");
}

#[test]
fn bic_207() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v22.S4, 189 , LSL 16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 57, 05, 6F", "bic v22.S4, 189 , LSL 16");
}

#[test]
fn bic_208() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(24).S2, 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 15, 00, 2F", "bic V(24).S2, 11");
}

#[test]
fn bic_209() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(31).S2, 74
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 15, 02, 2F", "bic V(31).S2, 74");
}

#[test]
fn bic_210() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v6.B16, V(10).B16, v18.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 1D, 72, 4E", "bic v6.B16, V(10).B16, v18.B16");
}

#[test]
fn bic_211() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v13.B16, V(2).B16, v29.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4D, 1C, 7D, 4E", "bic v13.B16, V(2).B16, v29.B16");
}

#[test]
fn bic_212() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(6).B8, v10.B8, v19.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 1D, 73, 0E", "bic V(6).B8, v10.B8, v19.B8");
}

#[test]
fn bic_213() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic v4.B8, v11.B8, v5.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 1D, 65, 0E", "bic v4.B8, v11.B8, v5.B8");
}

#[test]
fn bic_214() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic w21, w2, w15 , ROR 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 78, EF, 0A", "bic w21, w2, w15 , ROR 30");
}

#[test]
fn bic_215() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic w1, W(27), W(19) , LSR 13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 37, 73, 0A", "bic w1, W(27), W(19) , LSR 13");
}

#[test]
fn bic_216() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic x15, X(3), x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 00, 30, 8A", "bic x15, X(3), x16");
}

#[test]
fn bic_217() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bic x9, x27, x21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 03, 35, 8A", "bic x9, x27, x21");
}

#[test]
fn bics_218() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bics W(7), W(25), w20 , ROR 19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 4F, F4, 6A", "bics W(7), W(25), w20 , ROR 19");
}

#[test]
fn bics_219() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bics w26, w7, w25 , LSR 25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 64, 79, 6A", "bics w26, w7, w25 , LSR 25");
}

#[test]
fn bics_220() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bics x17, xzr, x4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 03, 24, EA", "bics x17, xzr, x4");
}

#[test]
fn bics_221() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bics X(10), x21, X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AA, 02, 2A, EA", "bics X(10), x21, X(10)");
}

#[test]
fn bif_222() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bif V(12).B16, v17.B16, v12.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 1E, EC, 6E", "bif V(12).B16, v17.B16, v12.B16");
}

#[test]
fn bif_223() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bif V(29).B16, v26.B16, v23.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 1F, F7, 6E", "bif V(29).B16, v26.B16, v23.B16");
}

#[test]
fn bif_224() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bif v8.B8, v14.B8, V(29).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 1D, FD, 2E", "bif v8.B8, v14.B8, V(29).B8");
}

#[test]
fn bif_225() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bif V(4).B8, V(1).B8, V(12).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 1C, EC, 2E", "bif V(4).B8, V(1).B8, V(12).B8");
}

#[test]
fn bit_226() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bit V(16).B16, v17.B16, V(26).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 1E, BA, 6E", "bit V(16).B16, v17.B16, V(26).B16");
}

#[test]
fn bit_227() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bit V(25).B16, V(25).B16, V(27).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, 1F, BB, 6E", "bit V(25).B16, V(25).B16, V(27).B16");
}

#[test]
fn bit_228() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bit V(10).B8, V(28).B8, V(20).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8A, 1F, B4, 2E", "bit V(10).B8, V(28).B8, V(20).B8");
}

#[test]
fn bit_229() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bit V(24).B8, V(23).B8, V(7).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 1E, A7, 2E", "bit V(24).B8, V(23).B8, V(7).B8");
}

#[test]
fn bl_230() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bl -61953880
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, AA, 13, 97", "bl -61953880");
}

#[test]
fn bl_231() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bl -29544604
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D9, 4B, 8F, 97", "bl -29544604");
}

#[test]
fn blr_232() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blr X(31)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 03, 3F, D6", "blr X(31)");
}

#[test]
fn blr_233() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blr x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 01, 3F, D6", "blr x15");
}

#[test]
fn blraa_234() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blraa x13, x9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A9, 09, 3F, D7", "blraa x13, x9");
}

#[test]
fn blraa_235() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blraa x16, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 0A, 3F, D7", "blraa x16, x25");
}

#[test]
fn blraaz_236() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blraaz X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 08, 3F, D6", "blraaz X(4)");
}

#[test]
fn blraaz_237() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blraaz X(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 0B, 3F, D6", "blraaz X(26)");
}

#[test]
fn blrab_238() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blrab x3, x16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "70, 0C, 3F, D7", "blrab x3, x16");
}

#[test]
fn blrab_239() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blrab x24, x22
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 0F, 3F, D7", "blrab x24, x22");
}

#[test]
fn blrabz_240() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blrabz X(5)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 0C, 3F, D6", "blrabz X(5)");
}

#[test]
fn blrabz_241() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; blrabz X(20)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 0E, 3F, D6", "blrabz X(20)");
}

#[test]
fn br_242() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; br X(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, 01, 1F, D6", "br X(9)");
}

#[test]
fn br_243() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; br X(15)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 01, 1F, D6", "br X(15)");
}

#[test]
fn braa_244() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; braa X(10), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 09, 1F, D7", "braa X(10), x30");
}

#[test]
fn braa_245() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; braa x18, x15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 0A, 1F, D7", "braa x18, x15");
}

#[test]
fn braaz_246() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; braaz x19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 0A, 1F, D6", "braaz x19");
}

#[test]
fn braaz_247() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; braaz X(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 09, 1F, D6", "braaz X(14)");
}

#[test]
fn brab_248() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; brab X(31), x11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EB, 0F, 1F, D7", "brab X(31), x11");
}

#[test]
fn brab_249() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; brab x20, x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8E, 0E, 1F, D7", "brab x20, x14");
}

#[test]
fn brabz_250() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; brabz x8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 0D, 1F, D6", "brabz x8");
}

#[test]
fn brabz_251() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; brabz x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 0C, 1F, D6", "brabz x3");
}

#[test]
fn brk_252() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; brk 48020
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 72, 37, D4", "brk 48020");
}

#[test]
fn brk_253() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; brk 33595
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 67, 30, D4", "brk 33595");
}

#[test]
fn bsl_254() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bsl v12.B16, V(2).B16, V(0).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 1C, 60, 6E", "bsl v12.B16, V(2).B16, V(0).B16");
}

#[test]
fn bsl_255() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bsl V(30).B16, v6.B16, V(4).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 1C, 64, 6E", "bsl V(30).B16, v6.B16, V(4).B16");
}

#[test]
fn bsl_256() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bsl v21.B8, V(31).B8, v23.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 1F, 77, 2E", "bsl v21.B8, V(31).B8, v23.B8");
}

#[test]
fn bsl_257() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; bsl V(6).B8, v21.B8, v23.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 1E, 77, 2E", "bsl V(6).B8, v21.B8, v23.B8");
}

#[test]
fn cas_258() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cas W(12), W(4), [x5]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 7C, AC, 88", "cas W(12), W(4), [x5]");
}

#[test]
fn cas_259() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cas w3, w28, [x26]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 7F, A3, 88", "cas w3, w28, [x26]");
}

#[test]
fn cas_260() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cas x2, X(0), [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 7F, A2, C8", "cas x2, X(0), [x29]");
}

#[test]
fn cas_261() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cas x28, xzr, [x29]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 7F, BC, C8", "cas x28, xzr, [x29]");
}

#[test]
fn casa_262() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casa w18, W(11), [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, 7C, F2, 88", "casa w18, W(11), [x6]");
}

#[test]
fn casa_263() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casa w10, w13, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8D, 7E, EA, 88", "casa w10, w13, [x20]");
}

#[test]
fn casa_264() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casa X(19), X(11), [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 7D, F3, C8", "casa X(19), X(11), [x13]");
}

#[test]
fn casa_265() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casa X(17), X(7), [x25]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, 7F, F1, C8", "casa X(17), X(7), [x25]");
}

#[test]
fn casab_266() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casab w18, W(26), [XSP(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 7F, F2, 08", "casab w18, W(26), [XSP(31)]");
}

#[test]
fn casab_267() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casab W(18), W(11), [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, 7C, F2, 08", "casab W(18), W(11), [x0]");
}

#[test]
fn casah_268() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casah W(24), w23, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "77, 7E, F8, 48", "casah W(24), w23, [x19]");
}

#[test]
fn casah_269() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casah w7, w2, [x11]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 7D, E7, 48", "casah w7, w2, [x11]");
}

#[test]
fn casal_270() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casal w29, w3, [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "83, FD, FD, 88", "casal w29, w3, [x12]");
}

#[test]
fn casal_271() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casal w17, w16, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, FD, F1, 88", "casal w17, w16, [x9]");
}

#[test]
fn casal_272() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casal x29, x10, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, FF, FD, C8", "casal x29, x10, [x24]");
}

#[test]
fn casal_273() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casal X(10), X(10), [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, FF, EA, C8", "casal X(10), X(10), [x24]");
}

#[test]
fn casalb_274() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casalb w18, w0, [x20]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, FE, F2, 08", "casalb w18, w0, [x20]");
}

#[test]
fn casalb_275() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casalb w26, w11, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, FF, FA, 08", "casalb w26, w11, [x27]");
}

#[test]
fn casalh_276() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casalh W(27), w23, [x24]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, FF, FB, 48", "casalh W(27), w23, [x24]");
}

#[test]
fn casalh_277() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casalh W(18), W(24), [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, FE, F2, 48", "casalh W(18), W(24), [x23]");
}

#[test]
fn casb_278() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casb W(12), W(11), [x12]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 7D, AC, 08", "casb W(12), W(11), [x12]");
}

#[test]
fn casb_279() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casb w22, W(21), [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 7F, B6, 08", "casb w22, W(21), [x27]");
}

#[test]
fn cash_280() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cash w8, w21, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 7C, A8, 48", "cash w8, w21, [x4]");
}

#[test]
fn cash_281() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cash W(11), w6, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 7E, AB, 48", "cash W(11), w6, [x21]");
}

#[test]
fn casl_282() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casl W(5), w21, [x16]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, FE, A5, 88", "casl W(5), w21, [x16]");
}

#[test]
fn casl_283() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casl w16, w27, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, FE, B0, 88", "casl w16, w27, [x22]");
}

#[test]
fn casl_284() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casl X(21), x5, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, FD, B5, C8", "casl X(21), x5, [x13]");
}

#[test]
fn casl_285() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casl X(18), X(2), [x3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, FC, B2, C8", "casl X(18), X(2), [x3]");
}

#[test]
fn caslb_286() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caslb w11, w11, [x19]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, FE, AB, 08", "caslb w11, w11, [x19]");
}

#[test]
fn caslb_287() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caslb W(8), w29, [x15]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, FD, A8, 08", "caslb W(8), w29, [x15]");
}

#[test]
fn caslh_288() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caslh w22, w2, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, FF, B6, 48", "caslh w22, w2, [x27]");
}

#[test]
fn caslh_289() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caslh w30, w5, [x4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "85, FC, BE, 48", "caslh w30, w5, [x4]");
}

#[test]
fn casp_290() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casp W(28), wzr, W(16), wzr, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 7D, 3C, 08", "casp W(28), wzr, W(16), wzr, [x9]");
}

#[test]
fn casp_291() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casp w12, w13, w0, w1, [XSP(31)]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 7F, 2C, 08", "casp w12, w13, w0, w1, [XSP(31)]");
}

#[test]
fn casp_292() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casp X(28), xzr, x14, x15, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 7D, 3C, 48", "casp X(28), xzr, x14, x15, [x9]");
}

#[test]
fn casp_293() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; casp x22, x23, x4, x5, [x27]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 7F, 36, 48", "casp x22, x23, x4, x5, [x27]");
}

#[test]
fn caspa_294() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspa w28, w29, W(8), wzr, [x6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 7C, 7C, 08", "caspa w28, w29, W(8), wzr, [x6]");
}

#[test]
fn caspa_295() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspa W(8), wzr, W(2), wzr, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 7E, 68, 08", "caspa W(8), wzr, W(2), wzr, [x21]");
}

#[test]
fn caspa_296() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspa x2, x3, X(14), xzr, [x13]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 7D, 62, 48", "caspa x2, x3, X(14), xzr, [x13]");
}

#[test]
fn caspa_297() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspa X(24), xzr, x14, x15, [x21]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 7E, 78, 48", "caspa X(24), xzr, x14, x15, [x21]");
}

#[test]
fn caspal_298() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspal w12, w13, w30, wzr, [x14]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, FD, 6C, 08", "caspal w12, w13, w30, wzr, [x14]");
}

#[test]
fn caspal_299() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspal w0, w1, w0, w1, [x9]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "20, FD, 60, 08", "caspal w0, w1, w0, w1, [x9]");
}

#[test]
fn caspal_300() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspal X(2), xzr, x12, x13, [x18]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, FE, 62, 48", "caspal X(2), xzr, x12, x13, [x18]");
}

#[test]
fn caspal_301() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspal x14, x15, X(22), xzr, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, FC, 6E, 48", "caspal x14, x15, X(22), xzr, [x0]");
}

#[test]
fn caspl_302() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspl W(4), wzr, w24, w25, [x22]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, FE, 24, 08", "caspl W(4), wzr, w24, w25, [x22]");
}

#[test]
fn caspl_303() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspl W(2), wzr, w4, w5, [x23]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, FE, 22, 08", "caspl W(2), wzr, w4, w5, [x23]");
}

#[test]
fn caspl_304() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspl X(28), xzr, x22, x23, [x0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, FC, 3C, 48", "caspl X(28), xzr, x22, x23, [x0]");
}

#[test]
fn caspl_305() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; caspl x12, x13, x0, x1, [x8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, FD, 2C, 48", "caspl x12, x13, x0, x1, [x8]");
}

#[test]
fn cbnz_306() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbnz w26, 261348
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, E7, 1F, 35", "cbnz w26, 261348");
}

#[test]
fn cbnz_307() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbnz W(23), 224048
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 59, 1B, 35", "cbnz W(23), 224048");
}

#[test]
fn cbnz_308() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbnz x28, -152188
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 6C, ED, B5", "cbnz x28, -152188");
}

#[test]
fn cbnz_309() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbnz x28, -86844
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 66, F5, B5", "cbnz x28, -86844");
}

#[test]
fn cbz_310() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbz w2, 134072
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C2, 5D, 10, 34", "cbz w2, 134072");
}

#[test]
fn cbz_311() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbz W(21), -61628
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "35, 7A, F8, 34", "cbz W(21), -61628");
}

#[test]
fn cbz_312() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbz x14, -154020
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 32, ED, B4", "cbz x14, -154020");
}

#[test]
fn cbz_313() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cbz X(31), 167004
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 62, 14, B4", "cbz X(31), 167004");
}

#[test]
fn ccmn_314() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn W(7), 9, 9, nv
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, F8, 49, 3A", "ccmn W(7), 9, 9, nv");
}

#[test]
fn ccmn_315() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn W(29), 23, 11, vc
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 7B, 57, 3A", "ccmn W(29), 23, 11, vc");
}

#[test]
fn ccmn_316() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn X(26), 16, 4, hi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 8B, 50, BA", "ccmn X(26), 16, 4, hi");
}

#[test]
fn ccmn_317() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn x30, 25, 0, cc
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C0, 3B, 59, BA", "ccmn x30, 25, 0, cc");
}

#[test]
fn ccmn_318() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn W(28), W(8), 6, hi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 83, 48, 3A", "ccmn W(28), W(8), 6, hi");
}

#[test]
fn ccmn_319() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn w3, w16, 4, al
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, E0, 50, 3A", "ccmn w3, w16, 4, al");
}

#[test]
fn ccmn_320() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn x7, x28, 14, ls
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 90, 5C, BA", "ccmn x7, x28, 14, ls");
}

#[test]
fn ccmn_321() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn X(17), X(16), 9, cs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 22, 50, BA", "ccmn X(17), X(16), 9, cs");
}

#[test]
fn ccmp_322() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp w4, 11, 8, ne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, 18, 4B, 7A", "ccmp w4, 11, 8, ne");
}

#[test]
fn ccmp_323() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp w6, 31, 4, vc
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 78, 5F, 7A", "ccmp w6, 31, 4, vc");
}

#[test]
fn ccmp_324() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp x16, 31, 7, vs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 6A, 5F, FA", "ccmp x16, 31, 7, vs");
}

#[test]
fn ccmp_325() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp X(15), 30, 14, ls
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 99, 5E, FA", "ccmp X(15), 30, 14, ls");
}

#[test]
fn ccmp_326() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp W(18), W(31), 14, gt
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4E, C2, 5F, 7A", "ccmp W(18), W(31), 14, gt");
}

#[test]
fn ccmp_327() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp w13, w2, 0, vs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A0, 61, 42, 7A", "ccmp w13, w2, 0, vs");
}

#[test]
fn ccmp_328() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp X(29), x18, 2, hi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 83, 52, FA", "ccmp X(29), x18, 2, hi");
}

#[test]
fn ccmp_329() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp x21, X(2), 1, mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 42, 42, FA", "ccmp x21, X(2), 1, mi");
}

#[test]
fn cfinv_330() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cfinv
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 40, 00, D5", "cfinv");
}

#[test]
fn cfinv_331() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cfinv
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 40, 00, D5", "cfinv");
}

#[test]
fn cinc_332() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinc W(8), w23, eq
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 16, 97, 1A", "cinc W(8), w23, eq");
}

#[test]
fn cinc_333() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinc W(21), w6, hs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 34, 86, 1A", "cinc W(21), w6, hs");
}

#[test]
fn cinc_334() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinc x29, x15, hs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 35, 8F, 9A", "cinc x29, x15, hs");
}

#[test]
fn cinc_335() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinc x22, X(24), pl
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 47, 98, 9A", "cinc x22, X(24), pl");
}

#[test]
fn cinv_336() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinv W(30), W(14), mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 51, 8E, 5A", "cinv W(30), W(14), mi");
}

#[test]
fn cinv_337() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinv W(22), w4, mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "96, 50, 84, 5A", "cinv W(22), w4, mi");
}

#[test]
fn cinv_338() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinv x24, X(14), ne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 01, 8E, DA", "cinv x24, X(14), ne");
}

#[test]
fn cinv_339() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cinv X(1), x17, ne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "21, 02, 91, DA", "cinv X(1), x17, ne");
}

#[test]
fn clrex_340() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clrex
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 3F, 03, D5", "clrex");
}

#[test]
fn clrex_341() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clrex
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 3F, 03, D5", "clrex");
}

#[test]
fn cls_342() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls v24.B16, V(28).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, 4B, 20, 4E", "cls v24.B16, V(28).B16");
}

#[test]
fn cls_343() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(25).B16, v26.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 4B, 20, 4E", "cls V(25).B16, v26.B16");
}

#[test]
fn cls_344() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls v23.B8, v9.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "37, 49, 20, 0E", "cls v23.B8, v9.B8");
}

#[test]
fn cls_345() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(22).B8, v16.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, 4A, 20, 0E", "cls V(22).B8, v16.B8");
}

#[test]
fn cls_346() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(7).H8, V(15).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E7, 49, 60, 4E", "cls V(7).H8, V(15).H8");
}

#[test]
fn cls_347() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(22).H8, v29.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 4B, 60, 4E", "cls V(22).H8, v29.H8");
}

#[test]
fn cls_348() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls v14.H4, V(31).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 4B, 60, 0E", "cls v14.H4, V(31).H4");
}

#[test]
fn cls_349() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(14).H4, v11.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 49, 60, 0E", "cls V(14).H4, v11.H4");
}

#[test]
fn cls_350() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls v9.S4, v8.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 49, A0, 4E", "cls v9.S4, v8.S4");
}

#[test]
fn cls_351() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(24).S4, v21.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 4A, A0, 4E", "cls V(24).S4, v21.S4");
}

#[test]
fn cls_352() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(21).S2, v6.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, 48, A0, 0E", "cls V(21).S2, v6.S2");
}

#[test]
fn cls_353() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(22).S2, V(9).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 49, A0, 0E", "cls V(22).S2, V(9).S2");
}

#[test]
fn cls_354() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls W(13), W(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 17, C0, 5A", "cls W(13), W(25)");
}

#[test]
fn cls_355() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls w25, W(26)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 17, C0, 5A", "cls w25, W(26)");
}

#[test]
fn cls_356() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls X(27), x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 17, C0, DA", "cls X(27), x30");
}

#[test]
fn cls_357() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cls X(5), X(10)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 15, C0, DA", "cls X(5), X(10)");
}

#[test]
fn clz_358() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(24).B16, V(7).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 48, 20, 6E", "clz V(24).B16, V(7).B16");
}

#[test]
fn clz_359() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz v6.B16, V(7).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 48, 20, 6E", "clz v6.B16, V(7).B16");
}

#[test]
fn clz_360() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz v17.B8, v10.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 49, 20, 2E", "clz v17.B8, v10.B8");
}

#[test]
fn clz_361() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(15).B8, V(0).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, 48, 20, 2E", "clz V(15).B8, V(0).B8");
}

#[test]
fn clz_362() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(12).H8, v25.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 4B, 60, 6E", "clz V(12).H8, v25.H8");
}

#[test]
fn clz_363() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz v6.H8, V(19).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 4A, 60, 6E", "clz v6.H8, V(19).H8");
}

#[test]
fn clz_364() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz v31.H4, v21.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 4A, 60, 2E", "clz v31.H4, v21.H4");
}

#[test]
fn clz_365() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz v31.H4, V(18).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 4A, 60, 2E", "clz v31.H4, V(18).H4");
}

#[test]
fn clz_366() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz v4.S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "64, 49, A0, 6E", "clz v4.S4, v11.S4");
}

#[test]
fn clz_367() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(8).S4, v23.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 4A, A0, 6E", "clz V(8).S4, v23.S4");
}

#[test]
fn clz_368() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(22).S2, V(5).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 48, A0, 2E", "clz V(22).S2, V(5).S2");
}

#[test]
fn clz_369() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(17).S2, v14.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D1, 49, A0, 2E", "clz V(17).S2, v14.S2");
}

#[test]
fn clz_370() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz W(19), W(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 13, C0, 5A", "clz W(19), W(30)");
}

#[test]
fn clz_371() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz w21, W(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 10, C0, 5A", "clz w21, W(4)");
}

#[test]
fn clz_372() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz x4, x13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 11, C0, DA", "clz x4, x13");
}

#[test]
fn clz_373() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; clz X(2), X(21)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 12, C0, DA", "clz X(2), X(21)");
}

#[test]
fn cmeq_374() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq d18, D(25), d13
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "32, 8F, ED, 7E", "cmeq d18, D(25), d13");
}

#[test]
fn cmeq_375() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq D(6), D(0), d18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "06, 8C, F2, 7E", "cmeq D(6), D(0), d18");
}

#[test]
fn cmeq_376() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v19.B16, V(17).B16, V(1).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 8E, 21, 6E", "cmeq v19.B16, V(17).B16, V(1).B16");
}

#[test]
fn cmeq_377() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v27.B16, v2.B16, V(28).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 8C, 3C, 6E", "cmeq v27.B16, v2.B16, V(28).B16");
}

#[test]
fn cmeq_378() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(18).B8, V(20).B8, V(30).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 8E, 3E, 2E", "cmeq V(18).B8, V(20).B8, V(30).B8");
}

#[test]
fn cmeq_379() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v24.B8, V(11).B8, v30.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 8D, 3E, 2E", "cmeq v24.B8, V(11).B8, v30.B8");
}

#[test]
fn cmeq_380() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(15).H8, V(17).H8, v16.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 8E, 70, 6E", "cmeq V(15).H8, V(17).H8, v16.H8");
}

#[test]
fn cmeq_381() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(11).H8, v19.H8, v8.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 8E, 68, 6E", "cmeq V(11).H8, v19.H8, v8.H8");
}

#[test]
fn cmeq_382() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(2).H4, v12.H4, v21.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "82, 8D, 75, 2E", "cmeq V(2).H4, v12.H4, v21.H4");
}

#[test]
fn cmeq_383() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v5.H4, V(30).H4, V(25).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 8F, 79, 2E", "cmeq v5.H4, V(30).H4, V(25).H4");
}

#[test]
fn cmeq_384() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(6).S4, V(7).S4, v27.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 8C, BB, 6E", "cmeq V(6).S4, V(7).S4, v27.S4");
}

#[test]
fn cmeq_385() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v25.S4, V(31).S4, v29.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F9, 8F, BD, 6E", "cmeq v25.S4, V(31).S4, v29.S4");
}

#[test]
fn cmeq_386() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v0.S2, V(12).S2, V(30).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "80, 8D, BE, 2E", "cmeq v0.S2, V(12).S2, V(30).S2");
}

#[test]
fn cmeq_387() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v22.S2, v7.S2, V(26).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F6, 8C, BA, 2E", "cmeq v22.S2, v7.S2, V(26).S2");
}

#[test]
fn cmeq_388() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v29.D2, v13.D2, v27.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 8D, FB, 6E", "cmeq v29.D2, v13.D2, v27.D2");
}

#[test]
fn cmeq_389() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v8.D2, v11.D2, v27.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 8D, FB, 6E", "cmeq v8.D2, v11.D2, v27.D2");
}

#[test]
fn cmeq_390() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq d1, D(29), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 9B, E0, 5E", "cmeq d1, D(29), 0");
}

#[test]
fn cmeq_391() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq d6, d3, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "66, 98, E0, 5E", "cmeq d6, d3, 0");
}

#[test]
fn cmeq_392() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(4).B16, v13.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, 99, 20, 4E", "cmeq V(4).B16, v13.B16, 0");
}

#[test]
fn cmeq_393() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(7).B16, V(2).B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "47, 98, 20, 4E", "cmeq V(7).B16, V(2).B16, 0");
}

#[test]
fn cmeq_394() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(0).B8, V(8).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "00, 99, 20, 0E", "cmeq V(0).B8, V(8).B8, 0");
}

#[test]
fn cmeq_395() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v16.B8, V(10).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 99, 20, 0E", "cmeq v16.B8, V(10).B8, 0");
}

#[test]
fn cmeq_396() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(3).H8, v3.H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 98, 60, 4E", "cmeq V(3).H8, v3.H8, 0");
}

#[test]
fn cmeq_397() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(7).H8, v13.H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A7, 99, 60, 4E", "cmeq V(7).H8, v13.H8, 0");
}

#[test]
fn cmeq_398() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(26).H4, v30.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, 9B, 60, 0E", "cmeq V(26).H4, v30.H4, 0");
}

#[test]
fn cmeq_399() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v2.H4, v2.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "42, 98, 60, 0E", "cmeq v2.H4, v2.H4, 0");
}

#[test]
fn cmeq_400() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v26.S4, v19.S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 9A, A0, 4E", "cmeq v26.S4, v19.S4, 0");
}

#[test]
fn cmeq_401() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(14).S4, v5.S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, 98, A0, 4E", "cmeq V(14).S4, v5.S4, 0");
}

#[test]
fn cmeq_402() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(5).S2, v8.S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 99, A0, 0E", "cmeq V(5).S2, v8.S2, 0");
}

#[test]
fn cmeq_403() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v1.S2, V(29).S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 9B, A0, 0E", "cmeq v1.S2, V(29).S2, 0");
}

#[test]
fn cmeq_404() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(31).D2, V(0).D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 98, E0, 4E", "cmeq V(31).D2, V(0).D2, 0");
}

#[test]
fn cmeq_405() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v24.D2, V(9).D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, 99, E0, 4E", "cmeq v24.D2, V(9).D2, 0");
}

#[test]
fn cmge_406() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge D(18), D(12), d11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "92, 3D, EB, 5E", "cmge D(18), D(12), d11");
}

#[test]
fn cmge_407() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge D(10), D(27), d7
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 3F, E7, 5E", "cmge D(10), D(27), d7");
}

#[test]
fn cmge_408() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v31.B16, V(30).B16, v16.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 3F, 30, 4E", "cmge v31.B16, V(30).B16, v16.B16");
}

#[test]
fn cmge_409() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(14).B16, v1.B16, v13.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 3C, 2D, 4E", "cmge V(14).B16, v1.B16, v13.B16");
}

#[test]
fn cmge_410() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v24.B8, v7.B8, v2.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F8, 3C, 22, 0E", "cmge v24.B8, v7.B8, v2.B8");
}

#[test]
fn cmge_411() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v29.B8, V(5).B8, V(15).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 3C, 2F, 0E", "cmge v29.B8, V(5).B8, V(15).B8");
}

#[test]
fn cmge_412() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(15).H8, v10.H8, V(4).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4F, 3D, 64, 4E", "cmge V(15).H8, v10.H8, V(4).H8");
}

#[test]
fn cmge_413() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v10.H8, v27.H8, V(21).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6A, 3F, 75, 4E", "cmge v10.H8, v27.H8, V(21).H8");
}

#[test]
fn cmge_414() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(20).H4, V(2).H4, v29.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 3C, 7D, 0E", "cmge V(20).H4, V(2).H4, v29.H4");
}

#[test]
fn cmge_415() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v27.H4, V(22).H4, v18.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 3E, 72, 0E", "cmge v27.H4, V(22).H4, v18.H4");
}

#[test]
fn cmge_416() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v17.S4, v28.S4, v0.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 3F, A0, 4E", "cmge v17.S4, v28.S4, v0.S4");
}

#[test]
fn cmge_417() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v3.S4, v11.S4, V(12).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "63, 3D, AC, 4E", "cmge v3.S4, v11.S4, V(12).S4");
}

#[test]
fn cmge_418() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v26.S2, V(12).S2, V(27).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9A, 3D, BB, 0E", "cmge v26.S2, V(12).S2, V(27).S2");
}

#[test]
fn cmge_419() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(13).S2, V(7).S2, V(8).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 3C, A8, 0E", "cmge V(13).S2, V(7).S2, V(8).S2");
}

#[test]
fn cmge_420() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v2.D2, V(15).D2, v0.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 3D, E0, 4E", "cmge v2.D2, V(15).D2, v0.D2");
}

#[test]
fn cmge_421() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(6).D2, v20.D2, v14.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 3E, EE, 4E", "cmge V(6).D2, v20.D2, v14.D2");
}

#[test]
fn cmge_422() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge D(3), D(0), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 88, E0, 7E", "cmge D(3), D(0), 0");
}

#[test]
fn cmge_423() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge D(18), d8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 89, E0, 7E", "cmge D(18), d8, 0");
}

#[test]
fn cmge_424() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v6.B16, v20.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "86, 8A, 20, 6E", "cmge v6.B16, v20.B16, 0");
}

#[test]
fn cmge_425() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v11.B16, v12.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 89, 20, 6E", "cmge v11.B16, v12.B16, 0");
}

#[test]
fn cmge_426() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v10.B8, V(1).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2A, 88, 20, 2E", "cmge v10.B8, V(1).B8, 0");
}

#[test]
fn cmge_427() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v26.B8, V(11).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7A, 89, 20, 2E", "cmge v26.B8, V(11).B8, 0");
}

#[test]
fn cmge_428() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v31.H8, v10.H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 89, 60, 6E", "cmge v31.H8, v10.H8, 0");
}

#[test]
fn cmge_429() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(29).H8, V(19).H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 8A, 60, 6E", "cmge V(29).H8, V(19).H8, 0");
}

#[test]
fn cmge_430() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v31.H4, v25.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 8B, 60, 2E", "cmge v31.H4, v25.H4, 0");
}

#[test]
fn cmge_431() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(29).H4, v27.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 8B, 60, 2E", "cmge V(29).H4, v27.H4, 0");
}

#[test]
fn cmge_432() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v30.S4, V(14).S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 89, A0, 6E", "cmge v30.S4, V(14).S4, 0");
}

#[test]
fn cmge_433() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(4).S4, V(9).S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 89, A0, 6E", "cmge V(4).S4, V(9).S4, 0");
}

#[test]
fn cmge_434() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v30.S2, v6.S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 88, A0, 2E", "cmge v30.S2, v6.S2, 0");
}

#[test]
fn cmge_435() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(20).S2, V(9).S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 89, A0, 2E", "cmge V(20).S2, V(9).S2, 0");
}

#[test]
fn cmge_436() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v24.D2, v22.D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 8A, E0, 6E", "cmge v24.D2, v22.D2, 0");
}

#[test]
fn cmge_437() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v20.D2, v9.D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "34, 89, E0, 6E", "cmge v20.D2, v9.D2, 0");
}

#[test]
fn cmgt_438() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt d19, d27, d16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "73, 37, F0, 5E", "cmgt d19, d27, d16");
}

#[test]
fn cmgt_439() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt d4, D(30), d27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C4, 37, FB, 5E", "cmgt d4, D(30), d27");
}

#[test]
fn cmgt_440() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v28.B16, v6.B16, v25.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 34, 39, 4E", "cmgt v28.B16, v6.B16, v25.B16");
}

#[test]
fn cmgt_441() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(29).B16, V(18).B16, V(19).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 36, 33, 4E", "cmgt V(29).B16, V(18).B16, V(19).B16");
}

#[test]
fn cmgt_442() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(26).B8, V(2).B8, v9.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 34, 29, 0E", "cmgt V(26).B8, V(2).B8, v9.B8");
}

#[test]
fn cmgt_443() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(4).B8, v18.B8, V(20).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 36, 34, 0E", "cmgt V(4).B8, v18.B8, V(20).B8");
}

#[test]
fn cmgt_444() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v28.H8, V(26).H8, V(17).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 37, 71, 4E", "cmgt v28.H8, V(26).H8, V(17).H8");
}

#[test]
fn cmgt_445() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(23).H8, v4.H8, v4.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 34, 64, 4E", "cmgt V(23).H8, v4.H8, v4.H8");
}

#[test]
fn cmgt_446() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(28).H4, v25.H4, v16.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 37, 70, 0E", "cmgt V(28).H4, v25.H4, v16.H4");
}

#[test]
fn cmgt_447() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(29).H4, V(27).H4, V(8).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 37, 68, 0E", "cmgt V(29).H4, V(27).H4, V(8).H4");
}

#[test]
fn cmgt_448() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(1).S4, v10.S4, v10.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "41, 35, AA, 4E", "cmgt V(1).S4, v10.S4, v10.S4");
}

#[test]
fn cmgt_449() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(19).S4, v13.S4, V(18).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B3, 35, B2, 4E", "cmgt V(19).S4, v13.S4, V(18).S4");
}

#[test]
fn cmgt_450() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v28.S2, V(11).S2, V(13).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 35, AD, 0E", "cmgt v28.S2, V(11).S2, V(13).S2");
}

#[test]
fn cmgt_451() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v17.S2, V(19).S2, v22.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 36, B6, 0E", "cmgt v17.S2, V(19).S2, v22.S2");
}

#[test]
fn cmgt_452() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(17).D2, v3.D2, V(28).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 34, FC, 4E", "cmgt V(17).D2, v3.D2, V(28).D2");
}

#[test]
fn cmgt_453() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(2).D2, v27.D2, V(10).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "62, 37, EA, 4E", "cmgt V(2).D2, v27.D2, V(10).D2");
}

#[test]
fn cmgt_454() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt d27, d16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 8A, E0, 5E", "cmgt d27, d16, 0");
}

#[test]
fn cmgt_455() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt D(19), D(22), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D3, 8A, E0, 5E", "cmgt D(19), D(22), 0");
}

#[test]
fn cmgt_456() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(11).B16, v3.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 88, 20, 4E", "cmgt V(11).B16, v3.B16, 0");
}

#[test]
fn cmgt_457() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v0.B16, v26.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "40, 8B, 20, 4E", "cmgt v0.B16, v26.B16, 0");
}

#[test]
fn cmgt_458() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v11.B8, v3.B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6B, 88, 20, 0E", "cmgt v11.B8, v3.B8, 0");
}

#[test]
fn cmgt_459() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v9.B8, V(20).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 8A, 20, 0E", "cmgt v9.B8, V(20).B8, 0");
}

#[test]
fn cmgt_460() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v31.H8, v5.H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 88, 60, 4E", "cmgt v31.H8, v5.H8, 0");
}

#[test]
fn cmgt_461() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(6).H8, V(10).H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "46, 89, 60, 4E", "cmgt V(6).H8, V(10).H8, 0");
}

#[test]
fn cmgt_462() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v28.H4, v11.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, 89, 60, 0E", "cmgt v28.H4, v11.H4, 0");
}

#[test]
fn cmgt_463() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v15.H4, V(14).H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 89, 60, 0E", "cmgt v15.H4, V(14).H4, 0");
}

#[test]
fn cmgt_464() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v22.S4, V(22).S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, 8A, A0, 4E", "cmgt v22.S4, V(22).S4, 0");
}

#[test]
fn cmgt_465() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(12).S4, v1.S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, 88, A0, 4E", "cmgt V(12).S4, v1.S4, 0");
}

#[test]
fn cmgt_466() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v15.S2, v5.S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 88, A0, 0E", "cmgt v15.S2, v5.S2, 0");
}

#[test]
fn cmgt_467() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(17).S2, V(9).S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "31, 89, A0, 0E", "cmgt V(17).S2, V(9).S2, 0");
}

#[test]
fn cmgt_468() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v8.D2, v6.D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 88, E0, 4E", "cmgt v8.D2, v6.D2, 0");
}

#[test]
fn cmgt_469() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(28).D2, V(4).D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9C, 88, E0, 4E", "cmgt V(28).D2, V(4).D2, 0");
}

#[test]
fn cmhi_470() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi d27, D(10), d29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, 35, FD, 7E", "cmhi d27, D(10), d29");
}

#[test]
fn cmhi_471() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi d12, d8, d23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 35, F7, 7E", "cmhi d12, d8, d23");
}

#[test]
fn cmhi_472() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v25.B16, v16.B16, v10.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, 36, 2A, 6E", "cmhi v25.B16, v16.B16, v10.B16");
}

#[test]
fn cmhi_473() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v20.B16, v19.B16, v2.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 36, 22, 6E", "cmhi v20.B16, v19.B16, v2.B16");
}

#[test]
fn cmhi_474() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v18.B8, v19.B8, v21.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 36, 35, 2E", "cmhi v18.B8, v19.B8, v21.B8");
}

#[test]
fn cmhi_475() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(25).B8, V(12).B8, V(9).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 35, 29, 2E", "cmhi V(25).B8, V(12).B8, V(9).B8");
}

#[test]
fn cmhi_476() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(12).H8, v24.H8, V(25).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0C, 37, 79, 6E", "cmhi V(12).H8, v24.H8, V(25).H8");
}

#[test]
fn cmhi_477() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v5.H8, V(14).H8, V(31).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, 35, 7F, 6E", "cmhi v5.H8, V(14).H8, V(31).H8");
}

#[test]
fn cmhi_478() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(9).H4, v17.H4, V(6).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 36, 66, 2E", "cmhi V(9).H4, v17.H4, V(6).H4");
}

#[test]
fn cmhi_479() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v11.H4, V(28).H4, v9.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 37, 69, 2E", "cmhi v11.H4, V(28).H4, v9.H4");
}

#[test]
fn cmhi_480() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(20).S4, V(11).S4, V(19).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 35, B3, 6E", "cmhi V(20).S4, V(11).S4, V(19).S4");
}

#[test]
fn cmhi_481() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(10).S4, V(7).S4, v11.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 34, AB, 6E", "cmhi V(10).S4, V(7).S4, v11.S4");
}

#[test]
fn cmhi_482() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(11).S2, v17.S2, V(4).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 36, A4, 2E", "cmhi V(11).S2, v17.S2, V(4).S2");
}

#[test]
fn cmhi_483() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v15.S2, V(28).S2, V(29).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8F, 37, BD, 2E", "cmhi v15.S2, V(28).S2, V(29).S2");
}

#[test]
fn cmhi_484() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v14.D2, v1.D2, V(26).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2E, 34, FA, 6E", "cmhi v14.D2, v1.D2, V(26).D2");
}

#[test]
fn cmhi_485() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v18.D2, v22.D2, V(0).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, 36, E0, 6E", "cmhi v18.D2, v22.D2, V(0).D2");
}

#[test]
fn cmhs_486() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs d19, d26, D(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, 3F, EC, 7E", "cmhs d19, d26, D(12)");
}

#[test]
fn cmhs_487() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs D(3), D(15), d6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 3D, E6, 7E", "cmhs D(3), D(15), d6");
}

#[test]
fn cmhs_488() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v5.B16, v25.B16, v1.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "25, 3F, 21, 6E", "cmhs v5.B16, v25.B16, v1.B16");
}

#[test]
fn cmhs_489() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v7.B16, V(8).B16, V(30).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "07, 3D, 3E, 6E", "cmhs v7.B16, V(8).B16, V(30).B16");
}

#[test]
fn cmhs_490() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(1).B8, v7.B8, V(1).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, 3C, 21, 2E", "cmhs V(1).B8, v7.B8, V(1).B8");
}

#[test]
fn cmhs_491() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(26).B8, V(18).B8, V(23).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5A, 3E, 37, 2E", "cmhs V(26).B8, V(18).B8, V(23).B8");
}

#[test]
fn cmhs_492() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v29.H8, v3.H8, V(5).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7D, 3C, 65, 6E", "cmhs v29.H8, v3.H8, V(5).H8");
}

#[test]
fn cmhs_493() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(4).H8, V(15).H8, v20.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 3D, 74, 6E", "cmhs V(4).H8, V(15).H8, v20.H8");
}

#[test]
fn cmhs_494() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v9.H4, V(0).H4, v13.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "09, 3C, 6D, 2E", "cmhs v9.H4, V(0).H4, v13.H4");
}

#[test]
fn cmhs_495() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(1).H4, V(6).H4, v24.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 3C, 78, 2E", "cmhs V(1).H4, V(6).H4, v24.H4");
}

#[test]
fn cmhs_496() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(23).S4, v8.S4, V(22).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 3D, B6, 6E", "cmhs V(23).S4, v8.S4, V(22).S4");
}

#[test]
fn cmhs_497() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(4).S4, v25.S4, V(29).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "24, 3F, BD, 6E", "cmhs V(4).S4, v25.S4, V(29).S4");
}

#[test]
fn cmhs_498() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v13.S2, V(9).S2, V(11).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 3D, AB, 2E", "cmhs v13.S2, V(9).S2, V(11).S2");
}

#[test]
fn cmhs_499() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(13).S2, v16.S2, v21.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0D, 3E, B5, 2E", "cmhs V(13).S2, v16.S2, v21.S2");
}

#[test]
fn cmhs_500() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v21.D2, v20.D2, V(3).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "95, 3E, E3, 6E", "cmhs v21.D2, v20.D2, V(3).D2");
}

#[test]
fn cmhs_501() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(26).D2, V(9).D2, V(21).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 3D, F5, 6E", "cmhs V(26).D2, V(9).D2, V(21).D2");
}

#[test]
fn cmle_502() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle d22, D(29), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B6, 9B, E0, 7E", "cmle d22, D(29), 0");
}

#[test]
fn cmle_503() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle d9, d3, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, 98, E0, 7E", "cmle d9, d3, 0");
}

#[test]
fn cmle_504() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(3).B16, v18.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 9A, 20, 6E", "cmle V(3).B16, v18.B16, 0");
}

#[test]
fn cmle_505() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v10.B16, v24.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 9B, 20, 6E", "cmle v10.B16, v24.B16, 0");
}

#[test]
fn cmle_506() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v5.B8, V(15).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 99, 20, 2E", "cmle v5.B8, V(15).B8, 0");
}

#[test]
fn cmle_507() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v0.B8, v19.B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 9A, 20, 2E", "cmle v0.B8, v19.B8, 0");
}

#[test]
fn cmle_508() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v8.H8, V(24).H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 9B, 60, 6E", "cmle v8.H8, V(24).H8, 0");
}

#[test]
fn cmle_509() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(1).H8, V(11).H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 99, 60, 6E", "cmle V(1).H8, V(11).H8, 0");
}

#[test]
fn cmle_510() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v17.H4, v7.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 98, 60, 2E", "cmle v17.H4, v7.H4, 0");
}

#[test]
fn cmle_511() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v30.H4, v22.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DE, 9A, 60, 2E", "cmle v30.H4, v22.H4, 0");
}

#[test]
fn cmle_512() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(30).S4, V(16).S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 9A, A0, 6E", "cmle V(30).S4, V(16).S4, 0");
}

#[test]
fn cmle_513() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v13.S4, V(15).S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 99, A0, 6E", "cmle v13.S4, V(15).S4, 0");
}

#[test]
fn cmle_514() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(1).S2, V(8).S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "01, 99, A0, 2E", "cmle V(1).S2, V(8).S2, 0");
}

#[test]
fn cmle_515() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(6).S2, V(21).S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, 9A, A0, 2E", "cmle V(6).S2, V(21).S2, 0");
}

#[test]
fn cmle_516() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v31.D2, V(18).D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 9A, E0, 6E", "cmle v31.D2, V(18).D2, 0");
}

#[test]
fn cmle_517() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v17.D2, v27.D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 9B, E0, 6E", "cmle v17.D2, v27.D2, 0");
}

#[test]
fn cmlt_518() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt D(26), D(14), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, A9, E0, 5E", "cmlt D(26), D(14), 0");
}

#[test]
fn cmlt_519() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt d15, D(5), 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, A8, E0, 5E", "cmlt d15, D(5), 0");
}

#[test]
fn cmlt_520() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v18.B16, v6.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, A8, 20, 4E", "cmlt v18.B16, v6.B16, 0");
}

#[test]
fn cmlt_521() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(25).B16, v20.B16, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, AA, 20, 4E", "cmlt V(25).B16, v20.B16, 0");
}

#[test]
fn cmlt_522() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v17.B8, V(23).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, AA, 20, 0E", "cmlt v17.B8, V(23).B8, 0");
}

#[test]
fn cmlt_523() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v27.B8, V(25).B8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, AB, 20, 0E", "cmlt v27.B8, V(25).B8, 0");
}

#[test]
fn cmlt_524() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(19).H8, v26.H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AB, 60, 4E", "cmlt V(19).H8, v26.H8, 0");
}

#[test]
fn cmlt_525() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(26).H8, v22.H8, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DA, AA, 60, 4E", "cmlt V(26).H8, v22.H8, 0");
}

#[test]
fn cmlt_526() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(23).H4, v15.H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, A9, 60, 0E", "cmlt V(23).H4, v15.H4, 0");
}

#[test]
fn cmlt_527() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(22).H4, V(11).H4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, A9, 60, 0E", "cmlt V(22).H4, V(11).H4, 0");
}

#[test]
fn cmlt_528() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v17.S4, v3.S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, A8, A0, 4E", "cmlt v17.S4, v3.S4, 0");
}

#[test]
fn cmlt_529() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v24.S4, v8.S4, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "18, A9, A0, 4E", "cmlt v24.S4, v8.S4, 0");
}

#[test]
fn cmlt_530() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(6).S2, v14.S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C6, A9, A0, 0E", "cmlt V(6).S2, v14.S2, 0");
}

#[test]
fn cmlt_531() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(20).S2, V(0).S2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "14, A8, A0, 0E", "cmlt V(20).S2, V(0).S2, 0");
}

#[test]
fn cmlt_532() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v19.D2, V(26).D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "53, AB, E0, 4E", "cmlt v19.D2, V(26).D2, 0");
}

#[test]
fn cmlt_533() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(29).D2, v21.D2, 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, AA, E0, 4E", "cmlt V(29).D2, v21.D2, 0");
}

#[test]
fn cmn_534() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w17, W(24) , LSR 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 2E, 58, 2B", "cmn w17, W(24) , LSR 11");
}

#[test]
fn cmn_535() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w11, W(30) , ASR 10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 29, 9E, 2B", "cmn w11, W(30) , ASR 10");
}

#[test]
fn cmn_536() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn X(18), x2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 02, 02, AB", "cmn X(18), x2");
}

#[test]
fn cmn_537() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn X(3), X(4)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 00, 04, AB", "cmn X(3), X(4)");
}

#[test]
fn cmn_538() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w12, w4 , SXTX 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, E9, 24, 2B", "cmn w12, w4 , SXTX 2");
}

#[test]
fn cmn_539() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w26, w12 , SXTH 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, AB, 2C, 2B", "cmn w26, w12 , SXTH 2");
}

#[test]
fn cmn_540() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x20, w17, SXTH
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, A2, 31, AB", "cmn x20, w17, SXTH");
}

#[test]
fn cmn_541() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x27, w19, UXTB
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 03, 33, AB", "cmn x27, w19, UXTB");
}

#[test]
fn cmn_542() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x6, x25
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 00, 19, AB", "cmn x6, x25");
}

#[test]
fn cmn_543() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x19, X(29) , LSL 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 0A, 1D, AB", "cmn x19, X(29) , LSL 2");
}

#[test]
fn cmn_544() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w11, 502
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, D9, 07, 31", "cmn w11, 502");
}

#[test]
fn cmn_545() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w9, 155
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 6D, 02, 31", "cmn w9, 155");
}

#[test]
fn cmn_546() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x13, 3717 , LSL 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 15, 7A, B1", "cmn x13, 3717 , LSL 12");
}

#[test]
fn cmn_547() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x17, 3869
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 76, 3C, B1", "cmn x17, 3869");
}

#[test]
fn cmp_548() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp w14, w29 , ASR 29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 75, 9D, 6B", "cmp w14, w29 , ASR 29");
}

#[test]
fn cmp_549() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp W(30), W(14) , LSL 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 33, 0E, 6B", "cmp W(30), W(14) , LSL 12");
}

#[test]
fn cmp_550() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x27, x30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 03, 1E, EB", "cmp x27, x30");
}

#[test]
fn cmp_551() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp X(16), X(26) , ASR 26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 6A, 9A, EB", "cmp X(16), X(26) , ASR 26");
}

#[test]
fn cmp_552() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp w28, w2 , UXTB 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 13, 22, 6B", "cmp w28, w2 , UXTB 4");
}

#[test]
fn cmp_553() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp w8, w16 , SXTH 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, A9, 30, 6B", "cmp w8, w16 , SXTH 2");
}

#[test]
fn cmp_554() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x20, W(20), UXTW
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 42, 34, EB", "cmp x20, W(20), UXTW");
}

#[test]
fn cmp_555() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x18, w13, UXTH  2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 2A, 2D, EB", "cmp x18, w13, UXTH  2");
}

#[test]
fn cmp_556() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x30, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 03, 1B, EB", "cmp x30, x27");
}

#[test]
fn cmp_557() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x14, X(30) , UXTX 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, 69, 3E, EB", "cmp x14, X(30) , UXTX 2");
}

#[test]
fn cmp_558() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp w26, 155 , LSL 12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 6F, 42, 71", "cmp w26, 155 , LSL 12");
}

#[test]
fn cmp_559() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp w15, 130
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 09, 02, 71", "cmp w15, 130");
}

#[test]
fn cmp_560() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x16, 2378 , LSL 0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 2A, 25, F1", "cmp x16, 2378 , LSL 0");
}

#[test]
fn cmp_561() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmp x12, 3416
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 61, 35, F1", "cmp x12, 3416");
}

#[test]
fn cmtst_562() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst D(18), D(8), D(29)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 8D, FD, 5E", "cmtst D(18), D(8), D(29)");
}

#[test]
fn cmtst_563() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst d2, d29, D(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 8F, ED, 5E", "cmtst d2, d29, D(13)");
}

#[test]
fn cmtst_564() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(17).B16, V(11).B16, V(13).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 8D, 2D, 4E", "cmtst V(17).B16, V(11).B16, V(13).B16");
}

#[test]
fn cmtst_565() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(12).B16, V(26).B16, V(1).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 8F, 21, 4E", "cmtst V(12).B16, V(26).B16, V(1).B16");
}

#[test]
fn cmtst_566() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(29).B8, v18.B8, V(24).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 8E, 38, 0E", "cmtst V(29).B8, v18.B8, V(24).B8");
}

#[test]
fn cmtst_567() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v25.B8, V(12).B8, v6.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 8D, 26, 0E", "cmtst v25.B8, V(12).B8, v6.B8");
}

#[test]
fn cmtst_568() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v22.H8, V(17).H8, V(26).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 8E, 7A, 4E", "cmtst v22.H8, V(17).H8, V(26).H8");
}

#[test]
fn cmtst_569() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(28).H8, v21.H8, v19.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BC, 8E, 73, 4E", "cmtst V(28).H8, v21.H8, v19.H8");
}

#[test]
fn cmtst_570() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(2).H4, V(31).H4, V(6).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 8F, 66, 0E", "cmtst V(2).H4, V(31).H4, V(6).H4");
}

#[test]
fn cmtst_571() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(26).H4, V(25).H4, V(10).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 8F, 6A, 0E", "cmtst V(26).H4, V(25).H4, V(10).H4");
}

#[test]
fn cmtst_572() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v6.S4, v15.S4, v30.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 8D, BE, 4E", "cmtst v6.S4, v15.S4, v30.S4");
}

#[test]
fn cmtst_573() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(17).S4, v0.S4, v16.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 8C, B0, 4E", "cmtst V(17).S4, v0.S4, v16.S4");
}

#[test]
fn cmtst_574() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v30.S2, v10.S2, V(17).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5E, 8D, B1, 0E", "cmtst v30.S2, v10.S2, V(17).S2");
}

#[test]
fn cmtst_575() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(20).S2, v11.S2, v26.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, 8D, BA, 0E", "cmtst V(20).S2, v11.S2, v26.S2");
}

#[test]
fn cmtst_576() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(22).D2, v25.D2, V(14).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, 8F, EE, 4E", "cmtst V(22).D2, v25.D2, V(14).D2");
}

#[test]
fn cmtst_577() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v4.D2, v4.D2, V(27).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "84, 8C, FB, 4E", "cmtst v4.D2, v4.D2, V(27).D2");
}

#[test]
fn cneg_578() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cneg W(23), w4, hs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "97, 34, 84, 5A", "cneg W(23), w4, hs");
}

#[test]
fn cneg_579() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cneg w15, w19, ne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6F, 06, 93, 5A", "cneg w15, w19, ne");
}

#[test]
fn cneg_580() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cneg x30, x15, eq
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FE, 15, 8F, DA", "cneg x30, x15, eq");
}

#[test]
fn cneg_581() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cneg x11, x16, lt
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0B, A6, 90, DA", "cneg x11, x16, lt");
}

#[test]
fn cnt_582() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cnt V(12).B16, V(26).B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4C, 5B, 20, 4E", "cnt V(12).B16, V(26).B16");
}

#[test]
fn cnt_583() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cnt V(28).B16, v25.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, 5B, 20, 4E", "cnt V(28).B16, v25.B16");
}

#[test]
fn cnt_584() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cnt V(15).B8, v5.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 58, 20, 0E", "cnt V(15).B8, v5.B8");
}

#[test]
fn cnt_585() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cnt V(13).B8, v30.B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 5B, 20, 0E", "cnt V(13).B8, v30.B8");
}

#[test]
fn crc32b_586() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32b W(4), W(18), W(19)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, 42, D3, 1A", "crc32b W(4), W(18), W(19)");
}

#[test]
fn crc32b_587() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32b w27, w15, w21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 41, D5, 1A", "crc32b w27, w15, w21");
}

#[test]
fn crc32cb_588() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cb w14, w23, w20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EE, 52, D4, 1A", "crc32cb w14, w23, w20");
}

#[test]
fn crc32cb_589() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cb W(24), W(3), w11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, 50, CB, 1A", "crc32cb W(24), W(3), w11");
}

#[test]
fn crc32ch_590() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32ch W(17), w26, w1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "51, 57, C1, 1A", "crc32ch W(17), w26, w1");
}

#[test]
fn crc32ch_591() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32ch w0, W(31), w29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 57, DD, 1A", "crc32ch w0, W(31), w29");
}

#[test]
fn crc32cw_592() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cw w14, w11, W(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 59, C6, 1A", "crc32cw w14, w11, W(6)");
}

#[test]
fn crc32cw_593() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cw w17, w27, wzr
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 5B, DF, 1A", "crc32cw w17, w27, wzr");
}

#[test]
fn crc32cx_594() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cx W(9), w2, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, 5C, D8, 9A", "crc32cx W(9), w2, X(24)");
}

#[test]
fn crc32cx_595() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cx w1, w5, X(12)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 5C, CC, 9A", "crc32cx w1, w5, X(12)");
}

#[test]
fn crc32h_596() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32h w30, w24, W(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, 47, CD, 1A", "crc32h w30, w24, W(13)");
}

#[test]
fn crc32h_597() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32h w23, W(14), W(9)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D7, 45, C9, 1A", "crc32h w23, W(14), W(9)");
}

#[test]
fn crc32w_598() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32w W(29), w18, w9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, 4A, C9, 1A", "crc32w W(29), w18, w9");
}

#[test]
fn crc32w_599() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32w w4, w7, w3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 48, C3, 1A", "crc32w w4, w7, w3");
}

#[test]
fn crc32x_600() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32x W(13), w6, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CD, 4C, D7, 9A", "crc32x W(13), w6, X(23)");
}

#[test]
fn crc32x_601() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; crc32x w12, W(21), x14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AC, 4E, CE, 9A", "crc32x w12, W(21), x14");
}

#[test]
fn csdb_602() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csdb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 22, 03, D5", "csdb");
}

#[test]
fn csdb_603() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csdb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 22, 03, D5", "csdb");
}

#[test]
fn csel_604() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csel w10, w8, w23, mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0A, 41, 97, 1A", "csel w10, w8, w23, mi");
}

#[test]
fn csel_605() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csel W(27), w9, W(17), lo
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3B, 31, 91, 1A", "csel W(27), w9, W(17), lo");
}

#[test]
fn csel_606() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csel x19, x7, x17, pl
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 50, 91, 9A", "csel x19, x7, x17, pl");
}

#[test]
fn csel_607() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csel x16, x12, X(3), vs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "90, 61, 83, 9A", "csel x16, x12, X(3), vs");
}

#[test]
fn cset_608() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cset W(17), lo
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F1, 27, 9F, 1A", "cset W(17), lo");
}

#[test]
fn cset_609() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cset w27, mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FB, 57, 9F, 1A", "cset w27, mi");
}

#[test]
fn cset_610() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cset x0, ls
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 87, 9F, 9A", "cset x0, ls");
}

#[test]
fn cset_611() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; cset X(31), mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 57, 9F, 9A", "cset X(31), mi");
}

#[test]
fn csetm_612() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csetm w9, mi
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E9, 53, 9F, 5A", "csetm w9, mi");
}

#[test]
fn csetm_613() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csetm W(2), eq
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 13, 9F, 5A", "csetm W(2), eq");
}

#[test]
fn csetm_614() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csetm X(12), vc
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 63, 9F, DA", "csetm X(12), vc");
}

#[test]
fn csetm_615() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csetm X(6), eq
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E6, 13, 9F, DA", "csetm X(6), eq");
}

#[test]
fn csinc_616() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinc w23, W(21), W(19), vc
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B7, 76, 93, 1A", "csinc w23, W(21), W(19), vc");
}

#[test]
fn csinc_617() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinc W(25), w26, W(12), vs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "59, 67, 8C, 1A", "csinc W(25), w26, W(12), vs");
}

#[test]
fn csinc_618() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinc X(7), x17, x29, nv
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "27, F6, 9D, 9A", "csinc X(7), x17, x29, nv");
}

#[test]
fn csinc_619() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinc x10, X(18), X(25), ls
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "4A, 96, 99, 9A", "csinc x10, X(18), X(25), ls");
}

#[test]
fn csinv_620() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinv w22, w19, W(28), ne
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "76, 12, 9C, 5A", "csinv w22, w19, W(28), ne");
}

#[test]
fn csinv_621() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinv W(29), w21, W(19), lt
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, B2, 93, 5A", "csinv W(29), w21, W(19), lt");
}

#[test]
fn csinv_622() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinv X(3), x14, X(1), gt
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, C1, 81, DA", "csinv X(3), x14, X(1), gt");
}

#[test]
fn csinv_623() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csinv x23, x16, x16, cs
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, 22, 90, DA", "csinv x23, x16, x16, cs");
}

#[test]
fn csneg_624() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csneg W(17), w4, W(3), cc
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "91, 34, 83, 5A", "csneg W(17), w4, W(3), cc");
}

#[test]
fn csneg_625() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csneg w18, w11, W(23), ls
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, 95, 97, 5A", "csneg w18, w11, W(23), ls");
}

#[test]
fn csneg_626() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csneg x13, x1, X(27), ls
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 94, 9B, DA", "csneg x13, x1, X(27), ls");
}

#[test]
fn csneg_627() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; csneg X(29), X(14), x6, le
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, D5, 86, DA", "csneg X(29), X(14), x6, le");
}

#[test]
fn dc_628() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dc cvau, x26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 7B, 0B, D5", "dc cvau, x26");
}

#[test]
fn dc_629() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dc cisw, x3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "43, 7E, 08, D5", "dc cisw, x3");
}

#[test]
fn dcps1_630() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dcps1  33859
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, 88, B0, D4", "dcps1  33859");
}

#[test]
fn dcps1_631() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dcps1  36037
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A1, 98, B1, D4", "dcps1  36037");
}

#[test]
fn dcps2_632() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dcps2  47837
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 5B, B7, D4", "dcps2  47837");
}

#[test]
fn dcps2_633() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dcps2  39685
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 60, B3, D4", "dcps2  39685");
}

#[test]
fn dcps3_634() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dcps3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 00, A0, D4", "dcps3");
}

#[test]
fn dcps3_635() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dcps3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "03, 00, A0, D4", "dcps3");
}

#[test]
fn dmb_636() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dmb ish
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 3B, 03, D5", "dmb ish");
}

#[test]
fn dmb_637() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dmb ishst
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 3A, 03, D5", "dmb ishst");
}

#[test]
fn dmb_638() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dmb 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 34, 03, D5", "dmb 4");
}

#[test]
fn dmb_639() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dmb 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 36, 03, D5", "dmb 6");
}

#[test]
fn drps_640() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; drps
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 03, BF, D6", "drps");
}

#[test]
fn drps_641() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; drps
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 03, BF, D6", "drps");
}

#[test]
fn dsb_642() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dsb ld
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 3D, 03, D5", "dsb ld");
}

#[test]
fn dsb_643() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dsb nshld
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 35, 03, D5", "dsb nshld");
}

#[test]
fn dsb_644() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dsb 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 3B, 03, D5", "dsb 11");
}

#[test]
fn dsb_645() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dsb 15
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9F, 3F, 03, D5", "dsb 15");
}

#[test]
fn dup_646() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup B(3), V(23).B[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, 06, 07, 5E", "dup B(3), V(23).B[3]");
}

#[test]
fn dup_647() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup B(30), V(19).B[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, 06, 07, 5E", "dup B(30), V(19).B[3]");
}

#[test]
fn dup_648() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup H(21), v7.H[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F5, 04, 1A, 5E", "dup H(21), v7.H[6]");
}

#[test]
fn dup_649() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup H(11), v25.H[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2B, 07, 0E, 5E", "dup H(11), v25.H[3]");
}

#[test]
fn dup_650() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup S(9), V(17).S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 06, 1C, 5E", "dup S(9), V(17).S[3]");
}

#[test]
fn dup_651() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup s23, v7.S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 04, 14, 5E", "dup s23, v7.S[2]");
}

#[test]
fn dup_652() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup D(16), V(18).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "50, 06, 18, 5E", "dup D(16), V(18).D[1]");
}

#[test]
fn dup_653() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup d10, v6.D[0]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 04, 08, 5E", "dup d10, v6.D[0]");
}

#[test]
fn dup_654() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(31).B16, V(25).B[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3F, 07, 05, 4E", "dup V(31).B16, V(25).B[2]");
}

#[test]
fn dup_655() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v18.B16, V(16).B[10]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "12, 06, 15, 4E", "dup v18.B16, V(16).B[10]");
}

#[test]
fn dup_656() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(9).B8, V(28).B[6]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 07, 0D, 0E", "dup V(9).B8, V(28).B[6]");
}

#[test]
fn dup_657() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v5.B8, v11.B[8]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 05, 11, 0E", "dup v5.B8, v11.B[8]");
}

#[test]
fn dup_658() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(27).H8, V(13).H[4]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BB, 05, 12, 4E", "dup V(27).H8, V(13).H[4]");
}

#[test]
fn dup_659() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(26).H8, V(23).H[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 06, 06, 4E", "dup V(26).H8, V(23).H[1]");
}

#[test]
fn dup_660() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v4.H4, v23.H[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 06, 0A, 0E", "dup v4.H4, v23.H[2]");
}

#[test]
fn dup_661() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v1.H4, v22.H[7]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C1, 06, 1E, 0E", "dup v1.H4, v22.H[7]");
}

#[test]
fn dup_662() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v8.S4, V(0).S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "08, 04, 0C, 4E", "dup v8.S4, V(0).S[1]");
}

#[test]
fn dup_663() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(8).S4, v21.S[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, 06, 0C, 4E", "dup V(8).S4, v21.S[1]");
}

#[test]
fn dup_664() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v25.S2, V(3).S[2]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "79, 04, 14, 0E", "dup v25.S2, V(3).S[2]");
}

#[test]
fn dup_665() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(19).S2, v23.S[3]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, 06, 1C, 0E", "dup V(19).S2, v23.S[3]");
}

#[test]
fn dup_666() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v25.D2, v20.D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 06, 18, 4E", "dup v25.D2, v20.D[1]");
}

#[test]
fn dup_667() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v8.D2, V(14).D[1]
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 05, 18, 4E", "dup v8.D2, V(14).D[1]");
}

#[test]
fn dup_668() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v9.B16, W(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "29, 0F, 01, 4E", "dup v9.B16, W(25)");
}

#[test]
fn dup_669() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(19).B16, W(25)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "33, 0F, 01, 4E", "dup V(19).B16, W(25)");
}

#[test]
fn dup_670() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(27).B8, w8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, 0D, 01, 0E", "dup V(27).B8, w8");
}

#[test]
fn dup_671() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(24).B8, W(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B8, 0D, 01, 0E", "dup V(24).B8, W(13)");
}

#[test]
fn dup_672() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(20).H8, w29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 0F, 02, 4E", "dup V(20).H8, w29");
}

#[test]
fn dup_673() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(14).H8, w19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 0E, 02, 4E", "dup V(14).H8, w19");
}

#[test]
fn dup_674() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v20.H4, w2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, 0C, 02, 0E", "dup v20.H4, w2");
}

#[test]
fn dup_675() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(0).H4, w27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "60, 0F, 02, 0E", "dup V(0).H4, w27");
}

#[test]
fn dup_676() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v24.S4, w30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, 0F, 04, 4E", "dup v24.S4, w30");
}

#[test]
fn dup_677() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v2.S4, w23
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E2, 0E, 04, 4E", "dup v2.S4, w23");
}

#[test]
fn dup_678() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v8.S2, w11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "68, 0D, 04, 0E", "dup v8.S2, w11");
}

#[test]
fn dup_679() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(15).S2, w21
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 0E, 04, 0E", "dup V(15).S2, w21");
}

#[test]
fn dup_680() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v16.D2, X(23)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F0, 0E, 08, 4E", "dup v16.D2, X(23)");
}

#[test]
fn dup_681() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; dup v5.D2, X(3)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 0C, 08, 4E", "dup v5.D2, X(3)");
}

#[test]
fn eon_682() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eon w19, W(20), W(26) , ASR 31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 7E, BA, 4A", "eon w19, W(20), W(26) , ASR 31");
}

#[test]
fn eon_683() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eon w23, w7, W(15) , LSL 14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 38, 2F, 4A", "eon w23, w7, W(15) , LSL 14");
}

#[test]
fn eon_684() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eon X(28), x22, x27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DC, 02, 3B, CA", "eon X(28), x22, x27");
}

#[test]
fn eon_685() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eon x10, X(22), x7 , LSR 30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CA, 7A, 67, CA", "eon x10, X(22), x7 , LSR 30");
}

#[test]
fn eor_686() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor V(4).B16, v7.B16, v16.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E4, 1C, 30, 6E", "eor V(4).B16, v7.B16, v16.B16");
}

#[test]
fn eor_687() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor V(15).B16, v29.B16, v29.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, 1F, 3D, 6E", "eor V(15).B16, v29.B16, v29.B16");
}

#[test]
fn eor_688() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor v8.B8, V(22).B8, V(10).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C8, 1E, 2A, 2E", "eor v8.B8, V(22).B8, V(10).B8");
}

#[test]
fn eor_689() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor v3.B8, v25.B8, V(12).B8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "23, 1F, 2C, 2E", "eor v3.B8, v25.B8, V(12).B8");
}

#[test]
fn eor_690() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor w30, W(17), 4292935648
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3E, AA, 0B, 52", "eor w30, W(17), 4292935648");
}

#[test]
fn eor_691() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor w12, W(31), 4294963203
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EC, 57, 14, 52", "eor w12, W(31), 4294963203");
}

#[test]
fn eor_692() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor x4, X(26), 12297829382473034410
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "44, F3, 01, D2", "eor x4, X(26), 12297829382473034410");
}

#[test]
fn eor_693() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor x21, x14, 14757395258967641292
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D5, E5, 02, D2", "eor x21, x14, 14757395258967641292");
}

#[test]
fn eor_694() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor W(5), W(2), w30 , ROR 11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "45, 2C, DE, 4A", "eor W(5), W(2), w30 , ROR 11");
}

#[test]
fn eor_695() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor W(25), W(12), w7 , ASR 4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "99, 11, 87, 4A", "eor W(25), W(12), w7 , ASR 4");
}

#[test]
fn eor_696() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor x13, x17, X(24)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2D, 02, 18, CA", "eor x13, x17, X(24)");
}

#[test]
fn eor_697() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor x3, X(22), x28
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C3, 02, 1C, CA", "eor x3, X(22), x28");
}

#[test]
fn eor3_698() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor3 V(14).B16, v3.B16, v27.B16, v24.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6E, 60, 1B, CE", "eor3 V(14).B16, v3.B16, v27.B16, v24.B16");
}

#[test]
fn eor3_699() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eor3 v27.B16, v14.B16, V(11).B16, v4.B16
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DB, 11, 0B, CE", "eor3 v27.B16, v14.B16, V(11).B16, v4.B16");
}

#[test]
fn eret_700() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 03, 9F, D6", "eret");
}

#[test]
fn eret_701() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eret
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E0, 03, 9F, D6", "eret");
}

#[test]
fn eretaa_702() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eretaa
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 0B, 9F, D6", "eretaa");
}

#[test]
fn eretaa_703() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eretaa
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 0B, 9F, D6", "eretaa");
}

#[test]
fn eretab_704() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eretab
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 0F, 9F, D6", "eretab");
}

#[test]
fn eretab_705() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; eretab
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FF, 0F, 9F, D6", "eretab");
}

#[test]
fn esb_706() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; esb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 22, 03, D5", "esb");
}

#[test]
fn esb_707() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; esb
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1F, 22, 03, D5", "esb");
}

#[test]
fn ext_708() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ext V(6).B8, V(25).B8, V(23).B8, 6
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "26, 33, 17, 2E", "ext V(6).B8, V(25).B8, V(23).B8, 6");
}

#[test]
fn ext_709() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ext v1.B8, v28.B8, V(12).B8, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "81, 1B, 0C, 2E", "ext v1.B8, v28.B8, V(12).B8, 3");
}

#[test]
fn ext_710() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ext V(26).B16, V(25).B16, V(13).B16, 3
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 1B, 0D, 6E", "ext V(26).B16, V(25).B16, V(13).B16, 3");
}

#[test]
fn ext_711() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; ext V(23).B16, V(7).B16, v4.B16, 1
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F7, 08, 04, 6E", "ext V(23).B16, V(7).B16, v4.B16, 1");
}

#[test]
fn extr_712() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; extr W(13), W(31), W(8), 2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "ED, 0B, 88, 13", "extr W(13), W(31), W(8), 2");
}

#[test]
fn extr_713() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; extr w2, w13, w14, 27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A2, 6D, 8E, 13", "extr w2, w13, w14, 27");
}

#[test]
fn extr_714() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; extr xzr, x6, X(27), 41
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, A4, DB, 93", "extr xzr, x6, X(27), 41");
}

#[test]
fn extr_715() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; extr X(20), X(29), x14, 17
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "B4, 47, CE, 93", "extr X(20), X(29), x14, 17");
}

#[test]
fn fabd_716() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd h31, H(13), H(8)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BF, 15, C8, 7E", "fabd h31, H(13), H(8)");
}

#[test]
fn fabd_717() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd H(29), h15, h12
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FD, 15, CC, 7E", "fabd H(29), h15, h12");
}

#[test]
fn fabd_718() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd s24, S(12), s19
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "98, D5, B3, 7E", "fabd s24, S(12), s19");
}

#[test]
fn fabd_719() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd S(21), S(0), S(0)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "15, D4, A0, 7E", "fabd S(21), S(0), S(0)");
}

#[test]
fn fabd_720() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd d22, D(0), D(30)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "16, D4, FE, 7E", "fabd d22, D(0), D(30)");
}

#[test]
fn fabd_721() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd D(4), d21, d10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A4, D6, EA, 7E", "fabd D(4), d21, d10");
}

#[test]
fn fabd_722() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(16).H8, v9.H8, V(14).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "30, 15, CE, 6E", "fabd V(16).H8, v9.H8, V(14).H8");
}

#[test]
fn fabd_723() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd v8.H8, v15.H8, V(27).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E8, 15, DB, 6E", "fabd v8.H8, v15.H8, V(27).H8");
}

#[test]
fn fabd_724() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(15).H4, V(7).H4, v19.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EF, 14, D3, 2E", "fabd V(15).H4, V(7).H4, v19.H4");
}

#[test]
fn fabd_725() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(5).H4, v13.H4, V(16).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A5, 15, D0, 2E", "fabd V(5).H4, v13.H4, V(16).H4");
}

#[test]
fn fabd_726() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(23).S4, v16.S4, V(30).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "17, D6, BE, 6E", "fabd V(23).S4, v16.S4, V(30).S4");
}

#[test]
fn fabd_727() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(11).S4, V(4).S4, v18.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, D4, B2, 6E", "fabd V(11).S4, V(4).S4, v18.S4");
}

#[test]
fn fabd_728() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(12).S2, v27.S2, v18.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, D7, B2, 2E", "fabd V(12).S2, v27.S2, v18.S2");
}

#[test]
fn fabd_729() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(24).S2, v11.S2, V(10).S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "78, D5, AA, 2E", "fabd V(24).S2, v11.S2, V(10).S2");
}

#[test]
fn fabd_730() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd v29.D2, v28.D2, V(29).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "9D, D7, FD, 6E", "fabd v29.D2, v28.D2, V(29).D2");
}

#[test]
fn fabd_731() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabd v24.D2, V(6).D2, v1.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D8, D4, E1, 6E", "fabd v24.D2, V(6).D2, v1.D2");
}

#[test]
fn fabs_732() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v20.H8, v30.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D4, FB, F8, 4E", "fabs v20.H8, v30.H8");
}

#[test]
fn fabs_733() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs V(30).H8, V(8).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1E, F9, F8, 4E", "fabs V(30).H8, V(8).H8");
}

#[test]
fn fabs_734() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v22.H4, v9.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "36, F9, F8, 0E", "fabs v22.H4, v9.H4");
}

#[test]
fn fabs_735() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v27.H4, V(0).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, F8, F8, 0E", "fabs v27.H4, V(0).H4");
}

#[test]
fn fabs_736() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v6.S4, V(29).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A6, FB, A0, 4E", "fabs v6.S4, V(29).S4");
}

#[test]
fn fabs_737() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v8.S4, v5.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "A8, F8, A0, 4E", "fabs v8.S4, v5.S4");
}

#[test]
fn fabs_738() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs V(12).S2, v25.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2C, FB, A0, 0E", "fabs V(12).S2, v25.S2");
}

#[test]
fn fabs_739() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v27.S2, v16.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "1B, FA, A0, 0E", "fabs v27.S2, v16.S2");
}

#[test]
fn fabs_740() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs V(9).D2, v14.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C9, F9, E0, 4E", "fabs V(9).D2, v14.D2");
}

#[test]
fn fabs_741() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs V(9).D2, v18.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "49, FA, E0, 4E", "fabs V(9).D2, v18.D2");
}

#[test]
fn fabs_742() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs H(17), h0
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, C0, E0, 1E", "fabs H(17), h0");
}

#[test]
fn fabs_743() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs h2, h9
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "22, C1, E0, 1E", "fabs h2, h9");
}

#[test]
fn fabs_744() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs s22, s14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D6, C1, 20, 1E", "fabs s22, s14");
}

#[test]
fn fabs_745() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs s5, S(14)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "C5, C1, 20, 1E", "fabs s5, S(14)");
}

#[test]
fn fabs_746() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs d9, D(11)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "69, C1, 60, 1E", "fabs d9, D(11)");
}

#[test]
fn fabs_747() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fabs d1, d11
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "61, C1, 60, 1E", "fabs d1, d11");
}

#[test]
fn facge_748() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge h31, H(27), H(28)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7F, 2F, 5C, 7E", "facge h31, H(27), H(28)");
}

#[test]
fn facge_749() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge H(15), H(6), H(17)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CF, 2C, 51, 7E", "facge H(15), H(6), H(17)");
}

#[test]
fn facge_750() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge S(18), S(27), S(6)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "72, EF, 26, 7E", "facge S(18), S(27), S(6)");
}

#[test]
fn facge_751() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge S(28), s27, s26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7C, EF, 3A, 7E", "facge S(28), s27, s26");
}

#[test]
fn facge_752() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge d11, d6, d27
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, EC, 7B, 7E", "facge d11, d6, d27");
}

#[test]
fn facge_753() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge D(29), D(18), d26
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5D, EE, 7A, 7E", "facge D(29), D(18), d26");
}

#[test]
fn facge_754() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge v14.H8, v0.H8, V(3).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0E, 2C, 43, 6E", "facge v14.H8, v0.H8, V(3).H8");
}

#[test]
fn facge_755() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge v5.H8, V(23).H8, v22.H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E5, 2E, 56, 6E", "facge v5.H8, V(23).H8, v22.H8");
}

#[test]
fn facge_756() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(11).H4, V(28).H4, V(9).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "8B, 2F, 49, 2E", "facge V(11).H4, V(28).H4, V(9).H4");
}

#[test]
fn facge_757() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(31).H4, v18.H4, v3.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5F, 2E, 43, 2E", "facge V(31).H4, v18.H4, v3.H4");
}

#[test]
fn facge_758() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge v19.S4, v7.S4, v23.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, EC, 37, 6E", "facge v19.S4, v7.S4, v23.S4");
}

#[test]
fn facge_759() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge v8.S4, v12.S4, v17.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "88, ED, 31, 6E", "facge v8.S4, v12.S4, v17.S4");
}

#[test]
fn facge_760() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(27).S2, v26.S2, v17.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5B, EF, 31, 2E", "facge V(27).S2, v26.S2, v17.S2");
}

#[test]
fn facge_761() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge v14.S2, v29.S2, v25.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AE, EF, 39, 2E", "facge v14.S2, v29.S2, v25.S2");
}

#[test]
fn facge_762() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(15).D2, V(5).D2, V(15).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AF, EC, 6F, 6E", "facge V(15).D2, V(5).D2, V(15).D2");
}

#[test]
fn facge_763() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(3).D2, v7.D2, v5.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, EC, 65, 6E", "facge V(3).D2, v7.D2, v5.D2");
}

#[test]
fn facgt_764() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt H(8), h26, H(27)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "48, 2F, DB, 7E", "facgt H(8), h26, H(27)");
}

#[test]
fn facgt_765() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt H(5), h27, h20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "65, 2F, D4, 7E", "facgt H(5), h27, h20");
}

#[test]
fn facgt_766() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt S(1), s31, s31
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E1, EF, BF, 7E", "facgt S(1), s31, s31");
}

#[test]
fn facgt_767() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt S(24), S(9), s14
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, ED, AE, 7E", "facgt S(24), S(9), s14");
}

#[test]
fn facgt_768() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt d15, d16, d18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "0F, EE, F2, 7E", "facgt d15, d16, d18");
}

#[test]
fn facgt_769() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt D(29), d6, d29
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, EC, FD, 7E", "facgt D(29), d6, d29");
}

#[test]
fn facgt_770() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt v17.H8, v8.H8, V(26).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "11, 2D, DA, 6E", "facgt v17.H8, v8.H8, V(26).H8");
}

#[test]
fn facgt_771() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(21).H8, V(2).H8, V(16).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "55, 2C, D0, 6E", "facgt V(21).H8, V(2).H8, V(16).H8");
}

#[test]
fn facgt_772() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(9).H4, V(12).H4, V(0).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "89, 2D, C0, 2E", "facgt V(9).H4, V(12).H4, V(0).H4");
}

#[test]
fn facgt_773() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(19).H4, v12.H4, V(0).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "93, 2D, C0, 2E", "facgt V(19).H4, v12.H4, V(0).H4");
}

#[test]
fn facgt_774() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(20).S4, V(10).S4, V(3).S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "54, ED, A3, 6E", "facgt V(20).S4, V(10).S4, V(3).S4");
}

#[test]
fn facgt_775() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(31).S4, V(14).S4, v16.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DF, ED, B0, 6E", "facgt V(31).S4, V(14).S4, v16.S4");
}

#[test]
fn facgt_776() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(28).S2, v1.S2, v15.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3C, EC, AF, 2E", "facgt V(28).S2, v1.S2, v15.S2");
}

#[test]
fn facgt_777() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt v20.S2, v19.S2, v16.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "74, EE, B0, 2E", "facgt v20.S2, v19.S2, v16.S2");
}

#[test]
fn facgt_778() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(11).D2, v14.D2, v19.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "CB, ED, F3, 6E", "facgt V(11).D2, v14.D2, v19.D2");
}

#[test]
fn facgt_779() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; facgt v25.D2, v16.D2, v2.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "19, EE, E2, 6E", "facgt v25.D2, v16.D2, v2.D2");
}

#[test]
fn fadd_780() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v5.H8, V(0).H8, V(16).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "05, 14, 50, 4E", "fadd v5.H8, V(0).H8, V(16).H8");
}

#[test]
fn fadd_781() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v21.H8, V(11).H8, V(9).H8
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "75, 15, 49, 4E", "fadd v21.H8, V(11).H8, V(9).H8");
}

#[test]
fn fadd_782() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v26.H4, V(9).H4, v25.H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "3A, 15, 59, 0E", "fadd v26.H4, V(9).H4, v25.H4");
}

#[test]
fn fadd_783() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(15).H4, V(9).H4, V(31).H4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "2F, 15, 5F, 0E", "fadd V(15).H4, V(9).H4, V(31).H4");
}

#[test]
fn fadd_784() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(25).S4, V(17).S4, v29.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "39, D6, 3D, 4E", "fadd V(25).S4, V(17).S4, v29.S4");
}

#[test]
fn fadd_785() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v18.S4, v30.S4, v14.S4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "D2, D7, 2E, 4E", "fadd v18.S4, v30.S4, v14.S4");
}

#[test]
fn fadd_786() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(22).S2, V(2).S2, v22.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "56, D4, 36, 0E", "fadd V(22).S2, V(2).S2, v22.S2");
}

#[test]
fn fadd_787() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(12).S2, V(19).S2, v24.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "6C, D6, 38, 0E", "fadd V(12).S2, V(19).S2, v24.S2");
}

#[test]
fn fadd_788() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v29.D2, V(22).D2, V(30).D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "DD, D6, 7E, 4E", "fadd v29.D2, V(22).D2, V(30).D2");
}

#[test]
fn fadd_789() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v30.D2, v3.D2, v12.D2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "7E, D4, 6C, 4E", "fadd v30.D2, v3.D2, v12.D2");
}

#[test]
fn fadd_790() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd H(29), h21, h30
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "BD, 2A, FE, 1E", "fadd H(29), h21, h30");
}

#[test]
fn fadd_791() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd h28, h26, h4
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "5C, 2B, E4, 1E", "fadd h28, h26, h4");
}

#[test]
fn fadd_792() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd s26, S(7), S(13)
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "FA, 28, 2D, 1E", "fadd s26, S(7), S(13)");
}

#[test]
fn fadd_793() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd S(17), s3, s18
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "71, 28, 32, 1E", "fadd S(17), s3, s18");
}

#[test]
fn fadd_794() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd d11, D(29), d10
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "AB, 2B, 6A, 1E", "fadd d11, D(29), d10");
}

#[test]
fn fadd_795() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; fadd D(10), D(7), d20
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "EA, 28, 74, 1E", "fadd D(10), D(7), d20");
}

#[test]
fn faddp_796() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; faddp H(3), V(23).H2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "E3, DA, 30, 5E", "faddp H(3), V(23).H2");
}

#[test]
fn faddp_797() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; faddp h19, v0.H2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "13, D8, 30, 5E", "faddp h19, v0.H2");
}

#[test]
fn faddp_798() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; faddp s19, v15.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "F3, D9, 30, 7E", "faddp s19, v15.S2");
}

#[test]
fn faddp_799() {
    let mut ops = dynasmrt::SimpleAssembler::new();
    dynasm!(ops
        ; .arch aarch64
        ; faddp S(24), v25.S2
    );
    let buf = ops.finalize();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq!(hex, "38, DB, 30, 7E", "faddp S(24), v25.S2");
}
