
#[test]
fn abs_0() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs d11, d0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, B8, E0, 5E", "abs d11, d0");
}

#[test]
fn abs_1() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs v24.B16, V(11).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, B9, 20, 4E", "abs v24.B16, V(11).B16");
}

#[test]
fn abs_2() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(26).B8, V(5).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, B8, 20, 0E", "abs V(26).B8, V(5).B8");
}

#[test]
fn abs_3() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs v21.H8, v31.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, BB, 60, 4E", "abs v21.H8, v31.H8");
}

#[test]
fn abs_4() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(4).H4, V(24).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, BB, 60, 0E", "abs V(4).H4, V(24).H4");
}

#[test]
fn abs_5() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs v7.S4, V(19).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, BA, A0, 4E", "abs v7.S4, V(19).S4");
}

#[test]
fn abs_6() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs V(30).S2, V(18).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, BA, A0, 0E", "abs V(30).S2, V(18).S2");
}

#[test]
fn abs_7() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; abs v26.D2, v0.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, B8, E0, 4E", "abs v26.D2, v0.D2");
}

#[test]
fn adc_8() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adc W(28), W(17), W(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 02, 1E, 1A", "adc W(28), W(17), W(30)");
}

#[test]
fn adc_9() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adc x8, x1, x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 00, 0B, 9A", "adc x8, x1, x11");
}

#[test]
fn adcs_10() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adcs W(26), W(28), w24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 03, 18, 3A", "adcs W(26), W(28), w24");
}

#[test]
fn adcs_11() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adcs X(27), X(27), X(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, 03, 0C, BA", "adcs X(27), X(27), X(12)");
}

#[test]
fn add_12() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add W(17), W(19), W(24) , LSL 30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, 7A, 18, 0B", "add W(17), W(19), W(24) , LSL 30");
}

#[test]
fn add_13() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add X(14), X(22), xzr , ASR 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 5A, 9F, 8B", "add X(14), X(22), xzr , ASR 22");
}

#[test]
fn add_14() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add WSP(24), WSP(2), W(16) , UXTW 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 50, 30, 0B", "add WSP(24), WSP(2), W(16) , UXTW 4");
}

#[test]
fn add_15() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add XSP(22), x7, w14 , SXTB  0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 80, 2E, 8B", "add XSP(22), x7, w14 , SXTB  0");
}

#[test]
fn add_16() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add XSP(3), x10, X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, 01, 1D, 8B", "add XSP(3), x10, X(29)");
}

#[test]
fn add_17() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add WSP(18), WSP(13), 3265
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 05, 33, 11", "add WSP(18), WSP(13), 3265");
}

#[test]
fn add_18() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add XSP(25), XSP(17), 1478
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 1A, 17, 91", "add XSP(25), XSP(17), 1478");
}

#[test]
fn add_19() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add d31, D(17), D(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3F, 86, EA, 5E", "add d31, D(17), D(10)");
}

#[test]
fn add_20() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add v25.B16, V(16).B16, V(19).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, 86, 33, 4E", "add v25.B16, V(16).B16, V(19).B16");
}

#[test]
fn add_21() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add v9.B8, v30.B8, v4.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 87, 24, 0E", "add v9.B8, v30.B8, v4.B8");
}

#[test]
fn add_22() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add v25.H8, V(7).H8, V(4).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, 84, 64, 4E", "add v25.H8, V(7).H8, V(4).H8");
}

#[test]
fn add_23() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add V(29).H4, v14.H4, V(20).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 85, 74, 0E", "add V(29).H4, v14.H4, V(20).H4");
}

#[test]
fn add_24() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add V(11).S4, V(25).S4, V(4).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 87, A4, 4E", "add V(11).S4, V(25).S4, V(4).S4");
}

#[test]
fn add_25() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add V(12).S2, V(13).S2, v13.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 85, AD, 0E", "add V(12).S2, V(13).S2, v13.S2");
}

#[test]
fn add_26() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; add V(24).D2, V(9).D2, V(15).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, 85, EF, 4E", "add V(24).D2, V(9).D2, V(15).D2");
}

#[test]
fn addhn_27() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addhn v23.B8, v5.H8, v22.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 40, 36, 0E", "addhn v23.B8, v5.H8, v22.H8");
}

#[test]
fn addhn_28() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addhn V(13).H4, v29.S4, V(30).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 43, 7E, 0E", "addhn V(13).H4, v29.S4, V(30).S4");
}

#[test]
fn addhn_29() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addhn V(4).S2, v13.D2, v14.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, 41, AE, 0E", "addhn V(4).S2, v13.D2, v14.D2");
}

#[test]
fn addhn2_30() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 V(26).B16, v1.H8, v25.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 40, 39, 4E", "addhn2 V(26).B16, v1.H8, v25.H8");
}

#[test]
fn addhn2_31() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 V(26).H8, v30.S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 43, 6C, 4E", "addhn2 V(26).H8, v30.S4, V(12).S4");
}

#[test]
fn addhn2_32() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addhn2 v10.S4, V(5).D2, V(24).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, 40, B8, 4E", "addhn2 v10.S4, V(5).D2, V(24).D2");
}

#[test]
fn addp_33() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp d28, v12.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, B9, F1, 5E", "addp d28, v12.D2");
}

#[test]
fn addp_34() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(14).B16, v31.B16, v13.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, BF, 2D, 4E", "addp V(14).B16, v31.B16, v13.B16");
}

#[test]
fn addp_35() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp v5.B8, V(18).B8, V(15).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, BE, 2F, 0E", "addp v5.B8, V(18).B8, V(15).B8");
}

#[test]
fn addp_36() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(22).H8, v4.H8, v0.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, BC, 60, 4E", "addp V(22).H8, v4.H8, v0.H8");
}

#[test]
fn addp_37() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp v12.H4, v10.H4, V(15).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, BD, 6F, 0E", "addp v12.H4, v10.H4, V(15).H4");
}

#[test]
fn addp_38() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(31).S4, v2.S4, v22.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, BC, B6, 4E", "addp V(31).S4, v2.S4, v22.S4");
}

#[test]
fn addp_39() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp V(5).S2, v24.S2, v25.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, BF, B9, 0E", "addp V(5).S2, v24.S2, v25.S2");
}

#[test]
fn addp_40() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addp v15.D2, v4.D2, v14.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, BC, EE, 4E", "addp v15.D2, v4.D2, v14.D2");
}

#[test]
fn adds_41() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds W(29), W(23), w18 , LSL 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FD, 1E, 12, 2B", "adds W(29), W(23), w18 , LSL 7");
}

#[test]
fn adds_42() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds x8, x28, X(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 03, 03, AB", "adds x8, x28, X(3)");
}

#[test]
fn adds_43() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds W(3), WSP(11), w19 , UXTB 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 11, 33, 2B", "adds W(3), WSP(11), w19 , UXTB 4");
}

#[test]
fn adds_44() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds X(18), x23, w10 , UXTW  4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 52, 2A, AB", "adds X(18), x23, w10 , UXTW  4");
}

#[test]
fn adds_45() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds X(28), XSP(28), X(31)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 03, 1F, AB", "adds X(28), XSP(28), X(31)");
}

#[test]
fn adds_46() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds W(12), w15, 1530
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, E9, 17, 31", "adds W(12), w15, 1530");
}

#[test]
fn adds_47() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adds x17, XSP(14), 3498
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, A9, 36, B1", "adds x17, XSP(14), 3498");
}

#[test]
fn addv_48() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addv b1, v10.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, B9, 31, 4E", "addv b1, v10.B16");
}

#[test]
fn addv_49() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addv b11, V(11).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, B9, 31, 0E", "addv b11, V(11).B8");
}

#[test]
fn addv_50() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addv h21, v22.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, BA, 71, 4E", "addv h21, v22.H8");
}

#[test]
fn addv_51() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addv H(10), V(28).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, BB, 71, 0E", "addv H(10), V(28).H4");
}

#[test]
fn addv_52() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; addv s26, v14.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, B9, B1, 4E", "addv s26, v14.S4");
}

#[test]
fn adr_53() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adr X(11), -330588
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, A5, D7, 10", "adr X(11), -330588");
}

#[test]
fn adrp_54() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; adrp x13, -1003577344
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, 00, 00, 90", "adrp x13, -1003577344");
}

#[test]
fn aesd_55() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; aesd V(6).B16, v14.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 59, 28, 4E", "aesd V(6).B16, v14.B16");
}

#[test]
fn aese_56() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; aese V(9).B16, V(3).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, 48, 28, 4E", "aese V(9).B16, V(3).B16");
}

#[test]
fn aesimc_57() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; aesimc V(19).B16, V(3).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 78, 28, 4E", "aesimc V(19).B16, V(3).B16");
}

#[test]
fn aesmc_58() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; aesmc V(27).B16, v22.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 6A, 28, 4E", "aesmc V(27).B16, v22.B16");
}

#[test]
fn and_59() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; and v23.B16, v28.B16, v13.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "97, 1F, 2D, 4E", "and v23.B16, v28.B16, v13.B16");
}

#[test]
fn and_60() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; and v27.B8, v20.B8, v16.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 1E, 30, 0E", "and v27.B8, v20.B8, v16.B8");
}

#[test]
fn and_61() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; and WSP(4), W(5), 3772834016
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, C8, 03, 12", "and WSP(4), W(5), 3772834016");
}

#[test]
fn and_62() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; and XSP(1), X(17), 1157442765409226768
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, C2, 04, 92", "and XSP(1), X(17), 1157442765409226768");
}

#[test]
fn and_63() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; and W(22), w12, W(3) , LSR 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, 09, 43, 0A", "and W(22), w12, W(3) , LSR 2");
}

#[test]
fn and_64() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; and x30, x1, X(17) , ASR 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 2C, 91, 8A", "and x30, x1, X(17) , ASR 11");
}

#[test]
fn ands_65() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ands w30, W(7), 2004318071
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, E8, 00, 72", "ands w30, W(7), 2004318071");
}

#[test]
fn ands_66() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ands X(11), X(19), 11068046444225730969
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, E6, 01, F2", "ands X(11), X(19), 11068046444225730969");
}

#[test]
fn ands_67() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ands w25, w12, w14 , LSR 26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 69, 4E, 6A", "ands w25, w12, w14 , LSR 26");
}

#[test]
fn ands_68() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ands X(30), X(5), x10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, 00, 0A, EA", "ands X(30), X(5), x10");
}

#[test]
fn asr_69() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; asr w24, W(7), w22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, 28, D6, 1A", "asr w24, W(7), w22");
}

#[test]
fn asr_70() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; asr x16, x15, X(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 29, C1, 9A", "asr x16, x15, X(1)");
}

#[test]
fn asr_71() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; asr W(7), w16, 13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 7E, 0D, 13", "asr W(7), w16, 13");
}

#[test]
fn asr_72() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; asr x17, X(10), 62
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, FD, 7E, 93", "asr x17, X(10), 62");
}

#[test]
fn asrv_73() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; asrv w15, w20, W(14)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, 2A, CE, 1A", "asrv w15, w20, W(14)");
}

#[test]
fn asrv_74() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; asrv X(30), x10, X(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 29, DA, 9A", "asrv X(30), x10, X(26)");
}

#[test]
fn at_75() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; at s12e1w, x1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, 78, 0C, D5", "at s12e1w, x1");
}

#[test]
fn autda_76() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autda x18, x14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 19, C1, DA", "autda x18, x14");
}

#[test]
fn autdb_77() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autdb X(12), XSP(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 1F, C1, DA", "autdb X(12), XSP(26)");
}

#[test]
fn autdza_78() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autdza x30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 3B, C1, DA", "autdza x30");
}

#[test]
fn autdzb_79() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autdzb x25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, 3F, C1, DA", "autdzb x25");
}

#[test]
fn autia_80() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autia x25, x16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, 12, C1, DA", "autia x25, x16");
}

#[test]
fn autia1716_81() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autia1716
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 21, 03, D5", "autia1716");
}

#[test]
fn autiasp_82() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autiasp
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 23, 03, D5", "autiasp");
}

#[test]
fn autiaz_83() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autiaz
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 23, 03, D5", "autiaz");
}

#[test]
fn autib_84() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autib x29, XSP(22)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, 16, C1, DA", "autib x29, XSP(22)");
}

#[test]
fn autib1716_85() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autib1716
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 21, 03, D5", "autib1716");
}

#[test]
fn autibsp_86() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autibsp
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 23, 03, D5", "autibsp");
}

#[test]
fn autibz_87() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autibz
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 23, 03, D5", "autibz");
}

#[test]
fn autiza_88() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autiza X(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 33, C1, DA", "autiza X(5)");
}

#[test]
fn autizb_89() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; autizb x21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 37, C1, DA", "autizb x21");
}

#[test]
fn b_vc_90() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; b.vc -236896
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 15, E3, 54", "b.vc -236896");
}

#[test]
fn b_91() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; b 113015872
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 1F, AF, 15", "b 113015872");
}

#[test]
fn bcax_92() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bcax v29.B16, V(28).B16, V(2).B16, V(30).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9D, 7B, 22, CE", "bcax v29.B16, V(28).B16, V(2).B16, V(30).B16");
}

#[test]
fn bfc_93() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfc W(21), 25, 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 0F, 07, 33", "bfc W(21), 25, 4");
}

#[test]
fn bfc_94() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfc x7, 47, 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 2B, 51, B3", "bfc x7, 47, 11");
}

#[test]
fn bfi_95() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfi w27, w26, 24, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 03, 08, 33", "bfi w27, w26, 24, 1");
}

#[test]
fn bfi_96() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfi x18, x21, 37, 17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 42, 5B, B3", "bfi x18, x21, 37, 17");
}

#[test]
fn bfm_97() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfm w17, w21, 15, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, 1E, 0F, 33", "bfm w17, w21, 15, 7");
}

#[test]
fn bfm_98() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfm x28, x22, 33, 26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 6A, 61, B3", "bfm x28, x22, 33, 26");
}

#[test]
fn bfxil_99() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfxil w23, W(3), 20, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 60, 14, 33", "bfxil w23, W(3), 20, 5");
}

#[test]
fn bfxil_100() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bfxil x2, x3, 6, 38
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, AC, 46, B3", "bfxil x2, x3, 6, 38");
}

#[test]
fn bic_101() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(17).H8, 0 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 94, 00, 6F", "bic V(17).H8, 0 , LSL 0");
}

#[test]
fn bic_102() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic v21.H4, 229 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 94, 07, 2F", "bic v21.H4, 229 , LSL 0");
}

#[test]
fn bic_103() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic v9.S4, 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 14, 01, 6F", "bic v9.S4, 32");
}

#[test]
fn bic_104() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic V(5).S2, 83 , LSL 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 36, 02, 2F", "bic V(5).S2, 83 , LSL 8");
}

#[test]
fn bic_105() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic v24.B16, v25.B16, v26.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, 1F, 7A, 4E", "bic v24.B16, v25.B16, v26.B16");
}

#[test]
fn bic_106() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic v28.B8, V(2).B8, v18.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, 1C, 72, 0E", "bic v28.B8, V(2).B8, v18.B8");
}

#[test]
fn bic_107() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic W(21), W(29), w16 , ASR 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 03, B0, 0A", "bic W(21), W(29), w16 , ASR 0");
}

#[test]
fn bic_108() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bic xzr, X(28), X(5) , ASR 49
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, C7, A5, 8A", "bic xzr, X(28), X(5) , ASR 49");
}

#[test]
fn bics_109() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bics W(23), w3, W(13) , ASR 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 14, AD, 6A", "bics W(23), w3, W(13) , ASR 5");
}

#[test]
fn bics_110() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bics X(19), X(16), xzr , ASR 21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, 56, BF, EA", "bics X(19), X(16), xzr , ASR 21");
}

#[test]
fn bif_111() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bif V(5).B16, v5.B16, V(17).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, 1C, F1, 6E", "bif V(5).B16, v5.B16, V(17).B16");
}

#[test]
fn bif_112() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bif V(23).B8, v19.B8, V(6).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 1E, E6, 2E", "bif V(23).B8, v19.B8, V(6).B8");
}

#[test]
fn bit_113() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bit v30.B16, V(11).B16, V(6).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 1D, A6, 6E", "bit v30.B16, V(11).B16, V(6).B16");
}

#[test]
fn bit_114() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bit v20.B8, V(27).B8, V(17).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, 1F, B1, 2E", "bit v20.B8, V(27).B8, V(17).B8");
}

#[test]
fn bl_115() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bl 11580192
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 2C, 2C, 94", "bl 11580192");
}

#[test]
fn blr_116() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; blr X(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 00, 3F, D6", "blr X(3)");
}

#[test]
fn blraa_117() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; blraa x15, x30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 09, 3F, D7", "blraa x15, x30");
}

#[test]
fn blraaz_118() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; blraaz X(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 0A, 3F, D6", "blraaz X(19)");
}

#[test]
fn blrab_119() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; blrab X(2), x3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, 0C, 3F, D7", "blrab X(2), x3");
}

#[test]
fn blrabz_120() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; blrabz x11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 0D, 3F, D6", "blrabz x11");
}

#[test]
fn br_121() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; br X(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 01, 1F, D6", "br X(13)");
}

#[test]
fn braa_122() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; braa X(12), XSP(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 09, 1F, D7", "braa X(12), XSP(4)");
}

#[test]
fn braaz_123() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; braaz x19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 0A, 1F, D6", "braaz x19");
}

#[test]
fn brab_124() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; brab X(23), XSP(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 0E, 1F, D7", "brab X(23), XSP(2)");
}

#[test]
fn brabz_125() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; brabz X(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 0F, 1F, D6", "brabz X(29)");
}

#[test]
fn brk_126() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; brk 14073
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, DF, 26, D4", "brk 14073");
}

#[test]
fn bsl_127() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bsl v12.B16, v9.B16, V(11).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, 1D, 6B, 6E", "bsl v12.B16, v9.B16, V(11).B16");
}

#[test]
fn bsl_128() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; bsl V(0).B8, V(29).B8, V(10).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 1F, 6A, 2E", "bsl V(0).B8, V(29).B8, V(10).B8");
}

#[test]
fn cas_129() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cas w9, W(8), [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 7E, A9, 88", "cas w9, W(8), [XSP(19)]");
}

#[test]
fn cas_130() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cas X(19), x2, [x12]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 7D, B3, C8", "cas X(19), x2, [x12]");
}

#[test]
fn casa_131() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casa w21, W(23), [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 7D, F5, 88", "casa w21, W(23), [x13]");
}

#[test]
fn casa_132() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casa x23, x5, [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 7F, F7, C8", "casa x23, x5, [XSP(27)]");
}

#[test]
fn casab_133() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casab W(21), w17, [x3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, 7C, F5, 08", "casab W(21), w17, [x3]");
}

#[test]
fn casah_134() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casah w5, w11, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 7E, E5, 48", "casah w5, w11, [XSP(22)]");
}

#[test]
fn casal_135() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casal W(4), w5, [XSP(22)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, FE, E4, 88", "casal W(4), w5, [XSP(22)]");
}

#[test]
fn casal_136() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casal X(10), x23, [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, FD, EA, C8", "casal X(10), x23, [x13]");
}

#[test]
fn casalb_137() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casalb w4, W(30), [XSP(30)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, FF, E4, 08", "casalb w4, W(30), [XSP(30)]");
}

#[test]
fn casalh_138() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casalh w19, W(8), [x14]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, FD, F3, 48", "casalh w19, W(8), [x14]");
}

#[test]
fn casb_139() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casb W(14), w29, [XSP(27)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7D, 7F, AE, 08", "casb W(14), w29, [XSP(27)]");
}

#[test]
fn cash_140() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cash W(12), w27, [XSP(28)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 7F, AC, 48", "cash W(12), w27, [XSP(28)]");
}

#[test]
fn casl_141() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casl W(16), W(27), [XSP(0)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, FC, B0, 88", "casl W(16), W(27), [XSP(0)]");
}

#[test]
fn casl_142() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casl x8, x10, [x21]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, FE, A8, C8", "casl x8, x10, [x21]");
}

#[test]
fn caslb_143() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caslb W(16), wzr, [x13]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, FD, B0, 08", "caslb W(16), wzr, [x13]");
}

#[test]
fn caslh_144() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caslh w25, w6, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, FF, B9, 48", "caslh w25, w6, [XSP(25)]");
}

#[test]
fn casp_145() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casp W(10), wzr, W(20), wzr, [XSP(24)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, 7F, 2A, 08", "casp W(10), wzr, W(20), wzr, [XSP(24)]");
}

#[test]
fn casp_146() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; casp x16, x17, x20, x21, [x1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 7C, 30, 48", "casp x16, x17, x20, x21, [x1]");
}

#[test]
fn caspa_147() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caspa W(10), wzr, W(14), wzr, [XSP(4)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, 7C, 6A, 08", "caspa W(10), wzr, W(14), wzr, [XSP(4)]");
}

#[test]
fn caspa_148() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caspa x8, x9, X(28), xzr, [x30]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 7F, 68, 48", "caspa x8, x9, X(28), xzr, [x30]");
}

#[test]
fn caspal_149() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caspal w22, w23, W(22), wzr, [x2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, FC, 76, 08", "caspal w22, w23, W(22), wzr, [x2]");
}

#[test]
fn caspal_150() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caspal X(18), xzr, x4, x5, [XSP(19)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, FE, 72, 48", "caspal X(18), xzr, x4, x5, [XSP(19)]");
}

#[test]
fn caspl_151() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caspl w8, w9, W(30), wzr, [XSP(25)]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, FF, 28, 08", "caspl w8, w9, W(30), wzr, [XSP(25)]");
}

#[test]
fn caspl_152() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; caspl X(20), xzr, x20, x21, [x11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, FD, 34, 48", "caspl X(20), xzr, x20, x21, [x11]");
}

#[test]
fn cbnz_153() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cbnz w10, 42628
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 34, 05, 35", "cbnz w10, 42628");
}

#[test]
fn cbnz_154() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cbnz x13, -194652
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 3D, E8, B5", "cbnz x13, -194652");
}

#[test]
fn cbz_155() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cbz W(31), 88752
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, D5, 0A, 34", "cbz W(31), 88752");
}

#[test]
fn cbz_156() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cbz x11, -162236
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 32, EC, B4", "cbz x11, -162236");
}

#[test]
fn ccmn_157() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn W(10), 22, 12, lo
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 39, 56, 3A", "ccmn W(10), 22, 12, lo");
}

#[test]
fn ccmn_158() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn X(2), 21, 9, le
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, D8, 55, BA", "ccmn X(2), 21, 9, le");
}

#[test]
fn ccmn_159() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn W(7), wzr, 7, al
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, E0, 5F, 3A", "ccmn W(7), wzr, 7, al");
}

#[test]
fn ccmn_160() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmn X(2), X(20), 14, ls
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 90, 54, BA", "ccmn X(2), X(20), 14, ls");
}

#[test]
fn ccmp_161() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp W(1), 22, 10, ge
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, A8, 56, 7A", "ccmp W(1), 22, 10, ge");
}

#[test]
fn ccmp_162() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp x11, 18, 11, ge
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, A9, 52, FA", "ccmp x11, 18, 11, ge");
}

#[test]
fn ccmp_163() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp W(7), w11, 13, cc
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 30, 4B, 7A", "ccmp W(7), w11, 13, cc");
}

#[test]
fn ccmp_164() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ccmp x14, X(15), 7, al
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, E1, 4F, FA", "ccmp x14, X(15), 7, al");
}

#[test]
fn cfinv_165() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cfinv
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 40, 00, D5", "cfinv");
}

#[test]
fn cinc_166() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cinc w29, W(13), ne
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BD, 05, 8D, 1A", "cinc w29, W(13), ne");
}

#[test]
fn cinc_167() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cinc X(19), X(11), vs
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, 75, 8B, 9A", "cinc X(19), X(11), vs");
}

#[test]
fn cinv_168() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cinv w0, w11, ne
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 01, 8B, 5A", "cinv w0, w11, ne");
}

#[test]
fn cinv_169() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cinv X(22), X(8), hs
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, 31, 88, DA", "cinv X(22), X(8), hs");
}

#[test]
fn clrex_170() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clrex  15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, 3F, 03, D5", "clrex  15");
}

#[test]
fn cls_171() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls v16.B16, V(2).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "50, 48, 20, 4E", "cls v16.B16, V(2).B16");
}

#[test]
fn cls_172() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls v31.B8, V(30).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 4B, 20, 0E", "cls v31.B8, V(30).B8");
}

#[test]
fn cls_173() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(23).H8, V(30).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 4B, 60, 4E", "cls V(23).H8, V(30).H8");
}

#[test]
fn cls_174() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls V(17).H4, V(18).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 4A, 60, 0E", "cls V(17).H4, V(18).H4");
}

#[test]
fn cls_175() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls v27.S4, v9.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 49, A0, 4E", "cls v27.S4, v9.S4");
}

#[test]
fn cls_176() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls v31.S2, V(16).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 4A, A0, 0E", "cls v31.S2, V(16).S2");
}

#[test]
fn cls_177() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls w28, W(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 14, C0, 5A", "cls w28, W(1)");
}

#[test]
fn cls_178() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cls x8, X(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, 16, C0, DA", "cls x8, X(18)");
}

#[test]
fn clz_179() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz v17.B16, v30.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, 4B, 20, 6E", "clz v17.B16, v30.B16");
}

#[test]
fn clz_180() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(13).B8, V(18).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, 4A, 20, 2E", "clz V(13).B8, V(18).B8");
}

#[test]
fn clz_181() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz v17.H8, v9.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 49, 60, 6E", "clz v17.H8, v9.H8");
}

#[test]
fn clz_182() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz v8.H4, V(29).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 4B, 60, 2E", "clz v8.H4, V(29).H4");
}

#[test]
fn clz_183() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(5).S4, V(24).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 4B, A0, 6E", "clz V(5).S4, V(24).S4");
}

#[test]
fn clz_184() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz V(21).S2, V(15).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 49, A0, 2E", "clz V(21).S2, V(15).S2");
}

#[test]
fn clz_185() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz W(22), W(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F6, 12, C0, 5A", "clz W(22), W(23)");
}

#[test]
fn clz_186() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; clz x8, x21
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 12, C0, DA", "clz x8, x21");
}

#[test]
fn cmeq_187() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq d30, D(20), D(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 8E, F2, 7E", "cmeq d30, D(20), D(18)");
}

#[test]
fn cmeq_188() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(24).B16, V(30).B16, V(21).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 8F, 35, 6E", "cmeq V(24).B16, V(30).B16, V(21).B16");
}

#[test]
fn cmeq_189() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v19.B8, v9.B8, V(16).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, 8D, 30, 2E", "cmeq v19.B8, v9.B8, V(16).B8");
}

#[test]
fn cmeq_190() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(19).H8, V(14).H8, v12.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 8D, 6C, 6E", "cmeq V(19).H8, V(14).H8, v12.H8");
}

#[test]
fn cmeq_191() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v6.H4, V(23).H4, v4.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 8E, 64, 2E", "cmeq v6.H4, V(23).H4, v4.H4");
}

#[test]
fn cmeq_192() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(2).S4, V(14).S4, v0.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, 8D, A0, 6E", "cmeq V(2).S4, V(14).S4, v0.S4");
}

#[test]
fn cmeq_193() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v21.S2, v22.S2, V(26).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 8E, BA, 2E", "cmeq v21.S2, v22.S2, V(26).S2");
}

#[test]
fn cmeq_194() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v9.D2, V(13).D2, V(28).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 8D, FC, 6E", "cmeq v9.D2, V(13).D2, V(28).D2");
}

#[test]
fn cmeq_195() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq D(28), d11, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, 99, E0, 5E", "cmeq D(28), d11, 0");
}

#[test]
fn cmeq_196() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(31).B16, V(22).B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 9A, 20, 4E", "cmeq V(31).B16, V(22).B16, 0");
}

#[test]
fn cmeq_197() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v9.B8, V(29).B8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 9B, 20, 0E", "cmeq v9.B8, V(29).B8, 0");
}

#[test]
fn cmeq_198() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v25.H8, v11.H8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 99, 60, 4E", "cmeq v25.H8, v11.H8, 0");
}

#[test]
fn cmeq_199() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v24.H4, V(4).H4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 98, 60, 0E", "cmeq v24.H4, V(4).H4, 0");
}

#[test]
fn cmeq_200() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq V(4).S4, v28.S4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 9B, A0, 4E", "cmeq V(4).S4, v28.S4, 0");
}

#[test]
fn cmeq_201() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v14.S2, V(1).S2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 98, A0, 0E", "cmeq v14.S2, V(1).S2, 0");
}

#[test]
fn cmeq_202() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmeq v17.D2, V(26).D2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 9B, E0, 4E", "cmeq v17.D2, V(26).D2, 0");
}

#[test]
fn cmge_203() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge d25, d1, d20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 3C, F4, 5E", "cmge d25, d1, d20");
}

#[test]
fn cmge_204() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v21.B16, v22.B16, v25.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 3E, 39, 4E", "cmge v21.B16, v22.B16, v25.B16");
}

#[test]
fn cmge_205() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(31).B8, V(8).B8, V(24).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 3D, 38, 0E", "cmge V(31).B8, V(8).B8, V(24).B8");
}

#[test]
fn cmge_206() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v13.H8, v8.H8, v7.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, 3D, 67, 4E", "cmge v13.H8, v8.H8, v7.H8");
}

#[test]
fn cmge_207() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v28.H4, V(21).H4, v22.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 3E, 76, 0E", "cmge v28.H4, V(21).H4, v22.H4");
}

#[test]
fn cmge_208() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(29).S4, V(26).S4, V(5).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5D, 3F, A5, 4E", "cmge V(29).S4, V(26).S4, V(5).S4");
}

#[test]
fn cmge_209() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v1.S2, v17.S2, V(8).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, 3E, A8, 0E", "cmge v1.S2, v17.S2, V(8).S2");
}

#[test]
fn cmge_210() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(18).D2, V(21).D2, V(18).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 3E, F2, 4E", "cmge V(18).D2, V(21).D2, V(18).D2");
}

#[test]
fn cmge_211() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge D(19), D(15), 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F3, 89, E0, 7E", "cmge D(19), D(15), 0");
}

#[test]
fn cmge_212() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v11.B16, v28.B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 8B, 20, 6E", "cmge v11.B16, v28.B16, 0");
}

#[test]
fn cmge_213() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v27.B8, V(30).B8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 8B, 20, 2E", "cmge v27.B8, V(30).B8, 0");
}

#[test]
fn cmge_214() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v3.H8, v7.H8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 88, 60, 6E", "cmge v3.H8, v7.H8, 0");
}

#[test]
fn cmge_215() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(14).H4, v6.H4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, 88, 60, 2E", "cmge V(14).H4, v6.H4, 0");
}

#[test]
fn cmge_216() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v6.S4, V(25).S4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 8B, A0, 6E", "cmge v6.S4, V(25).S4, 0");
}

#[test]
fn cmge_217() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge V(14).S2, V(19).S2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, 8A, A0, 2E", "cmge V(14).S2, V(19).S2, 0");
}

#[test]
fn cmge_218() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmge v8.D2, v7.D2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 88, E0, 6E", "cmge v8.D2, v7.D2, 0");
}

#[test]
fn cmgt_219() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt d13, D(7), d12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 34, EC, 5E", "cmgt d13, D(7), d12");
}

#[test]
fn cmgt_220() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v7.B16, v0.B16, V(24).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 34, 38, 4E", "cmgt v7.B16, v0.B16, V(24).B16");
}

#[test]
fn cmgt_221() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(23).B8, v29.B8, v9.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, 37, 29, 0E", "cmgt V(23).B8, v29.B8, v9.B8");
}

#[test]
fn cmgt_222() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v21.H8, v9.H8, V(15).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 35, 6F, 4E", "cmgt v21.H8, v9.H8, V(15).H8");
}

#[test]
fn cmgt_223() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(24).H4, v19.H4, v2.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 36, 62, 0E", "cmgt V(24).H4, v19.H4, v2.H4");
}

#[test]
fn cmgt_224() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(0).S4, V(7).S4, v31.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 34, BF, 4E", "cmgt V(0).S4, V(7).S4, v31.S4");
}

#[test]
fn cmgt_225() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v3.S2, V(0).S2, V(19).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 34, B3, 0E", "cmgt v3.S2, V(0).S2, V(19).S2");
}

#[test]
fn cmgt_226() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(27).D2, V(17).D2, V(2).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 36, E2, 4E", "cmgt V(27).D2, V(17).D2, V(2).D2");
}

#[test]
fn cmgt_227() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt D(28), D(21), 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 8A, E0, 5E", "cmgt D(28), D(21), 0");
}

#[test]
fn cmgt_228() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v9.B16, V(7).B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 88, 20, 4E", "cmgt v9.B16, V(7).B16, 0");
}

#[test]
fn cmgt_229() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(15).B8, V(10).B8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 89, 20, 0E", "cmgt V(15).B8, V(10).B8, 0");
}

#[test]
fn cmgt_230() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt v8.H8, v27.H8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 8B, 60, 4E", "cmgt v8.H8, v27.H8, 0");
}

#[test]
fn cmgt_231() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(30).H4, v1.H4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 88, 60, 0E", "cmgt V(30).H4, v1.H4, 0");
}

#[test]
fn cmgt_232() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(0).S4, V(31).S4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 8B, A0, 4E", "cmgt V(0).S4, V(31).S4, 0");
}

#[test]
fn cmgt_233() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(31).S2, v14.S2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 89, A0, 0E", "cmgt V(31).S2, v14.S2, 0");
}

#[test]
fn cmgt_234() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmgt V(5).D2, V(19).D2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 8A, E0, 4E", "cmgt V(5).D2, V(19).D2, 0");
}

#[test]
fn cmhi_235() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi D(3), d19, d25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 36, F9, 7E", "cmhi D(3), d19, d25");
}

#[test]
fn cmhi_236() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(26).B16, V(10).B16, v2.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 35, 22, 6E", "cmhi V(26).B16, V(10).B16, v2.B16");
}

#[test]
fn cmhi_237() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v9.B8, V(15).B8, V(26).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 35, 3A, 2E", "cmhi v9.B8, V(15).B8, V(26).B8");
}

#[test]
fn cmhi_238() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(6).H8, v18.H8, v30.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, 36, 7E, 6E", "cmhi V(6).H8, v18.H8, v30.H8");
}

#[test]
fn cmhi_239() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi v22.H4, V(26).H4, V(27).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, 37, 7B, 2E", "cmhi v22.H4, V(26).H4, V(27).H4");
}

#[test]
fn cmhi_240() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(2).S4, v13.S4, v29.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, 35, BD, 6E", "cmhi V(2).S4, v13.S4, v29.S4");
}

#[test]
fn cmhi_241() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(27).S2, v16.S2, v31.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 36, BF, 2E", "cmhi V(27).S2, v16.S2, v31.S2");
}

#[test]
fn cmhi_242() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhi V(1).D2, v22.D2, V(19).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C1, 36, F3, 6E", "cmhi V(1).D2, v22.D2, V(19).D2");
}

#[test]
fn cmhs_243() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs d0, d2, d8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, 3C, E8, 7E", "cmhs d0, d2, d8");
}

#[test]
fn cmhs_244() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v24.B16, V(12).B16, V(4).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 3D, 24, 6E", "cmhs v24.B16, V(12).B16, V(4).B16");
}

#[test]
fn cmhs_245() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v11.B8, v8.B8, V(24).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 3D, 38, 2E", "cmhs v11.B8, v8.B8, V(24).B8");
}

#[test]
fn cmhs_246() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v9.H8, V(23).H8, v17.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, 3E, 71, 6E", "cmhs v9.H8, V(23).H8, v17.H8");
}

#[test]
fn cmhs_247() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v2.H4, v7.H4, v7.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 3C, 67, 2E", "cmhs v2.H4, v7.H4, v7.H4");
}

#[test]
fn cmhs_248() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs V(13).S4, v5.S4, V(3).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 3C, A3, 6E", "cmhs V(13).S4, v5.S4, V(3).S4");
}

#[test]
fn cmhs_249() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v21.S2, V(10).S2, V(27).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, 3D, BB, 2E", "cmhs v21.S2, V(10).S2, V(27).S2");
}

#[test]
fn cmhs_250() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmhs v28.D2, v12.D2, v30.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, 3D, FE, 6E", "cmhs v28.D2, v12.D2, v30.D2");
}

#[test]
fn cmle_251() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle d24, D(3), 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 98, E0, 7E", "cmle d24, D(3), 0");
}

#[test]
fn cmle_252() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v3.B16, v25.B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 9B, 20, 6E", "cmle v3.B16, v25.B16, 0");
}

#[test]
fn cmle_253() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(26).B8, V(27).B8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7A, 9B, 20, 2E", "cmle V(26).B8, V(27).B8, 0");
}

#[test]
fn cmle_254() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(4).H8, v14.H8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 99, 60, 6E", "cmle V(4).H8, v14.H8, 0");
}

#[test]
fn cmle_255() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v20.H4, V(17).H4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 9A, 60, 2E", "cmle v20.H4, V(17).H4, 0");
}

#[test]
fn cmle_256() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(21).S4, v28.S4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 9B, A0, 6E", "cmle V(21).S4, v28.S4, 0");
}

#[test]
fn cmle_257() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle v28.S2, v22.S2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 9A, A0, 2E", "cmle v28.S2, v22.S2, 0");
}

#[test]
fn cmle_258() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmle V(25).D2, V(16).D2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, 9A, E0, 6E", "cmle V(25).D2, V(16).D2, 0");
}

#[test]
fn cmlt_259() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt d29, d20, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9D, AA, E0, 5E", "cmlt d29, d20, 0");
}

#[test]
fn cmlt_260() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v8.B16, v18.B16, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, AA, 20, 4E", "cmlt v8.B16, v18.B16, 0");
}

#[test]
fn cmlt_261() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v31.B8, V(20).B8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, AA, 20, 0E", "cmlt v31.B8, V(20).B8, 0");
}

#[test]
fn cmlt_262() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(27).H8, v4.H8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, A8, 60, 4E", "cmlt V(27).H8, v4.H8, 0");
}

#[test]
fn cmlt_263() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v18.H4, V(22).H4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, AA, 60, 0E", "cmlt v18.H4, V(22).H4, 0");
}

#[test]
fn cmlt_264() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt v7.S4, v11.S4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, A9, A0, 4E", "cmlt v7.S4, v11.S4, 0");
}

#[test]
fn cmlt_265() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(31).S2, V(13).S2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, A9, A0, 0E", "cmlt V(31).S2, V(13).S2, 0");
}

#[test]
fn cmlt_266() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmlt V(22).D2, V(4).D2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, A8, E0, 4E", "cmlt V(22).D2, V(4).D2, 0");
}

#[test]
fn cmn_267() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn W(24), w18 , ASR 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 6F, 92, 2B", "cmn W(24), w18 , ASR 27");
}

#[test]
fn cmn_268() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn x12, X(14)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 01, 0E, AB", "cmn x12, X(14)");
}

#[test]
fn cmn_269() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn w29, W(31) , UXTH 4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 33, 3F, 2B", "cmn w29, W(31) , UXTH 4");
}

#[test]
fn cmn_270() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn XSP(30), w7, UXTH  0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 23, 27, AB", "cmn XSP(30), w7, UXTH  0");
}

#[test]
fn cmn_271() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn XSP(13), X(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 01, 18, AB", "cmn XSP(13), X(24)");
}

#[test]
fn cmn_272() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn wsp, 2404
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 93, 25, 31", "cmn wsp, 2404");
}

#[test]
fn cmn_273() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmn XSP(31), 3595
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 2F, 38, B1", "cmn XSP(31), 3595");
}

#[test]
fn cmp_274() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp w30, w12 , LSL 20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 53, 0C, 6B", "cmp w30, w12 , LSL 20");
}

#[test]
fn cmp_275() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp X(4), x23 , LSL 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 18, 17, EB", "cmp X(4), x23 , LSL 6");
}

#[test]
fn cmp_276() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp WSP(24), W(1) , SXTB 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 83, 21, 6B", "cmp WSP(24), W(1) , SXTB 0");
}

#[test]
fn cmp_277() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp XSP(29), w8, SXTW  1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, C7, 28, EB", "cmp XSP(29), w8, SXTW  1");
}

#[test]
fn cmp_278() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp XSP(29), x17 , SXTX 2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, EB, 31, EB", "cmp XSP(29), x17 , SXTX 2");
}

#[test]
fn cmp_279() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp WSP(22), 3256
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, E2, 32, 71", "cmp WSP(22), 3256");
}

#[test]
fn cmp_280() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmp XSP(30), 269 , LSL 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DF, 37, 04, F1", "cmp XSP(30), 269 , LSL 0");
}

#[test]
fn cmtst_281() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst d5, D(0), d10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, 8C, EA, 5E", "cmtst d5, D(0), d10");
}

#[test]
fn cmtst_282() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v3.B16, V(7).B16, V(27).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 8C, 3B, 4E", "cmtst v3.B16, V(7).B16, V(27).B16");
}

#[test]
fn cmtst_283() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v11.B8, V(14).B8, V(30).B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 8D, 3E, 0E", "cmtst v11.B8, V(14).B8, V(30).B8");
}

#[test]
fn cmtst_284() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(8).H8, V(6).H8, V(21).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 8C, 75, 4E", "cmtst V(8).H8, V(6).H8, V(21).H8");
}

#[test]
fn cmtst_285() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v3.H4, v17.H4, v2.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 8E, 62, 0E", "cmtst v3.H4, v17.H4, v2.H4");
}

#[test]
fn cmtst_286() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(1).S4, V(23).S4, v29.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 8E, BD, 4E", "cmtst V(1).S4, V(23).S4, v29.S4");
}

#[test]
fn cmtst_287() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst v24.S2, v5.S2, v15.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 8C, AF, 0E", "cmtst v24.S2, v5.S2, v15.S2");
}

#[test]
fn cmtst_288() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cmtst V(26).D2, v15.D2, V(27).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, 8D, FB, 4E", "cmtst V(26).D2, v15.D2, V(27).D2");
}

#[test]
fn cneg_289() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cneg w21, W(15), cc
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, 25, 8F, 5A", "cneg w21, W(15), cc");
}

#[test]
fn cneg_290() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cneg x24, x7, lo
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, 24, 87, DA", "cneg x24, x7, lo");
}

#[test]
fn cnt_291() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cnt v6.B16, V(7).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 58, 20, 4E", "cnt v6.B16, V(7).B16");
}

#[test]
fn cnt_292() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cnt v18.B8, v24.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, 5B, 20, 0E", "cnt v18.B8, v24.B8");
}

#[test]
fn crc32b_293() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32b w7, w24, W(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 43, C0, 1A", "crc32b w7, w24, W(0)");
}

#[test]
fn crc32cb_294() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cb W(20), W(20), w23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 52, D7, 1A", "crc32cb W(20), W(20), w23");
}

#[test]
fn crc32ch_295() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32ch wzr, w5, w25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 54, D9, 1A", "crc32ch wzr, w5, w25");
}

#[test]
fn crc32cw_296() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cw W(14), W(29), w15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, 5B, CF, 1A", "crc32cw W(14), W(29), w15");
}

#[test]
fn crc32cx_297() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32cx w25, W(1), X(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 5C, C1, 9A", "crc32cx w25, W(1), X(1)");
}

#[test]
fn crc32h_298() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32h w25, w26, W(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 47, D5, 1A", "crc32h w25, w26, W(21)");
}

#[test]
fn crc32w_299() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32w w17, w27, w12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, 4B, CC, 1A", "crc32w w17, w27, w12");
}

#[test]
fn crc32x_300() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; crc32x W(4), w20, X(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, 4E, D2, 9A", "crc32x W(4), w20, X(18)");
}

#[test]
fn csdb_301() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csdb
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 22, 03, D5", "csdb");
}

#[test]
fn csel_302() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csel W(3), W(30), W(27), gt
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, C3, 9B, 1A", "csel W(3), W(30), W(27), gt");
}

#[test]
fn csel_303() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csel x14, X(9), x14, ls
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, 91, 8E, 9A", "csel x14, X(9), x14, ls");
}

#[test]
fn cset_304() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cset w0, vs
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 77, 9F, 1A", "cset w0, vs");
}

#[test]
fn cset_305() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; cset X(6), le
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, C7, 9F, 9A", "cset X(6), le");
}

#[test]
fn csetm_306() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csetm w24, hi
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, 93, 9F, 5A", "csetm w24, hi");
}

#[test]
fn csetm_307() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csetm x20, vc
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F4, 63, 9F, DA", "csetm x20, vc");
}

#[test]
fn csinc_308() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csinc W(4), w29, w24, al
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, E7, 98, 1A", "csinc W(4), w29, w24, al");
}

#[test]
fn csinc_309() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csinc xzr, x24, x4, vc
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 77, 84, 9A", "csinc xzr, x24, x4, vc");
}

#[test]
fn csinv_310() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csinv W(17), w7, W(28), le
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, D0, 9C, 5A", "csinv W(17), w7, W(28), le");
}

#[test]
fn csinv_311() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csinv x15, x15, x21, al
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, E1, 95, DA", "csinv x15, x15, x21, al");
}

#[test]
fn csneg_312() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csneg w11, w2, W(5), nv
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, F4, 85, 5A", "csneg w11, w2, W(5), nv");
}

#[test]
fn csneg_313() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; csneg X(28), X(23), x30, lo
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 36, 9E, DA", "csneg X(28), X(23), x30, lo");
}

#[test]
fn dc_314() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dc cvap, x29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, 7C, 0B, D5", "dc cvap, x29");
}

#[test]
fn dcps1_315() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dcps1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 00, A0, D4", "dcps1");
}

#[test]
fn dcps2_316() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dcps2  30325
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, CE, AE, D4", "dcps2  30325");
}

#[test]
fn dcps3_317() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dcps3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 00, A0, D4", "dcps3");
}

#[test]
fn dmb_318() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dmb oshld
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 31, 03, D5", "dmb oshld");
}

#[test]
fn dmb_319() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dmb 10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 3A, 03, D5", "dmb 10");
}

#[test]
fn drps_320() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; drps
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 03, BF, D6", "drps");
}

#[test]
fn dsb_321() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dsb ld
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 3D, 03, D5", "dsb ld");
}

#[test]
fn dsb_322() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dsb 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, 31, 03, D5", "dsb 1");
}

#[test]
fn dup_323() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup B(2), v22.B[8]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, 06, 11, 5E", "dup B(2), v22.B[8]");
}

#[test]
fn dup_324() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup h7, v19.H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, 06, 0A, 5E", "dup h7, v19.H[2]");
}

#[test]
fn dup_325() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup s18, v23.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, 06, 0C, 5E", "dup s18, v23.S[1]");
}

#[test]
fn dup_326() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup D(15), V(26).D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 07, 18, 5E", "dup D(15), V(26).D[1]");
}

#[test]
fn dup_327() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(8).B16, V(24).B[10]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "08, 07, 15, 4E", "dup V(8).B16, V(24).B[10]");
}

#[test]
fn dup_328() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(9).B8, v5.B[11]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 04, 17, 0E", "dup V(9).B8, v5.B[11]");
}

#[test]
fn dup_329() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v3.H8, V(22).H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 06, 12, 4E", "dup v3.H8, V(22).H[4]");
}

#[test]
fn dup_330() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v26.H4, V(9).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, 05, 06, 0E", "dup v26.H4, V(9).H[1]");
}

#[test]
fn dup_331() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v24.S4, v28.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 07, 0C, 4E", "dup v24.S4, v28.S[1]");
}

#[test]
fn dup_332() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v24.S2, v13.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 05, 1C, 0E", "dup v24.S2, v13.S[3]");
}

#[test]
fn dup_333() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v26.D2, v2.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 04, 08, 4E", "dup v26.D2, v2.D[0]");
}

#[test]
fn dup_334() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v24.B16, W(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 0E, 01, 4E", "dup v24.B16, W(21)");
}

#[test]
fn dup_335() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v9.B8, w14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 0D, 01, 0E", "dup v9.B8, w14");
}

#[test]
fn dup_336() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v20.H8, W(12)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, 0D, 02, 4E", "dup v20.H8, W(12)");
}

#[test]
fn dup_337() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v21.H4, W(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, 0F, 02, 0E", "dup v21.H4, W(27)");
}

#[test]
fn dup_338() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(7).S4, w16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, 0E, 04, 4E", "dup V(7).S4, w16");
}

#[test]
fn dup_339() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup v16.S2, W(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, 0C, 04, 0E", "dup v16.S2, W(4)");
}

#[test]
fn dup_340() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; dup V(0).D2, x9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 0D, 08, 4E", "dup V(0).D2, x9");
}

#[test]
fn eon_341() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eon W(18), W(4), W(22) , LSR 28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 70, 76, 4A", "eon W(18), W(4), W(22) , LSR 28");
}

#[test]
fn eon_342() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eon X(8), X(22), X(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 02, 21, CA", "eon X(8), X(22), X(1)");
}

#[test]
fn eor_343() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor V(26).B16, V(10).B16, V(4).B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 1D, 24, 6E", "eor V(26).B16, V(10).B16, V(4).B16");
}

#[test]
fn eor_344() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor V(2).B8, V(24).B8, v24.B8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 1F, 38, 2E", "eor V(2).B8, V(24).B8, v24.B8");
}

#[test]
fn eor_345() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor WSP(15), W(29), 4292872191
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 57, 0B, 52", "eor WSP(15), W(29), 4292872191");
}

#[test]
fn eor_346() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor x5, X(25), 140737488338944
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 83, 72, D2", "eor x5, X(25), 140737488338944");
}

#[test]
fn eor_347() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor w26, W(24), W(16) , LSL 6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1A, 1B, 10, 4A", "eor w26, W(24), W(16) , LSL 6");
}

#[test]
fn eor_348() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor x14, x2, X(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 00, 12, CA", "eor x14, x2, X(18)");
}

#[test]
fn eor3_349() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eor3 v8.B16, v20.B16, v8.B16, v1.B16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 06, 08, CE", "eor3 v8.B16, v20.B16, v8.B16, v1.B16");
}

#[test]
fn eret_350() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eret
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 03, 9F, D6", "eret");
}

#[test]
fn eretaa_351() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eretaa
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 0B, 9F, D6", "eretaa");
}

#[test]
fn eretab_352() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; eretab
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 0F, 9F, D6", "eretab");
}

#[test]
fn esb_353() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; esb
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 22, 03, D5", "esb");
}

#[test]
fn ext_354() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ext v3.B8, v1.B8, V(23).B8, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 28, 17, 2E", "ext v3.B8, v1.B8, V(23).B8, 5");
}

#[test]
fn ext_355() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; ext V(14).B16, V(31).B16, v26.B16, 12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, 63, 1A, 6E", "ext V(14).B16, V(31).B16, v26.B16, 12");
}

#[test]
fn extr_356() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; extr w19, w2, w29, 15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 3C, 9D, 13", "extr w19, w2, w29, 15");
}

#[test]
fn extr_357() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; extr X(8), X(28), X(18), 30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 7B, D2, 93", "extr X(8), X(28), X(18), 30");
}

#[test]
fn fabd_358() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd H(15), h20, H(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, 16, CF, 7E", "fabd H(15), h20, H(15)");
}

#[test]
fn fabd_359() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd S(28), s16, S(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, D6, A5, 7E", "fabd S(28), s16, S(5)");
}

#[test]
fn fabd_360() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd d7, D(4), D(9)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "87, D4, E9, 7E", "fabd d7, D(4), D(9)");
}

#[test]
fn fabd_361() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(24).H8, V(6).H8, V(2).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 14, C2, 6E", "fabd V(24).H8, V(6).H8, V(2).H8");
}

#[test]
fn fabd_362() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(0).H4, v14.H4, V(26).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 15, DA, 2E", "fabd V(0).H4, v14.H4, V(26).H4");
}

#[test]
fn fabd_363() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd V(23).S4, v21.S4, V(25).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, D6, B9, 6E", "fabd V(23).S4, v21.S4, V(25).S4");
}

#[test]
fn fabd_364() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd v5.S2, V(22).S2, v12.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, D6, AC, 2E", "fabd v5.S2, V(22).S2, v12.S2");
}

#[test]
fn fabd_365() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabd v0.D2, v11.D2, V(30).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, D5, FE, 6E", "fabd v0.D2, v11.D2, V(30).D2");
}

#[test]
fn fabs_366() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs V(20).H8, v28.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, FB, F8, 4E", "fabs V(20).H8, v28.H8");
}

#[test]
fn fabs_367() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v1.H4, v1.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "21, F8, F8, 0E", "fabs v1.H4, v1.H4");
}

#[test]
fn fabs_368() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v19.S4, v30.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, FB, A0, 4E", "fabs v19.S4, v30.S4");
}

#[test]
fn fabs_369() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v15.S2, V(2).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, F8, A0, 0E", "fabs v15.S2, V(2).S2");
}

#[test]
fn fabs_370() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs v12.D2, v11.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, F9, E0, 4E", "fabs v12.D2, v11.D2");
}

#[test]
fn fabs_371() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs H(4), h20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, C2, E0, 1E", "fabs H(4), h20");
}

#[test]
fn fabs_372() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs S(15), S(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, C2, 20, 1E", "fabs S(15), S(18)");
}

#[test]
fn fabs_373() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fabs d23, d27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, C3, 60, 1E", "fabs d23, d27");
}

#[test]
fn facge_374() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge h30, h27, h16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 2F, 50, 7E", "facge h30, h27, h16");
}

#[test]
fn facge_375() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge S(22), s24, S(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, EF, 20, 7E", "facge S(22), s24, S(0)");
}

#[test]
fn facge_376() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge D(20), d24, D(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, EF, 73, 7E", "facge D(20), d24, D(19)");
}

#[test]
fn facge_377() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(8).H8, v14.H8, V(23).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 2D, 57, 6E", "facge V(8).H8, v14.H8, V(23).H8");
}

#[test]
fn facge_378() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge v1.H4, V(13).H4, v17.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, 2D, 51, 2E", "facge v1.H4, V(13).H4, v17.H4");
}

#[test]
fn facge_379() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge V(19).S4, v22.S4, V(18).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, EE, 32, 6E", "facge V(19).S4, v22.S4, V(18).S4");
}

#[test]
fn facge_380() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge v23.S2, V(18).S2, v27.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, EE, 3B, 2E", "facge v23.S2, V(18).S2, v27.S2");
}

#[test]
fn facge_381() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facge v3.D2, V(27).D2, V(23).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, EF, 77, 6E", "facge v3.D2, V(27).D2, V(23).D2");
}

#[test]
fn facgt_382() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt h12, H(30), H(27)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CC, 2F, DB, 7E", "facgt h12, H(30), H(27)");
}

#[test]
fn facgt_383() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt s2, S(10), S(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "42, ED, A6, 7E", "facgt s2, S(10), S(6)");
}

#[test]
fn facgt_384() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt d23, D(15), D(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, ED, F9, 7E", "facgt d23, D(15), D(25)");
}

#[test]
fn facgt_385() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt v15.H8, V(21).H8, V(22).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, 2E, D6, 6E", "facgt v15.H8, V(21).H8, V(22).H8");
}

#[test]
fn facgt_386() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(4).H4, V(0).H4, V(19).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 2C, D3, 2E", "facgt V(4).H4, V(0).H4, V(19).H4");
}

#[test]
fn facgt_387() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt v29.S4, V(22).S4, V(15).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, EE, AF, 6E", "facgt v29.S4, V(22).S4, V(15).S4");
}

#[test]
fn facgt_388() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt v5.S2, V(14).S2, V(25).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, ED, B9, 2E", "facgt v5.S2, V(14).S2, V(25).S2");
}

#[test]
fn facgt_389() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; facgt V(25).D2, v21.D2, V(29).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, EE, FD, 6E", "facgt V(25).D2, v21.D2, V(29).D2");
}

#[test]
fn fadd_390() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(12).H8, v25.H8, V(10).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, 17, 4A, 4E", "fadd V(12).H8, v25.H8, V(10).H8");
}

#[test]
fn fadd_391() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(8).H4, v21.H4, V(24).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, 16, 58, 0E", "fadd V(8).H4, v21.H4, V(24).H4");
}

#[test]
fn fadd_392() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd v18.S4, V(23).S4, v10.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, D6, 2A, 4E", "fadd v18.S4, V(23).S4, v10.S4");
}

#[test]
fn fadd_393() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(12).S2, v25.S2, v20.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, D7, 34, 0E", "fadd V(12).S2, v25.S2, v20.S2");
}

#[test]
fn fadd_394() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd V(9).D2, V(7).D2, V(3).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E9, D4, 63, 4E", "fadd V(9).D2, V(7).D2, V(3).D2");
}

#[test]
fn fadd_395() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd h7, h10, h6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 29, E6, 1E", "fadd h7, h10, h6");
}

#[test]
fn fadd_396() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd s27, S(31), S(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, 2B, 3C, 1E", "fadd s27, S(31), S(28)");
}

#[test]
fn fadd_397() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fadd d30, D(12), D(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 29, 72, 1E", "fadd d30, D(12), D(18)");
}

#[test]
fn faddp_398() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp H(18), v23.H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, DA, 30, 5E", "faddp H(18), v23.H2");
}

#[test]
fn faddp_399() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp s12, V(7).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, D8, 30, 7E", "faddp s12, V(7).S2");
}

#[test]
fn faddp_400() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp d15, v18.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, DA, 70, 7E", "faddp d15, v18.D2");
}

#[test]
fn faddp_401() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp V(3).H8, v0.H8, V(2).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 14, 42, 6E", "faddp V(3).H8, v0.H8, V(2).H8");
}

#[test]
fn faddp_402() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp v19.H4, V(1).H4, V(10).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, 14, 4A, 2E", "faddp v19.H4, V(1).H4, V(10).H4");
}

#[test]
fn faddp_403() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp v19.S4, v4.S4, v13.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, D4, 2D, 6E", "faddp v19.S4, v4.S4, v13.S4");
}

#[test]
fn faddp_404() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp v1.S2, v6.S2, V(27).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C1, D4, 3B, 2E", "faddp v1.S2, v6.S2, V(27).S2");
}

#[test]
fn faddp_405() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; faddp V(25).D2, V(27).D2, V(28).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, D7, 7C, 6E", "faddp V(25).D2, V(27).D2, V(28).D2");
}

#[test]
fn fcadd_406() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcadd V(7).H8, V(16).H8, v21.H8, 90
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, E6, 55, 6E", "fcadd V(7).H8, V(16).H8, v21.H8, 90");
}

#[test]
fn fcadd_407() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcadd v9.H4, V(5).H4, v9.H4, 270
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, F4, 49, 2E", "fcadd v9.H4, V(5).H4, v9.H4, 270");
}

#[test]
fn fcadd_408() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcadd v11.S4, v6.S4, v29.S4, 90
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, E4, 9D, 6E", "fcadd v11.S4, v6.S4, v29.S4, 90");
}

#[test]
fn fcadd_409() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcadd V(1).S2, V(24).S2, v7.S2, 90
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, E7, 87, 2E", "fcadd V(1).S2, V(24).S2, v7.S2, 90");
}

#[test]
fn fcadd_410() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcadd v8.D2, V(21).D2, v17.D2, 90
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, E6, D1, 6E", "fcadd v8.D2, V(21).D2, v17.D2, 90");
}

#[test]
fn fccmp_411() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fccmp h18, h3, 0, ge
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, A6, E3, 1E", "fccmp h18, h3, 0, ge");
}

#[test]
fn fccmp_412() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fccmp s11, s20, 8, cs
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 25, 34, 1E", "fccmp s11, s20, 8, cs");
}

#[test]
fn fccmp_413() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fccmp D(30), d9, 4, ge
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, A7, 69, 1E", "fccmp D(30), d9, 4, ge");
}

#[test]
fn fccmpe_414() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fccmpe H(12), h17, 1, vs
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "91, 65, F1, 1E", "fccmpe H(12), h17, 1, vs");
}

#[test]
fn fccmpe_415() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fccmpe s1, S(25), 0, lt
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, B4, 39, 1E", "fccmpe s1, S(25), 0, lt");
}

#[test]
fn fccmpe_416() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fccmpe d22, d7, 14, ge
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, A6, 67, 1E", "fccmpe d22, d7, 14, ge");
}

#[test]
fn fcmeq_417() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq h19, h18, H(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 26, 4B, 5E", "fcmeq h19, h18, H(11)");
}

#[test]
fn fcmeq_418() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq s29, S(25), s17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3D, E7, 31, 5E", "fcmeq s29, S(25), s17");
}

#[test]
fn fcmeq_419() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq d6, D(4), D(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, E4, 64, 5E", "fcmeq d6, D(4), D(4)");
}

#[test]
fn fcmeq_420() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq v2.H8, v24.H8, V(4).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 27, 44, 4E", "fcmeq v2.H8, v24.H8, V(4).H8");
}

#[test]
fn fcmeq_421() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq v29.H4, V(24).H4, v2.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 27, 42, 0E", "fcmeq v29.H4, V(24).H4, v2.H4");
}

#[test]
fn fcmeq_422() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(3).S4, v17.S4, V(23).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, E6, 37, 4E", "fcmeq V(3).S4, v17.S4, V(23).S4");
}

#[test]
fn fcmeq_423() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(7).S2, v3.S2, V(31).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, E4, 3F, 0E", "fcmeq V(7).S2, v3.S2, V(31).S2");
}

#[test]
fn fcmeq_424() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(4).D2, v4.D2, V(26).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "84, E4, 7A, 4E", "fcmeq V(4).D2, v4.D2, V(26).D2");
}

#[test]
fn fcmeq_425() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq H(0), h24, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, DB, F8, 5E", "fcmeq H(0), h24, 0.00000");
}

#[test]
fn fcmeq_426() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq s0, s13, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, D9, A0, 5E", "fcmeq s0, s13, 0.00000");
}

#[test]
fn fcmeq_427() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq d18, d11, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, D9, E0, 5E", "fcmeq d18, d11, 0.00000");
}

#[test]
fn fcmeq_428() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(11).H8, v27.H8, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, DB, F8, 4E", "fcmeq V(11).H8, v27.H8, 0.00000");
}

#[test]
fn fcmeq_429() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(5).H4, V(16).H4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, DA, F8, 0E", "fcmeq V(5).H4, V(16).H4, 0.00000");
}

#[test]
fn fcmeq_430() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(26).S4, V(25).S4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, DB, A0, 4E", "fcmeq V(26).S4, V(25).S4, 0.00000");
}

#[test]
fn fcmeq_431() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq v26.S2, V(30).S2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, DB, A0, 0E", "fcmeq v26.S2, V(30).S2, 0.00000");
}

#[test]
fn fcmeq_432() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmeq V(11).D2, v18.D2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, DA, E0, 4E", "fcmeq V(11).D2, v18.D2, 0.00000");
}

#[test]
fn fcmge_433() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge h16, H(8), H(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 25, 41, 7E", "fcmge h16, H(8), H(1)");
}

#[test]
fn fcmge_434() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge S(6), S(17), S(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, E6, 3C, 7E", "fcmge S(6), S(17), S(28)");
}

#[test]
fn fcmge_435() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge d12, D(19), D(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, E6, 74, 7E", "fcmge d12, D(19), D(20)");
}

#[test]
fn fcmge_436() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge V(26).H8, v28.H8, v10.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 27, 4A, 6E", "fcmge V(26).H8, v28.H8, v10.H8");
}

#[test]
fn fcmge_437() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge v25.H4, V(5).H4, V(3).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, 24, 43, 2E", "fcmge v25.H4, V(5).H4, V(3).H4");
}

#[test]
fn fcmge_438() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge v6.S4, V(7).S4, V(23).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, E4, 37, 6E", "fcmge v6.S4, V(7).S4, V(23).S4");
}

#[test]
fn fcmge_439() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge V(5).S2, V(7).S2, V(18).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, E4, 32, 2E", "fcmge V(5).S2, V(7).S2, V(18).S2");
}

#[test]
fn fcmge_440() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge v24.D2, v19.D2, V(1).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, E6, 61, 6E", "fcmge v24.D2, v19.D2, V(1).D2");
}

#[test]
fn fcmge_441() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge H(25), H(1), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, C8, F8, 7E", "fcmge H(25), H(1), 0.00000");
}

#[test]
fn fcmge_442() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge S(20), S(24), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, CB, A0, 7E", "fcmge S(20), S(24), 0.00000");
}

#[test]
fn fcmge_443() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge D(9), d6, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, C8, E0, 7E", "fcmge D(9), d6, 0.00000");
}

#[test]
fn fcmge_444() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge v30.H8, V(30).H8, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DE, CB, F8, 6E", "fcmge v30.H8, V(30).H8, 0.00000");
}

#[test]
fn fcmge_445() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge V(23).H4, V(23).H4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, CA, F8, 2E", "fcmge V(23).H4, V(23).H4, 0.00000");
}

#[test]
fn fcmge_446() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge V(28).S4, V(6).S4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, C8, A0, 6E", "fcmge V(28).S4, V(6).S4, 0.00000");
}

#[test]
fn fcmge_447() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge v30.S2, V(24).S2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, CB, A0, 2E", "fcmge v30.S2, V(24).S2, 0.00000");
}

#[test]
fn fcmge_448() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmge V(28).D2, v10.D2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, C9, E0, 6E", "fcmge V(28).D2, v10.D2, 0.00000");
}

#[test]
fn fcmgt_449() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt H(25), h20, H(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, 26, C5, 7E", "fcmgt H(25), h20, H(5)");
}

#[test]
fn fcmgt_450() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt S(26), s20, S(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, E6, BC, 7E", "fcmgt S(26), s20, S(28)");
}

#[test]
fn fcmgt_451() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt D(12), d17, D(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, E6, F7, 7E", "fcmgt D(12), d17, D(23)");
}

#[test]
fn fcmgt_452() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt v8.H8, V(25).H8, v8.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 27, C8, 6E", "fcmgt v8.H8, V(25).H8, v8.H8");
}

#[test]
fn fcmgt_453() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt V(12).H4, v20.H4, v5.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 26, C5, 2E", "fcmgt V(12).H4, v20.H4, v5.H4");
}

#[test]
fn fcmgt_454() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt V(6).S4, V(4).S4, V(7).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, E4, A7, 6E", "fcmgt V(6).S4, V(4).S4, V(7).S4");
}

#[test]
fn fcmgt_455() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt v30.S2, V(15).S2, v15.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, E5, AF, 2E", "fcmgt v30.S2, V(15).S2, v15.S2");
}

#[test]
fn fcmgt_456() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt v25.D2, V(8).D2, v1.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, E5, E1, 6E", "fcmgt v25.D2, V(8).D2, v1.D2");
}

#[test]
fn fcmgt_457() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt h17, H(14), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, C9, F8, 5E", "fcmgt h17, H(14), 0.00000");
}

#[test]
fn fcmgt_458() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt S(18), S(29), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, CB, A0, 5E", "fcmgt S(18), S(29), 0.00000");
}

#[test]
fn fcmgt_459() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt d28, D(26), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, CB, E0, 5E", "fcmgt d28, D(26), 0.00000");
}

#[test]
fn fcmgt_460() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt V(15).H8, v22.H8, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CF, CA, F8, 4E", "fcmgt V(15).H8, v22.H8, 0.00000");
}

#[test]
fn fcmgt_461() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt v27.H4, v18.H4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, CA, F8, 0E", "fcmgt v27.H4, v18.H4, 0.00000");
}

#[test]
fn fcmgt_462() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt v14.S4, V(2).S4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, C8, A0, 4E", "fcmgt v14.S4, V(2).S4, 0.00000");
}

#[test]
fn fcmgt_463() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt V(28).S2, V(8).S2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1C, C9, A0, 0E", "fcmgt V(28).S2, V(8).S2, 0.00000");
}

#[test]
fn fcmgt_464() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmgt v29.D2, V(30).D2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DD, CB, E0, 4E", "fcmgt v29.D2, V(30).D2, 0.00000");
}

#[test]
fn fcmla_465() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla v28.H4, V(9).H4, v31.H[1], 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, 11, 7F, 2F", "fcmla v28.H4, V(9).H4, v31.H[1], 0");
}

#[test]
fn fcmla_466() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla v26.H8, V(6).H8, v6.H[1], 180
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, 50, 66, 6F", "fcmla v26.H8, V(6).H8, v6.H[1], 180");
}

#[test]
fn fcmla_467() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla V(21).S4, v1.S4, v25.S[1], 180
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 58, 99, 6F", "fcmla V(21).S4, v1.S4, v25.S[1], 180");
}

#[test]
fn fcmla_468() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla V(9).H8, V(5).H8, V(11).H8, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, C4, 4B, 6E", "fcmla V(9).H8, V(5).H8, V(11).H8, 0");
}

#[test]
fn fcmla_469() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla V(4).H4, v29.H4, V(21).H4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, C7, 55, 2E", "fcmla V(4).H4, v29.H4, V(21).H4, 0");
}

#[test]
fn fcmla_470() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla V(6).S4, V(9).S4, v8.S4, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, C5, 88, 6E", "fcmla V(6).S4, V(9).S4, v8.S4, 0");
}

#[test]
fn fcmla_471() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla v3.S2, v0.S2, v3.S2, 0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, C4, 83, 2E", "fcmla v3.S2, v0.S2, v3.S2, 0");
}

#[test]
fn fcmla_472() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmla V(19).D2, V(6).D2, V(3).D2, 270
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, DC, C3, 6E", "fcmla V(19).D2, V(6).D2, V(3).D2, 270");
}

#[test]
fn fcmle_473() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle H(17), H(19), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, DA, F8, 7E", "fcmle H(17), H(19), 0.00000");
}

#[test]
fn fcmle_474() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle s7, s3, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, D8, A0, 7E", "fcmle s7, s3, 0.00000");
}

#[test]
fn fcmle_475() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle D(29), d29, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BD, DB, E0, 7E", "fcmle D(29), d29, 0.00000");
}

#[test]
fn fcmle_476() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle V(5).H8, v25.H8, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, DB, F8, 6E", "fcmle V(5).H8, v25.H8, 0.00000");
}

#[test]
fn fcmle_477() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle v15.H4, V(13).H4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, D9, F8, 2E", "fcmle v15.H4, V(13).H4, 0.00000");
}

#[test]
fn fcmle_478() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle v31.S4, v28.S4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, DB, A0, 6E", "fcmle v31.S4, v28.S4, 0.00000");
}

#[test]
fn fcmle_479() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle v2.S2, v7.S2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, D8, A0, 2E", "fcmle v2.S2, v7.S2, 0.00000");
}

#[test]
fn fcmle_480() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmle V(15).D2, V(31).D2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, DB, E0, 6E", "fcmle V(15).D2, V(31).D2, 0.00000");
}

#[test]
fn fcmlt_481() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt H(21), h23, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F5, EA, F8, 5E", "fcmlt H(21), h23, 0.00000");
}

#[test]
fn fcmlt_482() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt S(27), s15, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, E9, A0, 5E", "fcmlt S(27), s15, 0.00000");
}

#[test]
fn fcmlt_483() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt D(16), D(6), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, E8, E0, 5E", "fcmlt D(16), D(6), 0.00000");
}

#[test]
fn fcmlt_484() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt v12.H8, V(7).H8, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, E8, F8, 4E", "fcmlt v12.H8, V(7).H8, 0.00000");
}

#[test]
fn fcmlt_485() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt v2.H4, V(13).H4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, E9, F8, 0E", "fcmlt v2.H4, V(13).H4, 0.00000");
}

#[test]
fn fcmlt_486() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt v28.S4, v10.S4, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, E9, A0, 4E", "fcmlt v28.S4, v10.S4, 0.00000");
}

#[test]
fn fcmlt_487() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt V(27).S2, v19.S2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, EA, A0, 0E", "fcmlt V(27).S2, v19.S2, 0.00000");
}

#[test]
fn fcmlt_488() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmlt V(1).D2, v21.D2, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, EA, E0, 4E", "fcmlt V(1).D2, v21.D2, 0.00000");
}

#[test]
fn fcmp_489() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmp h1, H(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 20, E2, 1E", "fcmp h1, H(2)");
}

#[test]
fn fcmp_490() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmp h20, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 22, E0, 1E", "fcmp h20, 0.00000");
}

#[test]
fn fcmp_491() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmp s30, S(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 23, 31, 1E", "fcmp s30, S(17)");
}

#[test]
fn fcmp_492() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmp S(20), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "88, 22, 20, 1E", "fcmp S(20), 0.00000");
}

#[test]
fn fcmp_493() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmp d6, d26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, 20, 7A, 1E", "fcmp d6, d26");
}

#[test]
fn fcmp_494() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmp D(25), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 23, 60, 1E", "fcmp D(25), 0.00000");
}

#[test]
fn fcmpe_495() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmpe h17, H(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 22, FD, 1E", "fcmpe h17, H(29)");
}

#[test]
fn fcmpe_496() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmpe h30, 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 23, E0, 1E", "fcmpe h30, 0.00000");
}

#[test]
fn fcmpe_497() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmpe S(9), s26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 21, 3A, 1E", "fcmpe S(9), s26");
}

#[test]
fn fcmpe_498() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmpe S(12), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 21, 20, 1E", "fcmpe S(12), 0.00000");
}

#[test]
fn fcmpe_499() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmpe D(27), D(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 23, 6D, 1E", "fcmpe D(27), D(13)");
}

#[test]
fn fcmpe_500() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcmpe D(5), 0.00000
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 20, 60, 1E", "fcmpe D(5), 0.00000");
}

#[test]
fn fcsel_501() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcsel H(27), H(28), h27, lt
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, BF, FB, 1E", "fcsel H(27), H(28), h27, lt");
}

#[test]
fn fcsel_502() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcsel S(26), s11, S(15), ge
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7A, AD, 2F, 1E", "fcsel S(26), s11, S(15), ge");
}

#[test]
fn fcsel_503() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcsel D(24), d25, D(0), vs
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, 6F, 60, 1E", "fcsel D(24), d25, D(0), vs");
}

#[test]
fn fcvt_504() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvt S(1), h0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "01, 40, E2, 1E", "fcvt S(1), h0");
}

#[test]
fn fcvt_505() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvt D(18), h30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, C3, E2, 1E", "fcvt D(18), h30");
}

#[test]
fn fcvt_506() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvt h2, s15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, C1, 23, 1E", "fcvt h2, s15");
}

#[test]
fn fcvt_507() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvt d3, S(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, C2, 22, 1E", "fcvt d3, S(17)");
}

#[test]
fn fcvt_508() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvt h12, d23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, C2, 63, 1E", "fcvt h12, d23");
}

#[test]
fn fcvt_509() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvt s8, d25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 43, 62, 1E", "fcvt s8, d25");
}

#[test]
fn fcvtas_510() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas h28, H(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, CB, 79, 5E", "fcvtas h28, H(26)");
}

#[test]
fn fcvtas_511() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas S(2), s19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, CA, 21, 5E", "fcvtas S(2), s19");
}

#[test]
fn fcvtas_512() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas d12, d19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6C, CA, 61, 5E", "fcvtas d12, d19");
}

#[test]
fn fcvtas_513() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas V(30).H8, V(18).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, CA, 79, 4E", "fcvtas V(30).H8, V(18).H8");
}

#[test]
fn fcvtas_514() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas V(7).H4, V(6).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, C8, 79, 0E", "fcvtas V(7).H4, V(6).H4");
}

#[test]
fn fcvtas_515() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas V(7).S4, V(22).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C7, CA, 21, 4E", "fcvtas V(7).S4, V(22).S4");
}

#[test]
fn fcvtas_516() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas V(15).S2, v21.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AF, CA, 21, 0E", "fcvtas V(15).S2, v21.S2");
}

#[test]
fn fcvtas_517() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas V(24).D2, V(30).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, CB, 61, 4E", "fcvtas V(24).D2, V(30).D2");
}

#[test]
fn fcvtas_518() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas W(18), h17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 02, E4, 1E", "fcvtas W(18), h17");
}

#[test]
fn fcvtas_519() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas X(18), h30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, 03, E4, 9E", "fcvtas X(18), h30");
}

#[test]
fn fcvtas_520() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas W(8), s2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "48, 00, 24, 1E", "fcvtas W(8), s2");
}

#[test]
fn fcvtas_521() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas x24, s29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 03, 24, 9E", "fcvtas x24, s29");
}

#[test]
fn fcvtas_522() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas w18, d13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 01, 64, 1E", "fcvtas w18, d13");
}

#[test]
fn fcvtas_523() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtas x18, D(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 02, 64, 9E", "fcvtas x18, D(19)");
}

#[test]
fn fcvtau_524() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau h13, h8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, C9, 79, 7E", "fcvtau h13, h8");
}

#[test]
fn fcvtau_525() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau S(19), S(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, CB, 21, 7E", "fcvtau S(19), S(30)");
}

#[test]
fn fcvtau_526() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau D(19), D(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, CA, 61, 7E", "fcvtau D(19), D(18)");
}

#[test]
fn fcvtau_527() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau v8.H8, V(9).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, C9, 79, 6E", "fcvtau v8.H8, V(9).H8");
}

#[test]
fn fcvtau_528() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau V(22).H4, v26.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, CB, 79, 2E", "fcvtau V(22).H4, v26.H4");
}

#[test]
fn fcvtau_529() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau V(0).S4, v6.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, C8, 21, 6E", "fcvtau V(0).S4, v6.S4");
}

#[test]
fn fcvtau_530() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau V(7).S2, v24.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, CB, 21, 2E", "fcvtau V(7).S2, v24.S2");
}

#[test]
fn fcvtau_531() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau v9.D2, v11.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, C9, 61, 6E", "fcvtau v9.D2, v11.D2");
}

#[test]
fn fcvtau_532() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau W(26), h28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 03, E5, 1E", "fcvtau W(26), h28");
}

#[test]
fn fcvtau_533() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau X(17), H(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 03, E5, 9E", "fcvtau X(17), H(26)");
}

#[test]
fn fcvtau_534() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau W(17), S(31)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F1, 03, 25, 1E", "fcvtau W(17), S(31)");
}

#[test]
fn fcvtau_535() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau x9, S(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 03, 25, 9E", "fcvtau x9, S(30)");
}

#[test]
fn fcvtau_536() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau wzr, D(31)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 03, 65, 1E", "fcvtau wzr, D(31)");
}

#[test]
fn fcvtau_537() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtau X(31), d15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 01, 65, 9E", "fcvtau X(31), d15");
}

#[test]
fn fcvtl_538() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtl v21.S4, v28.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "95, 7B, 21, 0E", "fcvtl v21.S4, v28.H4");
}

#[test]
fn fcvtl_539() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtl v0.D2, V(25).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 7B, 61, 0E", "fcvtl v0.D2, V(25).S2");
}

#[test]
fn fcvtl2_540() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtl2 V(12).S4, V(29).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, 7B, 21, 4E", "fcvtl2 V(12).S4, V(29).H8");
}

#[test]
fn fcvtl2_541() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtl2 V(2).D2, v3.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, 78, 61, 4E", "fcvtl2 V(2).D2, v3.S4");
}

#[test]
fn fcvtms_542() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms H(18), h7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F2, B8, 79, 5E", "fcvtms H(18), h7");
}

#[test]
fn fcvtms_543() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms S(4), s11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, B9, 21, 5E", "fcvtms S(4), s11");
}

#[test]
fn fcvtms_544() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms d9, D(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, BA, 61, 5E", "fcvtms d9, D(17)");
}

#[test]
fn fcvtms_545() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms V(1).H8, v28.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, BB, 79, 4E", "fcvtms V(1).H8, v28.H8");
}

#[test]
fn fcvtms_546() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms V(24).H4, v11.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, B9, 79, 0E", "fcvtms V(24).H4, v11.H4");
}

#[test]
fn fcvtms_547() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms v23.S4, v1.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, B8, 21, 4E", "fcvtms v23.S4, v1.S4");
}

#[test]
fn fcvtms_548() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms v12.S2, V(4).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, B8, 21, 0E", "fcvtms v12.S2, V(4).S2");
}

#[test]
fn fcvtms_549() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms V(14).D2, V(15).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, B9, 61, 4E", "fcvtms V(14).D2, V(15).D2");
}

#[test]
fn fcvtms_550() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms w18, H(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 02, F0, 1E", "fcvtms w18, H(21)");
}

#[test]
fn fcvtms_551() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms x30, h24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 03, F0, 9E", "fcvtms x30, h24");
}

#[test]
fn fcvtms_552() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms w30, s20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9E, 02, 30, 1E", "fcvtms w30, s20");
}

#[test]
fn fcvtms_553() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms X(19), S(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, 03, 30, 9E", "fcvtms X(19), S(29)");
}

#[test]
fn fcvtms_554() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms W(5), d15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 01, 70, 1E", "fcvtms W(5), d15");
}

#[test]
fn fcvtms_555() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtms x17, d18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 02, 70, 9E", "fcvtms x17, d18");
}

#[test]
fn fcvtmu_556() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu H(18), H(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D2, B8, 79, 7E", "fcvtmu H(18), H(6)");
}

#[test]
fn fcvtmu_557() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu S(0), s18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, BA, 21, 7E", "fcvtmu S(0), s18");
}

#[test]
fn fcvtmu_558() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu D(28), d25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, BB, 61, 7E", "fcvtmu D(28), d25");
}

#[test]
fn fcvtmu_559() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu V(0).H8, v27.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, BB, 79, 6E", "fcvtmu V(0).H8, v27.H8");
}

#[test]
fn fcvtmu_560() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu V(5).H4, V(13).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, B9, 79, 2E", "fcvtmu V(5).H4, V(13).H4");
}

#[test]
fn fcvtmu_561() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu V(23).S4, V(19).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, BA, 21, 6E", "fcvtmu V(23).S4, V(19).S4");
}

#[test]
fn fcvtmu_562() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu v17.S2, V(19).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, BA, 21, 2E", "fcvtmu v17.S2, V(19).S2");
}

#[test]
fn fcvtmu_563() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu v25.D2, V(21).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, BA, 61, 6E", "fcvtmu v25.D2, V(21).D2");
}

#[test]
fn fcvtmu_564() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu W(10), h29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, 03, F1, 1E", "fcvtmu W(10), h29");
}

#[test]
fn fcvtmu_565() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu x9, H(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, 02, F1, 9E", "fcvtmu x9, H(17)");
}

#[test]
fn fcvtmu_566() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu W(15), s19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6F, 02, 31, 1E", "fcvtmu W(15), s19");
}

#[test]
fn fcvtmu_567() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu X(14), S(3)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, 00, 31, 9E", "fcvtmu X(14), S(3)");
}

#[test]
fn fcvtmu_568() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu W(15), D(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 02, 71, 1E", "fcvtmu W(15), D(23)");
}

#[test]
fn fcvtmu_569() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtmu x2, d14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, 01, 71, 9E", "fcvtmu x2, d14");
}

#[test]
fn fcvtn_570() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtn V(8).S2, v27.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 6B, 61, 0E", "fcvtn V(8).S2, v27.D2");
}

#[test]
fn fcvtn2_571() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtn2 V(3).S4, V(30).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 6B, 61, 4E", "fcvtn2 V(3).S4, V(30).D2");
}

#[test]
fn fcvtns_572() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns H(10), H(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, A9, 79, 5E", "fcvtns H(10), H(15)");
}

#[test]
fn fcvtns_573() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns S(21), S(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, AA, 21, 5E", "fcvtns S(21), S(19)");
}

#[test]
fn fcvtns_574() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns d25, d10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, A9, 61, 5E", "fcvtns d25, d10");
}

#[test]
fn fcvtns_575() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns v9.H8, v8.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, A9, 79, 4E", "fcvtns v9.H8, v8.H8");
}

#[test]
fn fcvtns_576() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns V(10).H4, V(1).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, A8, 79, 0E", "fcvtns V(10).H4, V(1).H4");
}

#[test]
fn fcvtns_577() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns V(21).S4, V(10).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "55, A9, 21, 4E", "fcvtns V(21).S4, V(10).S4");
}

#[test]
fn fcvtns_578() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns V(11).S2, V(23).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, AA, 21, 0E", "fcvtns V(11).S2, V(23).S2");
}

#[test]
fn fcvtns_579() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns V(3).D2, V(29).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A3, AB, 61, 4E", "fcvtns V(3).D2, V(29).D2");
}

#[test]
fn fcvtns_580() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns W(0), H(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 03, E0, 1E", "fcvtns W(0), H(25)");
}

#[test]
fn fcvtns_581() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns x25, h6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 00, E0, 9E", "fcvtns x25, h6");
}

#[test]
fn fcvtns_582() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns w8, s23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E8, 02, 20, 1E", "fcvtns w8, s23");
}

#[test]
fn fcvtns_583() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns X(3), S(18)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, 02, 20, 9E", "fcvtns X(3), S(18)");
}

#[test]
fn fcvtns_584() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns W(16), d15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 01, 60, 1E", "fcvtns W(16), d15");
}

#[test]
fn fcvtns_585() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtns x26, d12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 01, 60, 9E", "fcvtns x26, d12");
}

#[test]
fn fcvtnu_586() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu h16, H(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, A8, 79, 7E", "fcvtnu h16, H(1)");
}

#[test]
fn fcvtnu_587() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu S(28), s25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, AB, 21, 7E", "fcvtnu S(28), s25");
}

#[test]
fn fcvtnu_588() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu D(15), D(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, A8, 61, 7E", "fcvtnu D(15), D(7)");
}

#[test]
fn fcvtnu_589() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu v22.H8, v27.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, AB, 79, 6E", "fcvtnu v22.H8, v27.H8");
}

#[test]
fn fcvtnu_590() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu v5.H4, V(12).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, A9, 79, 2E", "fcvtnu v5.H4, V(12).H4");
}

#[test]
fn fcvtnu_591() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu v17.S4, V(22).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, AA, 21, 6E", "fcvtnu v17.S4, V(22).S4");
}

#[test]
fn fcvtnu_592() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu V(31).S2, v11.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, A9, 21, 2E", "fcvtnu V(31).S2, v11.S2");
}

#[test]
fn fcvtnu_593() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu V(2).D2, v0.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, A8, 61, 6E", "fcvtnu V(2).D2, v0.D2");
}

#[test]
fn fcvtnu_594() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu W(5), h20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 02, E1, 1E", "fcvtnu W(5), h20");
}

#[test]
fn fcvtnu_595() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu X(4), h3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, 00, E1, 9E", "fcvtnu X(4), h3");
}

#[test]
fn fcvtnu_596() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu W(13), S(9)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, 01, 21, 1E", "fcvtnu W(13), S(9)");
}

#[test]
fn fcvtnu_597() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu x2, s8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 01, 21, 9E", "fcvtnu x2, s8");
}

#[test]
fn fcvtnu_598() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu w25, d6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D9, 00, 61, 1E", "fcvtnu w25, d6");
}

#[test]
fn fcvtnu_599() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtnu x17, d26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "51, 03, 61, 9E", "fcvtnu x17, d26");
}

#[test]
fn fcvtps_600() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps H(20), H(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "94, AA, F9, 5E", "fcvtps H(20), H(20)");
}

#[test]
fn fcvtps_601() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps s17, s22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, AA, A1, 5E", "fcvtps s17, s22");
}

#[test]
fn fcvtps_602() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps d0, d6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C0, A8, E1, 5E", "fcvtps d0, d6");
}

#[test]
fn fcvtps_603() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps V(27).H8, v28.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, AB, F9, 4E", "fcvtps V(27).H8, v28.H8");
}

#[test]
fn fcvtps_604() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps V(16).H4, v31.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, AB, F9, 0E", "fcvtps V(16).H4, v31.H4");
}

#[test]
fn fcvtps_605() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps V(27).S4, V(3).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, A8, A1, 4E", "fcvtps V(27).S4, V(3).S4");
}

#[test]
fn fcvtps_606() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps v9.S2, V(0).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, A8, A1, 0E", "fcvtps v9.S2, V(0).S2");
}

#[test]
fn fcvtps_607() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps v11.D2, V(9).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, A9, E1, 4E", "fcvtps v11.D2, V(9).D2");
}

#[test]
fn fcvtps_608() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps W(8), H(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 02, E8, 1E", "fcvtps W(8), H(19)");
}

#[test]
fn fcvtps_609() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps X(19), h6
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, 00, E8, 9E", "fcvtps X(19), h6");
}

#[test]
fn fcvtps_610() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps wzr, S(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 01, 28, 1E", "fcvtps wzr, S(13)");
}

#[test]
fn fcvtps_611() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps X(23), s19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "77, 02, 28, 9E", "fcvtps X(23), s19");
}

#[test]
fn fcvtps_612() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps w18, D(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, 02, 68, 1E", "fcvtps w18, D(17)");
}

#[test]
fn fcvtps_613() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtps x5, D(14)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 01, 68, 9E", "fcvtps x5, D(14)");
}

#[test]
fn fcvtpu_614() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu H(15), h25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2F, AB, F9, 7E", "fcvtpu H(15), h25");
}

#[test]
fn fcvtpu_615() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu S(5), s1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, A8, A1, 7E", "fcvtpu S(5), s1");
}

#[test]
fn fcvtpu_616() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu d27, D(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, A8, E1, 7E", "fcvtpu d27, D(7)");
}

#[test]
fn fcvtpu_617() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu v29.H8, V(12).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9D, A9, F9, 6E", "fcvtpu v29.H8, V(12).H8");
}

#[test]
fn fcvtpu_618() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu V(28).H4, v22.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, AA, F9, 2E", "fcvtpu V(28).H4, v22.H4");
}

#[test]
fn fcvtpu_619() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu V(5).S4, V(5).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, A8, A1, 6E", "fcvtpu V(5).S4, V(5).S4");
}

#[test]
fn fcvtpu_620() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu v7.S2, v0.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "07, A8, A1, 2E", "fcvtpu v7.S2, v0.S2");
}

#[test]
fn fcvtpu_621() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu v28.D2, v20.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, AA, E1, 6E", "fcvtpu v28.D2, v20.D2");
}

#[test]
fn fcvtpu_622() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu W(1), h27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 03, E9, 1E", "fcvtpu W(1), h27");
}

#[test]
fn fcvtpu_623() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu X(21), H(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, 00, E9, 9E", "fcvtpu X(21), H(1)");
}

#[test]
fn fcvtpu_624() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu w4, S(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C4, 03, 29, 1E", "fcvtpu w4, S(30)");
}

#[test]
fn fcvtpu_625() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu X(4), S(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "04, 03, 29, 9E", "fcvtpu X(4), S(24)");
}

#[test]
fn fcvtpu_626() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu wzr, D(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 00, 69, 1E", "fcvtpu wzr, D(7)");
}

#[test]
fn fcvtpu_627() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtpu x27, D(24)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, 03, 69, 9E", "fcvtpu x27, D(24)");
}

#[test]
fn fcvtxn_628() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtxn s6, d22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 6A, 61, 7E", "fcvtxn s6, d22");
}

#[test]
fn fcvtxn_629() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtxn v18.S2, V(20).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 6A, 61, 2E", "fcvtxn v18.S2, V(20).D2");
}

#[test]
fn fcvtxn2_630() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtxn2 V(11).S4, V(1).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, 68, 61, 6E", "fcvtxn2 V(11).S4, V(1).D2");
}

#[test]
fn fcvtzs_631() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs h27, h27, 1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, FF, 1F, 5F", "fcvtzs h27, h27, 1");
}

#[test]
fn fcvtzs_632() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs S(26), s31, 19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, FF, 2D, 5F", "fcvtzs S(26), s31, 19");
}

#[test]
fn fcvtzs_633() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs d14, d12, 26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, FD, 66, 5F", "fcvtzs d14, d12, 26");
}

#[test]
fn fcvtzs_634() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(28).H8, V(10).H8, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5C, FD, 19, 4F", "fcvtzs V(28).H8, V(10).H8, 7");
}

#[test]
fn fcvtzs_635() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(19).H4, v21.H4, 13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, FE, 13, 0F", "fcvtzs V(19).H4, v21.H4, 13");
}

#[test]
fn fcvtzs_636() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(14).S4, v28.S4, 23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, FF, 29, 4F", "fcvtzs V(14).S4, v28.S4, 23");
}

#[test]
fn fcvtzs_637() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(20).S2, v6.S2, 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, FC, 2A, 0F", "fcvtzs V(20).S2, v6.S2, 22");
}

#[test]
fn fcvtzs_638() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs v31.D2, V(5).D2, 36
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, FC, 5C, 4F", "fcvtzs v31.D2, V(5).D2, 36");
}

#[test]
fn fcvtzs_639() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs h28, h25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3C, BB, F9, 5E", "fcvtzs h28, h25");
}

#[test]
fn fcvtzs_640() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs s14, S(25)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2E, BB, A1, 5E", "fcvtzs s14, S(25)");
}

#[test]
fn fcvtzs_641() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs D(13), d3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, B8, E1, 5E", "fcvtzs D(13), d3");
}

#[test]
fn fcvtzs_642() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(9).H8, V(19).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, BA, F9, 4E", "fcvtzs V(9).H8, V(19).H8");
}

#[test]
fn fcvtzs_643() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(20).H4, V(30).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D4, BB, F9, 0E", "fcvtzs V(20).H4, V(30).H4");
}

#[test]
fn fcvtzs_644() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs v27.S4, V(25).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, BB, A1, 4E", "fcvtzs v27.S4, V(25).S4");
}

#[test]
fn fcvtzs_645() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs V(1).S2, v14.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C1, B9, A1, 0E", "fcvtzs V(1).S2, v14.S2");
}

#[test]
fn fcvtzs_646() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs v19.D2, v29.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, BB, E1, 4E", "fcvtzs v19.D2, v29.D2");
}

#[test]
fn fcvtzs_647() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs W(3), H(24), 17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, BF, D8, 1E", "fcvtzs W(3), H(24), 17");
}

#[test]
fn fcvtzs_648() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs x14, H(22), 19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, B6, D8, 9E", "fcvtzs x14, H(22), 19");
}

#[test]
fn fcvtzs_649() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs W(3), s25, 32
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "23, 83, 18, 1E", "fcvtzs W(3), s25, 32");
}

#[test]
fn fcvtzs_650() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs X(6), s6, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, E0, 18, 9E", "fcvtzs X(6), s6, 8");
}

#[test]
fn fcvtzs_651() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs w6, D(17), 22
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, AA, 58, 1E", "fcvtzs w6, D(17), 22");
}

#[test]
fn fcvtzs_652() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs x14, d12, 24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, A1, 58, 9E", "fcvtzs x14, d12, 24");
}

#[test]
fn fcvtzs_653() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs w23, h9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, 01, F8, 1E", "fcvtzs w23, h9");
}

#[test]
fn fcvtzs_654() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs X(8), H(9)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "28, 01, F8, 9E", "fcvtzs X(8), H(9)");
}

#[test]
fn fcvtzs_655() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs W(18), S(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, 03, 38, 1E", "fcvtzs W(18), S(29)");
}

#[test]
fn fcvtzs_656() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs x16, s23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, 02, 38, 9E", "fcvtzs x16, s23");
}

#[test]
fn fcvtzs_657() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs w27, D(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, 03, 78, 1E", "fcvtzs w27, D(30)");
}

#[test]
fn fcvtzs_658() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzs x29, D(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FD, 01, 78, 9E", "fcvtzs x29, D(15)");
}

#[test]
fn fcvtzu_659() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu H(28), H(11), 9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7C, FD, 17, 7F", "fcvtzu H(28), H(11), 9");
}

#[test]
fn fcvtzu_660() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu S(6), s26, 8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "46, FF, 38, 7F", "fcvtzu S(6), s26, 8");
}

#[test]
fn fcvtzu_661() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu D(13), d10, 60
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4D, FD, 44, 7F", "fcvtzu D(13), d10, 60");
}

#[test]
fn fcvtzu_662() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu V(19).H8, V(11).H8, 16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "73, FD, 10, 6F", "fcvtzu V(19).H8, V(11).H8, 16");
}

#[test]
fn fcvtzu_663() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu v7.H4, V(31).H4, 5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, FF, 1B, 2F", "fcvtzu v7.H4, V(31).H4, 5");
}

#[test]
fn fcvtzu_664() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu V(12).S4, v26.S4, 17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, FF, 2F, 6F", "fcvtzu V(12).S4, v26.S4, 17");
}

#[test]
fn fcvtzu_665() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu v20.S2, V(3).S2, 29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, FC, 23, 2F", "fcvtzu v20.S2, V(3).S2, 29");
}

#[test]
fn fcvtzu_666() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu V(26).D2, v4.D2, 51
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, FC, 4D, 6F", "fcvtzu V(26).D2, v4.D2, 51");
}

#[test]
fn fcvtzu_667() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu H(31), H(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5F, BB, F9, 7E", "fcvtzu H(31), H(26)");
}

#[test]
fn fcvtzu_668() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu S(5), S(8)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "05, B9, A1, 7E", "fcvtzu S(5), S(8)");
}

#[test]
fn fcvtzu_669() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu D(19), d14
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D3, B9, E1, 7E", "fcvtzu D(19), d14");
}

#[test]
fn fcvtzu_670() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu V(9).H8, V(27).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "69, BB, F9, 6E", "fcvtzu V(9).H8, V(27).H8");
}

#[test]
fn fcvtzu_671() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu V(19).H4, V(7).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F3, B8, F9, 2E", "fcvtzu V(19).H4, V(7).H4");
}

#[test]
fn fcvtzu_672() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu v24.S4, v9.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, B9, A1, 6E", "fcvtzu v24.S4, v9.S4");
}

#[test]
fn fcvtzu_673() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu v23.S2, V(5).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, B8, A1, 2E", "fcvtzu v23.S2, V(5).S2");
}

#[test]
fn fcvtzu_674() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu v25.D2, V(0).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "19, B8, E1, 6E", "fcvtzu v25.D2, V(0).D2");
}

#[test]
fn fcvtzu_675() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu w26, h18, 27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, 96, D9, 1E", "fcvtzu w26, h18, 27");
}

#[test]
fn fcvtzu_676() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu X(13), H(29), 31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AD, 87, D9, 9E", "fcvtzu X(13), H(29), 31");
}

#[test]
fn fcvtzu_677() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu W(0), S(21), 11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, D6, 19, 1E", "fcvtzu W(0), S(21), 11");
}

#[test]
fn fcvtzu_678() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu X(6), S(24), 30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 8B, 19, 9E", "fcvtzu X(6), S(24), 30");
}

#[test]
fn fcvtzu_679() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu W(5), d28, 7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, E7, 59, 1E", "fcvtzu W(5), d28, 7");
}

#[test]
fn fcvtzu_680() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu x17, d17, 48
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 42, 59, 9E", "fcvtzu x17, d17, 48");
}

#[test]
fn fcvtzu_681() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu w30, H(31)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, 03, F9, 1E", "fcvtzu w30, H(31)");
}

#[test]
fn fcvtzu_682() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu x6, H(22)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C6, 02, F9, 9E", "fcvtzu x6, H(22)");
}

#[test]
fn fcvtzu_683() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu W(6), s23
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 02, 39, 1E", "fcvtzu W(6), s23");
}

#[test]
fn fcvtzu_684() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu x17, S(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "71, 02, 39, 9E", "fcvtzu x17, S(19)");
}

#[test]
fn fcvtzu_685() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu W(1), d26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "41, 03, 79, 1E", "fcvtzu W(1), d26");
}

#[test]
fn fcvtzu_686() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fcvtzu x25, d1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "39, 00, 79, 9E", "fcvtzu x25, d1");
}

#[test]
fn fdiv_687() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv v7.H8, V(17).H8, v24.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "27, 3E, 58, 6E", "fdiv v7.H8, V(17).H8, v24.H8");
}

#[test]
fn fdiv_688() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv V(4).H4, V(26).H4, V(19).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, 3F, 53, 2E", "fdiv V(4).H4, V(26).H4, V(19).H4");
}

#[test]
fn fdiv_689() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv V(27).S4, V(7).S4, v17.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, FC, 31, 6E", "fdiv V(27).S4, V(7).S4, v17.S4");
}

#[test]
fn fdiv_690() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv v28.S2, V(14).S2, v16.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, FD, 30, 2E", "fdiv v28.S2, V(14).S2, v16.S2");
}

#[test]
fn fdiv_691() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv v18.D2, V(4).D2, V(4).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, FC, 64, 6E", "fdiv v18.D2, V(4).D2, V(4).D2");
}

#[test]
fn fdiv_692() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv H(11), H(10), H(6)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 19, E6, 1E", "fdiv H(11), H(10), H(6)");
}

#[test]
fn fdiv_693() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv S(2), S(13), S(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, 19, 30, 1E", "fdiv S(2), S(13), S(16)");
}

#[test]
fn fdiv_694() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fdiv D(23), D(6), D(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D7, 18, 61, 1E", "fdiv D(23), D(6), D(1)");
}

#[test]
fn fjcvtzs_695() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fjcvtzs w10, D(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, 01, 7E, 1E", "fjcvtzs w10, D(10)");
}

#[test]
fn fmadd_696() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmadd h3, h12, H(12), h1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, 05, CC, 1F", "fmadd h3, h12, H(12), h1");
}

#[test]
fn fmadd_697() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmadd S(16), S(30), s27, S(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D0, 43, 1B, 1F", "fmadd S(16), S(30), s27, S(16)");
}

#[test]
fn fmadd_698() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmadd D(1), d11, d1, d20
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, 51, 41, 1F", "fmadd D(1), d11, d1, d20");
}

#[test]
fn fmax_699() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax V(31).H8, V(8).H8, V(5).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1F, 35, 45, 4E", "fmax V(31).H8, V(8).H8, V(5).H8");
}

#[test]
fn fmax_700() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax V(1).H4, v5.H4, v20.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, 34, 54, 0E", "fmax V(1).H4, v5.H4, v20.H4");
}

#[test]
fn fmax_701() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax v30.S4, v19.S4, v19.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, F6, 33, 4E", "fmax v30.S4, v19.S4, v19.S4");
}

#[test]
fn fmax_702() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax v16.S2, v28.S2, V(26).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "90, F7, 3A, 0E", "fmax v16.S2, v28.S2, V(26).S2");
}

#[test]
fn fmax_703() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax V(27).D2, V(7).D2, V(6).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, F4, 66, 4E", "fmax V(27).D2, V(7).D2, V(6).D2");
}

#[test]
fn fmax_704() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax H(15), h11, H(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6F, 49, E0, 1E", "fmax H(15), h11, H(0)");
}

#[test]
fn fmax_705() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax s6, s27, s29
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, 4B, 3D, 1E", "fmax s6, s27, s29");
}

#[test]
fn fmax_706() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmax d11, d22, d30
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, 4A, 7E, 1E", "fmax d11, d22, d30");
}

#[test]
fn fmaxnm_707() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm v2.H8, v17.H8, V(16).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, 06, 50, 4E", "fmaxnm v2.H8, v17.H8, V(16).H8");
}

#[test]
fn fmaxnm_708() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm v5.H4, v28.H4, v28.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "85, 07, 5C, 0E", "fmaxnm v5.H4, v28.H4, v28.H4");
}

#[test]
fn fmaxnm_709() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm V(26).S4, v21.S4, v0.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BA, C6, 20, 4E", "fmaxnm V(26).S4, v21.S4, v0.S4");
}

#[test]
fn fmaxnm_710() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm V(2).S2, V(22).S2, V(1).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C2, C6, 21, 0E", "fmaxnm V(2).S2, V(22).S2, V(1).S2");
}

#[test]
fn fmaxnm_711() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm v3.D2, v3.D2, V(4).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, C4, 64, 4E", "fmaxnm v3.D2, v3.D2, V(4).D2");
}

#[test]
fn fmaxnm_712() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm H(27), H(3), h24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, 68, F8, 1E", "fmaxnm H(27), H(3), h24");
}

#[test]
fn fmaxnm_713() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm s22, S(29), S(26)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B6, 6B, 3A, 1E", "fmaxnm s22, S(29), S(26)");
}

#[test]
fn fmaxnm_714() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnm D(12), d2, d5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 68, 65, 1E", "fmaxnm D(12), d2, d5");
}

#[test]
fn fmaxnmp_715() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp H(3), V(28).H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, CB, 30, 5E", "fmaxnmp H(3), V(28).H2");
}

#[test]
fn fmaxnmp_716() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp s2, V(9).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, C9, 30, 7E", "fmaxnmp s2, V(9).S2");
}

#[test]
fn fmaxnmp_717() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp d18, v26.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "52, CB, 70, 7E", "fmaxnmp d18, v26.D2");
}

#[test]
fn fmaxnmp_718() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp v28.H8, V(22).H8, V(28).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, 06, 5C, 6E", "fmaxnmp v28.H8, V(22).H8, V(28).H8");
}

#[test]
fn fmaxnmp_719() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp V(21).H4, v29.H4, V(2).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 07, 42, 2E", "fmaxnmp V(21).H4, v29.H4, V(2).H4");
}

#[test]
fn fmaxnmp_720() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp V(13).S4, V(30).S4, v0.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CD, C7, 20, 6E", "fmaxnmp V(13).S4, V(30).S4, v0.S4");
}

#[test]
fn fmaxnmp_721() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp V(11).S2, v6.S2, v23.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, C4, 37, 2E", "fmaxnmp V(11).S2, v6.S2, v23.S2");
}

#[test]
fn fmaxnmp_722() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmp v27.D2, v17.D2, V(19).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, C6, 73, 6E", "fmaxnmp v27.D2, v17.D2, V(19).D2");
}

#[test]
fn fmaxnmv_723() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmv H(22), V(11).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, C9, 30, 4E", "fmaxnmv H(22), V(11).H8");
}

#[test]
fn fmaxnmv_724() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmv H(31), V(5).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, C8, 30, 0E", "fmaxnmv H(31), V(5).H4");
}

#[test]
fn fmaxnmv_725() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxnmv s16, V(31).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F0, CB, 30, 6E", "fmaxnmv s16, V(31).S4");
}

#[test]
fn fmaxp_726() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp h19, v4.H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "93, F8, 30, 5E", "fmaxp h19, v4.H2");
}

#[test]
fn fmaxp_727() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp S(16), V(17).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, FA, 30, 7E", "fmaxp S(16), V(17).S2");
}

#[test]
fn fmaxp_728() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp D(18), v1.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "32, F8, 70, 7E", "fmaxp D(18), v1.D2");
}

#[test]
fn fmaxp_729() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp v4.H8, v18.H8, v19.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, 36, 53, 6E", "fmaxp v4.H8, v18.H8, v19.H8");
}

#[test]
fn fmaxp_730() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp v16.H4, v8.H4, V(15).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 35, 4F, 2E", "fmaxp v16.H4, v8.H4, V(15).H4");
}

#[test]
fn fmaxp_731() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp v4.S4, v3.S4, V(28).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, F4, 3C, 6E", "fmaxp v4.S4, v3.S4, V(28).S4");
}

#[test]
fn fmaxp_732() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp V(3).S2, V(20).S2, v6.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, F6, 26, 2E", "fmaxp V(3).S2, V(20).S2, v6.S2");
}

#[test]
fn fmaxp_733() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxp v1.D2, v20.D2, v5.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, F6, 65, 6E", "fmaxp v1.D2, v20.D2, v5.D2");
}

#[test]
fn fmaxv_734() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxv h14, V(14).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CE, F9, 30, 4E", "fmaxv h14, V(14).H8");
}

#[test]
fn fmaxv_735() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxv h23, v26.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, FB, 30, 0E", "fmaxv h23, v26.H4");
}

#[test]
fn fmaxv_736() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmaxv s21, v17.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "35, FA, 30, 6E", "fmaxv s21, v17.S4");
}

#[test]
fn fmin_737() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin v6.H8, v25.H8, V(11).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 37, CB, 4E", "fmin v6.H8, v25.H8, V(11).H8");
}

#[test]
fn fmin_738() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin V(27).H4, V(5).H4, v25.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, 34, D9, 0E", "fmin V(27).H4, V(5).H4, v25.H4");
}

#[test]
fn fmin_739() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin v27.S4, V(13).S4, V(0).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BB, F5, A0, 4E", "fmin v27.S4, V(13).S4, V(0).S4");
}

#[test]
fn fmin_740() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin v6.S2, v23.S2, V(31).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, F6, BF, 0E", "fmin v6.S2, v23.S2, V(31).S2");
}

#[test]
fn fmin_741() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin v0.D2, V(5).D2, v17.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, F4, F1, 4E", "fmin v0.D2, V(5).D2, v17.D2");
}

#[test]
fn fmin_742() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin H(24), H(12), h31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 59, FF, 1E", "fmin H(24), H(12), h31");
}

#[test]
fn fmin_743() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin S(17), S(0), S(14)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 58, 2E, 1E", "fmin S(17), S(0), S(14)");
}

#[test]
fn fmin_744() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmin D(5), D(17), d18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 5A, 72, 1E", "fmin D(5), D(17), d18");
}

#[test]
fn fminnm_745() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm v12.H8, V(2).H8, v17.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 04, D1, 4E", "fminnm v12.H8, V(2).H8, v17.H8");
}

#[test]
fn fminnm_746() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm v11.H4, V(16).H4, v24.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 06, D8, 0E", "fminnm v11.H4, V(16).H4, v24.H4");
}

#[test]
fn fminnm_747() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm v28.S4, V(28).S4, V(10).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9C, C7, AA, 4E", "fminnm v28.S4, V(28).S4, V(10).S4");
}

#[test]
fn fminnm_748() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm V(7).S2, v19.S2, v31.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "67, C6, BF, 0E", "fminnm V(7).S2, v19.S2, v31.S2");
}

#[test]
fn fminnm_749() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm v16.D2, V(13).D2, v12.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B0, C5, EC, 4E", "fminnm v16.D2, V(13).D2, v12.D2");
}

#[test]
fn fminnm_750() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm H(6), H(0), h2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 78, E2, 1E", "fminnm H(6), H(0), h2");
}

#[test]
fn fminnm_751() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm s2, s20, s10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 7A, 2A, 1E", "fminnm s2, s20, s10");
}

#[test]
fn fminnm_752() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnm d23, d2, d11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, 78, 6B, 1E", "fminnm d23, d2, d11");
}

#[test]
fn fminnmp_753() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp h14, V(21).H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AE, CA, B0, 5E", "fminnmp h14, V(21).H2");
}

#[test]
fn fminnmp_754() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp S(11), v30.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CB, CB, B0, 7E", "fminnmp S(11), v30.S2");
}

#[test]
fn fminnmp_755() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp d27, V(19).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7B, CA, F0, 7E", "fminnmp d27, V(19).D2");
}

#[test]
fn fminnmp_756() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp V(9).H8, v29.H8, v9.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A9, 07, C9, 6E", "fminnmp V(9).H8, v29.H8, v9.H8");
}

#[test]
fn fminnmp_757() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp v27.H4, V(2).H4, v10.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 04, CA, 2E", "fminnmp v27.H4, V(2).H4, v10.H4");
}

#[test]
fn fminnmp_758() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp V(20).S4, v1.S4, v16.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, C4, B0, 6E", "fminnmp V(20).S4, v1.S4, v16.S4");
}

#[test]
fn fminnmp_759() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp v1.S2, V(7).S2, v22.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, C4, B6, 2E", "fminnmp v1.S2, V(7).S2, v22.S2");
}

#[test]
fn fminnmp_760() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmp v11.D2, v7.D2, V(14).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EB, C4, EE, 6E", "fminnmp v11.D2, v7.D2, V(14).D2");
}

#[test]
fn fminnmv_761() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmv h24, V(20).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, CA, B0, 4E", "fminnmv h24, V(20).H8");
}

#[test]
fn fminnmv_762() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmv H(5), v1.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, C8, B0, 0E", "fminnmv H(5), v1.H4");
}

#[test]
fn fminnmv_763() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminnmv s14, v31.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, CB, B0, 6E", "fminnmv s14, v31.S4");
}

#[test]
fn fminp_764() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp h13, V(9).H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2D, F9, B0, 5E", "fminp h13, V(9).H2");
}

#[test]
fn fminp_765() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp S(2), v27.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "62, FB, B0, 7E", "fminp S(2), v27.S2");
}

#[test]
fn fminp_766() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp d23, v18.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, FA, F0, 7E", "fminp d23, v18.D2");
}

#[test]
fn fminp_767() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp v7.H8, v13.H8, V(25).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A7, 35, D9, 6E", "fminp v7.H8, v13.H8, V(25).H8");
}

#[test]
fn fminp_768() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp V(10).H4, V(6).H4, V(16).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "CA, 34, D0, 2E", "fminp V(10).H4, V(6).H4, V(16).H4");
}

#[test]
fn fminp_769() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp V(5).S4, v13.S4, v4.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A5, F5, A4, 6E", "fminp V(5).S4, v13.S4, v4.S4");
}

#[test]
fn fminp_770() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp V(9).S2, v10.S2, v2.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, F5, A2, 2E", "fminp V(9).S2, v10.S2, v2.S2");
}

#[test]
fn fminp_771() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminp V(28).D2, V(31).D2, V(0).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, F7, E0, 6E", "fminp V(28).D2, V(31).D2, V(0).D2");
}

#[test]
fn fminv_772() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminv H(20), V(16).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, FA, B0, 4E", "fminv H(20), V(16).H8");
}

#[test]
fn fminv_773() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminv h0, V(31).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, FB, B0, 0E", "fminv h0, V(31).H4");
}

#[test]
fn fminv_774() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fminv S(31), v20.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, FA, B0, 6E", "fminv S(31), v20.S4");
}

#[test]
fn fmla_775() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla h10, H(23), V(11).H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EA, 12, 0B, 5F", "fmla h10, H(23), V(11).H[0]");
}

#[test]
fn fmla_776() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla S(11), S(19), V(2).S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 1A, A2, 5F", "fmla S(11), S(19), V(2).S[3]");
}

#[test]
fn fmla_777() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla d24, d10, v0.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 11, C0, 5F", "fmla d24, d10, v0.D[0]");
}

#[test]
fn fmla_778() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla v0.H8, v31.H8, V(3).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E0, 1B, 33, 4F", "fmla v0.H8, v31.H8, V(3).H[7]");
}

#[test]
fn fmla_779() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla v17.H4, v8.H4, V(14).H[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "11, 11, 1E, 0F", "fmla v17.H4, v8.H4, V(14).H[1]");
}

#[test]
fn fmla_780() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla V(21).S4, v29.S4, v4.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B5, 13, 84, 4F", "fmla V(21).S4, v29.S4, v4.S[0]");
}

#[test]
fn fmla_781() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla V(24).S2, v11.S2, v27.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "78, 11, BB, 0F", "fmla V(24).S2, v11.S2, v27.S[1]");
}

#[test]
fn fmla_782() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla V(4).D2, V(3).D2, v22.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, 10, D6, 4F", "fmla V(4).D2, V(3).D2, v22.D[0]");
}

#[test]
fn fmla_783() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla v29.H8, V(24).H8, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 0F, 41, 4E", "fmla v29.H8, V(24).H8, v1.H8");
}

#[test]
fn fmla_784() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla V(8).H4, v3.H4, V(30).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 0C, 5E, 0E", "fmla V(8).H4, v3.H4, V(30).H4");
}

#[test]
fn fmla_785() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla v16.S4, V(3).S4, V(8).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, CC, 28, 4E", "fmla v16.S4, V(3).S4, V(8).S4");
}

#[test]
fn fmla_786() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla v11.S2, v13.S2, v6.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AB, CD, 26, 0E", "fmla v11.S2, v13.S2, v6.S2");
}

#[test]
fn fmla_787() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmla V(19).D2, V(8).D2, V(28).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "13, CD, 7C, 4E", "fmla V(19).D2, V(8).D2, V(28).D2");
}

#[test]
fn fmlal_788() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal v13.S2, V(24).H2, v0.H[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, 03, B0, 0F", "fmlal v13.S2, V(24).H2, v0.H[3]");
}

#[test]
fn fmlal_789() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal v29.S4, v5.H4, V(12).H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BD, 08, BC, 4F", "fmlal v29.S4, v5.H4, V(12).H[7]");
}

#[test]
fn fmlal_790() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal v8.S2, v19.H2, V(28).H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, EE, 3C, 0E", "fmlal v8.S2, v19.H2, V(28).H2");
}

#[test]
fn fmlal_791() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal v20.S4, V(24).H4, v24.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "14, EF, 38, 4E", "fmlal v20.S4, V(24).H4, v24.H4");
}

#[test]
fn fmlal2_792() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal2 V(20).S2, v3.H2, V(14).H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "74, 80, 8E, 2F", "fmlal2 V(20).S2, v3.H2, V(14).H[0]");
}

#[test]
fn fmlal2_793() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal2 v15.S4, v10.H4, v7.H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4F, 89, 87, 6F", "fmlal2 v15.S4, v10.H4, v7.H[4]");
}

#[test]
fn fmlal2_794() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal2 v28.S2, V(21).H2, V(6).H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, CE, 26, 2E", "fmlal2 v28.S2, V(21).H2, V(6).H2");
}

#[test]
fn fmlal2_795() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlal2 V(10).S4, V(12).H4, v9.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, CD, 29, 6E", "fmlal2 V(10).S4, V(12).H4, v9.H4");
}

#[test]
fn fmls_796() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls h30, h1, V(12).H[6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 58, 2C, 5F", "fmls h30, h1, V(12).H[6]");
}

#[test]
fn fmls_797() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls S(0), S(19), V(11).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "60, 52, 8B, 5F", "fmls S(0), S(19), V(11).S[0]");
}

#[test]
fn fmls_798() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls D(15), d31, v3.D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 5B, C3, 5F", "fmls D(15), d31, v3.D[1]");
}

#[test]
fn fmls_799() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v31.H8, v15.H8, v8.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FF, 59, 38, 4F", "fmls v31.H8, v15.H8, v8.H[7]");
}

#[test]
fn fmls_800() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(25).H4, v2.H4, v12.H[6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "59, 58, 2C, 0F", "fmls V(25).H4, v2.H4, v12.H[6]");
}

#[test]
fn fmls_801() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(11).S4, v28.S4, v10.S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8B, 5B, AA, 4F", "fmls V(11).S4, v28.S4, v10.S[3]");
}

#[test]
fn fmls_802() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v25.S2, V(11).S2, v0.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 51, 80, 0F", "fmls v25.S2, V(11).S2, v0.S[0]");
}

#[test]
fn fmls_803() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls v10.D2, v11.D2, v12.D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, 59, CC, 4F", "fmls v10.D2, v11.D2, v12.D[1]");
}

#[test]
fn fmls_804() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(24).H8, V(2).H8, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "58, 0C, C1, 4E", "fmls V(24).H8, V(2).H8, v1.H8");
}

#[test]
fn fmls_805() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(3).H4, v31.H4, v11.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 0F, CB, 0E", "fmls V(3).H4, v31.H4, v11.H4");
}

#[test]
fn fmls_806() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(8).S4, V(13).S4, v5.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A8, CD, A5, 4E", "fmls V(8).S4, V(13).S4, v5.S4");
}

#[test]
fn fmls_807() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(4).S2, V(13).S2, v13.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, CD, AD, 0E", "fmls V(4).S2, V(13).S2, v13.S2");
}

#[test]
fn fmls_808() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmls V(26).D2, v1.D2, v25.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3A, CC, F9, 4E", "fmls V(26).D2, v1.D2, v25.D2");
}

#[test]
fn fmlsl_809() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl V(24).S2, V(25).H2, V(3).H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "38, 43, A3, 0F", "fmlsl V(24).S2, V(25).H2, V(3).H[2]");
}

#[test]
fn fmlsl_810() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl V(20).S4, V(1).H4, V(7).H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, 48, 87, 4F", "fmlsl V(20).S4, V(1).H4, V(7).H[4]");
}

#[test]
fn fmlsl_811() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl v3.S2, V(2).H2, v31.H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "43, EC, BF, 0E", "fmlsl v3.S2, V(2).H2, v31.H2");
}

#[test]
fn fmlsl_812() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl v24.S4, v28.H4, v9.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, EF, A9, 4E", "fmlsl v24.S4, v28.H4, v9.H4");
}

#[test]
fn fmlsl2_813() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 v22.S2, v12.H2, v7.H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "96, C9, 97, 2F", "fmlsl2 v22.S2, v12.H2, v7.H[5]");
}

#[test]
fn fmlsl2_814() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(28).S4, V(22).H4, V(9).H[6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DC, CA, A9, 6F", "fmlsl2 V(28).S4, V(22).H4, V(9).H[6]");
}

#[test]
fn fmlsl2_815() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(5).S2, v2.H2, V(19).H2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "45, CC, B3, 2E", "fmlsl2 V(5).S2, v2.H2, V(19).H2");
}

#[test]
fn fmlsl2_816() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmlsl2 V(26).S4, v22.H4, v11.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DA, CE, AB, 6E", "fmlsl2 V(26).S4, v22.H4, v11.H4");
}

#[test]
fn fmov_817() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(17).H8, -1.8125
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B1, FF, 07, 4F", "fmov V(17).H8, -1.8125");
}

#[test]
fn fmov_818() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(7).H4, 13.0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, FD, 01, 0F", "fmov V(7).H4, 13.0");
}

#[test]
fn fmov_819() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(27).S4, 7.5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "DB, F7, 00, 4F", "fmov V(27).S4, 7.5");
}

#[test]
fn fmov_820() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v31.S2, 0.875
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, F5, 03, 0F", "fmov v31.S2, 0.875");
}

#[test]
fn fmov_821() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov v10.D2, -9.5
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, F4, 05, 6F", "fmov v10.D2, -9.5");
}

#[test]
fn fmov_822() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h5, h27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 43, E0, 1E", "fmov h5, h27");
}

#[test]
fn fmov_823() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov s24, S(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D8, 43, 20, 1E", "fmov s24, S(30)");
}

#[test]
fn fmov_824() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov D(30), d10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5E, 41, 60, 1E", "fmov D(30), d10");
}

#[test]
fn fmov_825() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov w0, H(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "80, 00, E6, 1E", "fmov w0, H(4)");
}

#[test]
fn fmov_826() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov X(0), h13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A0, 01, E6, 9E", "fmov X(0), h13");
}

#[test]
fn fmov_827() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov H(27), W(10)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 01, E7, 1E", "fmov H(27), W(10)");
}

#[test]
fn fmov_828() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov S(16), W(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "30, 00, 27, 1E", "fmov S(16), W(1)");
}

#[test]
fn fmov_829() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov W(6), S(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, 02, 26, 1E", "fmov W(6), S(20)");
}

#[test]
fn fmov_830() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h28, xzr
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 03, E7, 9E", "fmov h28, xzr");
}

#[test]
fn fmov_831() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov d5, x25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, 03, 67, 9E", "fmov d5, x25");
}

#[test]
fn fmov_832() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov V(6).D[1], x24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "06, 03, AF, 9E", "fmov V(6).D[1], x24");
}

#[test]
fn fmov_833() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov X(12), D(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, 00, 66, 9E", "fmov X(12), D(4)");
}

#[test]
fn fmov_834() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov X(12), V(26).D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, 03, AE, 9E", "fmov X(12), V(26).D[1]");
}

#[test]
fn fmov_835() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov h22, -0.34375
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, D0, FA, 1E", "fmov h22, -0.34375");
}

#[test]
fn fmov_836() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov S(12), -0.1875
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0C, 10, 39, 1E", "fmov S(12), -0.1875");
}

#[test]
fn fmov_837() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmov D(15), -4.25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 30, 72, 1E", "fmov D(15), -4.25");
}

#[test]
fn fmsub_838() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub h23, H(26), H(0), h24
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, E3, C0, 1F", "fmsub h23, H(26), H(0), h24");
}

#[test]
fn fmsub_839() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub S(26), S(26), s2, S(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5A, D3, 02, 1F", "fmsub S(26), S(26), s2, S(20)");
}

#[test]
fn fmsub_840() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmsub d6, D(4), d4, d12
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "86, B0, 44, 1F", "fmsub d6, D(4), d4, d12");
}

#[test]
fn fmul_841() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul H(9), H(22), v9.H[6]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C9, 9A, 29, 5F", "fmul H(9), H(22), v9.H[6]");
}

#[test]
fn fmul_842() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul S(3), s0, v24.S[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "03, 90, B8, 5F", "fmul S(3), s0, v24.S[1]");
}

#[test]
fn fmul_843() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul d18, d3, V(3).D[1]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "72, 98, C3, 5F", "fmul d18, d3, V(3).D[1]");
}

#[test]
fn fmul_844() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v16.H8, V(19).H8, v0.H[5]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 9A, 10, 4F", "fmul v16.H8, V(19).H8, v0.H[5]");
}

#[test]
fn fmul_845() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v13.H4, v15.H4, v1.H[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "ED, 91, 21, 0F", "fmul v13.H4, v15.H4, v1.H[2]");
}

#[test]
fn fmul_846() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v16.S4, v24.S4, v12.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 9B, 8C, 4F", "fmul v16.S4, v24.S4, v12.S[2]");
}

#[test]
fn fmul_847() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(28).S2, v29.S2, v23.S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, 93, 97, 0F", "fmul V(28).S2, v29.S2, v23.S[0]");
}

#[test]
fn fmul_848() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v25.D2, V(11).D2, V(31).D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "79, 91, DF, 4F", "fmul v25.D2, V(11).D2, V(31).D[0]");
}

#[test]
fn fmul_849() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(5).H8, V(6).H8, v14.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C5, 1C, 4E, 6E", "fmul V(5).H8, V(6).H8, v14.H8");
}

#[test]
fn fmul_850() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(10).H4, V(0).H4, v21.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 1C, 55, 2E", "fmul V(10).H4, V(0).H4, v21.H4");
}

#[test]
fn fmul_851() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v9.S4, v24.S4, V(31).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, DF, 3F, 6E", "fmul v9.S4, v24.S4, V(31).S4");
}

#[test]
fn fmul_852() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul V(4).S2, V(29).S2, v13.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A4, DF, 2D, 2E", "fmul V(4).S2, V(29).S2, v13.S2");
}

#[test]
fn fmul_853() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul v23.D2, V(18).D2, v31.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "57, DE, 7F, 6E", "fmul v23.D2, V(18).D2, v31.D2");
}

#[test]
fn fmul_854() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul h18, H(12), H(22)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "92, 09, F6, 1E", "fmul h18, H(12), H(22)");
}

#[test]
fn fmul_855() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul s3, S(31), S(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E3, 0B, 24, 1E", "fmul s3, S(31), S(4)");
}

#[test]
fn fmul_856() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmul d11, d19, d3
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 0A, 63, 1E", "fmul d11, d19, d3");
}

#[test]
fn fmulx_857() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx H(26), H(20), V(0).H[4]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9A, 9A, 00, 7F", "fmulx H(26), H(20), V(0).H[4]");
}

#[test]
fn fmulx_858() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx S(6), s29, V(20).S[3]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A6, 9B, B4, 7F", "fmulx S(6), s29, V(20).S[3]");
}

#[test]
fn fmulx_859() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx d7, d7, v4.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 90, C4, 7F", "fmulx d7, d7, v4.D[0]");
}

#[test]
fn fmulx_860() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(21).H8, V(14).H8, V(9).H[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, 91, 09, 6F", "fmulx V(21).H8, V(14).H8, V(9).H[0]");
}

#[test]
fn fmulx_861() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v30.H4, v29.H4, v7.H[7]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, 9B, 37, 2F", "fmulx v30.H4, v29.H4, v7.H[7]");
}

#[test]
fn fmulx_862() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(30).S4, V(8).S4, v24.S[2]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 99, 98, 6F", "fmulx V(30).S4, V(8).S4, v24.S[2]");
}

#[test]
fn fmulx_863() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(9).S2, v12.S2, V(27).S[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 91, 9B, 2F", "fmulx V(9).S2, v12.S2, V(27).S[0]");
}

#[test]
fn fmulx_864() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx v2.D2, v31.D2, v5.D[0]
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E2, 93, C5, 6F", "fmulx v2.D2, v31.D2, v5.D[0]");
}

#[test]
fn fmulx_865() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx H(16), H(11), h28
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "70, 1D, 5C, 5E", "fmulx H(16), H(11), h28");
}

#[test]
fn fmulx_866() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx s24, S(28), s15
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, DF, 2F, 5E", "fmulx s24, S(28), s15");
}

#[test]
fn fmulx_867() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx d23, d1, D(13)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, DC, 6D, 5E", "fmulx d23, d1, D(13)");
}

#[test]
fn fmulx_868() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(8).H8, V(30).H8, V(6).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C8, 1F, 46, 4E", "fmulx V(8).H8, V(30).H8, V(6).H8");
}

#[test]
fn fmulx_869() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(23).H4, v31.H4, V(6).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 1F, 46, 0E", "fmulx V(23).H4, v31.H4, V(6).H4");
}

#[test]
fn fmulx_870() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(26).S4, V(31).S4, v10.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FA, DF, 2A, 4E", "fmulx V(26).S4, V(31).S4, v10.S4");
}

#[test]
fn fmulx_871() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(23).S2, V(5).S2, V(15).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B7, DC, 2F, 0E", "fmulx V(23).S2, V(5).S2, V(15).S2");
}

#[test]
fn fmulx_872() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fmulx V(3).D2, v12.D2, v8.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "83, DD, 68, 4E", "fmulx V(3).D2, v12.D2, v8.D2");
}

#[test]
fn fneg_873() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v31.H8, V(3).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, F8, F8, 6E", "fneg v31.H8, V(3).H8");
}

#[test]
fn fneg_874() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg v13.H4, V(19).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6D, FA, F8, 2E", "fneg v13.H4, V(19).H4");
}

#[test]
fn fneg_875() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(18).S4, v29.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B2, FB, A0, 6E", "fneg V(18).S4, v29.S4");
}

#[test]
fn fneg_876() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(21).S2, v19.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "75, FA, A0, 2E", "fneg V(21).S2, v19.S2");
}

#[test]
fn fneg_877() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg V(14).D2, V(26).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, FB, E0, 6E", "fneg V(14).D2, V(26).D2");
}

#[test]
fn fneg_878() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg H(10), h9
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 41, E1, 1E", "fneg H(10), h9");
}

#[test]
fn fneg_879() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg s6, S(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "26, 42, 21, 1E", "fneg s6, S(17)");
}

#[test]
fn fneg_880() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fneg d17, d25
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "31, 43, 61, 1E", "fneg d17, d25");
}

#[test]
fn fnmadd_881() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd h24, H(7), h0, H(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, 70, E0, 1F", "fnmadd h24, H(7), h0, H(28)");
}

#[test]
fn fnmadd_882() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd s31, S(27), S(30), S(2)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7F, 0B, 3E, 1F", "fnmadd s31, S(27), S(30), S(2)");
}

#[test]
fn fnmadd_883() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmadd D(1), D(20), d27, d27
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "81, 6E, 7B, 1F", "fnmadd D(1), D(20), d27, d27");
}

#[test]
fn fnmsub_884() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub h29, H(16), H(16), h11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, AE, F0, 1F", "fnmsub h29, H(16), H(16), h11");
}

#[test]
fn fnmsub_885() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub s14, S(12), s31, s26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8E, E9, 3F, 1F", "fnmsub s14, S(12), s31, s26");
}

#[test]
fn fnmsub_886() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmsub d11, d9, d17, D(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2B, DD, 71, 1F", "fnmsub d11, d9, d17, D(23)");
}

#[test]
fn fnmul_887() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul h24, h0, h0
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 88, E0, 1E", "fnmul h24, h0, h0");
}

#[test]
fn fnmul_888() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul S(15), s23, s13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EF, 8A, 2D, 1E", "fnmul S(15), s23, s13");
}

#[test]
fn fnmul_889() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fnmul D(10), D(21), D(1)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AA, 8A, 61, 1E", "fnmul D(10), D(21), D(1)");
}

#[test]
fn frecpe_890() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe H(4), H(11)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "64, D9, F9, 5E", "frecpe H(4), H(11)");
}

#[test]
fn frecpe_891() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe S(6), S(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, DA, A1, 5E", "frecpe S(6), S(23)");
}

#[test]
fn frecpe_892() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe d25, d31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, DB, E1, 5E", "frecpe d25, d31");
}

#[test]
fn frecpe_893() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(0).H8, v18.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, DA, F9, 4E", "frecpe V(0).H8, v18.H8");
}

#[test]
fn frecpe_894() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v21.H4, V(0).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, D8, F9, 0E", "frecpe v21.H4, V(0).H4");
}

#[test]
fn frecpe_895() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(9).S4, V(4).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, D8, A1, 4E", "frecpe V(9).S4, V(4).S4");
}

#[test]
fn frecpe_896() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe V(21).S2, v16.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, DA, A1, 0E", "frecpe V(21).S2, v16.S2");
}

#[test]
fn frecpe_897() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpe v20.D2, v9.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "34, D9, E1, 4E", "frecpe v20.D2, v9.D2");
}

#[test]
fn frecps_898() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps h27, h20, H(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 3E, 45, 5E", "frecps h27, h20, H(5)");
}

#[test]
fn frecps_899() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps S(14), S(8), s18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, FD, 32, 5E", "frecps S(14), S(8), s18");
}

#[test]
fn frecps_900() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps D(25), D(29), d18
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B9, FF, 72, 5E", "frecps D(25), D(29), d18");
}

#[test]
fn frecps_901() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps V(22).H8, v10.H8, v12.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, 3D, 4C, 4E", "frecps V(22).H8, v10.H8, v12.H8");
}

#[test]
fn frecps_902() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps V(19).H4, v17.H4, v30.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "33, 3E, 5E, 0E", "frecps V(19).H4, v17.H4, v30.H4");
}

#[test]
fn frecps_903() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v22.S4, v16.S4, v1.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "16, FE, 21, 4E", "frecps v22.S4, v16.S4, v1.S4");
}

#[test]
fn frecps_904() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v12.S2, v21.S2, V(13).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "AC, FE, 2D, 0E", "frecps v12.S2, v21.S2, V(13).S2");
}

#[test]
fn frecps_905() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecps v30.D2, v0.D2, v23.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, FC, 77, 4E", "frecps v30.D2, v0.D2, v23.D2");
}

#[test]
fn frecpx_906() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx H(29), h26
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5D, FB, F9, 5E", "frecpx H(29), h26");
}

#[test]
fn frecpx_907() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx s21, s8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, F9, A1, 5E", "frecpx s21, s8");
}

#[test]
fn frecpx_908() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frecpx d10, d10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4A, F9, E1, 5E", "frecpx d10, d10");
}

#[test]
fn frinta_909() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(7).H8, V(26).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "47, 8B, 79, 6E", "frinta V(7).H8, V(26).H8");
}

#[test]
fn frinta_910() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(11).H4, v11.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 89, 79, 2E", "frinta V(11).H4, v11.H4");
}

#[test]
fn frinta_911() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v27.S4, V(12).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, 89, 21, 6E", "frinta v27.S4, V(12).S4");
}

#[test]
fn frinta_912() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta V(11).S2, v8.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0B, 89, 21, 2E", "frinta V(11).S2, v8.S2");
}

#[test]
fn frinta_913() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta v5.D2, v19.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "65, 8A, 61, 6E", "frinta v5.D2, v19.D2");
}

#[test]
fn frinta_914() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta h10, H(28)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8A, 43, E6, 1E", "frinta h10, H(28)");
}

#[test]
fn frinta_915() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta S(9), s8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 41, 26, 1E", "frinta S(9), s8");
}

#[test]
fn frinta_916() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinta d7, d31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E7, 43, 66, 1E", "frinta d7, d31");
}

#[test]
fn frinti_917() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti v19.H8, v13.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B3, 99, F9, 6E", "frinti v19.H8, v13.H8");
}

#[test]
fn frinti_918() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(24).H4, v16.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, 9A, F9, 2E", "frinti V(24).H4, v16.H4");
}

#[test]
fn frinti_919() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(10).S4, v24.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0A, 9B, A1, 6E", "frinti V(10).S4, v24.S4");
}

#[test]
fn frinti_920() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(3).S2, v19.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 9A, A1, 2E", "frinti V(3).S2, v19.S2");
}

#[test]
fn frinti_921() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti V(10).D2, v3.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6A, 98, E1, 6E", "frinti V(10).D2, v3.D2");
}

#[test]
fn frinti_922() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti h1, H(29)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A1, C3, E7, 1E", "frinti h1, H(29)");
}

#[test]
fn frinti_923() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti s31, S(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9F, C0, 27, 1E", "frinti s31, S(4)");
}

#[test]
fn frinti_924() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frinti d16, D(0)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, C0, 67, 1E", "frinti d16, D(0)");
}

#[test]
fn frintm_925() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm V(30).H8, V(21).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BE, 9A, 79, 4E", "frintm V(30).H8, V(21).H8");
}

#[test]
fn frintm_926() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v24.H4, V(20).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "98, 9A, 79, 0E", "frintm v24.H4, V(20).H4");
}

#[test]
fn frintm_927() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v14.S4, V(18).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4E, 9A, 21, 4E", "frintm v14.S4, V(18).S4");
}

#[test]
fn frintm_928() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v3.S2, V(27).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "63, 9B, 21, 0E", "frintm v3.S2, V(27).S2");
}

#[test]
fn frintm_929() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm v10.D2, v9.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2A, 99, 61, 4E", "frintm v10.D2, v9.D2");
}

#[test]
fn frintm_930() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm h6, H(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "66, 42, E5, 1E", "frintm h6, H(19)");
}

#[test]
fn frintm_931() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm s24, S(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F8, 41, 25, 1E", "frintm s24, S(15)");
}

#[test]
fn frintm_932() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintm D(15), d19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6F, 42, 65, 1E", "frintm D(15), d19");
}

#[test]
fn frintn_933() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v18.H8, V(24).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, 8B, 79, 4E", "frintn v18.H8, V(24).H8");
}

#[test]
fn frintn_934() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v11.H4, v3.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6B, 88, 79, 0E", "frintn v11.H4, v3.H4");
}

#[test]
fn frintn_935() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v13.S4, V(20).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8D, 8A, 21, 4E", "frintn v13.S4, V(20).S4");
}

#[test]
fn frintn_936() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn v0.S2, v17.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "20, 8A, 21, 0E", "frintn v0.S2, v17.S2");
}

#[test]
fn frintn_937() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn V(9).D2, V(4).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, 88, 61, 4E", "frintn V(9).D2, V(4).D2");
}

#[test]
fn frintn_938() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn H(30), H(19)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "7E, 42, E4, 1E", "frintn H(30), H(19)");
}

#[test]
fn frintn_939() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn S(19), s10
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 41, 24, 1E", "frintn S(19), s10");
}

#[test]
fn frintn_940() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintn d12, D(7)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EC, 40, 64, 1E", "frintn d12, D(7)");
}

#[test]
fn frintp_941() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(25).H8, V(7).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F9, 88, F9, 4E", "frintp V(25).H8, V(7).H8");
}

#[test]
fn frintp_942() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v8.H4, V(3).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "68, 88, F9, 0E", "frintp v8.H4, V(3).H4");
}

#[test]
fn frintp_943() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v29.S4, V(0).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1D, 88, A1, 4E", "frintp v29.S4, V(0).S4");
}

#[test]
fn frintp_944() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp v6.S2, V(31).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E6, 8B, A1, 0E", "frintp v6.S2, V(31).S2");
}

#[test]
fn frintp_945() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp V(9).D2, v16.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "09, 8A, E1, 4E", "frintp V(9).D2, v16.D2");
}

#[test]
fn frintp_946() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp h2, h13
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "A2, C1, E4, 1E", "frintp h2, h13");
}

#[test]
fn frintp_947() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp S(14), s11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "6E, C1, 24, 1E", "frintp S(14), s11");
}

#[test]
fn frintp_948() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintp d28, D(21)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BC, C2, 64, 1E", "frintp d28, D(21)");
}

#[test]
fn frintx_949() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(16).H8, v16.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "10, 9A, 79, 6E", "frintx V(16).H8, v16.H8");
}

#[test]
fn frintx_950() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(28).H4, V(7).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, 98, 79, 2E", "frintx V(28).H4, V(7).H4");
}

#[test]
fn frintx_951() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx v4.S4, V(26).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "44, 9B, 21, 6E", "frintx v4.S4, V(26).S4");
}

#[test]
fn frintx_952() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(3).S2, v6.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "C3, 98, 21, 2E", "frintx V(3).S2, v6.S2");
}

#[test]
fn frintx_953() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx V(2).D2, V(17).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "22, 9A, 61, 6E", "frintx V(2).D2, V(17).D2");
}

#[test]
fn frintx_954() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx H(5), H(23)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 42, E7, 1E", "frintx H(5), H(23)");
}

#[test]
fn frintx_955() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx S(30), s1
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3E, 40, 27, 1E", "frintx S(30), s1");
}

#[test]
fn frintx_956() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintx D(27), d17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "3B, 42, 67, 1E", "frintx D(27), d17");
}

#[test]
fn frintz_957() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v2.H8, V(8).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "02, 99, F9, 4E", "frintz v2.H8, V(8).H8");
}

#[test]
fn frintz_958() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v22.H4, v2.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, 98, F9, 0E", "frintz v22.H4, v2.H4");
}

#[test]
fn frintz_959() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz V(30).S4, V(8).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1E, 99, A1, 4E", "frintz V(30).S4, V(8).S4");
}

#[test]
fn frintz_960() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v24.S2, V(13).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "B8, 99, A1, 0E", "frintz v24.S2, V(13).S2");
}

#[test]
fn frintz_961() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz v1.D2, V(31).D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E1, 9B, E1, 4E", "frintz v1.D2, V(31).D2");
}

#[test]
fn frintz_962() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz H(9), H(17)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "29, C2, E5, 1E", "frintz H(9), H(17)");
}

#[test]
fn frintz_963() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz S(12), s17
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, C2, 25, 1E", "frintz S(12), s17");
}

#[test]
fn frintz_964() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frintz d14, D(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "EE, C1, 65, 1E", "frintz d14, D(15)");
}

#[test]
fn frsqrte_965() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte H(30), h31
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FE, DB, F9, 7E", "frsqrte H(30), h31");
}

#[test]
fn frsqrte_966() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte S(12), S(4)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8C, D8, A1, 7E", "frsqrte S(12), S(4)");
}

#[test]
fn frsqrte_967() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte D(21), d16
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "15, DA, E1, 7E", "frsqrte D(21), d16");
}

#[test]
fn frsqrte_968() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(21).H8, v22.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D5, DA, F9, 6E", "frsqrte V(21).H8, v22.H8");
}

#[test]
fn frsqrte_969() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(4).H4, v15.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E4, D9, F9, 2E", "frsqrte V(4).H4, v15.H4");
}

#[test]
fn frsqrte_970() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(27).S4, V(20).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "9B, DA, A1, 6E", "frsqrte V(27).S4, V(20).S4");
}

#[test]
fn frsqrte_971() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte v12.S2, v26.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4C, DB, A1, 2E", "frsqrte v12.S2, v26.S2");
}

#[test]
fn frsqrte_972() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrte V(27).D2, v24.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "1B, DB, E1, 6E", "frsqrte V(27).D2, v24.D2");
}

#[test]
fn frsqrts_973() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts H(19), H(10), H(15)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "53, 3D, CF, 5E", "frsqrts H(19), H(10), H(15)");
}

#[test]
fn frsqrts_974() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts s12, s9, s11
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "2C, FD, AB, 5E", "frsqrts s12, s9, s11");
}

#[test]
fn frsqrts_975() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts D(28), d23, d7
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FC, FE, E7, 5E", "frsqrts D(28), d23, d7");
}

#[test]
fn frsqrts_976() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(23).H8, V(23).H8, v27.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "F7, 3E, DB, 4E", "frsqrts V(23).H8, V(23).H8, v27.H8");
}

#[test]
fn frsqrts_977() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(27).H4, v10.H4, V(27).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "5B, 3D, DB, 0E", "frsqrts V(27).H4, v10.H4, V(27).H4");
}

#[test]
fn frsqrts_978() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v13.S4, V(8).S4, v23.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0D, FD, B7, 4E", "frsqrts v13.S4, V(8).S4, v23.S4");
}

#[test]
fn frsqrts_979() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts V(24).S2, V(16).S2, v14.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "18, FE, AE, 0E", "frsqrts V(24).S2, V(16).S2, v14.S2");
}

#[test]
fn frsqrts_980() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; frsqrts v9.D2, V(10).D2, v5.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "49, FD, E5, 4E", "frsqrts v9.D2, V(10).D2, v5.D2");
}

#[test]
fn fsqrt_981() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v9.H8, V(28).H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "89, FB, F9, 6E", "fsqrt v9.H8, V(28).H8");
}

#[test]
fn fsqrt_982() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v27.H4, V(23).H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "FB, FA, F9, 2E", "fsqrt v27.H4, V(23).H4");
}

#[test]
fn fsqrt_983() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt v22.S4, V(2).S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "56, F8, A1, 6E", "fsqrt v22.S4, V(2).S4");
}

#[test]
fn fsqrt_984() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt V(15).S2, V(4).S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "8F, F8, A1, 2E", "fsqrt V(15).S2, V(4).S2");
}

#[test]
fn fsqrt_985() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt V(5).D2, v1.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "25, F8, E1, 6E", "fsqrt V(5).D2, v1.D2");
}

#[test]
fn fsqrt_986() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt H(18), h8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "12, C1, E1, 1E", "fsqrt H(18), h8");
}

#[test]
fn fsqrt_987() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt s25, S(20)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "99, C2, 21, 1E", "fsqrt s25, S(20)");
}

#[test]
fn fsqrt_988() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsqrt d14, D(16)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0E, C2, 61, 1E", "fsqrt d14, D(16)");
}

#[test]
fn fsub_989() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(23).H8, v17.H8, v1.H8
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "37, 16, C1, 4E", "fsub V(23).H8, v17.H8, v1.H8");
}

#[test]
fn fsub_990() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(22).H4, v19.H4, v30.H4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "76, 16, DE, 0E", "fsub V(22).H4, v19.H4, v30.H4");
}

#[test]
fn fsub_991() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(0).S4, V(10).S4, v30.S4
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "40, D5, BE, 4E", "fsub V(0).S4, V(10).S4, v30.S4");
}

#[test]
fn fsub_992() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub v17.S2, v14.S2, v21.S2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "D1, D5, B5, 0E", "fsub v17.S2, v14.S2, v21.S2");
}

#[test]
fn fsub_993() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub V(1).D2, v19.D2, v2.D2
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "61, D6, E2, 4E", "fsub V(1).D2, v19.D2, v2.D2");
}

#[test]
fn fsub_994() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub h15, H(8), H(30)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "0F, 39, FE, 1E", "fsub h15, H(8), H(30)");
}

#[test]
fn fsub_995() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub S(11), S(2), s19
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "4B, 38, 33, 1E", "fsub S(11), S(2), s19");
}

#[test]
fn fsub_996() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; fsub d5, d7, D(5)
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "E5, 38, 65, 1E", "fsub d5, d7, D(5)");
}

#[test]
fn hint_997() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; hint 45
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "BF, 25, 03, D5", "hint 45");
}

#[test]
fn hlt_998() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; hlt 28304
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "00, D2, 4D, D4", "hlt 28304");
}

#[test]
fn hvc_999() {
    let mut ops = dynasmrt::aarch64::Assembler::new().unwrap();
    dynasm!(ops
        ; .arch aarch64
        ; hvc 22916
    );
    let buf = ops.finalize().unwrap();
    let hex: Vec<String> = buf.iter().map(|x| format!("{:02X}", *x)).collect();
    let hex = hex.join(", ");
    assert_eq(hex, "82, 30, 0B, D4", "hvc 22916");
}
